{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/git0001.jpg","path":"img/xjy/git0001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/monkey.jpg","path":"img/xjy/monkey.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab003.jpg","path":"img/xjy/rab003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31001.png","path":"img/xjy/sht31001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31002.png","path":"img/xjy/sht31002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31003.jpg","path":"img/xjy/sht31003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31004.png","path":"img/xjy/sht31004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sjds001.jpg","path":"img/xjy/sjds001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp002.png","path":"img/xjy/smp002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp003.jpg","path":"img/xjy/smp003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp005.png","path":"img/xjy/smp005.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp006.jpg","path":"img/xjy/smp006.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp008.jpg","path":"img/xjy/smp008.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp009.png","path":"img/xjy/smp009.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/socket001.png","path":"img/xjy/socket001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn002.jpg","path":"img/xjy/statsvn002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/bch001.jpg","path":"img/xjy/bch001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/alipay.jpg","path":"img/xjy/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple1.jpg","path":"img/xjy/hexoSimple1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab0001.png","path":"img/xjy/rab0001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab002.jpg","path":"img/xjy/rab002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp004.png","path":"img/xjy/smp004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp006.png","path":"img/xjy/smp006.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp007.png","path":"img/xjy/smp007.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn001.jpg","path":"img/xjy/statsvn001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn003.jpg","path":"img/xjy/statsvn003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/wxpay.png","path":"img/xjy/wxpay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple2.jpg","path":"img/xjy/hexoSimple2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/dizi001.jpg","path":"img/xjy/dizi001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple3.jpg","path":"img/xjy/hexoSimple3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/jenkins config.png","path":"img/xjy/jenkins config.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab001.jpg","path":"img/xjy/rab001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp001.png","path":"img/xjy/smp001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34001.jpg","path":"img/xjy/p34001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34003.jpg","path":"img/xjy/p34003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34004.jpg","path":"img/xjy/p34004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34002.jpg","path":"img/xjy/p34002.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"bd2f55cb443caf70ba03232cd7d67f70523533c3","modified":1521771196459},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1521366514000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1521366514000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1521366514000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1521366514000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1521366514000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1521366514000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1521366514000},{"_id":"themes/yilia/_config.yml","hash":"120847ceb28f620532d912e18f4649e8cd6bd60b","modified":1522825840918},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1521366514000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1521366514000},{"_id":"source/_posts/p1.md","hash":"cf8a73f40aef47497d0ba991be3aeddfd9d4e865","modified":1521698452756},{"_id":"source/_posts/p10.md","hash":"f5c3bb9ad503cc8be6e2fe6249aec046635a8f5e","modified":1521701086298},{"_id":"source/_posts/p12.md","hash":"6e1dcfca329fa36173dbd8d9789ae96f585d729b","modified":1521787271202},{"_id":"source/_posts/p11.md","hash":"beb450b4572f036be33f3657d8b56e74c81ddac4","modified":1521787067360},{"_id":"source/_posts/p13.md","hash":"4530b85aaf3fa2efc20b490897bd22ea8f5beb4c","modified":1521787409452},{"_id":"source/_posts/p14.md","hash":"6a99302db8becf167a3ebd816eec403976b74dde","modified":1521788496881},{"_id":"source/_posts/p15.md","hash":"7dd73796b32a6e8a2ba487079b316fd218573a43","modified":1521790364400},{"_id":"source/_posts/p16.md","hash":"30ea73cdff4d36d07241061bd1d79c3ce1b82ca6","modified":1521790436000},{"_id":"source/_posts/p17.md","hash":"abc7c7787b0acefa1bb239b4c01858b38a228d05","modified":1521790539921},{"_id":"source/_posts/p18.md","hash":"1bed4ae3ba6bb2d1723fa0d036fee56ce6080091","modified":1521790609969},{"_id":"source/_posts/p19.md","hash":"fde46dfe5b7affe3497ff9fe87ccd3a365722531","modified":1521790696695},{"_id":"source/_posts/p20.md","hash":"5f8abaf0855c1b6cf0215a264fbee2db23d648b9","modified":1521790761726},{"_id":"source/_posts/p2.md","hash":"2884f057f33a63990f2a1c68637260283116c6ae","modified":1521698595056},{"_id":"source/_posts/p21.md","hash":"e2a4dfe2a65b9dc3af382d1841b185fa2956fc9b","modified":1521791075790},{"_id":"source/_posts/p22.md","hash":"9c96ad0617e0160fe7036c961098a8e3dc2d2193","modified":1521791432652},{"_id":"source/_posts/p23.md","hash":"cb888aa27775ad0b9ba8e3d87a5e4a91f444c1e1","modified":1521701760007},{"_id":"source/_posts/p24.md","hash":"3d2db9dda01f1179f0264a8fc77c7cde91ebd47c","modified":1521791568614},{"_id":"source/_posts/p25.md","hash":"492f5f577b823cebc758b2f768366387f46417e9","modified":1521701889175},{"_id":"source/_posts/p26.md","hash":"718a3e5af2072049b13a1b14d8cc21a0a793c050","modified":1521701906605},{"_id":"source/_posts/p27.md","hash":"bc35a17b5f39ee8b90c3dd714b66c2a5b2a49f85","modified":1521791684050},{"_id":"source/_posts/p28.md","hash":"eab38ae1a668ad06b94e7077b2d1ca917309d68f","modified":1521701961595},{"_id":"source/_posts/p29.md","hash":"0be56edbee73da40a94916b7c38b48f2d0de8072","modified":1521702031996},{"_id":"source/_posts/p3.md","hash":"1e6130886d4a8219470a06d4110ccc32da9e6bb2","modified":1521698665187},{"_id":"source/_posts/p30.md","hash":"2e87407003f6d40db072a96f47e966646c9d94ff","modified":1521792231962},{"_id":"source/_posts/p31.md","hash":"e60ed5e896533ae192bac553ecc5eadb90c9ee2c","modified":1524880263596},{"_id":"source/_posts/p32.md","hash":"00d6ca20450eebe1afabc463a50c3562a50929b6","modified":1524133348047},{"_id":"source/_posts/p33.md","hash":"f4682b3e51c37208b3ef796e4f5f176d05d6bba9","modified":1524880371419},{"_id":"source/_posts/p4.md","hash":"69097c4ddaaa533dfd1edb1e44ddd1318e8bc491","modified":1521700778792},{"_id":"source/_posts/p5.md","hash":"78960f180b38e7ce0bbfab314c91a82ab57b2a2f","modified":1521786644278},{"_id":"source/_posts/p6.md","hash":"27de45c24316e546596f8017f2f7698547b0e677","modified":1521786893374},{"_id":"source/_posts/p7.md","hash":"3fcab1f16908c12f56ae83a72a2a648c9101ab4f","modified":1521700894242},{"_id":"source/_posts/p8.md","hash":"e27e00811f4eb00e41bd2522285facb8e854ec67","modified":1521786994564},{"_id":"source/_posts/p9.md","hash":"da178afea1d106e99013b5715589de68ca4945c7","modified":1521707980780},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1521366514000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1521366514000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1521366514000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1521366514000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1521366514000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1521366514000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1521366514000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1521366514000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1521366514000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1521366514000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1521366514000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521366514000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521366514000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1521366514000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1521366514000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1521366514000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1521366514000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521366514000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1521366514000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1521366514000},{"_id":"source/_drafts/_posts/Babel-学习笔记.md","hash":"823648fd744d212ecf74e82d86907d24b0032a7f","modified":1521506542589},{"_id":"source/_drafts/_posts/ESlint 超简单入门教程.md","hash":"cdcb0f54ceac98fa268aaee029add792acb78d25","modified":1521506542590},{"_id":"source/_drafts/_posts/GIT-使用之-SSH-以及码云上配置-SSH.md","hash":"9f4f817d0dbdd78c3b916f472487e6064bc65547","modified":1521506542590},{"_id":"source/_drafts/_posts/React-开发中不得不注意的两个大坑.md","hash":"b0772d304b1e0b254cc40fcef1a2fb3096d6dd92","modified":1521506542591},{"_id":"source/_drafts/_posts/Webstorm-超实用教程.md","hash":"5451fa13927624a04d009084c2c5b256a8f47901","modified":1521506542592},{"_id":"source/_drafts/_posts/XSS-攻击原理、实战、预防.md","hash":"40bb6ecb2a4276497ca595529d66b12a7888fc10","modified":1521506542593},{"_id":"source/_drafts/_posts/es6-异步编程之-Promise-从认识到使用.md","hash":"dbce12ff74005946a6625eb31e2af2388c8f025f","modified":1521506542593},{"_id":"source/_drafts/_posts/mongoose-学习笔记.md","hash":"848f939a1fa055ea77c1fa7a086239362703bb03","modified":1521506542594},{"_id":"source/_drafts/_posts/npm-发布包填坑指南.md","hash":"6e06aa45b8244361e3db60a174e9672ad650e7ef","modified":1521506542594},{"_id":"source/_drafts/_posts/三十分钟学会-Less.md","hash":"505624de02e5d2607445585dea7db91e7f7175e9","modified":1521506542595},{"_id":"source/_drafts/_posts/不起眼的--editorconfig-.md","hash":"fca32382e29bf75008057448c8a4364ece29c591","modified":1521506542595},{"_id":"source/_drafts/_posts/使用Parcel零配置创建React应用（译）.md","hash":"10ae805adf9a22d025c8479d3939403199c1439b","modified":1521506542596},{"_id":"source/_drafts/_posts/再见，2017！.md","hash":"2985e544fd6c4c1f9fe97ac9ec767160adcc9de6","modified":1521506542596},{"_id":"source/_drafts/_posts/再识-Angular.md","hash":"c1ae8783eeabc924f8dde7488d926b22a6e16c26","modified":1521506542597},{"_id":"source/_drafts/_posts/前后端分离最佳实践.md","hash":"15f5edb50425db5223dd2d4ff51e4fa16436190a","modified":1521506542597},{"_id":"source/_drafts/_posts/图解Web服务器.md","hash":"34c17fd089afe92fc988c9a0a1db778917993529","modified":1521506542597},{"_id":"source/_drafts/_posts/当然我在扯淡.md","hash":"01cde07deb3f74edc62f43df18642bd46ecb95b8","modified":1521506542597},{"_id":"source/_drafts/_posts/微信小程序出现【需要进行身份验证】弹框解决方法.md","hash":"4fed0d1d0fc056a6c2fbeadc98e112b63d4ae17a","modified":1521506542598},{"_id":"source/_drafts/_posts/微信小程序原生自定义组件开发实战.md","hash":"25bef68a0410c70863be58e10f9b6b5db28ab10e","modified":1521506542598},{"_id":"source/_drafts/_posts/扒一扒路由的演变过程.md","hash":"f37bc16f64aa83cf8f4a4cc92659eced0bbf7900","modified":1521506542598},{"_id":"source/_drafts/_posts/梳理微信小程序登录时序图：授权与-Oauth2-0.md","hash":"400a957cd3158a9078e460ec3892f1d6848693b1","modified":1521506542599},{"_id":"source/_drafts/_posts/程序员应该重视版本控制.md","hash":"bf507b2cb363f4b9d0a196fd63c88f96224fad87","modified":1521506542599},{"_id":"source/_drafts/_posts/解决-npm-无法安装-devDependencies-下的依赖包的问题.md","hash":"dd104588c96ccb811e17a06b6b42040bba3ae03a","modified":1521506542599},{"_id":"source/_drafts/_posts/认识-Iconfont-以及什么是--eot、-woff、-ttf、-svg.md","hash":"8042dbea20de959927b716fb6370f5a3dcf674fb","modified":1521506542600},{"_id":"source/_drafts/_posts/遨游密码世界（一）.md","hash":"cdf01465ca266d94ed4370752f6eca4491be7fac","modified":1521506542600},{"_id":"source/_drafts/_posts/遨游密码世界（二）.md","hash":"2453e1092704f9d5b204e46d11bfbb5c3db1eb19","modified":1521506542600},{"_id":"source/_drafts/categories/index.md","hash":"53d27c5cfaca2eedbe3f429502c95b8422253b0a","modified":1521506542601},{"_id":"source/_drafts/tags/index.md","hash":"a6cbde9edd8a4401264d38298ba6f9fbc1789c73","modified":1521506542601},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1521366514000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1521366514000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1521366514000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1521366514000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1521366514000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1521366514000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1521366514000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1521366514000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1521366514000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1521366514000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1521366514000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1521366514000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1521366514000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1521366514000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1521366514000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1521366514000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1521366514000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1521366514000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1521366514000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1521366514000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1521366514000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1521366514000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1521366514000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1521366514000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1521366514000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1521366514000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1521366514000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1521366514000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1521366514000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1521366514000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1521366514000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1521366514000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1521366514000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1521366514000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1521366514000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1521366514000},{"_id":"themes/yilia/source/img/xjy/git0001.jpg","hash":"1d45d763e6ebb41b20d1762f81e0d6cc4fae43a5","modified":1521791659335},{"_id":"themes/yilia/source/img/xjy/monkey.jpg","hash":"b8013b45d922d94ad5d8d31a5f237b9d054d5a1b","modified":1521709580008},{"_id":"themes/yilia/source/img/xjy/rab003.jpg","hash":"95813b30ef6273510d3ed12a0163783fcc651932","modified":1521787371864},{"_id":"themes/yilia/source/img/xjy/sht31001.png","hash":"bca85173788a7c5e9037178ac436b2290ffb1cb9","modified":1521787463500},{"_id":"themes/yilia/source/img/xjy/sht31002.png","hash":"e3fe68a275737fc5ef8ae4e02abf4700fbe583a3","modified":1521788305344},{"_id":"themes/yilia/source/img/xjy/sht31003.jpg","hash":"806acc39fb85b670dac4d86e7f7ac9639db07807","modified":1521788352946},{"_id":"themes/yilia/source/img/xjy/sht31004.png","hash":"44bc517adcc7ecd972f7a91d8fc53f8208f7bccf","modified":1521788480021},{"_id":"themes/yilia/source/img/xjy/sjds001.jpg","hash":"5c8fcd1047b137f8bbceaac8ed4176c3942e18d8","modified":1521791509260},{"_id":"themes/yilia/source/img/xjy/smp002.png","hash":"f5cea7dd21f3676f61ad95909f921a742db3a7e9","modified":1521790526114},{"_id":"themes/yilia/source/img/xjy/smp003.jpg","hash":"cc29f4201bcbd83e6cb1f58a853728881bfdf474","modified":1521790595442},{"_id":"themes/yilia/source/img/xjy/smp005.png","hash":"839a06ab1b4d36c23849022153e91a0eb28c677d","modified":1521790671112},{"_id":"themes/yilia/source/img/xjy/smp006.jpg","hash":"8c06589ed91dfcb316ae6e50e80769408a092b21","modified":1521790747579},{"_id":"themes/yilia/source/img/xjy/smp008.jpg","hash":"671dfaf19e30c2a87469fc08d2b681f092460277","modified":1521791166313},{"_id":"themes/yilia/source/img/xjy/smp009.png","hash":"a174b185ef08d743b51b9a915966e38a19396073","modified":1521791423949},{"_id":"themes/yilia/source/img/xjy/socket001.png","hash":"99b03609189c4418c142c5b78a6f58eb8f821fc5","modified":1521790345905},{"_id":"themes/yilia/source/img/xjy/statsvn002.jpg","hash":"82b8a3e67bffd94f1227d1c547a4633472dcb4ef","modified":1521787260827},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1521366514000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1521366514000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1521366514000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1521366514000},{"_id":"themes/yilia/source/img/xjy/bch001.jpg","hash":"a7c836270b54080f7dae17f807997b5b32b1bf8c","modified":1521786961044},{"_id":"themes/yilia/source/img/xjy/alipay.jpg","hash":"10353a9442053ad23a26a5588ee37c0bf55049fe","modified":1521373453203},{"_id":"themes/yilia/source/img/xjy/hexoSimple1.jpg","hash":"12dc93fd58c5d2c030f2738945cac5701f522133","modified":1521786602501},{"_id":"themes/yilia/source/img/xjy/rab0001.png","hash":"bd5e373a302cf35f71c162b1bc2d9fe95ec10ac4","modified":1521792162871},{"_id":"themes/yilia/source/img/xjy/rab002.jpg","hash":"5fdbaa30955cdd0feb69d08bf7389ed6483d9e0f","modified":1521787344145},{"_id":"themes/yilia/source/img/xjy/smp004.png","hash":"1745e18d62861f7c58356d731f8993940f72b8f0","modified":1521790645446},{"_id":"themes/yilia/source/img/xjy/smp006.png","hash":"f7e7195f7d31813ba37ceac7867bf59b1db6b498","modified":1521791064975},{"_id":"themes/yilia/source/img/xjy/smp007.png","hash":"e741fe3989a4b38a33eb5461343dbd5a20efd3e0","modified":1521791132111},{"_id":"themes/yilia/source/img/xjy/statsvn001.jpg","hash":"cb7b9834d7fa1b349673cae88aa1575ef38a2492","modified":1521787120243},{"_id":"themes/yilia/source/img/xjy/statsvn003.jpg","hash":"c535344b04301c58f63842aef1d173b3d9e0557e","modified":1521787182938},{"_id":"themes/yilia/source/img/xjy/wxpay.png","hash":"7da6e029c93817bb6422313289b0a9fb32dfb632","modified":1521373426022},{"_id":"themes/yilia/source/img/xjy/hexoSimple2.jpg","hash":"cd02d8ef037cf01330ccfc267ee3eaae95842f1a","modified":1521786811507},{"_id":"themes/yilia/source/img/xjy/dizi001.jpg","hash":"f709e47036cfae3f9f6a91a7bd0217dcb9eb4786","modified":1521787047147},{"_id":"themes/yilia/source/img/xjy/hexoSimple3.jpg","hash":"e68de1ff8d35fe369d4b152579888e283f65da9a","modified":1521786876789},{"_id":"themes/yilia/source/img/xjy/jenkins config.png","hash":"dd952388221ebbc565cfaf9958d6f76451aa2860","modified":1521682729790},{"_id":"themes/yilia/source/img/xjy/rab001.jpg","hash":"a2965e40573d981ac3a895af976997405289033e","modified":1521787323797},{"_id":"themes/yilia/source/img/xjy/smp001.png","hash":"986206b653e1e808432e5b57792d0ee137a4ca93","modified":1521790414790},{"_id":"source/_posts/p34.md","hash":"7930d9c37e2765b59a02954baf9996d4d0dc79cb","modified":1526133237587},{"_id":"themes/yilia/source/img/xjy/p34001.jpg","hash":"37bccd58d02346c314f67bc00451c95ab4568689","modified":1508124916322},{"_id":"themes/yilia/source/img/xjy/p34003.jpg","hash":"5ffcb8d86091365230e4af536d21cc91012e7eae","modified":1508124916309},{"_id":"themes/yilia/source/img/xjy/p34004.jpg","hash":"fd78dbb7370685943144d43644ed49b0c88d9df7","modified":1508124906833},{"_id":"themes/yilia/source/img/xjy/p34002.jpg","hash":"228af15d63cada5ab0f80fbaeffbff0b62db7a55","modified":1508124910585},{"_id":"source/_posts/p35.md","hash":"cc499da6d81799b22e845b4470986e63ccadd4c0","modified":1526129913131}],"Category":[{"name":"未分类","_id":"cjg7r8gzy0004c8vgrv70t0iq"},{"name":"JAVA","_id":"cjg7r8h040009c8vg25qxz7ur"},{"name":"rabbitmq","_id":"cjg7r8h09000ec8vgtt2dyfwg"},{"name":"乐器知识","_id":"cjg7r8h0e000ic8vgg9g77119"},{"name":"树莓派学习","_id":"cjg7r8h0i000nc8vgkz5mi4oa"},{"name":"编程语言","parent":"cjg7r8h040009c8vg25qxz7ur","_id":"cjg7r8h0r0011c8vgg8zez22e"},{"name":"mqtt","parent":"cjg7r8h09000ec8vgtt2dyfwg","_id":"cjg7r8h12001jc8vgqg5di6uw"},{"name":"生活杂记","parent":"cjg7r8h0e000ic8vgg9g77119","_id":"cjg7r8h1j0029c8vg9l0da0le"},{"name":"WORDPRESS","_id":"cjg7r8h1q002lc8vgwzc0v184"},{"name":"生活杂记","_id":"cjg7r8h1u002tc8vgdkeodtyr"},{"name":"LINUX","_id":"cjg7r8h1v002yc8vgbzua7uuk"},{"name":"修改页面","_id":"cjg7r8h1w0032c8vg4rvwityp"},{"name":"DB2","_id":"cjg7r8h1x0034c8vgj2dsdiyq"},{"name":"技术感悟","_id":"cjg7r8h1y0038c8vg8kwufevc"},{"name":"rabbitmq学习","_id":"cjg7r8h20003fc8vgtowywkzt"},{"name":"markdown","_id":"cjg7r8h22003ic8vgy4720wam"},{"name":"编程语言","parent":"cjg7r8h1q002lc8vgwzc0v184","_id":"cjg7r8h2b0044c8vg2cowsbgh"},{"name":"编程语言","parent":"cjg7r8h1v002yc8vgbzua7uuk","_id":"cjg7r8h2c0047c8vg2wk7ti26"},{"name":"数据库","parent":"cjg7r8h1x0034c8vgj2dsdiyq","_id":"cjg7r8h2d004bc8vge0urqu17"},{"name":"生活杂记","parent":"cjg7r8h1y0038c8vg8kwufevc","_id":"cjg7r8h2f004gc8vgzr7cyjy1"},{"name":"未分类","parent":"cjg7r8h2d004bc8vge0urqu17","_id":"cjg7r8h2p0057c8vg51s8vuyl"},{"name":"docker","_id":"cjh3eb6th0001igvgaqp2yt45"},{"name":"编程语言","parent":"cjh3eb6th0001igvgaqp2yt45","_id":"cjh3eb6tr0004igvgjx5v4a79"}],"Data":[],"Page":[],"Post":[{"title":"windows端的hexo+github管理源码+travisCI自动编译+个人域名映射","date":"2018-03-21T06:30:18.000Z","_content":"\n**前言**\n\n之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。\n\n**想法**\n\n在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。\n\n好了，接下来那就动手去做吧。\n\n**步骤**\n\n本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：[dkvirus的步骤](http://tmd.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/ \"dkvirus的步骤\")\n","source":"_posts/p1.md","raw":"---\n\ntitle: windows端的hexo+github管理源码+travisCI自动编译+个人域名映射\ndate: 2018/3/21 14:30:18 \ntags: [hexo, github, travisCI, 博客]\n\n---\n\n**前言**\n\n之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。\n\n**想法**\n\n在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。\n\n好了，接下来那就动手去做吧。\n\n**步骤**\n\n本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：[dkvirus的步骤](http://tmd.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/ \"dkvirus的步骤\")\n","slug":"p1","published":1,"updated":"2018-03-22T06:00:52.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8gzn0000c8vgh1xx12a3","content":"<p><strong>前言</strong></p>\n<p>之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。</p>\n<p><strong>想法</strong></p>\n<p>在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。</p>\n<p>好了，接下来那就动手去做吧。</p>\n<p><strong>步骤</strong></p>\n<p>本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：<a href=\"http://tmd.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/\" title=\"dkvirus的步骤\" target=\"_blank\" rel=\"noopener\">dkvirus的步骤</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>前言</strong></p>\n<p>之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。</p>\n<p><strong>想法</strong></p>\n<p>在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。</p>\n<p>好了，接下来那就动手去做吧。</p>\n<p><strong>步骤</strong></p>\n<p>本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：<a href=\"http://tmd.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/\" title=\"dkvirus的步骤\" target=\"_blank\" rel=\"noopener\">dkvirus的步骤</a></p>\n"},{"title":"该文章用于记录树莓派custshell的配置","id":"252","date":"2018-01-07T07:52:24.000Z","_content":"\n1.开启ssh功能\n\n\t在内存卡根目录新建一个ssh文件\n\n2.打开i2c和camera功能\n\n\tsudo raspi-config nonint do_i2c 0 \n    sudo raspi-config nonint do_camera 0\n\n3.复制custshell文件到指定目录\n\n4.开启crontab任务","source":"_posts/p10.md","raw":"---\ntitle: 该文章用于记录树莓派custshell的配置\nid: 252\ncategories:\n  - 未分类\ndate: 2018-01-07 15:52:24\ntags: [树莓派]\n---\n\n1.开启ssh功能\n\n\t在内存卡根目录新建一个ssh文件\n\n2.打开i2c和camera功能\n\n\tsudo raspi-config nonint do_i2c 0 \n    sudo raspi-config nonint do_camera 0\n\n3.复制custshell文件到指定目录\n\n4.开启crontab任务","slug":"p10","published":1,"updated":"2018-03-22T06:44:46.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8gzs0001c8vgnvse4ieu","content":"<p>1.开启ssh功能</p>\n<pre><code>在内存卡根目录新建一个ssh文件\n</code></pre><p>2.打开i2c和camera功能</p>\n<pre><code>sudo raspi-config nonint do_i2c 0 \nsudo raspi-config nonint do_camera 0\n</code></pre><p>3.复制custshell文件到指定目录</p>\n<p>4.开启crontab任务</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.开启ssh功能</p>\n<pre><code>在内存卡根目录新建一个ssh文件\n</code></pre><p>2.打开i2c和camera功能</p>\n<pre><code>sudo raspi-config nonint do_i2c 0 \nsudo raspi-config nonint do_camera 0\n</code></pre><p>3.复制custshell文件到指定目录</p>\n<p>4.开启crontab任务</p>\n"},{"title":"用StatSVN统计SVN库中各作者的提交情况和排行","id":"421","date":"2018-02-09T07:36:46.000Z","_content":"\n# 想法\n\n我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。\n\n&nbsp;\n\n# **实践**\n\n又说了一大堆废话，下面是我的安装和使用过程：\n\n1.下载StatSVN，其实是一个jar包\n\n[http://sourceforge.net/projects/statsvn/](http://sourceforge.net/projects/statsvn/)\n\n2.解压后把jar包拷贝到指定目录\n\n例如我的：D:\\Code\\statsvn-0.7.0\n\n3.进入到上面的目录后checkout出需要的SVN库中的代码\n<pre class=\"lang:sh decode:true\">svn co http://repo/svn/xxx/branches/1.10.0-dev</pre>\n4.导出log文件，需要一段时间\n<pre class=\"lang:sh decode:true\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</pre>\n5.生成分析网页和图片，需要一段时间\n<pre class=\"lang:sh decode:true \">#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</pre>\n\n6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<span style=\"color: #ff0000;\">**出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径**</span>）\n\n（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）\n\n![](/img/xjy/statsvn001.jpg)\n\n![](/img/xjy/statsvn002.jpg)\n \n![](/img/xjy/statsvn003.jpg)","source":"_posts/p12.md","raw":"---\ntitle: 用StatSVN统计SVN库中各作者的提交情况和排行\ntags:\n  - StatSVN\n  - SVN\n  - 技术\nid: 421\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-02-09 15:36:46\n---\n\n# 想法\n\n我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。\n\n&nbsp;\n\n# **实践**\n\n又说了一大堆废话，下面是我的安装和使用过程：\n\n1.下载StatSVN，其实是一个jar包\n\n[http://sourceforge.net/projects/statsvn/](http://sourceforge.net/projects/statsvn/)\n\n2.解压后把jar包拷贝到指定目录\n\n例如我的：D:\\Code\\statsvn-0.7.0\n\n3.进入到上面的目录后checkout出需要的SVN库中的代码\n<pre class=\"lang:sh decode:true\">svn co http://repo/svn/xxx/branches/1.10.0-dev</pre>\n4.导出log文件，需要一段时间\n<pre class=\"lang:sh decode:true\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</pre>\n5.生成分析网页和图片，需要一段时间\n<pre class=\"lang:sh decode:true \">#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</pre>\n\n6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<span style=\"color: #ff0000;\">**出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径**</span>）\n\n（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）\n\n![](/img/xjy/statsvn001.jpg)\n\n![](/img/xjy/statsvn002.jpg)\n \n![](/img/xjy/statsvn003.jpg)","slug":"p12","published":1,"updated":"2018-03-23T06:41:11.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8gzw0003c8vgtdj85cvv","content":"<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。</p>\n<p>&nbsp;</p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a><strong>实践</strong></h1><p>又说了一大堆废话，下面是我的安装和使用过程：</p>\n<p>1.下载StatSVN，其实是一个jar包</p>\n<p><a href=\"http://sourceforge.net/projects/statsvn/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/statsvn/</a></p>\n<p>2.解压后把jar包拷贝到指定目录</p>\n<p>例如我的：D:\\Code\\statsvn-0.7.0</p>\n<p>3.进入到上面的目录后checkout出需要的SVN库中的代码</p>\n<pre class=\"lang:sh decode:true\">svn co http://repo/svn/xxx/branches/1.10.0-dev</pre>\n4.导出log文件，需要一段时间\n<pre class=\"lang:sh decode:true\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</pre>\n5.生成分析网页和图片，需要一段时间\n<pre class=\"lang:sh decode:true \">#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</pre>\n\n<p>6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<span style=\"color: #ff0000;\"><strong>出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径</strong></span>）</p>\n<p>（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）</p>\n<p><img src=\"/img/xjy/statsvn001.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn002.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn003.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。</p>\n<p>&nbsp;</p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a><strong>实践</strong></h1><p>又说了一大堆废话，下面是我的安装和使用过程：</p>\n<p>1.下载StatSVN，其实是一个jar包</p>\n<p><a href=\"http://sourceforge.net/projects/statsvn/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/statsvn/</a></p>\n<p>2.解压后把jar包拷贝到指定目录</p>\n<p>例如我的：D:\\Code\\statsvn-0.7.0</p>\n<p>3.进入到上面的目录后checkout出需要的SVN库中的代码</p>\n<pre class=\"lang:sh decode:true\">svn co http://repo/svn/xxx/branches/1.10.0-dev</pre>\n4.导出log文件，需要一段时间\n<pre class=\"lang:sh decode:true\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</pre>\n5.生成分析网页和图片，需要一段时间\n<pre class=\"lang:sh decode:true \">#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</pre>\n\n<p>6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<span style=\"color: #ff0000;\"><strong>出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径</strong></span>）</p>\n<p>（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）</p>\n<p><img src=\"/img/xjy/statsvn001.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn002.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn003.jpg\" alt=\"\"></p>\n"},{"title":"测试mqtt与rabbitmq的消息交互","id":"306","date":"2018-01-09T00:35:04.000Z","_content":"\n**原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（<span style=\"color:#E53333;\">其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic</span>）** \n\n\n1.开启rabbitmq中的mqtt插件\n\n<pre class=\"prettyprint lang-py\">rabbitmq-plugins enable rabbitmq_mqtt</pre>\n\n2.python安装mqtt库文件\n\n<pre class=\"prettyprint lang-py\">pip install paho-mqtt</pre>\n\n3.生产者端代码\n\n<pre class=\"prettyprint lang-py\">import datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()</pre>\n\n4.消费者端代码\n\n<pre class=\"prettyprint lang-py\">import pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming()</pre>\n\n5.结果如下：\n\n![](/img/xjy/rab001.jpg) \n\n6.rabbitmq管理页面显示情况\n\n（1）交换信息\n\n![](/img/xjy/rab002.jpg) \n\n（2）连接信息\n\n![](/img/xjy/rab003.jpg)\n","source":"_posts/p13.md","raw":"---\ntitle: 测试mqtt与rabbitmq的消息交互\nid: 306\ncategories:\n  - rabbitmq\n  - mqtt\ndate: 2018-01-09 08:35:04\ntags:\n  - rabbitmq\n  - mqtt\n\n---\n\n**原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（<span style=\"color:#E53333;\">其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic</span>）** \n\n\n1.开启rabbitmq中的mqtt插件\n\n<pre class=\"prettyprint lang-py\">rabbitmq-plugins enable rabbitmq_mqtt</pre>\n\n2.python安装mqtt库文件\n\n<pre class=\"prettyprint lang-py\">pip install paho-mqtt</pre>\n\n3.生产者端代码\n\n<pre class=\"prettyprint lang-py\">import datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()</pre>\n\n4.消费者端代码\n\n<pre class=\"prettyprint lang-py\">import pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming()</pre>\n\n5.结果如下：\n\n![](/img/xjy/rab001.jpg) \n\n6.rabbitmq管理页面显示情况\n\n（1）交换信息\n\n![](/img/xjy/rab002.jpg) \n\n（2）连接信息\n\n![](/img/xjy/rab003.jpg)\n","slug":"p13","published":1,"updated":"2018-03-23T06:43:29.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8gzz0005c8vgn892lavj","content":"<p><strong>原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（<span style=\"color:#E53333;\">其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic</span>）</strong> </p>\n<p>1.开启rabbitmq中的mqtt插件</p>\n<pre class=\"prettyprint lang-py\">rabbitmq-plugins enable rabbitmq_mqtt</pre>\n\n<p>2.python安装mqtt库文件</p>\n<pre class=\"prettyprint lang-py\">pip install paho-mqtt</pre>\n\n<p>3.生产者端代码</p>\n<pre class=\"prettyprint lang-py\">import datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()</pre>\n\n<p>4.消费者端代码</p>\n<pre class=\"prettyprint lang-py\">import pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming()</pre>\n\n<p>5.结果如下：</p>\n<p><img src=\"/img/xjy/rab001.jpg\" alt=\"\"> </p>\n<p>6.rabbitmq管理页面显示情况</p>\n<p>（1）交换信息</p>\n<p><img src=\"/img/xjy/rab002.jpg\" alt=\"\"> </p>\n<p>（2）连接信息</p>\n<p><img src=\"/img/xjy/rab003.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（<span style=\"color:#E53333;\">其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic</span>）</strong> </p>\n<p>1.开启rabbitmq中的mqtt插件</p>\n<pre class=\"prettyprint lang-py\">rabbitmq-plugins enable rabbitmq_mqtt</pre>\n\n<p>2.python安装mqtt库文件</p>\n<pre class=\"prettyprint lang-py\">pip install paho-mqtt</pre>\n\n<p>3.生产者端代码</p>\n<pre class=\"prettyprint lang-py\">import datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()</pre>\n\n<p>4.消费者端代码</p>\n<pre class=\"prettyprint lang-py\">import pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming()</pre>\n\n<p>5.结果如下：</p>\n<p><img src=\"/img/xjy/rab001.jpg\" alt=\"\"> </p>\n<p>6.rabbitmq管理页面显示情况</p>\n<p>（1）交换信息</p>\n<p><img src=\"/img/xjy/rab002.jpg\" alt=\"\"> </p>\n<p>（2）连接信息</p>\n<p><img src=\"/img/xjy/rab003.jpg\" alt=\"\"></p>\n"},{"title":"笛子指法全表","id":"326","date":"2018-01-14T08:11:50.000Z","_content":"\n转载至：[http://blog.sina.com.cn/s/blog_5f3df34701015slp.html](http://blog.sina.com.cn/s/blog_5f3df34701015slp.html) \n\n![](/img/xjy/dizi001.jpg) \n","source":"_posts/p11.md","raw":"---\ntitle: 笛子指法全表\nid: 326\ncategories:\n  - 乐器知识\n  - 生活杂记\ndate: 2018-01-14 16:11:50\ntags: [音乐, 乐器, 笛子]\n---\n\n转载至：[http://blog.sina.com.cn/s/blog_5f3df34701015slp.html](http://blog.sina.com.cn/s/blog_5f3df34701015slp.html) \n\n![](/img/xjy/dizi001.jpg) \n","slug":"p11","published":1,"updated":"2018-03-23T06:37:47.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h000006c8vg0i54iol3","content":"<p>转载至：<a href=\"http://blog.sina.com.cn/s/blog_5f3df34701015slp.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_5f3df34701015slp.html</a> </p>\n<p><img src=\"/img/xjy/dizi001.jpg\" alt=\"\"> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载至：<a href=\"http://blog.sina.com.cn/s/blog_5f3df34701015slp.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_5f3df34701015slp.html</a> </p>\n<p><img src=\"/img/xjy/dizi001.jpg\" alt=\"\"> </p>\n"},{"title":"树莓派学习-SHT31温湿度读取（I2C接口）","id":"149","date":"2017-12-10T11:13:38.000Z","_content":"\n**1.开启树莓派的I2C功能**\n\n执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。\n<pre class=\"lang:default decode:true \">sudo raspi-config</pre>\n\n![](/img/xjy/sht31001.png)\n\n**2.连接SHT31与树莓派**\n\n参考及实物图如下：\n\n![](/img/xjy/sht31001.png)\n\n![](/img/xjy/sht31001.jpg)\n\n**3.python代码**\n\nsht31.py：\n<pre class=\"lang:default decode:true \">import smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)</pre>\n\n**4.结果如图：**\n\n![](/img/xjy/sht31004.png)\n\n结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！","source":"_posts/p14.md","raw":"---\ntitle: 树莓派学习-SHT31温湿度读取（I2C接口）\nid: 149\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 19:13:38\ntags: [树莓派, sht31, i2c]\n---\n\n**1.开启树莓派的I2C功能**\n\n执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。\n<pre class=\"lang:default decode:true \">sudo raspi-config</pre>\n\n![](/img/xjy/sht31001.png)\n\n**2.连接SHT31与树莓派**\n\n参考及实物图如下：\n\n![](/img/xjy/sht31001.png)\n\n![](/img/xjy/sht31001.jpg)\n\n**3.python代码**\n\nsht31.py：\n<pre class=\"lang:default decode:true \">import smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)</pre>\n\n**4.结果如图：**\n\n![](/img/xjy/sht31004.png)\n\n结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！","slug":"p14","published":1,"updated":"2018-03-23T07:01:36.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h030008c8vgwvs3ixqm","content":"<p><strong>1.开启树莓派的I2C功能</strong></p>\n<p>执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。</p>\n<pre class=\"lang:default decode:true \">sudo raspi-config</pre>\n\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><strong>2.连接SHT31与树莓派</strong></p>\n<p>参考及实物图如下：</p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/sht31001.jpg\" alt=\"\"></p>\n<p><strong>3.python代码</strong></p>\n<p>sht31.py：</p>\n<pre class=\"lang:default decode:true \">import smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)</pre>\n\n<p><strong>4.结果如图：</strong></p>\n<p><img src=\"/img/xjy/sht31004.png\" alt=\"\"></p>\n<p>结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1.开启树莓派的I2C功能</strong></p>\n<p>执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。</p>\n<pre class=\"lang:default decode:true \">sudo raspi-config</pre>\n\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><strong>2.连接SHT31与树莓派</strong></p>\n<p>参考及实物图如下：</p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/sht31001.jpg\" alt=\"\"></p>\n<p><strong>3.python代码</strong></p>\n<p>sht31.py：</p>\n<pre class=\"lang:default decode:true \">import smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)</pre>\n\n<p><strong>4.结果如图：</strong></p>\n<p><img src=\"/img/xjy/sht31004.png\" alt=\"\"></p>\n<p>结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！</p>\n"},{"title":"树莓派学习-python实现用socket传输json数据","id":"186","date":"2017-12-11T14:56:16.000Z","_content":"\n今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。\n\n1.服务端代码\n<pre class=\"lang:default decode:true \" title=\"服务端代码\">import socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()</pre>\n&nbsp;\n\n2.客户端代码\n<div>\n<pre class=\"lang:default decode:true  \" title=\"客户端代码\">import socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()</pre>\n\n&nbsp;\n\n</div>\n3.实现效果\n\n![](/img/xjy/socket001.png)","source":"_posts/p15.md","raw":"---\ntitle: 树莓派学习-python实现用socket传输json数据\nid: 186\ncategories:\n  - 树莓派学习\ndate: 2017-12-11 22:56:16\ntags: [树莓派, python, socket, json]\n---\n\n今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。\n\n1.服务端代码\n<pre class=\"lang:default decode:true \" title=\"服务端代码\">import socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()</pre>\n&nbsp;\n\n2.客户端代码\n<div>\n<pre class=\"lang:default decode:true  \" title=\"客户端代码\">import socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()</pre>\n\n&nbsp;\n\n</div>\n3.实现效果\n\n![](/img/xjy/socket001.png)","slug":"p15","published":1,"updated":"2018-03-23T07:32:44.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h05000ac8vgffu67jc8","content":"<p>今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。</p>\n<p>1.服务端代码</p>\n<pre class=\"lang:default decode:true \" title=\"服务端代码\">import socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()</pre>\n&nbsp;\n\n2.客户端代码\n<div>\n<pre class=\"lang:default decode:true  \" title=\"客户端代码\">import socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()</pre>\n\n<p>&nbsp;</p>\n<p></p></div><br>3.实现效果<p></p>\n<p><img src=\"/img/xjy/socket001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。</p>\n<p>1.服务端代码</p>\n<pre class=\"lang:default decode:true \" title=\"服务端代码\">import socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()</pre>\n&nbsp;\n\n2.客户端代码\n<div>\n<pre class=\"lang:default decode:true  \" title=\"客户端代码\">import socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()</pre>\n\n<p>&nbsp;</p>\n<p></p></div><br>3.实现效果<p></p>\n<p><img src=\"/img/xjy/socket001.png\" alt=\"\"></p>\n"},{"title":"树莓派学习-ngrok实现开机自启及手机远程SSH访问","id":"195","date":"2017-12-16T07:36:27.000Z","_content":"\n在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化\n\n1.开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。\n\n2.实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。\n\n好了，废话太多，直接来步骤吧：\n\n**VPS端**\n<pre class=\"theme:github lang:default decode:true \">#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp;</pre>\n\n**树莓派端**\n<pre class=\"theme:github lang:default decode:true\">#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www</pre>\n\n&nbsp;\n\n看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！![](/img/xjy/smp001.png)","source":"_posts/p16.md","raw":"---\ntitle: 树莓派学习-ngrok实现开机自启及手机远程SSH访问\nid: 195\ncategories:\n  - 树莓派学习\ndate: 2017-12-16 15:36:27\ntags: [树莓派, ngrok, ssh]\n---\n\n在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化\n\n1.开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。\n\n2.实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。\n\n好了，废话太多，直接来步骤吧：\n\n**VPS端**\n<pre class=\"theme:github lang:default decode:true \">#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp;</pre>\n\n**树莓派端**\n<pre class=\"theme:github lang:default decode:true\">#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www</pre>\n\n&nbsp;\n\n看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！![](/img/xjy/smp001.png)","slug":"p16","published":1,"updated":"2018-03-23T07:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h07000cc8vgzqpyek6b","content":"<p>在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化</p>\n<p>1.开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。</p>\n<p>2.实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。</p>\n<p>好了，废话太多，直接来步骤吧：</p>\n<p><strong>VPS端</strong></p>\n<pre class=\"theme:github lang:default decode:true \">#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp;</pre>\n\n<p><strong>树莓派端</strong></p>\n<pre class=\"theme:github lang:default decode:true\">#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www</pre>\n\n<p>&nbsp;</p>\n<p>看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！<img src=\"/img/xjy/smp001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化</p>\n<p>1.开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。</p>\n<p>2.实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。</p>\n<p>好了，废话太多，直接来步骤吧：</p>\n<p><strong>VPS端</strong></p>\n<pre class=\"theme:github lang:default decode:true \">#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp;</pre>\n\n<p><strong>树莓派端</strong></p>\n<pre class=\"theme:github lang:default decode:true\">#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www</pre>\n\n<p>&nbsp;</p>\n<p>看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！<img src=\"/img/xjy/smp001.png\" alt=\"\"></p>\n"},{"title":"树莓派学习-搭建外网ngrok穿透内网访问到树莓派","id":"192","date":"2017-12-14T14:57:25.000Z","_content":"\n今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。\n\n**环境：**\n\n搬瓦工VPS端(centOs6)\n\n树莓派3b(基于Arm)\n\n**步骤：**\n\n1.安装git、gcc、go等\n<pre class=\"lang:default decode:true\">yum install mercurial git gcc golang</pre>\n2.安装 supervisor ，这样可以保持服务运行\n<pre class=\"lang:default decode:true\">yum install supervisor</pre>\n3.git下载ngrok\n<pre class=\"lang:default decode:true\">cd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git</pre>\n4.证书生成\n<pre class=\"lang:default decode:true \">cd /root/ngrok\n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</pre>\n5.证书的复制准备工作\n<pre class=\"lang:default decode:true\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f</pre>\n6.生成服务端的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nmake release-server</pre>\n7.服务端配置并启动ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</pre>\n8.编译给客户端pi上用的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nGOOS=linux GOARCH=arm make release-client</pre>\n9.把bin目录下的客户端打包\n<pre class=\"lang:default decode:true \">cd /root/ngrok\ntar -cvf bin.tar bin/</pre>\n10.用scp工具复制bin.tar到树莓派的如下目录\n<pre class=\"lang:default decode:true \">#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar</pre>\n11.客户端配置\n<pre class=\"lang:default decode:true \">cd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false</pre>\n\n12.启动客户端\n<pre class=\"lang:default decode:true \">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</pre>\n\n13.记得加入子域名的解析规则\n<pre class=\"lang:default decode:true\">A *.pi 23.83,224,98</pre>\n\n14.测试是否内网穿透成功，可以在树莓派上安装nginx\n<pre class=\"lang:default decode:true \">sudo apt-get install nginx</pre>\n\n15.访问：[http://pi.www.xiajunyi.com:8331/](http://pi.www.xiajunyi.com:8331/)，成功到达树莓派的nginx主页\n\n![](/img/xjy/smp002.png)\n\n&nbsp;\n\n参考文章：\n\n1.[https://xicheng412.github.io/2016/09/27/ngrok-config/](https://xicheng412.github.io/2016/09/27/ngrok-config/)\n\n2.[https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html](https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html)","source":"_posts/p17.md","raw":"---\ntitle: 树莓派学习-搭建外网ngrok穿透内网访问到树莓派\nid: 192\ncategories:\n  - 树莓派学习\ndate: 2017-12-14 22:57:25\ntags: [树莓派, ngrok, 内网穿透]\n---\n\n今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。\n\n**环境：**\n\n搬瓦工VPS端(centOs6)\n\n树莓派3b(基于Arm)\n\n**步骤：**\n\n1.安装git、gcc、go等\n<pre class=\"lang:default decode:true\">yum install mercurial git gcc golang</pre>\n2.安装 supervisor ，这样可以保持服务运行\n<pre class=\"lang:default decode:true\">yum install supervisor</pre>\n3.git下载ngrok\n<pre class=\"lang:default decode:true\">cd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git</pre>\n4.证书生成\n<pre class=\"lang:default decode:true \">cd /root/ngrok\n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</pre>\n5.证书的复制准备工作\n<pre class=\"lang:default decode:true\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f</pre>\n6.生成服务端的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nmake release-server</pre>\n7.服务端配置并启动ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</pre>\n8.编译给客户端pi上用的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nGOOS=linux GOARCH=arm make release-client</pre>\n9.把bin目录下的客户端打包\n<pre class=\"lang:default decode:true \">cd /root/ngrok\ntar -cvf bin.tar bin/</pre>\n10.用scp工具复制bin.tar到树莓派的如下目录\n<pre class=\"lang:default decode:true \">#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar</pre>\n11.客户端配置\n<pre class=\"lang:default decode:true \">cd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false</pre>\n\n12.启动客户端\n<pre class=\"lang:default decode:true \">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</pre>\n\n13.记得加入子域名的解析规则\n<pre class=\"lang:default decode:true\">A *.pi 23.83,224,98</pre>\n\n14.测试是否内网穿透成功，可以在树莓派上安装nginx\n<pre class=\"lang:default decode:true \">sudo apt-get install nginx</pre>\n\n15.访问：[http://pi.www.xiajunyi.com:8331/](http://pi.www.xiajunyi.com:8331/)，成功到达树莓派的nginx主页\n\n![](/img/xjy/smp002.png)\n\n&nbsp;\n\n参考文章：\n\n1.[https://xicheng412.github.io/2016/09/27/ngrok-config/](https://xicheng412.github.io/2016/09/27/ngrok-config/)\n\n2.[https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html](https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html)","slug":"p17","published":1,"updated":"2018-03-23T07:35:39.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h09000fc8vg4ca29yw7","content":"<p>今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。</p>\n<p><strong>环境：</strong></p>\n<p>搬瓦工VPS端(centOs6)</p>\n<p>树莓派3b(基于Arm)</p>\n<p><strong>步骤：</strong></p>\n<p>1.安装git、gcc、go等</p>\n<pre class=\"lang:default decode:true\">yum install mercurial git gcc golang</pre>\n2.安装 supervisor ，这样可以保持服务运行\n<pre class=\"lang:default decode:true\">yum install supervisor</pre>\n3.git下载ngrok\n<pre class=\"lang:default decode:true\">cd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git</pre>\n4.证书生成\n<pre class=\"lang:default decode:true \">cd /root/ngrok\n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</pre>\n5.证书的复制准备工作\n<pre class=\"lang:default decode:true\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f</pre>\n6.生成服务端的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nmake release-server</pre>\n7.服务端配置并启动ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</pre>\n8.编译给客户端pi上用的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nGOOS=linux GOARCH=arm make release-client</pre>\n9.把bin目录下的客户端打包\n<pre class=\"lang:default decode:true \">cd /root/ngrok\ntar -cvf bin.tar bin/</pre>\n10.用scp工具复制bin.tar到树莓派的如下目录\n<pre class=\"lang:default decode:true \">#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar</pre>\n11.客户端配置\n<pre class=\"lang:default decode:true \">cd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false</pre>\n\n<p>12.启动客户端</p>\n<pre class=\"lang:default decode:true \">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</pre>\n\n<p>13.记得加入子域名的解析规则</p>\n<pre class=\"lang:default decode:true\">A *.pi 23.83,224,98</pre>\n\n<p>14.测试是否内网穿透成功，可以在树莓派上安装nginx</p>\n<pre class=\"lang:default decode:true \">sudo apt-get install nginx</pre>\n\n<p>15.访问：<a href=\"http://pi.www.xiajunyi.com:8331/\" target=\"_blank\" rel=\"noopener\">http://pi.www.xiajunyi.com:8331/</a>，成功到达树莓派的nginx主页</p>\n<p><img src=\"/img/xjy/smp002.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>参考文章：</p>\n<p>1.<a href=\"https://xicheng412.github.io/2016/09/27/ngrok-config/\" target=\"_blank\" rel=\"noopener\">https://xicheng412.github.io/2016/09/27/ngrok-config/</a></p>\n<p>2.<a href=\"https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html\" target=\"_blank\" rel=\"noopener\">https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。</p>\n<p><strong>环境：</strong></p>\n<p>搬瓦工VPS端(centOs6)</p>\n<p>树莓派3b(基于Arm)</p>\n<p><strong>步骤：</strong></p>\n<p>1.安装git、gcc、go等</p>\n<pre class=\"lang:default decode:true\">yum install mercurial git gcc golang</pre>\n2.安装 supervisor ，这样可以保持服务运行\n<pre class=\"lang:default decode:true\">yum install supervisor</pre>\n3.git下载ngrok\n<pre class=\"lang:default decode:true\">cd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git</pre>\n4.证书生成\n<pre class=\"lang:default decode:true \">cd /root/ngrok\n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</pre>\n5.证书的复制准备工作\n<pre class=\"lang:default decode:true\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f</pre>\n6.生成服务端的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nmake release-server</pre>\n7.服务端配置并启动ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</pre>\n8.编译给客户端pi上用的ngrokd\n<pre class=\"lang:default decode:true \">cd /root/ngrok\nGOOS=linux GOARCH=arm make release-client</pre>\n9.把bin目录下的客户端打包\n<pre class=\"lang:default decode:true \">cd /root/ngrok\ntar -cvf bin.tar bin/</pre>\n10.用scp工具复制bin.tar到树莓派的如下目录\n<pre class=\"lang:default decode:true \">#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar</pre>\n11.客户端配置\n<pre class=\"lang:default decode:true \">cd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false</pre>\n\n<p>12.启动客户端</p>\n<pre class=\"lang:default decode:true \">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</pre>\n\n<p>13.记得加入子域名的解析规则</p>\n<pre class=\"lang:default decode:true\">A *.pi 23.83,224,98</pre>\n\n<p>14.测试是否内网穿透成功，可以在树莓派上安装nginx</p>\n<pre class=\"lang:default decode:true \">sudo apt-get install nginx</pre>\n\n<p>15.访问：<a href=\"http://pi.www.xiajunyi.com:8331/\" target=\"_blank\" rel=\"noopener\">http://pi.www.xiajunyi.com:8331/</a>，成功到达树莓派的nginx主页</p>\n<p><img src=\"/img/xjy/smp002.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>参考文章：</p>\n<p>1.<a href=\"https://xicheng412.github.io/2016/09/27/ngrok-config/\" target=\"_blank\" rel=\"noopener\">https://xicheng412.github.io/2016/09/27/ngrok-config/</a></p>\n<p>2.<a href=\"https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html\" target=\"_blank\" rel=\"noopener\">https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html</a></p>\n"},{"title":"树莓派学习-实现USB摄像头在web端访问","id":"213","date":"2017-12-26T14:43:07.000Z","_content":"\n之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：\n\n1.系统配置中打开摄像头选项\n<pre class=\"lang:default decode:true\">sudo raspi-config</pre>\n2.安装motion\n<pre class=\"lang:default decode:true \">sudo apt-get install motion</pre>\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n<pre class=\"lang:default decode:true\">sudo nano /etc/default/motion</pre>\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n<pre class=\"lang:default decode:true\">sudo nano /etc/motion/motion.conf</pre>\n&nbsp;\n<pre class=\"lang:default decode:true \"># Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on</pre>\n\n5.启动motion\n<pre class=\"lang:default decode:true \">sudo motion</pre>\n6.好了，再加上ngrok映射，就可以在外网访问了\n\n![](/img/xjy/smp004.png)\n\n![](/img/xjy/smp005.png)","source":"_posts/p19.md","raw":"---\ntitle: 树莓派学习-实现USB摄像头在web端访问\nid: 213\ncategories:\n  - 树莓派学习\ndate: 2017-12-26 22:43:07\ntags: [树莓派, 摄像头]\n---\n\n之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：\n\n1.系统配置中打开摄像头选项\n<pre class=\"lang:default decode:true\">sudo raspi-config</pre>\n2.安装motion\n<pre class=\"lang:default decode:true \">sudo apt-get install motion</pre>\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n<pre class=\"lang:default decode:true\">sudo nano /etc/default/motion</pre>\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n<pre class=\"lang:default decode:true\">sudo nano /etc/motion/motion.conf</pre>\n&nbsp;\n<pre class=\"lang:default decode:true \"># Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on</pre>\n\n5.启动motion\n<pre class=\"lang:default decode:true \">sudo motion</pre>\n6.好了，再加上ngrok映射，就可以在外网访问了\n\n![](/img/xjy/smp004.png)\n\n![](/img/xjy/smp005.png)","slug":"p19","published":1,"updated":"2018-03-23T07:38:16.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0c000hc8vgn8gb6hoy","content":"<p>之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：</p>\n<p>1.系统配置中打开摄像头选项</p>\n<pre class=\"lang:default decode:true\">sudo raspi-config</pre>\n2.安装motion\n<pre class=\"lang:default decode:true \">sudo apt-get install motion</pre>\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n<pre class=\"lang:default decode:true\">sudo nano /etc/default/motion</pre>\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n<pre class=\"lang:default decode:true\">sudo nano /etc/motion/motion.conf</pre>\n&nbsp;\n<pre class=\"lang:default decode:true \"># Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on</pre>\n\n<p>5.启动motion</p>\n<p><pre class=\"lang:default decode:true \">sudo motion</pre><br>6.好了，再加上ngrok映射，就可以在外网访问了</p>\n<p><img src=\"/img/xjy/smp004.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp005.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：</p>\n<p>1.系统配置中打开摄像头选项</p>\n<pre class=\"lang:default decode:true\">sudo raspi-config</pre>\n2.安装motion\n<pre class=\"lang:default decode:true \">sudo apt-get install motion</pre>\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n<pre class=\"lang:default decode:true\">sudo nano /etc/default/motion</pre>\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n<pre class=\"lang:default decode:true\">sudo nano /etc/motion/motion.conf</pre>\n&nbsp;\n<pre class=\"lang:default decode:true \"># Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on</pre>\n\n<p>5.启动motion</p>\n<p><pre class=\"lang:default decode:true \">sudo motion</pre><br>6.好了，再加上ngrok映射，就可以在外网访问了</p>\n<p><img src=\"/img/xjy/smp004.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp005.png\" alt=\"\"></p>\n"},{"title":"树莓派学习-忘记密码后重设","id":"134","date":"2017-12-10T10:08:09.000Z","_content":"\n在网上查到的方法：原网址为：[http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html](http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html)\n\n下面所有的前提是有键盘。。。\n\n**第1步：取出SD卡**\n\n将树莓派关机，移除sd卡，插入到你的电脑。\n\n#### 第2步：编辑 cmdline.txt\n\n在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后\n<pre class=\"lang:default decode:true \">init=/bin/sh</pre>\n<span style=\"font-size: 1rem; font-weight: 800;\">第3步：重设密码</span>\n<div>\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">mount -rw -o remount /\npasswd pi</pre>\n</div>\n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">passwd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully</pre>\n</div>\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true \">sync\nexec /sbin/init</pre>\n<span style=\"font-size: 1rem;\">树莓派会继续启动，然后关掉树莓派并且断电。</span>\n\n</div>\n<pre class=\"lang:default decode:true \">sudo halt</pre>\n\n#### 第4步：编辑cmdline.txt文本\n\n用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。\n现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。\n\n![](/img/xjy/smp003.png)\n\n</div>","source":"_posts/p18.md","raw":"---\ntitle: 树莓派学习-忘记密码后重设\nid: 134\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 18:08:09\ntags: [树莓派, 忘记密码]\n---\n\n在网上查到的方法：原网址为：[http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html](http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html)\n\n下面所有的前提是有键盘。。。\n\n**第1步：取出SD卡**\n\n将树莓派关机，移除sd卡，插入到你的电脑。\n\n#### 第2步：编辑 cmdline.txt\n\n在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后\n<pre class=\"lang:default decode:true \">init=/bin/sh</pre>\n<span style=\"font-size: 1rem; font-weight: 800;\">第3步：重设密码</span>\n<div>\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">mount -rw -o remount /\npasswd pi</pre>\n</div>\n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">passwd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully</pre>\n</div>\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true \">sync\nexec /sbin/init</pre>\n<span style=\"font-size: 1rem;\">树莓派会继续启动，然后关掉树莓派并且断电。</span>\n\n</div>\n<pre class=\"lang:default decode:true \">sudo halt</pre>\n\n#### 第4步：编辑cmdline.txt文本\n\n用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。\n现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。\n\n![](/img/xjy/smp003.png)\n\n</div>","slug":"p18","published":1,"updated":"2018-03-23T07:36:49.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0f000jc8vghy1erz4h","content":"<p>在网上查到的方法：原网址为：<a href=\"http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html\" target=\"_blank\" rel=\"noopener\">http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html</a></p>\n<p>下面所有的前提是有键盘。。。</p>\n<p><strong>第1步：取出SD卡</strong></p>\n<p>将树莓派关机，移除sd卡，插入到你的电脑。</p>\n<h4 id=\"第2步：编辑-cmdline-txt\"><a href=\"#第2步：编辑-cmdline-txt\" class=\"headerlink\" title=\"第2步：编辑 cmdline.txt\"></a>第2步：编辑 cmdline.txt</h4><p>在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后</p>\n<pre class=\"lang:default decode:true \">init=/bin/sh</pre>\n<span style=\"font-size: 1rem; font-weight: 800;\">第3步：重设密码</span>\n<div>\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">mount -rw -o remount /\npasswd pi</pre>\n</div>\n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">passwd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully</pre>\n</div>\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true \">sync\nexec /sbin/init</pre>\n<span style=\"font-size: 1rem;\">树莓派会继续启动，然后关掉树莓派并且断电。</span>\n\n</div>\n<pre class=\"lang:default decode:true \">sudo halt</pre>\n\n<h4 id=\"第4步：编辑cmdline-txt文本\"><a href=\"#第4步：编辑cmdline-txt文本\" class=\"headerlink\" title=\"第4步：编辑cmdline.txt文本\"></a>第4步：编辑cmdline.txt文本</h4><p>用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。<br>现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。</p>\n<p><img src=\"/img/xjy/smp003.png\" alt=\"\"></p>\n<p></p></div><p></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在网上查到的方法：原网址为：<a href=\"http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html\" target=\"_blank\" rel=\"noopener\">http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html</a></p>\n<p>下面所有的前提是有键盘。。。</p>\n<p><strong>第1步：取出SD卡</strong></p>\n<p>将树莓派关机，移除sd卡，插入到你的电脑。</p>\n<h4 id=\"第2步：编辑-cmdline-txt\"><a href=\"#第2步：编辑-cmdline-txt\" class=\"headerlink\" title=\"第2步：编辑 cmdline.txt\"></a>第2步：编辑 cmdline.txt</h4><p>在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后</p>\n<pre class=\"lang:default decode:true \">init=/bin/sh</pre>\n<span style=\"font-size: 1rem; font-weight: 800;\">第3步：重设密码</span>\n<div>\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">mount -rw -o remount /\npasswd pi</pre>\n</div>\n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true\">passwd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully</pre>\n</div>\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n<div class=\"line number1 index0 alt2\">\n<pre class=\"lang:default decode:true \">sync\nexec /sbin/init</pre>\n<span style=\"font-size: 1rem;\">树莓派会继续启动，然后关掉树莓派并且断电。</span>\n\n</div>\n<pre class=\"lang:default decode:true \">sudo halt</pre>\n\n<h4 id=\"第4步：编辑cmdline-txt文本\"><a href=\"#第4步：编辑cmdline-txt文本\" class=\"headerlink\" title=\"第4步：编辑cmdline.txt文本\"></a>第4步：编辑cmdline.txt文本</h4><p>用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。<br>现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。</p>\n<p><img src=\"/img/xjy/smp003.png\" alt=\"\"></p>\n<p></p></div><p></p>\n"},{"title":"树莓派学习-创建crontab任务","id":"189","date":"2017-12-12T14:20:44.000Z","_content":"\n今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：\n\n1.编辑要执行的脚本\n<pre class=\"lang:default decode:true \">vi /home/pi/python-xjy/cust.sh</pre>\n2.比如我要执行socket客户端程序\n<pre class=\"lang:default decode:true \">/usr/bin/python3 /home/pi/python-xjy/cust.py\n</pre>\n3.修改脚本权限为可执行\n<pre class=\"lang:default decode:true\">chmod 755 /home/pi/python-xjy/cust.sh</pre>\n4.可以查看目前定义的定时任务，确认是否加过该脚本\n<pre class=\"lang:default decode:true \">crontab -l</pre>\n5.开始编辑crontab任务\n<pre class=\"lang:default decode:true \">crontab -e</pre>\n6.加入如下任务（格式为：分 时 日 月 周几 命令）\n<pre class=\"lang:default decode:true\">* * * * * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt &amp;</pre>\n7.重启crontab\n<pre class=\"lang:default decode:true \">sudo /etc/init.d/cron restart</pre>\n8.查询crontab各任务的状态\n<pre class=\"lang:default decode:true \">service cron status</pre>\n&nbsp;\n\n![](/img/xjy/smp006.jpg)","source":"_posts/p20.md","raw":"---\ntitle: 树莓派学习-创建crontab任务\nid: 189\ncategories:\n  - 树莓派学习\ndate: 2017-12-12 22:20:44\ntags: [树莓派, crontab]\n---\n\n今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：\n\n1.编辑要执行的脚本\n<pre class=\"lang:default decode:true \">vi /home/pi/python-xjy/cust.sh</pre>\n2.比如我要执行socket客户端程序\n<pre class=\"lang:default decode:true \">/usr/bin/python3 /home/pi/python-xjy/cust.py\n</pre>\n3.修改脚本权限为可执行\n<pre class=\"lang:default decode:true\">chmod 755 /home/pi/python-xjy/cust.sh</pre>\n4.可以查看目前定义的定时任务，确认是否加过该脚本\n<pre class=\"lang:default decode:true \">crontab -l</pre>\n5.开始编辑crontab任务\n<pre class=\"lang:default decode:true \">crontab -e</pre>\n6.加入如下任务（格式为：分 时 日 月 周几 命令）\n<pre class=\"lang:default decode:true\">* * * * * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt &amp;</pre>\n7.重启crontab\n<pre class=\"lang:default decode:true \">sudo /etc/init.d/cron restart</pre>\n8.查询crontab各任务的状态\n<pre class=\"lang:default decode:true \">service cron status</pre>\n&nbsp;\n\n![](/img/xjy/smp006.jpg)","slug":"p20","published":1,"updated":"2018-03-23T07:39:21.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0h000lc8vgsme37w86","content":"<p>今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：</p>\n<p>1.编辑要执行的脚本</p>\n<p><pre class=\"lang:default decode:true \">vi /home/pi/python-xjy/cust.sh</pre><br>2.比如我要执行socket客户端程序</p>\n<p><pre class=\"lang:default decode:true \">/usr/bin/python3 /home/pi/python-xjy/cust.py<br></pre><br>3.修改脚本权限为可执行</p>\n<p><pre class=\"lang:default decode:true\">chmod 755 /home/pi/python-xjy/cust.sh</pre><br>4.可以查看目前定义的定时任务，确认是否加过该脚本</p>\n<p><pre class=\"lang:default decode:true \">crontab -l</pre><br>5.开始编辑crontab任务</p>\n<p><pre class=\"lang:default decode:true \">crontab -e</pre><br>6.加入如下任务（格式为：分 时 日 月 周几 命令）</p>\n<p><pre class=\"lang:default decode:true\"><em> </em> <em> </em> * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt &amp;</pre><br>7.重启crontab</p>\n<p><pre class=\"lang:default decode:true \">sudo /etc/init.d/cron restart</pre><br>8.查询crontab各任务的状态</p>\n<p><pre class=\"lang:default decode:true \">service cron status</pre><br>&nbsp;</p>\n<p><img src=\"/img/xjy/smp006.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：</p>\n<p>1.编辑要执行的脚本</p>\n<p><pre class=\"lang:default decode:true \">vi /home/pi/python-xjy/cust.sh</pre><br>2.比如我要执行socket客户端程序</p>\n<p><pre class=\"lang:default decode:true \">/usr/bin/python3 /home/pi/python-xjy/cust.py<br></pre><br>3.修改脚本权限为可执行</p>\n<p><pre class=\"lang:default decode:true\">chmod 755 /home/pi/python-xjy/cust.sh</pre><br>4.可以查看目前定义的定时任务，确认是否加过该脚本</p>\n<p><pre class=\"lang:default decode:true \">crontab -l</pre><br>5.开始编辑crontab任务</p>\n<p><pre class=\"lang:default decode:true \">crontab -e</pre><br>6.加入如下任务（格式为：分 时 日 月 周几 命令）</p>\n<p><pre class=\"lang:default decode:true\"><em> </em> <em> </em> * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt &amp;</pre><br>7.重启crontab</p>\n<p><pre class=\"lang:default decode:true \">sudo /etc/init.d/cron restart</pre><br>8.查询crontab各任务的状态</p>\n<p><pre class=\"lang:default decode:true \">service cron status</pre><br>&nbsp;</p>\n<p><img src=\"/img/xjy/smp006.jpg\" alt=\"\"></p>\n"},{"title":"树莓派学习-DHT11温湿度读取（GPIO接口）","id":"147","date":"2017-12-10T10:35:30.000Z","_content":"\n**1.接线顺序可以参照下图：**\n\n![](/img/xjy/smp007.png)\n\n![](/img/xjy/smp008.jpg)\n\n**2.python代码如下所示，DHT11.py：**\n<pre class=\"lang:default decode:true \">import RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n</pre>\n\n**3.运行结果如图：**\n\n![](/img/xjy/smp009.png)","source":"_posts/p22.md","raw":"---\ntitle: 树莓派学习-DHT11温湿度读取（GPIO接口）\nid: 147\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 18:35:30\ntags: [树莓派, dht11, gpio, python, 传感器]\n---\n\n**1.接线顺序可以参照下图：**\n\n![](/img/xjy/smp007.png)\n\n![](/img/xjy/smp008.jpg)\n\n**2.python代码如下所示，DHT11.py：**\n<pre class=\"lang:default decode:true \">import RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n</pre>\n\n**3.运行结果如图：**\n\n![](/img/xjy/smp009.png)","slug":"p22","published":1,"updated":"2018-03-23T07:50:32.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0j000oc8vgi7xj60px","content":"<p><strong>1.接线顺序可以参照下图：</strong></p>\n<p><img src=\"/img/xjy/smp007.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp008.jpg\" alt=\"\"></p>\n<p><strong>2.python代码如下所示，DHT11.py：</strong></p>\n<pre class=\"lang:default decode:true \">import RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n</pre>\n\n<p><strong>3.运行结果如图：</strong></p>\n<p><img src=\"/img/xjy/smp009.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1.接线顺序可以参照下图：</strong></p>\n<p><img src=\"/img/xjy/smp007.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp008.jpg\" alt=\"\"></p>\n<p><strong>2.python代码如下所示，DHT11.py：</strong></p>\n<pre class=\"lang:default decode:true \">import RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n</pre>\n\n<p><strong>3.运行结果如图：</strong></p>\n<p><img src=\"/img/xjy/smp009.png\" alt=\"\"></p>\n"},{"title":"树莓派学习-先装好环境跑起来","id":"132","date":"2017-12-10T09:57:14.000Z","_content":"\n<div>1.安装系统</div>\n<div>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</div>\n<div></div>\n<div>2.连接SSH</div>\n<div>新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</div>\n<div></div>\n<div>3.安装 远程桌面访问</div>\n<div>\n<pre class=\"lang:default decode:true \">$ sudo apt-get install xrdp</pre>\n</div>\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:W3siYmxvY2tUeXBlIjoicGFyYWdyYXBoIiwic3R5bGVzIjp7ImFsaWduIjoibGVmdCIsImluZGVudCI6MCwidGV4dC1pbmRlbnQiOjAsImxpbmUtaGVpZ2h0IjoxLjc1fSwiYmxvY2tJZCI6IjczMjEtMTUxMjIxNzY0MTgyNCIsInJpY2hUZXh0Ijp7ImlzUmljaFRleHQiOnRydWUsImtlZXBMaW5lQnJlYWsiOnRydWUsImRhdGEiOlt7ImNoYXIiOiIxIn0seyJjaGFyIjoiLiJ9LHsiY2hhciI6IuWuiSJ9LHsiY2hhciI6IuijhSJ9LHsiY2hhciI6IuezuyJ9LHsiY2hhciI6Iue7nyJ9XX19LHsiYmxvY2tUeXBlIjoicGFyYWdyYXBoIiwic3R5bGVzIjp7ImFsaWduIjoibGVmdCIsImluZGVudCI6MCwidGV4dC1pbmRlbnQiOjAsImxpbmUtaGVpZ2h0IjoxLjc1fSwiYmxvY2tJZCI6Ijg0MTAtMTUxMjIxNzY3MjMwOCIsInJpY2hUZXh0Ijp7ImlzUmljaFRleHQiOnRydWUsImtlZXBMaW5lQnJlYWsiOnRydWUsImRhdGEiOlt7ImNoYXIiOiLnlKgifSx7ImNoYXIiOiJXIn0seyJjaGFyIjoiaSJ9LHsiY2hhciI6Im4ifSx7ImNoYXIiOiIzIn0seyJjaGFyIjoiMiJ9LHsiY2hhciI6IkQifSx7ImNoYXIiOiJpIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6ImsifSx7ImNoYXIiOiJJIn0seyJjaGFyIjoibSJ9LHsiY2hhciI6ImEifSx7ImNoYXIiOiJnIn0seyJjaGFyIjoiZSJ9LHsiY2hhciI6InIifSx7ImNoYXIiOiLova8ifSx7ImNoYXIiOiLku7YifSx7ImNoYXIiOiLlhpkifSx7ImNoYXIiOiLlhaUifSx7ImNoYXIiOiLnvZEifSx7ImNoYXIiOiLkuIoifSx7ImNoYXIiOiLkuIsifSx7ImNoYXIiOiLovb0ifSx7ImNoYXIiOiLnmoQifSx7ImNoYXIiOiLplZwifSx7ImNoYXIiOiLlg48ifSx7ImNoYXIiOiLvvIgifSx7ImNoYXIiOiIyIn0seyJjaGFyIjoiMCJ9LHsiY2hhciI6IjEifSx7ImNoYXIiOiI3In0seyJjaGFyIjoiLSJ9LHsiY2hhciI6IjEifSx7ImNoYXIiOiIxIn0seyJjaGFyIjoiLSJ9LHsiY2hhciI6IjIifSx7ImNoYXIiOiI5In0seyJjaGFyIjoiLSJ9LHsiY2hhciI6InIifSx7ImNoYXIiOiJhIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6InAifSx7ImNoYXIiOiJiIn0seyJjaGFyIjoiaSJ9LHsiY2hhciI6ImEifSx7ImNoYXIiOiJuIn0seyJjaGFyIjoiLSJ9LHsiY2hhciI6InMifSx7ImNoYXIiOiJ0In0seyJjaGFyIjoiciJ9LHsiY2hhciI6ImUifSx7ImNoYXIiOiJ0In0seyJjaGFyIjoiYyJ9LHsiY2hhciI6ImgifSx7ImNoYXIiOiIuIn0seyJjaGFyIjoiaSJ9LHsiY2hhciI6Im0ifSx7ImNoYXIiOiJnIn0seyJjaGFyIjoi77yJIn0seyJjaGFyIjoi5Y2zIn0seyJjaGFyIjoi5Y+vIn1dfX0seyJibG9ja1R5cGUiOiJwYXJhZ3JhcGgiLCJzdHlsZXMiOnsiYWxpZ24iOiJsZWZ0IiwiaW5kZW50IjowLCJ0ZXh0LWluZGVudCI6MCwibGluZS1oZWlnaHQiOjEuNzV9LCJibG9ja0lkIjoiNTIyNy0xNTEyMjE3NzQ5NzU2IiwicmljaFRleHQiOnsiaXNSaWNoVGV4dCI6dHJ1ZSwia2VlcExpbmVCcmVhayI6dHJ1ZSwiZGF0YSI6W119fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI5MDYwLTE1MTIyMTc3NDk5MzYiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoiMiJ9LHsiY2hhciI6Ii4ifSx7ImNoYXIiOiLov54ifSx7ImNoYXIiOiLmjqUifSx7ImNoYXIiOiJTIn0seyJjaGFyIjoiUyJ9LHsiY2hhciI6IkgifV19fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI3NTk3LTE1MTIyMTc3NTc2MjgiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoi5pawIn0seyJjaGFyIjoi54mIIn0seyJjaGFyIjoi6ZWcIn0seyJjaGFyIjoi5YOPIn0seyJjaGFyIjoi6buYIn0seyJjaGFyIjoi6K6kIn0seyJjaGFyIjoi56aBIn0seyJjaGFyIjoi55SoIn0seyJjaGFyIjoiUyJ9LHsiY2hhciI6IlMifSx7ImNoYXIiOiJIIn0seyJjaGFyIjoi77yMIn0seyJjaGFyIjoi6ZyAIn0seyJjaGFyIjoi6KaBIn0seyJjaGFyIjoi5ZyoIn0seyJjaGFyIjoi5YaFIn0seyJjaGFyIjoi5a2YIn0seyJjaGFyIjoi5Y2hIn0seyJjaGFyIjoi54i2In0seyJjaGFyIjoi6LevIn0seyJjaGFyIjoi5b6EIn0seyJjaGFyIjoi5bu6In0seyJjaGFyIjoi56uLIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6InMifSx7ImNoYXIiOiJoIn0seyJjaGFyIjoi56m6In0seyJjaGFyIjoi5paHIn0seyJjaGFyIjoi5Lu2In0seyJjaGFyIjoi5aS5In0seyJjaGFyIjoi77yMIn0seyJjaGFyIjoi54S2In0seyJjaGFyIjoi5ZCOIn0seyJjaGFyIjoi6YCaIn0seyJjaGFyIjoi6L+HIn0seyJjaGFyIjoi6L+eIn0seyJjaGFyIjoi5o6lIn0seyJjaGFyIjoi55u4In0seyJjaGFyIjoi5ZCMIn0seyJjaGFyIjoi55qEIn0seyJjaGFyIjoi6LevIn0seyJjaGFyIjoi55SxIn0seyJjaGFyIjoi5ZmoIn0seyJjaGFyIjoi6L+bIn0seyJjaGFyIjoi6KGMIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6InMifSx7ImNoYXIiOiJoIn0seyJjaGFyIjoi6K6/In0seyJjaGFyIjoi6ZeuIn0seyJjaGFyIjoi44CCIn0seyJjaGFyIjoi6buYIn0seyJjaGFyIjoi6K6kIn0seyJjaGFyIjoi55SoIn0seyJjaGFyIjoi5oi3In0seyJjaGFyIjoi5ZCNIn0seyJjaGFyIjoi77yaIn0seyJjaGFyIjoicCJ9LHsiY2hhciI6ImkifSx7ImNoYXIiOiLvvIwifSx7ImNoYXIiOiLlr4YifSx7ImNoYXIiOiLnoIEifSx7ImNoYXIiOiLvvJoifSx7ImNoYXIiOiJyIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6ImEiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoicyIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiJwIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6ImIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoiZSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiJyIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6InIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoieSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiIgIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IigiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi5LiNIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuS8miIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLmmL4iLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi56S6Iiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuWvhiIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLnoIEiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoiKSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLjgIIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX1dfX0seyJibG9ja1R5cGUiOiJwYXJhZ3JhcGgiLCJzdHlsZXMiOnsiYWxpZ24iOiJsZWZ0IiwiaW5kZW50IjowLCJ0ZXh0LWluZGVudCI6MCwibGluZS1oZWlnaHQiOjEuNzV9LCJibG9ja0lkIjoiMTM4MC0xNTEyMjE3OTM1NzA3IiwicmljaFRleHQiOnsiaXNSaWNoVGV4dCI6dHJ1ZSwia2VlcExpbmVCcmVhayI6dHJ1ZSwiZGF0YSI6W119fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI4NDE4LTE1MTIyMTc5MzU5NTgiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoiMyIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiIuIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuWuiSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLoo4UiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoiICIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLov5wiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi56iLIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuahjCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLpnaIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi6K6/Iiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IumXriIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fV19fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI3Mjg5LTE1MTIyMTc5NDkwMTkiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoiJCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiIgIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InMiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoidSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJkIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6Im8iLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiICIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJhIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InAiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoidCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiItIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6ImciLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiZSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJ0Iiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6IiAiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiaSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJuIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InMiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoidCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJhIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6ImwiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoibCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiIgIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6IngiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiciIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJkIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InAiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX1dfX1d-->\n\n运行结果如图：\n\n![](/img/xjy/smp006.png)","source":"_posts/p21.md","raw":"---\ntitle: 树莓派学习-先装好环境跑起来\nid: 132\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 17:57:14\ntags: [树莓派, Win32DiskImager, ssh]\n---\n\n<div>1.安装系统</div>\n<div>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</div>\n<div></div>\n<div>2.连接SSH</div>\n<div>新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</div>\n<div></div>\n<div>3.安装 远程桌面访问</div>\n<div>\n<pre class=\"lang:default decode:true \">$ sudo apt-get install xrdp</pre>\n</div>\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n\n运行结果如图：\n\n![](/img/xjy/smp006.png)","slug":"p21","published":1,"updated":"2018-03-23T07:44:35.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0k000qc8vg5vmh5766","content":"<p><div>1.安装系统</div></p>\n<p><div>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</div></p>\n<p><div></div></p>\n<p><div>2.连接SSH</div></p>\n<p><div>新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</div></p>\n<p><div></div></p>\n<p><div>3.安装 远程桌面访问</div></p>\n<p><div></div></p>\n<p><pre class=\"lang:default decode:true \">$ sudo apt-get install xrdp</pre><br><br><!--5f39ae17-8c62-4a45-bc43-b32064c9388a:></p>\n<p>运行结果如图：</p>\n<p><img src=\"/img/xjy/smp006.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><div>1.安装系统</div></p>\n<p><div>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</div></p>\n<p><div></div></p>\n<p><div>2.连接SSH</div></p>\n<p><div>新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</div></p>\n<p><div></div></p>\n<p><div>3.安装 远程桌面访问</div></p>\n<p><div></div></p>\n<p><pre class=\"lang:default decode:true \">$ sudo apt-get install xrdp</pre><br><br><!--5f39ae17-8c62-4a45-bc43-b32064c9388a:></p>\n<p>运行结果如图：</p>\n<p><img src=\"/img/xjy/smp006.png\" alt=\"\"></p>\n"},{"title":"php-fpm占用大量内存的解决方法","id":"351","date":"2018-01-27T14:12:35.000Z","_content":"\n1.背景\n\n*   <span style=\"line-height:1.5;\">由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存</span><span style=\"line-height:1.5;\">。</span>\n\n\t2.现状\n\n*   <span style=\"line-height:1.5;\">可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</span>\n\n\t3.分析\n\n*   <span style=\"line-height:1.5;\">先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：[https://www.cnblogs.com/smallrookie/p/5634054.html](https://www.cnblogs.com/smallrookie/p/5634054.html)</span>\n\n\t4.解决\n\n*   <span style=\"line-height:1.5;\">通</span><span style=\"line-height:1.5;\">过网上查找资料，发现可用的是修改php-fpm配置，</span><span style=\"line-height:1.5;\">将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：[http://www.jb51.net/article/129528.htm](http://www.jb51.net/article/129528.htm)</span>\n\n*   <span style=\"line-height:1.5;\">我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。\n<pre class=\"prettyprint lang-xml\">;最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M</pre>\n</span>","source":"_posts/p2.md","raw":"---\ntitle: php-fpm占用大量内存的解决方法\nid: 351\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-01-27 22:12:35\ntags: [php, wordpress, php-fpm, 博客]\n---\n\n1.背景\n\n*   <span style=\"line-height:1.5;\">由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存</span><span style=\"line-height:1.5;\">。</span>\n\n\t2.现状\n\n*   <span style=\"line-height:1.5;\">可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</span>\n\n\t3.分析\n\n*   <span style=\"line-height:1.5;\">先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：[https://www.cnblogs.com/smallrookie/p/5634054.html](https://www.cnblogs.com/smallrookie/p/5634054.html)</span>\n\n\t4.解决\n\n*   <span style=\"line-height:1.5;\">通</span><span style=\"line-height:1.5;\">过网上查找资料，发现可用的是修改php-fpm配置，</span><span style=\"line-height:1.5;\">将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：[http://www.jb51.net/article/129528.htm](http://www.jb51.net/article/129528.htm)</span>\n\n*   <span style=\"line-height:1.5;\">我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。\n<pre class=\"prettyprint lang-xml\">;最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M</pre>\n</span>","slug":"p2","published":1,"updated":"2018-03-22T06:03:15.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0m000tc8vgwawl6f0v","content":"<p>1.背景</p>\n<ul>\n<li><p><span style=\"line-height:1.5;\">由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存</span><span style=\"line-height:1.5;\">。</span></p>\n<p>2.现状</p>\n</li>\n<li><p><span style=\"line-height:1.5;\">可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</span></p>\n<p>3.分析</p>\n</li>\n<li><p><span style=\"line-height:1.5;\">先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：<a href=\"https://www.cnblogs.com/smallrookie/p/5634054.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5634054.html</a></span></p>\n<p>4.解决</p>\n</li>\n<li><p><span style=\"line-height:1.5;\">通</span><span style=\"line-height:1.5;\">过网上查找资料，发现可用的是修改php-fpm配置，</span><span style=\"line-height:1.5;\">将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：<a href=\"http://www.jb51.net/article/129528.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/129528.htm</a></span></p>\n</li>\n<li><p><span style=\"line-height:1.5;\">我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。<br><pre class=\"prettyprint lang-xml\">;最大线程数<br>pm.max_children = 3<br>;初始线程数<br>pm.start_servers = 1<br>;最小空余线程数<br>pm.min_spare_servers = 1<br>;最大空余线程数<br>pm.max_spare_servers = 1<br>;php_admin内存最大限制<br>php_admin_value[memory_limit] = 128M</pre><br></span></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1.背景</p>\n<ul>\n<li><p><span style=\"line-height:1.5;\">由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存</span><span style=\"line-height:1.5;\">。</span></p>\n<p>2.现状</p>\n</li>\n<li><p><span style=\"line-height:1.5;\">可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</span></p>\n<p>3.分析</p>\n</li>\n<li><p><span style=\"line-height:1.5;\">先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：<a href=\"https://www.cnblogs.com/smallrookie/p/5634054.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5634054.html</a></span></p>\n<p>4.解决</p>\n</li>\n<li><p><span style=\"line-height:1.5;\">通</span><span style=\"line-height:1.5;\">过网上查找资料，发现可用的是修改php-fpm配置，</span><span style=\"line-height:1.5;\">将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：<a href=\"http://www.jb51.net/article/129528.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/129528.htm</a></span></p>\n</li>\n<li><p><span style=\"line-height:1.5;\">我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。<br><pre class=\"prettyprint lang-xml\">;最大线程数<br>pm.max_children = 3<br>;初始线程数<br>pm.start_servers = 1<br>;最小空余线程数<br>pm.min_spare_servers = 1<br>;最大空余线程数<br>pm.max_spare_servers = 1<br>;php_admin内存最大限制<br>php_admin_value[memory_limit] = 128M</pre><br></span></p>\n</li>\n</ul>\n"},{"title":"搭建之路1-基于redhat","id":"405","date":"2018-02-06T03:25:38.000Z","_content":"# 1 安装jdk #\n\n比较常见,我这里以1.8为例\n\n## 1.1 解压复制 ##\n\n    sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm\n\n## 1.2 执行安装 ##\n\n    sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  &amp;&amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;&amp; sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ &amp;&amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n\n## 1.3 验证版本 ##  \n\n    java -version\n\n## 1.4 另外可增加配置 ##\n\n    export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\n    export PATH=$JAVA_HOME/bin:$PATH\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n&nbsp;\n\n# 2 安装maven #\n\n## 2.1 下载安装包 ##\n\n    wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n\n## 2.2 解压 ##\n\n    tar zvxf apache-maven-3.0.5-bin.tar.gz\n\n## 2.3 移到指定目录 ##\n\n    mv apache-maven-3.0.5 /usr/local\n\n## 2.4 编辑配置文件/etc/profile，加入 ##\n\n    export MAVEN_HOME=/usr/local/apache-maven-3.0.5\n    export PATH=$PATH:$MAVEN_HOME/bin\n\n## 2.5 始配置生效 ##\n\n    source /etc/profile\n\n## 2.6 确认安装完成 ##\n\n    mvn -v \n\n&nbsp;\n\n# 3 nexus安装 #\n\n## 3.1 下载安装包 ##\n\n    wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n\n## 3.2 解压并复制 ##\n\n    sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n\n## 3.3 做链接 ##\n\n    sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n\n## 3.4 赋权限 ##\n\n    chmod 755 /etc/init.d/nexus\n\n## 3.5 设置开机启动并运行 ##\n\n    cd /etc/init.d\n    chkconfig --add nexus\n    chkconfig --levels 345 nexus on\n    service nexus start\n    tail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n\n## 3.6 配置请查考链接\n\n[https://www.xncoding.com/2017/09/02/tool/nexus.html](https://www.xncoding.com/2017/09/02/tool/nexus.html)\n\n&nbsp;\n\n# 4 svn安装 #\n\n## 4.1 yum安装svnversion ##\n\n4.1.1 检查是否安装了低版本的SVN\n\n    rpm -qa subversion\n\n4.1.2 如果存储旧版本，卸载旧版本SVN\n\n    yum remove subversion\n\n4.1.3 安装SVN\n\n    yum install subversion\n\n4.1.4 验证安装版本信息\n\n    svnserve --version\n\n4.1.5 代码库创建\n\n    mkdir -p /opt/svn/\n    svnadmin create /opt/svn/repo\n\n## 4.2 账户权限及防火墙配置 ##\n\n4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：\n\n<pre>\n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n</pre>\n\n4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：\n\n<pre>\n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n</pre>\n\n4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：\n\n<pre>\n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n</pre>\n\n4.2.4  编辑/etc/sysconfig/iptables，加入如下内容\n\n<pre>\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n</pre>\n\n## 4.3 启动SVN ##\n\n4.3.1 启动SVN\n\n    svnserve -d -r /opt/svn/\n\n4.3.2 查看SVN进程\n\n    ps -ef|grep svnserve\n\n4.3.3 检测SVN端口\n\n    netstat -ln |grep 3690\n\n## 4.4 完成上面的步骤即可在客户端正常访问\n\n地址：[svn://ip地址/repo](svn://ip地址/repo)\n\n&nbsp;\n\n# 5 jenkins安装 #\n\n## 5.1 安装 ##\n\n    sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\n    sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n    yum install jenkins\n\n## 5.2 启动并加入开机启动项 ##\n\n    sudo service jenkins start\n    sudo chkconfig jenkins on\n\n## 5.3 访问jenkins的web管理端 ##\n\n[http://ip:8080](http://ip地址:8080)\n\n\n## 5.4 初始进入及安装插件等 ##\n\n- (1).从提示文件中找到输入管理员身份确认码并输入\n\n- (2).安装默认插件\n\n- (3).创建管理员后开始\n\n- (4).安装Maven Integration plugin插件\n\n## 5.5 配置一个jenkins任务\n下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：\n![](/img/xjy/jenkins config.png)\n\n# 6 小结\n\n这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。","source":"_posts/p23.md","raw":"---\ntitle: 搭建之路1-基于redhat\nid: 405\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-02-06 11:25:38\ntags: [java, maven, svn, jenkins, nexus, redhat]\n---\n# 1 安装jdk #\n\n比较常见,我这里以1.8为例\n\n## 1.1 解压复制 ##\n\n    sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm\n\n## 1.2 执行安装 ##\n\n    sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  &amp;&amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;&amp; sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ &amp;&amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n\n## 1.3 验证版本 ##  \n\n    java -version\n\n## 1.4 另外可增加配置 ##\n\n    export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\n    export PATH=$JAVA_HOME/bin:$PATH\n    export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n&nbsp;\n\n# 2 安装maven #\n\n## 2.1 下载安装包 ##\n\n    wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n\n## 2.2 解压 ##\n\n    tar zvxf apache-maven-3.0.5-bin.tar.gz\n\n## 2.3 移到指定目录 ##\n\n    mv apache-maven-3.0.5 /usr/local\n\n## 2.4 编辑配置文件/etc/profile，加入 ##\n\n    export MAVEN_HOME=/usr/local/apache-maven-3.0.5\n    export PATH=$PATH:$MAVEN_HOME/bin\n\n## 2.5 始配置生效 ##\n\n    source /etc/profile\n\n## 2.6 确认安装完成 ##\n\n    mvn -v \n\n&nbsp;\n\n# 3 nexus安装 #\n\n## 3.1 下载安装包 ##\n\n    wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n\n## 3.2 解压并复制 ##\n\n    sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n\n## 3.3 做链接 ##\n\n    sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n\n## 3.4 赋权限 ##\n\n    chmod 755 /etc/init.d/nexus\n\n## 3.5 设置开机启动并运行 ##\n\n    cd /etc/init.d\n    chkconfig --add nexus\n    chkconfig --levels 345 nexus on\n    service nexus start\n    tail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n\n## 3.6 配置请查考链接\n\n[https://www.xncoding.com/2017/09/02/tool/nexus.html](https://www.xncoding.com/2017/09/02/tool/nexus.html)\n\n&nbsp;\n\n# 4 svn安装 #\n\n## 4.1 yum安装svnversion ##\n\n4.1.1 检查是否安装了低版本的SVN\n\n    rpm -qa subversion\n\n4.1.2 如果存储旧版本，卸载旧版本SVN\n\n    yum remove subversion\n\n4.1.3 安装SVN\n\n    yum install subversion\n\n4.1.4 验证安装版本信息\n\n    svnserve --version\n\n4.1.5 代码库创建\n\n    mkdir -p /opt/svn/\n    svnadmin create /opt/svn/repo\n\n## 4.2 账户权限及防火墙配置 ##\n\n4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：\n\n<pre>\n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n</pre>\n\n4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：\n\n<pre>\n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n</pre>\n\n4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：\n\n<pre>\n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n</pre>\n\n4.2.4  编辑/etc/sysconfig/iptables，加入如下内容\n\n<pre>\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n</pre>\n\n## 4.3 启动SVN ##\n\n4.3.1 启动SVN\n\n    svnserve -d -r /opt/svn/\n\n4.3.2 查看SVN进程\n\n    ps -ef|grep svnserve\n\n4.3.3 检测SVN端口\n\n    netstat -ln |grep 3690\n\n## 4.4 完成上面的步骤即可在客户端正常访问\n\n地址：[svn://ip地址/repo](svn://ip地址/repo)\n\n&nbsp;\n\n# 5 jenkins安装 #\n\n## 5.1 安装 ##\n\n    sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\n    sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n    yum install jenkins\n\n## 5.2 启动并加入开机启动项 ##\n\n    sudo service jenkins start\n    sudo chkconfig jenkins on\n\n## 5.3 访问jenkins的web管理端 ##\n\n[http://ip:8080](http://ip地址:8080)\n\n\n## 5.4 初始进入及安装插件等 ##\n\n- (1).从提示文件中找到输入管理员身份确认码并输入\n\n- (2).安装默认插件\n\n- (3).创建管理员后开始\n\n- (4).安装Maven Integration plugin插件\n\n## 5.5 配置一个jenkins任务\n下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：\n![](/img/xjy/jenkins config.png)\n\n# 6 小结\n\n这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。","slug":"p23","published":1,"updated":"2018-03-22T06:56:00.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0o000wc8vgl9sorjjc","content":"<h1 id=\"1-安装jdk\"><a href=\"#1-安装jdk\" class=\"headerlink\" title=\"1 安装jdk\"></a>1 安装jdk</h1><p>比较常见,我这里以1.8为例</p>\n<h2 id=\"1-1-解压复制\"><a href=\"#1-1-解压复制\" class=\"headerlink\" title=\"1.1 解压复制\"></a>1.1 解压复制</h2><pre><code>sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm\n</code></pre><h2 id=\"1-2-执行安装\"><a href=\"#1-2-执行安装\" class=\"headerlink\" title=\"1.2 执行安装\"></a>1.2 执行安装</h2><pre><code>sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/lib/jvm/jdk1.8.0_144/bin/javac&quot; 1 \\  &amp;amp;&amp;amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;amp;&amp;amp; sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/lib/jvm/jdk1.8.0_144/bin/java&quot; 1 \\ &amp;amp;&amp;amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n</code></pre><h2 id=\"1-3-验证版本\"><a href=\"#1-3-验证版本\" class=\"headerlink\" title=\"1.3 验证版本\"></a>1.3 验证版本</h2><pre><code>java -version\n</code></pre><h2 id=\"1-4-另外可增加配置\"><a href=\"#1-4-另外可增加配置\" class=\"headerlink\" title=\"1.4 另外可增加配置\"></a>1.4 另外可增加配置</h2><pre><code>export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n</code></pre><p>&nbsp;</p>\n<h1 id=\"2-安装maven\"><a href=\"#2-安装maven\" class=\"headerlink\" title=\"2 安装maven\"></a>2 安装maven</h1><h2 id=\"2-1-下载安装包\"><a href=\"#2-1-下载安装包\" class=\"headerlink\" title=\"2.1 下载安装包\"></a>2.1 下载安装包</h2><pre><code>wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n</code></pre><h2 id=\"2-2-解压\"><a href=\"#2-2-解压\" class=\"headerlink\" title=\"2.2 解压\"></a>2.2 解压</h2><pre><code>tar zvxf apache-maven-3.0.5-bin.tar.gz\n</code></pre><h2 id=\"2-3-移到指定目录\"><a href=\"#2-3-移到指定目录\" class=\"headerlink\" title=\"2.3 移到指定目录\"></a>2.3 移到指定目录</h2><pre><code>mv apache-maven-3.0.5 /usr/local\n</code></pre><h2 id=\"2-4-编辑配置文件-etc-profile，加入\"><a href=\"#2-4-编辑配置文件-etc-profile，加入\" class=\"headerlink\" title=\"2.4 编辑配置文件/etc/profile，加入\"></a>2.4 编辑配置文件/etc/profile，加入</h2><pre><code>export MAVEN_HOME=/usr/local/apache-maven-3.0.5\nexport PATH=$PATH:$MAVEN_HOME/bin\n</code></pre><h2 id=\"2-5-始配置生效\"><a href=\"#2-5-始配置生效\" class=\"headerlink\" title=\"2.5 始配置生效\"></a>2.5 始配置生效</h2><pre><code>source /etc/profile\n</code></pre><h2 id=\"2-6-确认安装完成\"><a href=\"#2-6-确认安装完成\" class=\"headerlink\" title=\"2.6 确认安装完成\"></a>2.6 确认安装完成</h2><pre><code>mvn -v \n</code></pre><p>&nbsp;</p>\n<h1 id=\"3-nexus安装\"><a href=\"#3-nexus安装\" class=\"headerlink\" title=\"3 nexus安装\"></a>3 nexus安装</h1><h2 id=\"3-1-下载安装包\"><a href=\"#3-1-下载安装包\" class=\"headerlink\" title=\"3.1 下载安装包\"></a>3.1 下载安装包</h2><pre><code>wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n</code></pre><h2 id=\"3-2-解压并复制\"><a href=\"#3-2-解压并复制\" class=\"headerlink\" title=\"3.2 解压并复制\"></a>3.2 解压并复制</h2><pre><code>sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n</code></pre><h2 id=\"3-3-做链接\"><a href=\"#3-3-做链接\" class=\"headerlink\" title=\"3.3 做链接\"></a>3.3 做链接</h2><pre><code>sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n</code></pre><h2 id=\"3-4-赋权限\"><a href=\"#3-4-赋权限\" class=\"headerlink\" title=\"3.4 赋权限\"></a>3.4 赋权限</h2><pre><code>chmod 755 /etc/init.d/nexus\n</code></pre><h2 id=\"3-5-设置开机启动并运行\"><a href=\"#3-5-设置开机启动并运行\" class=\"headerlink\" title=\"3.5 设置开机启动并运行\"></a>3.5 设置开机启动并运行</h2><pre><code>cd /etc/init.d\nchkconfig --add nexus\nchkconfig --levels 345 nexus on\nservice nexus start\ntail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n</code></pre><h2 id=\"3-6-配置请查考链接\"><a href=\"#3-6-配置请查考链接\" class=\"headerlink\" title=\"3.6 配置请查考链接\"></a>3.6 配置请查考链接</h2><p><a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\">https://www.xncoding.com/2017/09/02/tool/nexus.html</a></p>\n<p>&nbsp;</p>\n<h1 id=\"4-svn安装\"><a href=\"#4-svn安装\" class=\"headerlink\" title=\"4 svn安装\"></a>4 svn安装</h1><h2 id=\"4-1-yum安装svnversion\"><a href=\"#4-1-yum安装svnversion\" class=\"headerlink\" title=\"4.1 yum安装svnversion\"></a>4.1 yum安装svnversion</h2><p>4.1.1 检查是否安装了低版本的SVN</p>\n<pre><code>rpm -qa subversion\n</code></pre><p>4.1.2 如果存储旧版本，卸载旧版本SVN</p>\n<pre><code>yum remove subversion\n</code></pre><p>4.1.3 安装SVN</p>\n<pre><code>yum install subversion\n</code></pre><p>4.1.4 验证安装版本信息</p>\n<pre><code>svnserve --version\n</code></pre><p>4.1.5 代码库创建</p>\n<pre><code>mkdir -p /opt/svn/\nsvnadmin create /opt/svn/repo\n</code></pre><h2 id=\"4-2-账户权限及防火墙配置\"><a href=\"#4-2-账户权限及防火墙配置\" class=\"headerlink\" title=\"4.2 账户权限及防火墙配置\"></a>4.2 账户权限及防火墙配置</h2><p>4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：</p>\n<pre>\n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n</pre>\n\n<p>4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：</p>\n<pre>\n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n</pre>\n\n<p>4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：</p>\n<pre>\n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n</pre>\n\n<p>4.2.4  编辑/etc/sysconfig/iptables，加入如下内容</p>\n<pre>\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n</pre>\n\n<h2 id=\"4-3-启动SVN\"><a href=\"#4-3-启动SVN\" class=\"headerlink\" title=\"4.3 启动SVN\"></a>4.3 启动SVN</h2><p>4.3.1 启动SVN</p>\n<pre><code>svnserve -d -r /opt/svn/\n</code></pre><p>4.3.2 查看SVN进程</p>\n<pre><code>ps -ef|grep svnserve\n</code></pre><p>4.3.3 检测SVN端口</p>\n<pre><code>netstat -ln |grep 3690\n</code></pre><h2 id=\"4-4-完成上面的步骤即可在客户端正常访问\"><a href=\"#4-4-完成上面的步骤即可在客户端正常访问\" class=\"headerlink\" title=\"4.4 完成上面的步骤即可在客户端正常访问\"></a>4.4 完成上面的步骤即可在客户端正常访问</h2><p>地址：<a href=\"svn://ip地址/repo\" target=\"_blank\" rel=\"noopener\">svn://ip地址/repo</a></p>\n<p>&nbsp;</p>\n<h1 id=\"5-jenkins安装\"><a href=\"#5-jenkins安装\" class=\"headerlink\" title=\"5 jenkins安装\"></a>5 jenkins安装</h1><h2 id=\"5-1-安装\"><a href=\"#5-1-安装\" class=\"headerlink\" title=\"5.1 安装\"></a>5.1 安装</h2><pre><code>sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n</code></pre><h2 id=\"5-2-启动并加入开机启动项\"><a href=\"#5-2-启动并加入开机启动项\" class=\"headerlink\" title=\"5.2 启动并加入开机启动项\"></a>5.2 启动并加入开机启动项</h2><pre><code>sudo service jenkins start\nsudo chkconfig jenkins on\n</code></pre><h2 id=\"5-3-访问jenkins的web管理端\"><a href=\"#5-3-访问jenkins的web管理端\" class=\"headerlink\" title=\"5.3 访问jenkins的web管理端\"></a>5.3 访问jenkins的web管理端</h2><p><a href=\"http://ip地址:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n<h2 id=\"5-4-初始进入及安装插件等\"><a href=\"#5-4-初始进入及安装插件等\" class=\"headerlink\" title=\"5.4 初始进入及安装插件等\"></a>5.4 初始进入及安装插件等</h2><ul>\n<li><p>(1).从提示文件中找到输入管理员身份确认码并输入</p>\n</li>\n<li><p>(2).安装默认插件</p>\n</li>\n<li><p>(3).创建管理员后开始</p>\n</li>\n<li><p>(4).安装Maven Integration plugin插件</p>\n</li>\n</ul>\n<h2 id=\"5-5-配置一个jenkins任务\"><a href=\"#5-5-配置一个jenkins任务\" class=\"headerlink\" title=\"5.5 配置一个jenkins任务\"></a>5.5 配置一个jenkins任务</h2><p>下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：<br><img src=\"/img/xjy/jenkins config.png\" alt=\"\"></p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-安装jdk\"><a href=\"#1-安装jdk\" class=\"headerlink\" title=\"1 安装jdk\"></a>1 安装jdk</h1><p>比较常见,我这里以1.8为例</p>\n<h2 id=\"1-1-解压复制\"><a href=\"#1-1-解压复制\" class=\"headerlink\" title=\"1.1 解压复制\"></a>1.1 解压复制</h2><pre><code>sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm\n</code></pre><h2 id=\"1-2-执行安装\"><a href=\"#1-2-执行安装\" class=\"headerlink\" title=\"1.2 执行安装\"></a>1.2 执行安装</h2><pre><code>sudo update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/lib/jvm/jdk1.8.0_144/bin/javac&quot; 1 \\  &amp;amp;&amp;amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;amp;&amp;amp; sudo update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/lib/jvm/jdk1.8.0_144/bin/java&quot; 1 \\ &amp;amp;&amp;amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n</code></pre><h2 id=\"1-3-验证版本\"><a href=\"#1-3-验证版本\" class=\"headerlink\" title=\"1.3 验证版本\"></a>1.3 验证版本</h2><pre><code>java -version\n</code></pre><h2 id=\"1-4-另外可增加配置\"><a href=\"#1-4-另外可增加配置\" class=\"headerlink\" title=\"1.4 另外可增加配置\"></a>1.4 另外可增加配置</h2><pre><code>export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n</code></pre><p>&nbsp;</p>\n<h1 id=\"2-安装maven\"><a href=\"#2-安装maven\" class=\"headerlink\" title=\"2 安装maven\"></a>2 安装maven</h1><h2 id=\"2-1-下载安装包\"><a href=\"#2-1-下载安装包\" class=\"headerlink\" title=\"2.1 下载安装包\"></a>2.1 下载安装包</h2><pre><code>wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n</code></pre><h2 id=\"2-2-解压\"><a href=\"#2-2-解压\" class=\"headerlink\" title=\"2.2 解压\"></a>2.2 解压</h2><pre><code>tar zvxf apache-maven-3.0.5-bin.tar.gz\n</code></pre><h2 id=\"2-3-移到指定目录\"><a href=\"#2-3-移到指定目录\" class=\"headerlink\" title=\"2.3 移到指定目录\"></a>2.3 移到指定目录</h2><pre><code>mv apache-maven-3.0.5 /usr/local\n</code></pre><h2 id=\"2-4-编辑配置文件-etc-profile，加入\"><a href=\"#2-4-编辑配置文件-etc-profile，加入\" class=\"headerlink\" title=\"2.4 编辑配置文件/etc/profile，加入\"></a>2.4 编辑配置文件/etc/profile，加入</h2><pre><code>export MAVEN_HOME=/usr/local/apache-maven-3.0.5\nexport PATH=$PATH:$MAVEN_HOME/bin\n</code></pre><h2 id=\"2-5-始配置生效\"><a href=\"#2-5-始配置生效\" class=\"headerlink\" title=\"2.5 始配置生效\"></a>2.5 始配置生效</h2><pre><code>source /etc/profile\n</code></pre><h2 id=\"2-6-确认安装完成\"><a href=\"#2-6-确认安装完成\" class=\"headerlink\" title=\"2.6 确认安装完成\"></a>2.6 确认安装完成</h2><pre><code>mvn -v \n</code></pre><p>&nbsp;</p>\n<h1 id=\"3-nexus安装\"><a href=\"#3-nexus安装\" class=\"headerlink\" title=\"3 nexus安装\"></a>3 nexus安装</h1><h2 id=\"3-1-下载安装包\"><a href=\"#3-1-下载安装包\" class=\"headerlink\" title=\"3.1 下载安装包\"></a>3.1 下载安装包</h2><pre><code>wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n</code></pre><h2 id=\"3-2-解压并复制\"><a href=\"#3-2-解压并复制\" class=\"headerlink\" title=\"3.2 解压并复制\"></a>3.2 解压并复制</h2><pre><code>sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n</code></pre><h2 id=\"3-3-做链接\"><a href=\"#3-3-做链接\" class=\"headerlink\" title=\"3.3 做链接\"></a>3.3 做链接</h2><pre><code>sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n</code></pre><h2 id=\"3-4-赋权限\"><a href=\"#3-4-赋权限\" class=\"headerlink\" title=\"3.4 赋权限\"></a>3.4 赋权限</h2><pre><code>chmod 755 /etc/init.d/nexus\n</code></pre><h2 id=\"3-5-设置开机启动并运行\"><a href=\"#3-5-设置开机启动并运行\" class=\"headerlink\" title=\"3.5 设置开机启动并运行\"></a>3.5 设置开机启动并运行</h2><pre><code>cd /etc/init.d\nchkconfig --add nexus\nchkconfig --levels 345 nexus on\nservice nexus start\ntail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n</code></pre><h2 id=\"3-6-配置请查考链接\"><a href=\"#3-6-配置请查考链接\" class=\"headerlink\" title=\"3.6 配置请查考链接\"></a>3.6 配置请查考链接</h2><p><a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\">https://www.xncoding.com/2017/09/02/tool/nexus.html</a></p>\n<p>&nbsp;</p>\n<h1 id=\"4-svn安装\"><a href=\"#4-svn安装\" class=\"headerlink\" title=\"4 svn安装\"></a>4 svn安装</h1><h2 id=\"4-1-yum安装svnversion\"><a href=\"#4-1-yum安装svnversion\" class=\"headerlink\" title=\"4.1 yum安装svnversion\"></a>4.1 yum安装svnversion</h2><p>4.1.1 检查是否安装了低版本的SVN</p>\n<pre><code>rpm -qa subversion\n</code></pre><p>4.1.2 如果存储旧版本，卸载旧版本SVN</p>\n<pre><code>yum remove subversion\n</code></pre><p>4.1.3 安装SVN</p>\n<pre><code>yum install subversion\n</code></pre><p>4.1.4 验证安装版本信息</p>\n<pre><code>svnserve --version\n</code></pre><p>4.1.5 代码库创建</p>\n<pre><code>mkdir -p /opt/svn/\nsvnadmin create /opt/svn/repo\n</code></pre><h2 id=\"4-2-账户权限及防火墙配置\"><a href=\"#4-2-账户权限及防火墙配置\" class=\"headerlink\" title=\"4.2 账户权限及防火墙配置\"></a>4.2 账户权限及防火墙配置</h2><p>4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：</p>\n<pre>\n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n</pre>\n\n<p>4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：</p>\n<pre>\n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n</pre>\n\n<p>4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：</p>\n<pre>\n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n</pre>\n\n<p>4.2.4  编辑/etc/sysconfig/iptables，加入如下内容</p>\n<pre>\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n</pre>\n\n<h2 id=\"4-3-启动SVN\"><a href=\"#4-3-启动SVN\" class=\"headerlink\" title=\"4.3 启动SVN\"></a>4.3 启动SVN</h2><p>4.3.1 启动SVN</p>\n<pre><code>svnserve -d -r /opt/svn/\n</code></pre><p>4.3.2 查看SVN进程</p>\n<pre><code>ps -ef|grep svnserve\n</code></pre><p>4.3.3 检测SVN端口</p>\n<pre><code>netstat -ln |grep 3690\n</code></pre><h2 id=\"4-4-完成上面的步骤即可在客户端正常访问\"><a href=\"#4-4-完成上面的步骤即可在客户端正常访问\" class=\"headerlink\" title=\"4.4 完成上面的步骤即可在客户端正常访问\"></a>4.4 完成上面的步骤即可在客户端正常访问</h2><p>地址：<a href=\"svn://ip地址/repo\" target=\"_blank\" rel=\"noopener\">svn://ip地址/repo</a></p>\n<p>&nbsp;</p>\n<h1 id=\"5-jenkins安装\"><a href=\"#5-jenkins安装\" class=\"headerlink\" title=\"5 jenkins安装\"></a>5 jenkins安装</h1><h2 id=\"5-1-安装\"><a href=\"#5-1-安装\" class=\"headerlink\" title=\"5.1 安装\"></a>5.1 安装</h2><pre><code>sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n</code></pre><h2 id=\"5-2-启动并加入开机启动项\"><a href=\"#5-2-启动并加入开机启动项\" class=\"headerlink\" title=\"5.2 启动并加入开机启动项\"></a>5.2 启动并加入开机启动项</h2><pre><code>sudo service jenkins start\nsudo chkconfig jenkins on\n</code></pre><h2 id=\"5-3-访问jenkins的web管理端\"><a href=\"#5-3-访问jenkins的web管理端\" class=\"headerlink\" title=\"5.3 访问jenkins的web管理端\"></a>5.3 访问jenkins的web管理端</h2><p><a href=\"http://ip地址:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n<h2 id=\"5-4-初始进入及安装插件等\"><a href=\"#5-4-初始进入及安装插件等\" class=\"headerlink\" title=\"5.4 初始进入及安装插件等\"></a>5.4 初始进入及安装插件等</h2><ul>\n<li><p>(1).从提示文件中找到输入管理员身份确认码并输入</p>\n</li>\n<li><p>(2).安装默认插件</p>\n</li>\n<li><p>(3).创建管理员后开始</p>\n</li>\n<li><p>(4).安装Maven Integration plugin插件</p>\n</li>\n</ul>\n<h2 id=\"5-5-配置一个jenkins任务\"><a href=\"#5-5-配置一个jenkins任务\" class=\"headerlink\" title=\"5.5 配置一个jenkins任务\"></a>5.5 配置一个jenkins任务</h2><p>下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：<br><img src=\"/img/xjy/jenkins config.png\" alt=\"\"></p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。</p>\n"},{"title":"我的文章丢了","id":"126","date":"2017-12-10T09:37:45.000Z","_content":"\n今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-**没有备份数据**\n\n下面是我更换域名执行的sql，这一步还好，没有丢东西\n<pre class=\"theme:light-abite lang:default decode:true\" title=\"我执行的wordpress换域名操作\">UPDATE xjywp_options SET option_value = replace(option_value, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_posts SET post_content = replace(post_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_content = replace(comment_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, 'www.zyshops.xyz','www.xiajunyi.com')</pre>\n我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误\n<pre class=\"lang:default decode:true\" title=\"最悲催的一句sql\">UPDATE xjywp_posts SET post_content = replace(guid, 'www.zyshops.xyz','www.xiajunyi.com')</pre>\n原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。\n\n我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。\n\n&nbsp;\n\n最后，我很无奈的说一句：数据无价，务必备份！\n\n![](/img/xjy/sjds001.jpg)\n\n&nbsp;","source":"_posts/p24.md","raw":"---\ntitle: 我的文章丢了\nid: 126\ncategories:\n  - 生活杂记\ndate: 2017-12-10 17:37:45\ntags: [sql, 数据, 数据库, 备份, wordpress, 闲谈]\n---\n\n今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-**没有备份数据**\n\n下面是我更换域名执行的sql，这一步还好，没有丢东西\n<pre class=\"theme:light-abite lang:default decode:true\" title=\"我执行的wordpress换域名操作\">UPDATE xjywp_options SET option_value = replace(option_value, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_posts SET post_content = replace(post_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_content = replace(comment_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, 'www.zyshops.xyz','www.xiajunyi.com')</pre>\n我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误\n<pre class=\"lang:default decode:true\" title=\"最悲催的一句sql\">UPDATE xjywp_posts SET post_content = replace(guid, 'www.zyshops.xyz','www.xiajunyi.com')</pre>\n原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。\n\n我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。\n\n&nbsp;\n\n最后，我很无奈的说一句：数据无价，务必备份！\n\n![](/img/xjy/sjds001.jpg)\n\n&nbsp;","slug":"p24","published":1,"updated":"2018-03-23T07:52:48.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0q000zc8vg638g4oc0","content":"<p>今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-<strong>没有备份数据</strong></p>\n<p>下面是我更换域名执行的sql，这一步还好，没有丢东西</p>\n<p><pre class=\"theme:light-abite lang:default decode:true\" title=\"我执行的wordpress换域名操作\">UPDATE xjywp_options SET option_value = replace(option_value, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>) ;<br>UPDATE xjywp_posts SET post_content = replace(post_content, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>) ;<br>UPDATE xjywp_comments SET comment_content = replace(comment_content, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>) ;<br>UPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>)</pre><br>我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误</p>\n<p><pre class=\"lang:default decode:true\" title=\"最悲催的一句sql\">UPDATE xjywp_posts SET post_content = replace(guid, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>)</pre><br>原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。</p>\n<p>我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。</p>\n<p>&nbsp;</p>\n<p>最后，我很无奈的说一句：数据无价，务必备份！</p>\n<p><img src=\"/img/xjy/sjds001.jpg\" alt=\"\"></p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-<strong>没有备份数据</strong></p>\n<p>下面是我更换域名执行的sql，这一步还好，没有丢东西</p>\n<p><pre class=\"theme:light-abite lang:default decode:true\" title=\"我执行的wordpress换域名操作\">UPDATE xjywp_options SET option_value = replace(option_value, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>) ;<br>UPDATE xjywp_posts SET post_content = replace(post_content, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>) ;<br>UPDATE xjywp_comments SET comment_content = replace(comment_content, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>) ;<br>UPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>)</pre><br>我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误</p>\n<p><pre class=\"lang:default decode:true\" title=\"最悲催的一句sql\">UPDATE xjywp_posts SET post_content = replace(guid, ‘<a href=\"http://www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;\" target=\"_blank\" rel=\"noopener\">www.zyshops.xyz&#39;,&#39;www.xiajunyi.com&#39;</a>)</pre><br>原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。</p>\n<p>我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。</p>\n<p>&nbsp;</p>\n<p>最后，我很无奈的说一句：数据无价，务必备份！</p>\n<p><img src=\"/img/xjy/sjds001.jpg\" alt=\"\"></p>\n<p>&nbsp;</p>\n"},{"title":"常用的apt-get命令","id":"355","date":"2018-01-28T05:07:24.000Z","_content":"\n<span style=\"font-family:Consolas, &quot;background-color:#FFFFFF;\">**在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：**</span> \n\n<pre class=\"prettyprint lang-bsh\">#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n　　</pre>","source":"_posts/p25.md","raw":"---\ntitle: 常用的apt-get命令\nid: 355\ncategories:\n  - LINUX\n  - 编程语言\ndate: 2018-01-28 13:07:24\ntags: [树莓派, apt, apt-get, linux]\n---\n\n<span style=\"font-family:Consolas, &quot;background-color:#FFFFFF;\">**在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：**</span> \n\n<pre class=\"prettyprint lang-bsh\">#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n　　</pre>","slug":"p25","published":1,"updated":"2018-03-22T06:58:09.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0s0012c8vgwzkcqmaw","content":"<p><span style=\"font-family:Consolas, &quot;background-color:#FFFFFF;\"><strong>在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：</strong></span> </p>\n<pre class=\"prettyprint lang-bsh\">#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n　　</pre>","site":{"data":{}},"excerpt":"","more":"<p><span style=\"font-family:Consolas, &quot;background-color:#FFFFFF;\"><strong>在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：</strong></span> </p>\n<pre class=\"prettyprint lang-bsh\">#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n　　</pre>"},{"title":"修改下雪主题页脚备忘","id":"298","date":"2018-01-07T12:18:06.000Z","_content":"\n去掉了第37行的：\n\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>","source":"_posts/p26.md","raw":"---\ntitle: 修改下雪主题页脚备忘\nid: 298\ncategories:\n  - 修改页面\ndate: 2018-01-07 20:18:06\ntags: [wordpress]\n---\n\n去掉了第37行的：\n\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>","slug":"p26","published":1,"updated":"2018-03-22T06:58:26.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0u0015c8vgbp1ts6ej","content":"<p>去掉了第37行的：</p>\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>","site":{"data":{}},"excerpt":"","more":"<p>去掉了第37行的：</p>\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>"},{"title":"db2相关操作知识点积累及WINDOWS环境DB2连接远程数据库实例","id":"209","date":"2017-12-22T08:34:40.000Z","_content":"\n1.登陆\n<pre class=\"lang:default decode:true \">ssh 10.240.40.191</pre>\n2.连接数据库\n<pre class=\"lang:default decode:true\">db2 connect to 数据库名 user 用户名 using 密码</pre>\n3.查询\n<pre class=\"lang:default decode:true\">db2 \"slect * from 表名\"</pre>\n4.导出\n<pre class=\"lang:default decode:true\">db2 export to [文件名].ixf of ixf select * from [表名]</pre>\n5.导入\n<pre class=\"lang:default decode:true\">db2 import from [文件名].ixf of ixf insert into [表名]</pre>\n6.导出数据库-暂未验证\n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n7.断开\n<pre class=\"lang:default decode:true\">disconnect current</pre>\n8.查看数据库配置\n<pre class=\"lang:default decode:true\">get db cfg</pre>\n9.创建指定编码的数据库\n<pre class=\"lang:default decode:true\">create db SRCDB using codeset GBK territory CN</pre>\n10.创建型导入\n<pre class=\"lang:default decode:true\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</pre>\n11.db2修改表结构\n<pre class=\"lang:default decode:true\">alter table 表名 alter 字段 set data type 值类型（长度）</pre>\n12.增加索引&nbsp;\n<pre class=\"lang:default decode:true\">create index 索引名 on 表名 (字段名1,字段名2...)</pre>\n13.增加表字段\n<pre class=\"lang:default decode:true\">alter table 表名 add column 字段1 类型 add column 字段2 类型</pre>","source":"_posts/p28.md","raw":"---\ntitle: db2相关操作知识点积累及WINDOWS环境DB2连接远程数据库实例\nid: 209\ncategories:\n  - DB2\n  - 数据库\ndate: 2017-12-22 16:34:40\ntags: [db2, 数据库, sql]\n---\n\n1.登陆\n<pre class=\"lang:default decode:true \">ssh 10.240.40.191</pre>\n2.连接数据库\n<pre class=\"lang:default decode:true\">db2 connect to 数据库名 user 用户名 using 密码</pre>\n3.查询\n<pre class=\"lang:default decode:true\">db2 \"slect * from 表名\"</pre>\n4.导出\n<pre class=\"lang:default decode:true\">db2 export to [文件名].ixf of ixf select * from [表名]</pre>\n5.导入\n<pre class=\"lang:default decode:true\">db2 import from [文件名].ixf of ixf insert into [表名]</pre>\n6.导出数据库-暂未验证\n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n7.断开\n<pre class=\"lang:default decode:true\">disconnect current</pre>\n8.查看数据库配置\n<pre class=\"lang:default decode:true\">get db cfg</pre>\n9.创建指定编码的数据库\n<pre class=\"lang:default decode:true\">create db SRCDB using codeset GBK territory CN</pre>\n10.创建型导入\n<pre class=\"lang:default decode:true\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</pre>\n11.db2修改表结构\n<pre class=\"lang:default decode:true\">alter table 表名 alter 字段 set data type 值类型（长度）</pre>\n12.增加索引&nbsp;\n<pre class=\"lang:default decode:true\">create index 索引名 on 表名 (字段名1,字段名2...)</pre>\n13.增加表字段\n<pre class=\"lang:default decode:true\">alter table 表名 add column 字段1 类型 add column 字段2 类型</pre>","slug":"p28","published":1,"updated":"2018-03-22T06:59:21.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0w0018c8vg4cu9ndqn","content":"<p>1.登陆</p>\n<pre class=\"lang:default decode:true \">ssh 10.240.40.191</pre>\n2.连接数据库\n<pre class=\"lang:default decode:true\">db2 connect to 数据库名 user 用户名 using 密码</pre>\n3.查询\n<pre class=\"lang:default decode:true\">db2 \"slect * from 表名\"</pre>\n4.导出\n<pre class=\"lang:default decode:true\">db2 export to [文件名].ixf of ixf select * from [表名]</pre>\n5.导入\n<pre class=\"lang:default decode:true\">db2 import from [文件名].ixf of ixf insert into [表名]</pre>\n6.导出数据库-暂未验证\n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n7.断开\n<pre class=\"lang:default decode:true\">disconnect current</pre>\n8.查看数据库配置\n<pre class=\"lang:default decode:true\">get db cfg</pre>\n9.创建指定编码的数据库\n<pre class=\"lang:default decode:true\">create db SRCDB using codeset GBK territory CN</pre>\n10.创建型导入\n<pre class=\"lang:default decode:true\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</pre>\n11.db2修改表结构\n<pre class=\"lang:default decode:true\">alter table 表名 alter 字段 set data type 值类型（长度）</pre>\n12.增加索引&nbsp;\n<pre class=\"lang:default decode:true\">create index 索引名 on 表名 (字段名1,字段名2...)</pre>\n13.增加表字段\n<pre class=\"lang:default decode:true\">alter table 表名 add column 字段1 类型 add column 字段2 类型</pre>","site":{"data":{}},"excerpt":"","more":"<p>1.登陆</p>\n<pre class=\"lang:default decode:true \">ssh 10.240.40.191</pre>\n2.连接数据库\n<pre class=\"lang:default decode:true\">db2 connect to 数据库名 user 用户名 using 密码</pre>\n3.查询\n<pre class=\"lang:default decode:true\">db2 \"slect * from 表名\"</pre>\n4.导出\n<pre class=\"lang:default decode:true\">db2 export to [文件名].ixf of ixf select * from [表名]</pre>\n5.导入\n<pre class=\"lang:default decode:true\">db2 import from [文件名].ixf of ixf insert into [表名]</pre>\n6.导出数据库-暂未验证\n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n7.断开\n<pre class=\"lang:default decode:true\">disconnect current</pre>\n8.查看数据库配置\n<pre class=\"lang:default decode:true\">get db cfg</pre>\n9.创建指定编码的数据库\n<pre class=\"lang:default decode:true\">create db SRCDB using codeset GBK territory CN</pre>\n10.创建型导入\n<pre class=\"lang:default decode:true\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</pre>\n11.db2修改表结构\n<pre class=\"lang:default decode:true\">alter table 表名 alter 字段 set data type 值类型（长度）</pre>\n12.增加索引&nbsp;\n<pre class=\"lang:default decode:true\">create index 索引名 on 表名 (字段名1,字段名2...)</pre>\n13.增加表字段\n<pre class=\"lang:default decode:true\">alter table 表名 add column 字段1 类型 add column 字段2 类型</pre>"},{"title":"从SVN到GITLAB的搭建计划","id":"396","date":"2018-02-06T01:58:29.000Z","_content":"\n** 年度回顾**\n<span style=\"font-family: impact, sans-serif;\">今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。</span>\n\n&nbsp;\n\n**新年打气**\n新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）\n\n&nbsp;\n\n** 总体预期**\n通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。\n\n&nbsp;\n\n**详细计划**\n下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。\n&nbsp;\n\n\n\n\n- **SVN相关**\n\n1.安装jdk\n\n2.安装maven\n\n3.安装nexus\n\n4.安装jenkins\n\n5.安装SVN\n\n6.安装 SONAR\n\n7.配置jenkins+maven+SVN+SONAR_nexus\n\n&nbsp;\n\n- **GITLAB相关**\n\n1.完成SVN相关的安装\n\n2.安装gitlab\n\n3.先配置gitlab+jenkins\n\n4.目前知识面有限，实现到上面这一步时我再来更新下面的计划。\n\n----------\n\n&nbsp;\n\n期待自己的实现和后续的更新。。。\n\n&nbsp;\n\n![](/img/xjy/git0001.jpg)\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","source":"_posts/p27.md","raw":"---\ntitle: 从SVN到GITLAB的搭建计划\nid: 396\ncategories:\n  - 技术感悟\n  - 生活杂记\ndate: 2018-02-06 09:58:29\ntags: [svn, gitlab, 杂谈, 感悟]\n---\n\n** 年度回顾**\n<span style=\"font-family: impact, sans-serif;\">今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。</span>\n\n&nbsp;\n\n**新年打气**\n新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）\n\n&nbsp;\n\n** 总体预期**\n通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。\n\n&nbsp;\n\n**详细计划**\n下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。\n&nbsp;\n\n\n\n\n- **SVN相关**\n\n1.安装jdk\n\n2.安装maven\n\n3.安装nexus\n\n4.安装jenkins\n\n5.安装SVN\n\n6.安装 SONAR\n\n7.配置jenkins+maven+SVN+SONAR_nexus\n\n&nbsp;\n\n- **GITLAB相关**\n\n1.完成SVN相关的安装\n\n2.安装gitlab\n\n3.先配置gitlab+jenkins\n\n4.目前知识面有限，实现到上面这一步时我再来更新下面的计划。\n\n----------\n\n&nbsp;\n\n期待自己的实现和后续的更新。。。\n\n&nbsp;\n\n![](/img/xjy/git0001.jpg)\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;","slug":"p27","published":1,"updated":"2018-03-23T07:54:44.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0x001ac8vglg0xc83g","content":"<p><strong> 年度回顾</strong><br><span style=\"font-family: impact, sans-serif;\">今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。</span></p>\n<p>&nbsp;</p>\n<p><strong>新年打气</strong><br>新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）</p>\n<p>&nbsp;</p>\n<p><strong> 总体预期</strong><br>通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。</p>\n<p>&nbsp;</p>\n<p><strong>详细计划</strong><br>下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。<br>&nbsp;</p>\n<ul>\n<li><strong>SVN相关</strong></li>\n</ul>\n<p>1.安装jdk</p>\n<p>2.安装maven</p>\n<p>3.安装nexus</p>\n<p>4.安装jenkins</p>\n<p>5.安装SVN</p>\n<p>6.安装 SONAR</p>\n<p>7.配置jenkins+maven+SVN+SONAR_nexus</p>\n<p>&nbsp;</p>\n<ul>\n<li><strong>GITLAB相关</strong></li>\n</ul>\n<p>1.完成SVN相关的安装</p>\n<p>2.安装gitlab</p>\n<p>3.先配置gitlab+jenkins</p>\n<p>4.目前知识面有限，实现到上面这一步时我再来更新下面的计划。</p>\n<hr>\n<p>&nbsp;</p>\n<p>期待自己的实现和后续的更新。。。</p>\n<p>&nbsp;</p>\n<p><img src=\"/img/xjy/git0001.jpg\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong> 年度回顾</strong><br><span style=\"font-family: impact, sans-serif;\">今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。</span></p>\n<p>&nbsp;</p>\n<p><strong>新年打气</strong><br>新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）</p>\n<p>&nbsp;</p>\n<p><strong> 总体预期</strong><br>通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。</p>\n<p>&nbsp;</p>\n<p><strong>详细计划</strong><br>下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。<br>&nbsp;</p>\n<ul>\n<li><strong>SVN相关</strong></li>\n</ul>\n<p>1.安装jdk</p>\n<p>2.安装maven</p>\n<p>3.安装nexus</p>\n<p>4.安装jenkins</p>\n<p>5.安装SVN</p>\n<p>6.安装 SONAR</p>\n<p>7.配置jenkins+maven+SVN+SONAR_nexus</p>\n<p>&nbsp;</p>\n<ul>\n<li><strong>GITLAB相关</strong></li>\n</ul>\n<p>1.完成SVN相关的安装</p>\n<p>2.安装gitlab</p>\n<p>3.先配置gitlab+jenkins</p>\n<p>4.目前知识面有限，实现到上面这一步时我再来更新下面的计划。</p>\n<hr>\n<p>&nbsp;</p>\n<p>期待自己的实现和后续的更新。。。</p>\n<p>&nbsp;</p>\n<p><img src=\"/img/xjy/git0001.jpg\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"},{"title":"base64加解密图片（分别用java和python实现）","id":"227","date":"2018-01-04T03:22:48.000Z","_content":"\n**今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：** \n\n\n1.JAVA代码\n\n<pre class=\"prettyprint lang-java\">package com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n\t/**\n\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate String GetImageStr(String imgFilePath) {\n\t\tbyte[] data = null;\n\n\t\t// 读取图片字节数组\n\t\ttry {\n\t\t\tInputStream in = new FileInputStream(imgFilePath);\n\t\t\tdata = new byte[in.available()];\n\t\t\tin.read(data);\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// 对字节数组Base64编码\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\treturn encoder.encode(data);// 返回Base64编码过的字节数组字符串\n\t}\n\n\t/**\n\t * 对字符串进行Base64解码并生成图片\n\t * @param imgStr\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate boolean GenerateImage(String imgStr, String imgFilePath) {\n\t\tif (imgStr == null) // 图像数据为空\n\t\t\treturn false;\n\t\ttry {\n\t\t\t// Base64解码\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] bytes = decoder.decodeBuffer(imgStr);\n\t\t\tfor (int i = 0; i &lt; bytes.length; ++i) {\n\t\t\t\tif (bytes[i] &lt; 0) {// 调整异常数据\n\t\t\t\t\tbytes[i] += 256;\n\t\t\t\t}\n\t\t\t}\n\t\t\tOutputStream out = new FileOutputStream(imgFilePath);\n\t\t\tout.write(bytes);\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n</pre>\n\n2.python3代码\n\n<pre class=\"prettyprint lang-py\">#coding=utf-8\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n\n\t好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n\n<div>\n\n</div>\n","source":"_posts/p29.md","raw":"---\ntitle: base64加解密图片（分别用java和python实现）\nid: 227\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-01-04 11:22:48\ntags: [java, python, base64, 图片处理, 加密, 解密]\n---\n\n**今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：** \n\n\n1.JAVA代码\n\n<pre class=\"prettyprint lang-java\">package com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n\t/**\n\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate String GetImageStr(String imgFilePath) {\n\t\tbyte[] data = null;\n\n\t\t// 读取图片字节数组\n\t\ttry {\n\t\t\tInputStream in = new FileInputStream(imgFilePath);\n\t\t\tdata = new byte[in.available()];\n\t\t\tin.read(data);\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// 对字节数组Base64编码\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\treturn encoder.encode(data);// 返回Base64编码过的字节数组字符串\n\t}\n\n\t/**\n\t * 对字符串进行Base64解码并生成图片\n\t * @param imgStr\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate boolean GenerateImage(String imgStr, String imgFilePath) {\n\t\tif (imgStr == null) // 图像数据为空\n\t\t\treturn false;\n\t\ttry {\n\t\t\t// Base64解码\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] bytes = decoder.decodeBuffer(imgStr);\n\t\t\tfor (int i = 0; i &lt; bytes.length; ++i) {\n\t\t\t\tif (bytes[i] &lt; 0) {// 调整异常数据\n\t\t\t\t\tbytes[i] += 256;\n\t\t\t\t}\n\t\t\t}\n\t\t\tOutputStream out = new FileOutputStream(imgFilePath);\n\t\t\tout.write(bytes);\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n</pre>\n\n2.python3代码\n\n<pre class=\"prettyprint lang-py\">#coding=utf-8\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n\n\t好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n\n<div>\n\n</div>\n","slug":"p29","published":1,"updated":"2018-03-22T07:00:31.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h0z001ec8vgaeg5zv8b","content":"<p><strong>今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：</strong> </p>\n<p>1.JAVA代码</p>\n<pre class=\"prettyprint lang-java\">package com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n    /**\n     * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n     * @param imgFilePath\n     * @return\n     */\n    private String GetImageStr(String imgFilePath) {\n        byte[] data = null;\n\n        // 读取图片字节数组\n        try {\n            InputStream in = new FileInputStream(imgFilePath);\n            data = new byte[in.available()];\n            in.read(data);\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 对字节数组Base64编码\n        BASE64Encoder encoder = new BASE64Encoder();\n        return encoder.encode(data);// 返回Base64编码过的字节数组字符串\n    }\n\n    /**\n     * 对字符串进行Base64解码并生成图片\n     * @param imgStr\n     * @param imgFilePath\n     * @return\n     */\n    private boolean GenerateImage(String imgStr, String imgFilePath) {\n        if (imgStr == null) // 图像数据为空\n            return false;\n        try {\n            // Base64解码\n            BASE64Decoder decoder = new BASE64Decoder();\n            byte[] bytes = decoder.decodeBuffer(imgStr);\n            for (int i = 0; i &lt; bytes.length; ++i) {\n                if (bytes[i] &lt; 0) {// 调整异常数据\n                    bytes[i] += 256;\n                }\n            }\n            OutputStream out = new FileOutputStream(imgFilePath);\n            out.write(bytes);\n            out.flush();\n            out.close();\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n}\n</pre>\n\n<p>2.python3代码</p>\n<pre class=\"prettyprint lang-py\">#coding=utf-8\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n\n<pre><code>好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n</code></pre><div><br><br></div>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：</strong> </p>\n<p>1.JAVA代码</p>\n<pre class=\"prettyprint lang-java\">package com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n    /**\n     * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n     * @param imgFilePath\n     * @return\n     */\n    private String GetImageStr(String imgFilePath) {\n        byte[] data = null;\n\n        // 读取图片字节数组\n        try {\n            InputStream in = new FileInputStream(imgFilePath);\n            data = new byte[in.available()];\n            in.read(data);\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // 对字节数组Base64编码\n        BASE64Encoder encoder = new BASE64Encoder();\n        return encoder.encode(data);// 返回Base64编码过的字节数组字符串\n    }\n\n    /**\n     * 对字符串进行Base64解码并生成图片\n     * @param imgStr\n     * @param imgFilePath\n     * @return\n     */\n    private boolean GenerateImage(String imgStr, String imgFilePath) {\n        if (imgStr == null) // 图像数据为空\n            return false;\n        try {\n            // Base64解码\n            BASE64Decoder decoder = new BASE64Decoder();\n            byte[] bytes = decoder.decodeBuffer(imgStr);\n            for (int i = 0; i &lt; bytes.length; ++i) {\n                if (bytes[i] &lt; 0) {// 调整异常数据\n                    bytes[i] += 256;\n                }\n            }\n            OutputStream out = new FileOutputStream(imgFilePath);\n            out.write(bytes);\n            out.flush();\n            out.close();\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n}\n</pre>\n\n<p>2.python3代码</p>\n<pre class=\"prettyprint lang-py\">#coding=utf-8\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n\n<pre><code>好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n</code></pre><div><br><br></div>\n"},{"title":"sql中有关联的两个表,怎么查出一个表中没有对应到另一个表的数据?","id":"448","date":"2018-02-28T10:01:13.000Z","_content":"\n<pre class=\"lang:sh decode:true\">假定通过id字段关联\n1)\nselect *\nfrom A\nwhere id not in (select id from B)\n\n2)\nselect A.*\nfrom A LEFT JOIN B ON A.id = B.ID\nWHERE B.ID IS NULL</pre>\n转载至：[https://zhidao.baidu.com/question/347051067.html](https://zhidao.baidu.com/question/347051067.html)\n\n延伸搜索在JPAQUERY的实现结果：\n\n第1种方法在JPAQUERY没法简单实现\n\n第2种方法JPAQUERY3.0以上的版本才支持.on","source":"_posts/p3.md","raw":"---\ntitle: 'sql中有关联的两个表,怎么查出一个表中没有对应到另一个表的数据?'\nid: 448\ncategories:\n  - DB2\n  - 数据库\n  - 未分类\ndate: 2018-02-28 18:01:13\ntags: [db2, 数据库, sql] \n---\n\n<pre class=\"lang:sh decode:true\">假定通过id字段关联\n1)\nselect *\nfrom A\nwhere id not in (select id from B)\n\n2)\nselect A.*\nfrom A LEFT JOIN B ON A.id = B.ID\nWHERE B.ID IS NULL</pre>\n转载至：[https://zhidao.baidu.com/question/347051067.html](https://zhidao.baidu.com/question/347051067.html)\n\n延伸搜索在JPAQUERY的实现结果：\n\n第1种方法在JPAQUERY没法简单实现\n\n第2种方法JPAQUERY3.0以上的版本才支持.on","slug":"p3","published":1,"updated":"2018-03-22T06:04:25.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h11001hc8vgs4ioom1y","content":"<p><pre class=\"lang:sh decode:true\">假定通过id字段关联<br>1)<br>select *<br>from A<br>where id not in (select id from B)</pre></p>\n<p>2)<br>select A.*<br>from A LEFT JOIN B ON A.id = B.ID<br>WHERE B.ID IS NULL<br>转载至：<a href=\"https://zhidao.baidu.com/question/347051067.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/347051067.html</a></p>\n<p>延伸搜索在JPAQUERY的实现结果：</p>\n<p>第1种方法在JPAQUERY没法简单实现</p>\n<p>第2种方法JPAQUERY3.0以上的版本才支持.on</p>\n","site":{"data":{}},"excerpt":"","more":"<p><pre class=\"lang:sh decode:true\">假定通过id字段关联<br>1)<br>select *<br>from A<br>where id not in (select id from B)</pre></p>\n<p>2)<br>select A.*<br>from A LEFT JOIN B ON A.id = B.ID<br>WHERE B.ID IS NULL<br>转载至：<a href=\"https://zhidao.baidu.com/question/347051067.html\" target=\"_blank\" rel=\"noopener\">https://zhidao.baidu.com/question/347051067.html</a></p>\n<p>延伸搜索在JPAQUERY的实现结果：</p>\n<p>第1种方法在JPAQUERY没法简单实现</p>\n<p>第2种方法JPAQUERY3.0以上的版本才支持.on</p>\n"},{"title":"用python测试连接rabbitmq的简单通讯","id":"303","date":"2018-01-08T07:06:12.000Z","_content":"\n**环境:**&nbsp;\n\nwindows&nbsp;\n\nerlang-otp_win64_17.0.&nbsp;\n\nrabbitmq 3.5.6&nbsp;\n\nPython 3.6.1\n\n**步骤：**\n\n1.erlang和rabbitmq安装，可以参考&nbsp;\n\n2.安装pika\n\n<pre class=\"prettyprint lang-py\">打开命令行，执行：pip install pika</pre>\n<span style=\"color:#3F3F3F;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">3.编写消费者receive.py</span> \n\n<pre class=\"prettyprint lang-py\">import pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()</pre>\n4.编写生产者send.py\n\n<pre class=\"prettyprint lang-py\">import pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n\n5.执行py脚本，结果如下：\n\n![](/img/xjy/rab0001.png)","source":"_posts/p30.md","raw":"---\ntitle: 用python测试连接rabbitmq的简单通讯\nid: 303\ncategories:\n  - rabbitmq学习\ndate: 2018-01-08 15:06:12\ntags: [rabbitmq, python]\n---\n\n**环境:**&nbsp;\n\nwindows&nbsp;\n\nerlang-otp_win64_17.0.&nbsp;\n\nrabbitmq 3.5.6&nbsp;\n\nPython 3.6.1\n\n**步骤：**\n\n1.erlang和rabbitmq安装，可以参考&nbsp;\n\n2.安装pika\n\n<pre class=\"prettyprint lang-py\">打开命令行，执行：pip install pika</pre>\n<span style=\"color:#3F3F3F;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">3.编写消费者receive.py</span> \n\n<pre class=\"prettyprint lang-py\">import pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()</pre>\n4.编写生产者send.py\n\n<pre class=\"prettyprint lang-py\">import pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n\n5.执行py脚本，结果如下：\n\n![](/img/xjy/rab0001.png)","slug":"p30","published":1,"updated":"2018-03-23T08:03:51.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h13001mc8vg4aqlmnxn","content":"<p><strong>环境:</strong>&nbsp;</p>\n<p>windows&nbsp;</p>\n<p>erlang-otp_win64_17.0.&nbsp;</p>\n<p>rabbitmq 3.5.6&nbsp;</p>\n<p>Python 3.6.1</p>\n<p><strong>步骤：</strong></p>\n<p>1.erlang和rabbitmq安装，可以参考&nbsp;</p>\n<p>2.安装pika</p>\n<pre class=\"prettyprint lang-py\">打开命令行，执行：pip install pika</pre>\n<span style=\"color:#3F3F3F;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">3.编写消费者receive.py</span> \n\n<pre class=\"prettyprint lang-py\">import pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()</pre>\n4.编写生产者send.py\n\n<pre class=\"prettyprint lang-py\">import pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n\n<p>5.执行py脚本，结果如下：</p>\n<p><img src=\"/img/xjy/rab0001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>环境:</strong>&nbsp;</p>\n<p>windows&nbsp;</p>\n<p>erlang-otp_win64_17.0.&nbsp;</p>\n<p>rabbitmq 3.5.6&nbsp;</p>\n<p>Python 3.6.1</p>\n<p><strong>步骤：</strong></p>\n<p>1.erlang和rabbitmq安装，可以参考&nbsp;</p>\n<p>2.安装pika</p>\n<pre class=\"prettyprint lang-py\">打开命令行，执行：pip install pika</pre>\n<span style=\"color:#3F3F3F;font-family:&quot;font-size:16px;background-color:#FFFFFF;\">3.编写消费者receive.py</span> \n\n<pre class=\"prettyprint lang-py\">import pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()</pre>\n4.编写生产者send.py\n\n<pre class=\"prettyprint lang-py\">import pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n\n<p>5.执行py脚本，结果如下：</p>\n<p><img src=\"/img/xjy/rab0001.png\" alt=\"\"></p>\n"},{"title":"替换hexo的markdown渲染引擎","id":"379","date":"2018-04-19T10:22:21.000Z","_content":"\n**介绍：** \n\n由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： \n\n1. Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) \n2. hexo-renderer-markdown-it，支持 CommonMark 标准\n3. hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）\n\n**更换方法:**\n \n把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it\n\n","source":"_posts/p32.md","raw":"---\ntitle: 替换hexo的markdown渲染引擎\nid: 379\ncategories:\n  - markdown\ndate: 2018/4/19 18:22:21  \ntags: [markdown]\n---\n\n**介绍：** \n\n由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： \n\n1. Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) \n2. hexo-renderer-markdown-it，支持 CommonMark 标准\n3. hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）\n\n**更换方法:**\n \n把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it\n\n","slug":"p32","published":1,"updated":"2018-04-19T10:22:28.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h14001nc8vgoii8xeeh","content":"<p><strong>介绍：</strong> </p>\n<p>由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： </p>\n<ol>\n<li>Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) </li>\n<li>hexo-renderer-markdown-it，支持 CommonMark 标准</li>\n<li>hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）</li>\n</ol>\n<p><strong>更换方法:</strong></p>\n<p>把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>介绍：</strong> </p>\n<p>由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： </p>\n<ol>\n<li>Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) </li>\n<li>hexo-renderer-markdown-it，支持 CommonMark 标准</li>\n<li>hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）</li>\n</ol>\n<p><strong>更换方法:</strong></p>\n<p>把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it</p>\n"},{"title":"1代树莓派改造","id":"379","date":"2018-02-04T17:29:56.000Z","toc":true,"_content":"\n**把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！** \n\n1.安装usb无线网卡,\n\n（1）进入图形界面，用wifi config扫描到wifi信号，连接后保存配置\n\n（2）执行下面命令加入auto wlan0\n\n（3）重启即可开机自连上面的无线信号\n\n<pre class=\"prettyprint lang-js\">vi /etc/network/interface</pre>\n\n2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除\n\n<pre class=\"prettyprint lang-js\">vi /etc/wpa_supplicant/wpa_supplicant.conf</pre>\n\n3.更新源\n\n<pre class=\"prettyprint lang-js\">sudo view /etc/apt/sources.list\nsudo apt-get update</pre>\n\n4.安装远程桌面\n<pre class=\"prettyprint lang-js\">sudo apt-get install xrdp</pre>\n\n5.开启摄像头、I2C支持\n\n<pre class=\"prettyprint lang-js\">sudo raspi-config</pre>\n\n6.加入crontab任务\n\n<pre class=\"prettyprint lang-js\">sudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp;</pre>\n\n7.报出“ImportError: No module named smbus”的错误,解决办法 \n\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-smbus </pre>\n\n8.报出“ImportError: No module named RPi.GPIO”的错误\n \n\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO</pre>\n\n9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip\n\n<pre class=\"prettyprint lang-js\">#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus</pre>\n\n10.如果还不行，说明还要额外启用I2C一系列操作，可参考[http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html](http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html)\n ","source":"_posts/p31.md","raw":"---\ntitle: 1代树莓派改造\nid: 379\ncategories:\n  - 树莓派学习\ndate: 2018-02-05 01:29:56\ntags: [树莓派, python, wlan]\ntoc: true\n---\n\n**把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！** \n\n1.安装usb无线网卡,\n\n（1）进入图形界面，用wifi config扫描到wifi信号，连接后保存配置\n\n（2）执行下面命令加入auto wlan0\n\n（3）重启即可开机自连上面的无线信号\n\n<pre class=\"prettyprint lang-js\">vi /etc/network/interface</pre>\n\n2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除\n\n<pre class=\"prettyprint lang-js\">vi /etc/wpa_supplicant/wpa_supplicant.conf</pre>\n\n3.更新源\n\n<pre class=\"prettyprint lang-js\">sudo view /etc/apt/sources.list\nsudo apt-get update</pre>\n\n4.安装远程桌面\n<pre class=\"prettyprint lang-js\">sudo apt-get install xrdp</pre>\n\n5.开启摄像头、I2C支持\n\n<pre class=\"prettyprint lang-js\">sudo raspi-config</pre>\n\n6.加入crontab任务\n\n<pre class=\"prettyprint lang-js\">sudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp;</pre>\n\n7.报出“ImportError: No module named smbus”的错误,解决办法 \n\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-smbus </pre>\n\n8.报出“ImportError: No module named RPi.GPIO”的错误\n \n\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO</pre>\n\n9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip\n\n<pre class=\"prettyprint lang-js\">#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus</pre>\n\n10.如果还不行，说明还要额外启用I2C一系列操作，可参考[http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html](http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html)\n ","slug":"p31","published":1,"updated":"2018-04-28T01:51:03.596Z","_id":"cjg7r8h16001rc8vg17b4o5m4","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！</strong> </p>\n<p>1.安装usb无线网卡,</p>\n<p>（1）进入图形界面，用wifi config扫描到wifi信号，连接后保存配置</p>\n<p>（2）执行下面命令加入auto wlan0</p>\n<p>（3）重启即可开机自连上面的无线信号</p>\n<pre class=\"prettyprint lang-js\">vi /etc/network/interface</pre>\n\n<p>2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除</p>\n<pre class=\"prettyprint lang-js\">vi /etc/wpa_supplicant/wpa_supplicant.conf</pre>\n\n<p>3.更新源</p>\n<pre class=\"prettyprint lang-js\">sudo view /etc/apt/sources.list\nsudo apt-get update</pre>\n\n<p>4.安装远程桌面</p>\n<pre class=\"prettyprint lang-js\">sudo apt-get install xrdp</pre>\n\n<p>5.开启摄像头、I2C支持</p>\n<pre class=\"prettyprint lang-js\">sudo raspi-config</pre>\n\n<p>6.加入crontab任务</p>\n<pre class=\"prettyprint lang-js\">sudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp;</pre>\n\n<p>7.报出“ImportError: No module named smbus”的错误,解决办法 </p>\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-smbus </pre>\n\n<p>8.报出“ImportError: No module named RPi.GPIO”的错误</p>\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO</pre>\n\n<p>9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip</p>\n<pre class=\"prettyprint lang-js\">#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus</pre>\n\n<p>10.如果还不行，说明还要额外启用I2C一系列操作，可参考<a href=\"http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！</strong> </p>\n<p>1.安装usb无线网卡,</p>\n<p>（1）进入图形界面，用wifi config扫描到wifi信号，连接后保存配置</p>\n<p>（2）执行下面命令加入auto wlan0</p>\n<p>（3）重启即可开机自连上面的无线信号</p>\n<pre class=\"prettyprint lang-js\">vi /etc/network/interface</pre>\n\n<p>2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除</p>\n<pre class=\"prettyprint lang-js\">vi /etc/wpa_supplicant/wpa_supplicant.conf</pre>\n\n<p>3.更新源</p>\n<pre class=\"prettyprint lang-js\">sudo view /etc/apt/sources.list\nsudo apt-get update</pre>\n\n<p>4.安装远程桌面</p>\n<pre class=\"prettyprint lang-js\">sudo apt-get install xrdp</pre>\n\n<p>5.开启摄像头、I2C支持</p>\n<pre class=\"prettyprint lang-js\">sudo raspi-config</pre>\n\n<p>6.加入crontab任务</p>\n<pre class=\"prettyprint lang-js\">sudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp;</pre>\n\n<p>7.报出“ImportError: No module named smbus”的错误,解决办法 </p>\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-smbus </pre>\n\n<p>8.报出“ImportError: No module named RPi.GPIO”的错误</p>\n<pre class=\"prettyprint lang-js\">sudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO</pre>\n\n<p>9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip</p>\n<pre class=\"prettyprint lang-js\">#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus</pre>\n\n<p>10.如果还不行，说明还要额外启用I2C一系列操作，可参考<a href=\"http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html</a></p>\n"},{"title":"常用markdown标签(来自强哥的markdown教程)","date":"2018-04-19T10:46:40.000Z","toc":true,"_content":"#强哥的教程源码：#\n---\n---\n---\n<pre>\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项1\n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n}\n```\n\n```bash\necho \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为\n</pre>\n \n#教程显示效果：#\n---\n---\n---\n\n\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项\n >fsf \n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n}\n```\n\n```bash\necho \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为","source":"_posts/p33.md","raw":"---\n\ntitle: 常用markdown标签(来自强哥的markdown教程)\ndate: 2018/4/19 18:46:40  \ntags: [markdown]\ntoc: true\n\n---\n#强哥的教程源码：#\n---\n---\n---\n<pre>\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项1\n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n}\n```\n\n```bash\necho \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为\n</pre>\n \n#教程显示效果：#\n---\n---\n---\n\n\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项\n >fsf \n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n}\n```\n\n```bash\necho \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为","slug":"p33","published":1,"updated":"2018-04-28T01:52:51.419Z","_id":"cjg7r8h19001uc8vgzmyc5p0z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"强哥的教程源码：\"><a href=\"#强哥的教程源码：\" class=\"headerlink\" title=\"#强哥的教程源码：#\"></a>#强哥的教程源码：#</h2><hr>\n<hr>\n<pre>\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项1\n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xx</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String haha;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为\n</pre>\n\n<h2 id=\"教程显示效果：\"><a href=\"#教程显示效果：\" class=\"headerlink\" title=\"#教程显示效果：#\"></a>#教程显示效果：#</h2><hr>\n<hr>\n<h1 id=\"原理分离\"><a href=\"#原理分离\" class=\"headerlink\" title=\"原理分离\"></a>原理分离</h1><h1 id=\"markdown实例讲解\"><a href=\"#markdown实例讲解\" class=\"headerlink\" title=\"markdown实例讲解\"></a>markdown实例讲解</h1><h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p><strong>粗体</strong><br><em>斜体</em><br><del>删除线</del><br>++下划线++  </p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>有序列表：</strong></p>\n<ol>\n<li>有序列表项<blockquote>\n<p>fsf </p>\n</blockquote>\n</li>\n<li>有序列表项2</li>\n<li>有序列表项3</li>\n</ol>\n<p><strong>无序列表：</strong></p>\n<ul>\n<li>无序列表项1</li>\n<li>无序列表项2</li>\n<li>无序列表项3</li>\n</ul>\n<p><strong>任务列表：</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项1</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 任务列表项2xzzxxxx\\\\\\\\\\</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项3</li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><h3 id=\"段落中的引用\"><a href=\"#段落中的引用\" class=\"headerlink\" title=\"段落中的引用\"></a>段落中的引用</h3><p>段落中的<code>引用</code>，</p>\n<hr>\n<h3 id=\"代码的引用\"><a href=\"#代码的引用\" class=\"headerlink\" title=\"代码的引用\"></a>代码的引用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xx</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String haha;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row 1 col 1</td>\n<td>row 1 col 2</td>\n</tr>\n<tr>\n<td>row 2 col 1</td>\n<td>row 2 col 2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h2><p><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">youdao</a><br><img src=\"http://note.youdao.com/favicon.ico\" alt=\"image\"></p>\n<h2 id=\"引用-1\"><a href=\"#引用-1\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>张晓斌说他很帅</p>\n</blockquote>\n<p>我们不这么认为</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"强哥的教程源码：\"><a href=\"#强哥的教程源码：\" class=\"headerlink\" title=\"#强哥的教程源码：#\"></a>#强哥的教程源码：#</h2><hr>\n<hr>\n<pre>\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项1\n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xx</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String haha;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为\n</pre>\n\n<h2 id=\"教程显示效果：\"><a href=\"#教程显示效果：\" class=\"headerlink\" title=\"#教程显示效果：#\"></a>#教程显示效果：#</h2><hr>\n<hr>\n<h1 id=\"原理分离\"><a href=\"#原理分离\" class=\"headerlink\" title=\"原理分离\"></a>原理分离</h1><h1 id=\"markdown实例讲解\"><a href=\"#markdown实例讲解\" class=\"headerlink\" title=\"markdown实例讲解\"></a>markdown实例讲解</h1><h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p><strong>粗体</strong><br><em>斜体</em><br><del>删除线</del><br>++下划线++  </p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>有序列表：</strong></p>\n<ol>\n<li>有序列表项<blockquote>\n<p>fsf </p>\n</blockquote>\n</li>\n<li>有序列表项2</li>\n<li>有序列表项3</li>\n</ol>\n<p><strong>无序列表：</strong></p>\n<ul>\n<li>无序列表项1</li>\n<li>无序列表项2</li>\n<li>无序列表项3</li>\n</ul>\n<p><strong>任务列表：</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项1</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 任务列表项2xzzxxxx\\\\\\\\\\</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项3</li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><h3 id=\"段落中的引用\"><a href=\"#段落中的引用\" class=\"headerlink\" title=\"段落中的引用\"></a>段落中的引用</h3><p>段落中的<code>引用</code>，</p>\n<hr>\n<h3 id=\"代码的引用\"><a href=\"#代码的引用\" class=\"headerlink\" title=\"代码的引用\"></a>代码的引用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xx</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String haha;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row 1 col 1</td>\n<td>row 1 col 2</td>\n</tr>\n<tr>\n<td>row 2 col 1</td>\n<td>row 2 col 2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h2><p><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">youdao</a><br><img src=\"http://note.youdao.com/favicon.ico\" alt=\"image\"></p>\n<h2 id=\"引用-1\"><a href=\"#引用-1\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>张晓斌说他很帅</p>\n</blockquote>\n<p>我们不这么认为</p>\n"},{"title":"TypeError: exchange_declare() got an unexpected keyword argument 'type'的解决办法","id":"300","date":"2018-01-08T06:59:25.000Z","_content":"\n在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。\n\n*   **原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：**\n\n\t源代码：\n\n<pre class=\"prettyprint lang-py\">#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming()</pre>\n\n报错如下：\n\n<pre class=\"prettyprint lang-py\">File \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'</pre>\n\n修改如下：</span>\n\n<pre class=\"prettyprint lang-py\">channel.exchange_declare(exchange='logs', exchange_type='fanout')</pre>\n\n</span>","source":"_posts/p4.md","raw":"---\ntitle: 'TypeError: exchange_declare() got an unexpected keyword argument ''type''的解决办法'\nid: 300\ncategories:\n  - rabbitmq学习\ndate: 2018-01-08 14:59:25\ntags: [rabbitmq, 错误解决]\n---\n\n在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。\n\n*   **原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：**\n\n\t源代码：\n\n<pre class=\"prettyprint lang-py\">#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming()</pre>\n\n报错如下：\n\n<pre class=\"prettyprint lang-py\">File \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'</pre>\n\n修改如下：</span>\n\n<pre class=\"prettyprint lang-py\">channel.exchange_declare(exchange='logs', exchange_type='fanout')</pre>\n\n</span>","slug":"p4","published":1,"updated":"2018-03-22T06:39:38.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h1c001zc8vguui8y9ep","content":"<p>在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。</p>\n<ul>\n<li><p><strong>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：</strong></p>\n<p>源代码：</p>\n</li>\n</ul>\n<pre class=\"prettyprint lang-py\">#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming()</pre>\n\n<p>报错如下：</p>\n<pre class=\"prettyprint lang-py\">File \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'</pre>\n\n<p>修改如下：</p>\n<pre class=\"prettyprint lang-py\">channel.exchange_declare(exchange='logs', exchange_type='fanout')</pre>\n\n<p></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。</p>\n<ul>\n<li><p><strong>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：</strong></p>\n<p>源代码：</p>\n</li>\n</ul>\n<pre class=\"prettyprint lang-py\">#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming()</pre>\n\n<p>报错如下：</p>\n<pre class=\"prettyprint lang-py\">File \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'</pre>\n\n<p>修改如下：</p>\n<pre class=\"prettyprint lang-py\">channel.exchange_declare(exchange='logs', exchange_type='fanout')</pre>\n\n<p></p>\n"},{"title":"vps+github上安装hexo next个人博客网站","id":"463","date":"2018-03-18T07:41:42.000Z","_content":"\n本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。\n\n**参考链接1：**[https://www.jianshu.com/p/0823e387c019](https://www.jianshu.com/p/0823e387c019)\n\n**参考链接2：**[https://www.jianshu.com/p/31eb5c754c01](https://www.jianshu.com/p/31eb5c754c01)\n\n**参考链接3：**[https://segmentfault.com/a/1190000010680022](https://segmentfault.com/a/1190000010680022)\n\n&nbsp;\n\n**环境**\n\n远程环境1：安装centos系统的搬瓦工VPS\n\n远程环境2：在github.com中登录的账号\n\n软件：nodeJs、git、nginx、hexo\n\n&nbsp;\n\n**步骤**\n\n1.vps上安装nodejs\n(我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误)\n<pre>\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n</pre>\n\n2.vps上安装git和nginx（这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试）\n<pre>yum -y update yum install -y git nginx</pre>\n\n3.vps上安装hexo\n<pre>\n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n</pre>\n\n4.vps上生成ssh秘钥，后面会在github上使用\n<pre>\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n</pre>\n\n5.新建远程github项目\n\n（1）在[github.com](http://github.com)登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io   <span style=\"color: #ff0000;\">（其中用户名为你github的账户名）</span>_\n\n（2）将第4步生成的公钥复制并配置到你的github中，[https://github.com/settings/ssh](https://github.com/settings/ssh)     _<span style=\"color: #ff0000;\">(界面里选择Add An SSH Key进入)</span>_\n\n（3）将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：git@github.com:账户名/账户名.github.io.git）_</span>\n\n6.vps上配置hexo\n\n<pre>\n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n</pre>\n\n7.vps上配置git\n<pre title=\"配置git\" class=\"lang:sh decode:true\">#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n</pre>\n\n8.vps配置nginx\n<pre class=\"lang:sh decode:true\">#找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置\n\n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}</pre>\n\n9.上面一切就绪，可以编译生成网站文件并上传github了\n<pre class=\"lang:sh decode:true\">#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d</pre>\n\n10.通过github结尾的网址访问：账户名.github.io，例如我的[https://xiajunyi.github.io/](https://xiajunyi.github.io/)，第一次进入后的界面还是很清爽的。\n\n![](/img/xjy/hexoSimple1.jpg)\n\n11.当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，[http://hexo.xiajunyi.com/](http://hexo.xiajunyi.com/)，别忘了启动nginx哦！\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n12.下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。","source":"_posts/p5.md","raw":"---\ntitle: vps+github上安装hexo next个人博客网站\nid: 463\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-03-18 15:41:42\ntags: [wordpress, hexo, github, 博客]\n---\n\n本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。\n\n**参考链接1：**[https://www.jianshu.com/p/0823e387c019](https://www.jianshu.com/p/0823e387c019)\n\n**参考链接2：**[https://www.jianshu.com/p/31eb5c754c01](https://www.jianshu.com/p/31eb5c754c01)\n\n**参考链接3：**[https://segmentfault.com/a/1190000010680022](https://segmentfault.com/a/1190000010680022)\n\n&nbsp;\n\n**环境**\n\n远程环境1：安装centos系统的搬瓦工VPS\n\n远程环境2：在github.com中登录的账号\n\n软件：nodeJs、git、nginx、hexo\n\n&nbsp;\n\n**步骤**\n\n1.vps上安装nodejs\n(我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误)\n<pre>\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n</pre>\n\n2.vps上安装git和nginx（这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试）\n<pre>yum -y update yum install -y git nginx</pre>\n\n3.vps上安装hexo\n<pre>\n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n</pre>\n\n4.vps上生成ssh秘钥，后面会在github上使用\n<pre>\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n</pre>\n\n5.新建远程github项目\n\n（1）在[github.com](http://github.com)登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io   <span style=\"color: #ff0000;\">（其中用户名为你github的账户名）</span>_\n\n（2）将第4步生成的公钥复制并配置到你的github中，[https://github.com/settings/ssh](https://github.com/settings/ssh)     _<span style=\"color: #ff0000;\">(界面里选择Add An SSH Key进入)</span>_\n\n（3）将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：git@github.com:账户名/账户名.github.io.git）_</span>\n\n6.vps上配置hexo\n\n<pre>\n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n</pre>\n\n7.vps上配置git\n<pre title=\"配置git\" class=\"lang:sh decode:true\">#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n</pre>\n\n8.vps配置nginx\n<pre class=\"lang:sh decode:true\">#找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置\n\n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}</pre>\n\n9.上面一切就绪，可以编译生成网站文件并上传github了\n<pre class=\"lang:sh decode:true\">#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d</pre>\n\n10.通过github结尾的网址访问：账户名.github.io，例如我的[https://xiajunyi.github.io/](https://xiajunyi.github.io/)，第一次进入后的界面还是很清爽的。\n\n![](/img/xjy/hexoSimple1.jpg)\n\n11.当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，[http://hexo.xiajunyi.com/](http://hexo.xiajunyi.com/)，别忘了启动nginx哦！\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n12.下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。","slug":"p5","published":1,"updated":"2018-03-23T06:30:44.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h1d0021c8vgb5nwedl6","content":"<p>本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。</p>\n<p><strong>参考链接1：</strong><a href=\"https://www.jianshu.com/p/0823e387c019\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0823e387c019</a></p>\n<p><strong>参考链接2：</strong><a href=\"https://www.jianshu.com/p/31eb5c754c01\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/31eb5c754c01</a></p>\n<p><strong>参考链接3：</strong><a href=\"https://segmentfault.com/a/1190000010680022\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010680022</a></p>\n<p>&nbsp;</p>\n<p><strong>环境</strong></p>\n<p>远程环境1：安装centos系统的搬瓦工VPS</p>\n<p>远程环境2：在github.com中登录的账号</p>\n<p>软件：nodeJs、git、nginx、hexo</p>\n<p>&nbsp;</p>\n<p><strong>步骤</strong></p>\n<p>1.vps上安装nodejs<br>(我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误)</p>\n<pre>\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n</pre>\n\n<p>2.vps上安装git和nginx（这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试）</p>\n<pre>yum -y update yum install -y git nginx</pre>\n\n<p>3.vps上安装hexo</p>\n<pre>\n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n</pre>\n\n<p>4.vps上生成ssh秘钥，后面会在github上使用</p>\n<pre>\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n</pre>\n\n<p>5.新建远程github项目</p>\n<p>（1）在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>登录你的账户，新建一个github项目,项目名一定要设成：<em>账户名.github.io   <span style=\"color: #ff0000;\">（其中用户名为你github的账户名）</span></em></p>\n<p>（2）将第4步生成的公钥复制并配置到你的github中，<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh</a>     <em><span style=\"color: #ff0000;\">(界面里选择Add An SSH Key进入)</span></em></p>\n<p>（3）将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\"><em>（例如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:账户名/账户名.github.io.git）</em></span></p>\n<p>6.vps上配置hexo</p>\n<pre>\n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n</pre>\n\n<p>7.vps上配置git</p>\n<pre title=\"配置git\" class=\"lang:sh decode:true\">#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n</pre>\n\n<p>8.vps配置nginx</p>\n<pre class=\"lang:sh decode:true\">#找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置\n\n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}</pre>\n\n<p>9.上面一切就绪，可以编译生成网站文件并上传github了</p>\n<pre class=\"lang:sh decode:true\">#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d</pre>\n\n<p>10.通过github结尾的网址访问：账户名.github.io，例如我的<a href=\"https://xiajunyi.github.io/\" target=\"_blank\" rel=\"noopener\">https://xiajunyi.github.io/</a>，第一次进入后的界面还是很清爽的。</p>\n<p><img src=\"/img/xjy/hexoSimple1.jpg\" alt=\"\"></p>\n<p>11.当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，<a href=\"http://hexo.xiajunyi.com/\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/</a>，别忘了启动nginx哦！</p>\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n<p>12.下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。</p>\n<p><strong>参考链接1：</strong><a href=\"https://www.jianshu.com/p/0823e387c019\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0823e387c019</a></p>\n<p><strong>参考链接2：</strong><a href=\"https://www.jianshu.com/p/31eb5c754c01\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/31eb5c754c01</a></p>\n<p><strong>参考链接3：</strong><a href=\"https://segmentfault.com/a/1190000010680022\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010680022</a></p>\n<p>&nbsp;</p>\n<p><strong>环境</strong></p>\n<p>远程环境1：安装centos系统的搬瓦工VPS</p>\n<p>远程环境2：在github.com中登录的账号</p>\n<p>软件：nodeJs、git、nginx、hexo</p>\n<p>&nbsp;</p>\n<p><strong>步骤</strong></p>\n<p>1.vps上安装nodejs<br>(我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误)</p>\n<pre>\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n</pre>\n\n<p>2.vps上安装git和nginx（这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试）</p>\n<pre>yum -y update yum install -y git nginx</pre>\n\n<p>3.vps上安装hexo</p>\n<pre>\n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n</pre>\n\n<p>4.vps上生成ssh秘钥，后面会在github上使用</p>\n<pre>\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n</pre>\n\n<p>5.新建远程github项目</p>\n<p>（1）在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>登录你的账户，新建一个github项目,项目名一定要设成：<em>账户名.github.io   <span style=\"color: #ff0000;\">（其中用户名为你github的账户名）</span></em></p>\n<p>（2）将第4步生成的公钥复制并配置到你的github中，<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh</a>     <em><span style=\"color: #ff0000;\">(界面里选择Add An SSH Key进入)</span></em></p>\n<p>（3）将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\"><em>（例如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:账户名/账户名.github.io.git）</em></span></p>\n<p>6.vps上配置hexo</p>\n<pre>\n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n</pre>\n\n<p>7.vps上配置git</p>\n<pre title=\"配置git\" class=\"lang:sh decode:true\">#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n</pre>\n\n<p>8.vps配置nginx</p>\n<pre class=\"lang:sh decode:true\">#找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置\n\n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}</pre>\n\n<p>9.上面一切就绪，可以编译生成网站文件并上传github了</p>\n<pre class=\"lang:sh decode:true\">#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d</pre>\n\n<p>10.通过github结尾的网址访问：账户名.github.io，例如我的<a href=\"https://xiajunyi.github.io/\" target=\"_blank\" rel=\"noopener\">https://xiajunyi.github.io/</a>，第一次进入后的界面还是很清爽的。</p>\n<p><img src=\"/img/xjy/hexoSimple1.jpg\" alt=\"\"></p>\n<p>11.当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，<a href=\"http://hexo.xiajunyi.com/\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/</a>，别忘了启动nginx哦！</p>\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n<p>12.下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。</p>\n"},{"title":"wordpress文章迁移到hexo next及主题美化","id":"474","date":"2018-03-18T09:10:01.000Z","_content":"\n1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件\n\n2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/\n\n3.安装迁移插件\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save</pre>\n4.执行迁移\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名</pre>\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n6.好了，可以访问网站中文章的变化啦！\n\n![](/img/xjy/hexoSimple2.jpg)\n\n7.后续对主题的跟换和具体网站的美化，可参考[http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n\n8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n（下面以改成yilia主题为例）\n<pre class=\"lang:sh decode:true\">#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d</pre>\n\n9.可以看下效果变化啦，欢迎访问[http://hexo.xiajunyi.com](http://hexo.xiajunyi.com)\n\n![](/img/xjy/hexoSimple3.jpg)","source":"_posts/p6.md","raw":"---\ntitle: wordpress文章迁移到hexo next及主题美化\nid: 474\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-03-18 17:10:01\ntags: [wordpress, hexo, 文章迁移]\n---\n\n1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件\n\n2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/\n\n3.安装迁移插件\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save</pre>\n4.执行迁移\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名</pre>\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n6.好了，可以访问网站中文章的变化啦！\n\n![](/img/xjy/hexoSimple2.jpg)\n\n7.后续对主题的跟换和具体网站的美化，可参考[http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n\n8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n（下面以改成yilia主题为例）\n<pre class=\"lang:sh decode:true\">#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d</pre>\n\n9.可以看下效果变化啦，欢迎访问[http://hexo.xiajunyi.com](http://hexo.xiajunyi.com)\n\n![](/img/xjy/hexoSimple3.jpg)","slug":"p6","published":1,"updated":"2018-03-23T06:34:53.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h1g0025c8vgtq16rg6j","content":"<p>1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件</p>\n<p>2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/</p>\n<p>3.安装迁移插件</p>\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save</pre>\n4.执行迁移\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名</pre>\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n<p>6.好了，可以访问网站中文章的变化啦！</p>\n<p><img src=\"/img/xjy/hexoSimple2.jpg\" alt=\"\"></p>\n<p>7.后续对主题的跟换和具体网站的美化，可参考<a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"noopener\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p>\n<p>8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n<p>（下面以改成yilia主题为例）</p>\n<pre class=\"lang:sh decode:true\">#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d</pre>\n\n<p>9.可以看下效果变化啦，欢迎访问<a href=\"http://hexo.xiajunyi.com\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com</a></p>\n<p><img src=\"/img/xjy/hexoSimple3.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件</p>\n<p>2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/</p>\n<p>3.安装迁移插件</p>\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save</pre>\n4.执行迁移\n<pre class=\"lang:sh decode:true\">#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名</pre>\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n<p>6.好了，可以访问网站中文章的变化啦！</p>\n<p><img src=\"/img/xjy/hexoSimple2.jpg\" alt=\"\"></p>\n<p>7.后续对主题的跟换和具体网站的美化，可参考<a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"noopener\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p>\n<p>8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n<p>（下面以改成yilia主题为例）</p>\n<pre class=\"lang:sh decode:true\">#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d</pre>\n\n<p>9.可以看下效果变化啦，欢迎访问<a href=\"http://hexo.xiajunyi.com\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com</a></p>\n<p><img src=\"/img/xjy/hexoSimple3.jpg\" alt=\"\"></p>\n"},{"title":"wordpress网站迁移：更换域名、开启SSL支持（解决https无法访问wordpress后台的问题）","id":"363","date":"2018-02-03T11:26:55.000Z","_content":"\n**今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！** \n\n\n1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）\n\n推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。\n\n备份设置可以参考一下这篇</span>[https://www.sabia.cc/shi-yong-backwpup-backup.html](https://www.sabia.cc/shi-yong-backwpup-backup.html)，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。\n\n\n\n\n2.百度BCH端解压及导入数据\n\n（1）到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。</span></span> \n\n（2）登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</span>\n\n\n\n3.替换域名\n\n在上面的数据导入完成后，执行如下sql语句\n\n<pre class=\"prettyprint lang-js\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</pre>\n\n4.申请SSL证书</span>**</span></span></span> \n\n如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）\n\n申请阿里云的SSL免费证书，可以参考链接：[https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html](https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html)\n\n申请好后可将证书文件下载下来。\n\n5.百度BCH上导入证书，并开启 HTTPS\n\n证书导入可参考链接：[https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6](https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6)\n\n导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。\n\n![](/img/xjy/bch001.jpg) \n\n6.解决https无法访问wordpress后台的问题 \n\n解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样\"Really Simple SSL\"(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。\n\n插件具体设置可参考链接：</span>[https://www.nixonli.com/wordpress/22541.html](https://www.nixonli.com/wordpress/22541.html) ","source":"_posts/p8.md","raw":"---\ntitle: wordpress网站迁移：更换域名、开启SSL支持（解决https无法访问wordpress后台的问题）\nid: 363\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-02-03 19:26:55\ntags: [wordpress, 域名, ssl, https]\n---\n\n**今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！** \n\n\n1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）\n\n推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。\n\n备份设置可以参考一下这篇</span>[https://www.sabia.cc/shi-yong-backwpup-backup.html](https://www.sabia.cc/shi-yong-backwpup-backup.html)，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。\n\n\n\n\n2.百度BCH端解压及导入数据\n\n（1）到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。</span></span> \n\n（2）登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</span>\n\n\n\n3.替换域名\n\n在上面的数据导入完成后，执行如下sql语句\n\n<pre class=\"prettyprint lang-js\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</pre>\n\n4.申请SSL证书</span>**</span></span></span> \n\n如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）\n\n申请阿里云的SSL免费证书，可以参考链接：[https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html](https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html)\n\n申请好后可将证书文件下载下来。\n\n5.百度BCH上导入证书，并开启 HTTPS\n\n证书导入可参考链接：[https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6](https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6)\n\n导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。\n\n![](/img/xjy/bch001.jpg) \n\n6.解决https无法访问wordpress后台的问题 \n\n解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样\"Really Simple SSL\"(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。\n\n插件具体设置可参考链接：</span>[https://www.nixonli.com/wordpress/22541.html](https://www.nixonli.com/wordpress/22541.html) ","slug":"p8","published":1,"updated":"2018-03-23T06:36:34.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h1h0027c8vgrh0jq0kx","content":"<p><strong>今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！</strong> </p>\n<p>1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）</p>\n<p>推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。</p>\n<p>备份设置可以参考一下这篇<a href=\"https://www.sabia.cc/shi-yong-backwpup-backup.html\" target=\"_blank\" rel=\"noopener\">https://www.sabia.cc/shi-yong-backwpup-backup.html</a>，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。</p>\n<p>2.百度BCH端解压及导入数据</p>\n<p>（1）到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。 </p>\n<p>（2）登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</p>\n<p>3.替换域名</p>\n<p>在上面的数据导入完成后，执行如下sql语句</p>\n<pre class=\"prettyprint lang-js\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</pre>\n\n<p>4.申请SSL证书** </p>\n<p>如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）</p>\n<p>申请阿里云的SSL免费证书，可以参考链接：<a href=\"https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html</a></p>\n<p>申请好后可将证书文件下载下来。</p>\n<p>5.百度BCH上导入证书，并开启 HTTPS</p>\n<p>证书导入可参考链接：<a href=\"https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6\" target=\"_blank\" rel=\"noopener\">https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6</a></p>\n<p>导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。</p>\n<p><img src=\"/img/xjy/bch001.jpg\" alt=\"\"> </p>\n<p>6.解决https无法访问wordpress后台的问题 </p>\n<p>解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样”Really Simple SSL”(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。</p>\n<p>插件具体设置可参考链接：<a href=\"https://www.nixonli.com/wordpress/22541.html\" target=\"_blank\" rel=\"noopener\">https://www.nixonli.com/wordpress/22541.html</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！</strong> </p>\n<p>1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）</p>\n<p>推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。</p>\n<p>备份设置可以参考一下这篇<a href=\"https://www.sabia.cc/shi-yong-backwpup-backup.html\" target=\"_blank\" rel=\"noopener\">https://www.sabia.cc/shi-yong-backwpup-backup.html</a>，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。</p>\n<p>2.百度BCH端解压及导入数据</p>\n<p>（1）到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。 </p>\n<p>（2）登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</p>\n<p>3.替换域名</p>\n<p>在上面的数据导入完成后，执行如下sql语句</p>\n<pre class=\"prettyprint lang-js\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</pre>\n\n<p>4.申请SSL证书** </p>\n<p>如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）</p>\n<p>申请阿里云的SSL免费证书，可以参考链接：<a href=\"https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html</a></p>\n<p>申请好后可将证书文件下载下来。</p>\n<p>5.百度BCH上导入证书，并开启 HTTPS</p>\n<p>证书导入可参考链接：<a href=\"https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6\" target=\"_blank\" rel=\"noopener\">https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6</a></p>\n<p>导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。</p>\n<p><img src=\"/img/xjy/bch001.jpg\" alt=\"\"> </p>\n<p>6.解决https无法访问wordpress后台的问题 </p>\n<p>解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样”Really Simple SSL”(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。</p>\n<p>插件具体设置可参考链接：<a href=\"https://www.nixonli.com/wordpress/22541.html\" target=\"_blank\" rel=\"noopener\">https://www.nixonli.com/wordpress/22541.html</a> </p>\n"},{"title":"Git的诞生","id":"461","date":"2018-03-11T04:10:56.000Z","_content":"\n转载自：[https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000)\n\n很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\n\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？\n\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\n\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\n\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\n\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n\n** 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。**","source":"_posts/p9.md","raw":"---\ntitle: Git的诞生\ntags:\n  - csv\n  - git\n  - 故事\n  - 闲谈\nid: 461\ncategories:\n  - 未分类\ndate: 2018-03-11 12:10:56\n---\n\n转载自：[https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000)\n\n很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\n\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？\n\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\n\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\n\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\n\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n\n** 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。**","slug":"p9","published":1,"updated":"2018-03-22T08:39:40.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h1k002ac8vgpocz8var","content":"<p>转载自：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000</a></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p><strong> 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载自：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000</a></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p><strong> 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</strong></p>\n"},{"title":"wordpress网站由apache改为nginx发布","id":"345","date":"2018-01-27T12:17:40.000Z","_content":"\n我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：\n\n参考链接：[https://www.androiddev.net/webserver-apache-to-nginx/](https://www.androiddev.net/webserver-apache-to-nginx/) \n\n1.停掉httpd当前服务，禁用重启\n\n<pre class=\"prettyprint lang-bsh\">#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off      </pre>\n\n2.安装nginx,这里以centos系统为例\n\n<pre class=\"prettyprint lang-bsh\">yum -y install nginx</pre>\n\n3.安装php-fpm\n\n*   PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。&nbsp;安装及启动过程如下：\n\n<pre class=\"prettyprint lang-bsh\">yum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on</pre>\n\n4.编辑nginx配置文件\n\n<pre class=\"prettyprint lang-bsh\">vi /etc/nginx/conf.d/virtual.conf</pre>\n\n*   <span style=\"line-height:1.5;\">加入类似如下配置:</span>\n\n<pre class=\"prettyprint lang-xml\">#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }</pre>\n\n\n5.新建日志目录并赋权限\n\n<pre class=\"prettyprint lang-bsh\">mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa</pre>\n\n6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误\n\n<pre class=\"prettyprint lang-html\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</pre>\n\n7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：\n\n<pre class=\"prettyprint lang-bsh\">yum update\nyum install php-mysql</pre>\n\n8.启动nginx，ps:<span style=\"line-height:1.5;\">这时候如果访问没有生效，reboot一下就可以了！</span> \n\n<pre class=\"prettyprint lang-bsh\">service nginx start</pre>\n\n\n9.具体能提升多少，就看后续的访问的效果了","source":"_posts/p7.md","raw":"---\ntitle: wordpress网站由apache改为nginx发布\nid: 345\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-01-27 20:17:40\ntags: [wordpress, apache, nginx]\n---\n\n我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：\n\n参考链接：[https://www.androiddev.net/webserver-apache-to-nginx/](https://www.androiddev.net/webserver-apache-to-nginx/) \n\n1.停掉httpd当前服务，禁用重启\n\n<pre class=\"prettyprint lang-bsh\">#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off      </pre>\n\n2.安装nginx,这里以centos系统为例\n\n<pre class=\"prettyprint lang-bsh\">yum -y install nginx</pre>\n\n3.安装php-fpm\n\n*   PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。&nbsp;安装及启动过程如下：\n\n<pre class=\"prettyprint lang-bsh\">yum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on</pre>\n\n4.编辑nginx配置文件\n\n<pre class=\"prettyprint lang-bsh\">vi /etc/nginx/conf.d/virtual.conf</pre>\n\n*   <span style=\"line-height:1.5;\">加入类似如下配置:</span>\n\n<pre class=\"prettyprint lang-xml\">#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }</pre>\n\n\n5.新建日志目录并赋权限\n\n<pre class=\"prettyprint lang-bsh\">mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa</pre>\n\n6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误\n\n<pre class=\"prettyprint lang-html\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</pre>\n\n7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：\n\n<pre class=\"prettyprint lang-bsh\">yum update\nyum install php-mysql</pre>\n\n8.启动nginx，ps:<span style=\"line-height:1.5;\">这时候如果访问没有生效，reboot一下就可以了！</span> \n\n<pre class=\"prettyprint lang-bsh\">service nginx start</pre>\n\n\n9.具体能提升多少，就看后续的访问的效果了","slug":"p7","published":1,"updated":"2018-03-22T06:41:34.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h1m002ec8vgo4bf05eb","content":"<p>我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：</p>\n<p>参考链接：<a href=\"https://www.androiddev.net/webserver-apache-to-nginx/\" target=\"_blank\" rel=\"noopener\">https://www.androiddev.net/webserver-apache-to-nginx/</a> </p>\n<p>1.停掉httpd当前服务，禁用重启</p>\n<pre class=\"prettyprint lang-bsh\">#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off      </pre>\n\n<p>2.安装nginx,这里以centos系统为例</p>\n<pre class=\"prettyprint lang-bsh\">yum -y install nginx</pre>\n\n<p>3.安装php-fpm</p>\n<ul>\n<li>PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。&nbsp;安装及启动过程如下：</li>\n</ul>\n<pre class=\"prettyprint lang-bsh\">yum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on</pre>\n\n<p>4.编辑nginx配置文件</p>\n<pre class=\"prettyprint lang-bsh\">vi /etc/nginx/conf.d/virtual.conf</pre>\n\n<ul>\n<li><span style=\"line-height:1.5;\">加入类似如下配置:</span></li>\n</ul>\n<pre class=\"prettyprint lang-xml\">#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }</pre>\n\n\n<p>5.新建日志目录并赋权限</p>\n<pre class=\"prettyprint lang-bsh\">mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa</pre>\n\n<p>6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误</p>\n<pre class=\"prettyprint lang-html\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</pre>\n\n<p>7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：</p>\n<pre class=\"prettyprint lang-bsh\">yum update\nyum install php-mysql</pre>\n\n<p>8.启动nginx，ps:<span style=\"line-height:1.5;\">这时候如果访问没有生效，reboot一下就可以了！</span> </p>\n<pre class=\"prettyprint lang-bsh\">service nginx start</pre>\n\n\n<p>9.具体能提升多少，就看后续的访问的效果了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：</p>\n<p>参考链接：<a href=\"https://www.androiddev.net/webserver-apache-to-nginx/\" target=\"_blank\" rel=\"noopener\">https://www.androiddev.net/webserver-apache-to-nginx/</a> </p>\n<p>1.停掉httpd当前服务，禁用重启</p>\n<pre class=\"prettyprint lang-bsh\">#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off      </pre>\n\n<p>2.安装nginx,这里以centos系统为例</p>\n<pre class=\"prettyprint lang-bsh\">yum -y install nginx</pre>\n\n<p>3.安装php-fpm</p>\n<ul>\n<li>PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。&nbsp;安装及启动过程如下：</li>\n</ul>\n<pre class=\"prettyprint lang-bsh\">yum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on</pre>\n\n<p>4.编辑nginx配置文件</p>\n<pre class=\"prettyprint lang-bsh\">vi /etc/nginx/conf.d/virtual.conf</pre>\n\n<ul>\n<li><span style=\"line-height:1.5;\">加入类似如下配置:</span></li>\n</ul>\n<pre class=\"prettyprint lang-xml\">#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }</pre>\n\n\n<p>5.新建日志目录并赋权限</p>\n<pre class=\"prettyprint lang-bsh\">mkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa</pre>\n\n<p>6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误</p>\n<pre class=\"prettyprint lang-html\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</pre>\n\n<p>7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：</p>\n<pre class=\"prettyprint lang-bsh\">yum update\nyum install php-mysql</pre>\n\n<p>8.启动nginx，ps:<span style=\"line-height:1.5;\">这时候如果访问没有生效，reboot一下就可以了！</span> </p>\n<pre class=\"prettyprint lang-bsh\">service nginx start</pre>\n\n\n<p>9.具体能提升多少，就看后续的访问的效果了</p>\n"},{"title":"标签","date":"2018-03-18T12:00:14.000Z","type":"tags","_content":"","source":"_drafts/tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-18 20:00:14\ntype: \"tags\"\n---\n","slug":"tags/index","published":0,"updated":"2018-03-20T00:42:22.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h4k008sc8vg8zbtrk0s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2018-03-18T11:57:37.000Z","type":"categories","_content":"","source":"_drafts/categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-03-18 19:57:37\ntype: \"categories\"\n---\n","slug":"categories/index","published":0,"updated":"2018-03-20T00:42:22.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7r8h4l008tc8vg3w3yvx77","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"举例说明弱密码摄像头的坏处","date":"2018-05-11T13:32:44.000Z","toc":true,"_content":"\n**该示例仅为证明弱密码的害处，提醒大家防范。**\n\n### 工具： ### \n+ 傻蛋网\n+ 各大网络摄像头默认账号密码v3.0\n+ IpCameraViewer \n\n### 步骤： ### \n\n1. 登陆www.oshadan.com(注册用户搜索结果更多)\n\n![img](/img/xjy/p34001.jpg){:height=\"100\" width=\"100\"}\n\n2. 按照产品名称搜索\n\n![img](/img/xjy/p34002.jpg){:height=\"100\" width=\"100\"}\n\n3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) \n\n![img](/img/xjy/p34003.jpg){:height=\"100\" width=\"100\"}\n\n4. 如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看\n\n![img](/img/xjy/p34004.jpg){:height=\"100\" width=\"100\"}\n\n### 资源链接： ### \n\n[点击这里](https://pan.baidu.com/share/link?shareid=2925240709&uk=3811069734 )\n","source":"_posts/p34.md","raw":"---\n\ntitle: 举例说明弱密码摄像头的坏处\ndate: 2018/5/11 21:32:44   \ntags: [摄像头, 破解]\ntoc: true\n\n---\n\n**该示例仅为证明弱密码的害处，提醒大家防范。**\n\n### 工具： ### \n+ 傻蛋网\n+ 各大网络摄像头默认账号密码v3.0\n+ IpCameraViewer \n\n### 步骤： ### \n\n1. 登陆www.oshadan.com(注册用户搜索结果更多)\n\n![img](/img/xjy/p34001.jpg){:height=\"100\" width=\"100\"}\n\n2. 按照产品名称搜索\n\n![img](/img/xjy/p34002.jpg){:height=\"100\" width=\"100\"}\n\n3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) \n\n![img](/img/xjy/p34003.jpg){:height=\"100\" width=\"100\"}\n\n4. 如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看\n\n![img](/img/xjy/p34004.jpg){:height=\"100\" width=\"100\"}\n\n### 资源链接： ### \n\n[点击这里](https://pan.baidu.com/share/link?shareid=2925240709&uk=3811069734 )\n","slug":"p34","published":1,"updated":"2018-05-12T13:53:57.587Z","_id":"cjg7taldn0000zovgai0bbdkj","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>该示例仅为证明弱密码的害处，提醒大家防范。</strong></p>\n<h3 id=\"工具：\"><a href=\"#工具：\" class=\"headerlink\" title=\"工具：\"></a>工具：</h3><ul>\n<li>傻蛋网</li>\n<li>各大网络摄像头默认账号密码v3.0</li>\n<li>IpCameraViewer </li>\n</ul>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><ol>\n<li>登陆<a href=\"http://www.oshadan.com(注册用户搜索结果更多)\" target=\"_blank\" rel=\"noopener\">www.oshadan.com(注册用户搜索结果更多)</a></li>\n</ol>\n<p><img src=\"/img/xjy/p34001.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<ol>\n<li>按照产品名称搜索</li>\n</ol>\n<p><img src=\"/img/xjy/p34002.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<p>3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) </p>\n<p><img src=\"/img/xjy/p34003.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<ol>\n<li>如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看</li>\n</ol>\n<p><img src=\"/img/xjy/p34004.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<h3 id=\"资源链接：\"><a href=\"#资源链接：\" class=\"headerlink\" title=\"资源链接：\"></a>资源链接：</h3><p><a href=\"https://pan.baidu.com/share/link?shareid=2925240709&amp;uk=3811069734\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>该示例仅为证明弱密码的害处，提醒大家防范。</strong></p>\n<h3 id=\"工具：\"><a href=\"#工具：\" class=\"headerlink\" title=\"工具：\"></a>工具：</h3><ul>\n<li>傻蛋网</li>\n<li>各大网络摄像头默认账号密码v3.0</li>\n<li>IpCameraViewer </li>\n</ul>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><ol>\n<li>登陆<a href=\"http://www.oshadan.com(注册用户搜索结果更多)\" target=\"_blank\" rel=\"noopener\">www.oshadan.com(注册用户搜索结果更多)</a></li>\n</ol>\n<p><img src=\"/img/xjy/p34001.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<ol>\n<li>按照产品名称搜索</li>\n</ol>\n<p><img src=\"/img/xjy/p34002.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<p>3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) </p>\n<p><img src=\"/img/xjy/p34003.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<ol>\n<li>如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看</li>\n</ol>\n<p><img src=\"/img/xjy/p34004.jpg\" alt=\"img\">{:height=”100” width=”100”}</p>\n<h3 id=\"资源链接：\"><a href=\"#资源链接：\" class=\"headerlink\" title=\"资源链接：\"></a>资源链接：</h3><p><a href=\"https://pan.baidu.com/share/link?shareid=2925240709&amp;uk=3811069734\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n"},{"title":"docker初学(一)","id":"405","date":"2018-05-12T12:58:29.000Z","_content":"\n## 1.docker的安装及启动 ## \n```bash\n#docker的安装\nsudo wget -qO- https://get.docker.com/ | sh\n#docker启动\nservice docker start\n#docker设置成开机启动\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n## 2.简单运行一个容器 ##\n``` bash\n[root@localhost ~]# docker run ubuntu echo hello docker\nUnable to find image 'ubuntu:latest' locally\nlatest: Pulling from library/ubuntu\na48c500ed24e: Pull complete \n1e1de00ff7e1: Pull complete \n0330ca45a200: Pull complete \n471db38bcfbf: Pull complete \n0b4aba487617: Pull complete \nDigest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e\nStatus: Downloaded newer image for ubuntu:latest\nhello docker\n```\n\n## 3.以交互式运行一个容器 ##\n``` bash \n#-i是持久的标准输入， -t是创建伪tty终端\ndocker run -i -t ubuntu /bin/bash\n#如果要退回宿主机，需要输入exit\n```\n\n## 4.常用操作容器命令 ##\n``` bash\n#指定名称运行容器，用--name\ndocker run --name test -i -t ubuntu /bin/bash\n#查看当前运行中的容器\ndocker ps\n#查看所有容器（包括运行过的）\ndocker ps -a\n#查看最后几个容器（包括运行过的）\ndocker ps -n 5\n#重启某容器，重启某容器时会沿用run命令时指定的参数\ndocker start test\n#停止某容器\ndocker stop test\n#快速停止某容器\ndocker kill test\n#删除某容器，rm后跟容器id或name均可\ndocker rm test\n#删除所有容器\ndocker rm 'docker ps -a -q'\n#连接到正在运行中的容器，attach后跟容器id或name均可\ndocker attach test\n#获取容器日志并返回\ndocker logs test\n#监控容器最新日志，类似tail -f功能\ndocker logs -f test\n#监控容器日志时，还可以使用-t为每条日志加上时间戳\ndocker logs -ft test\n#查看容器内的进程\ndocker top test\n#查看容器内详细信息,配合-f和--format可以有更高级应用\ndocker inspect test\n```\n\n## 未完待续... ## \n\n\n\n\n\n","source":"_posts/p35.md","raw":"---\ntitle: docker初学(一)\nid: 405\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/12 20:58:29 \ntags: [docker, linux]\n---\n\n## 1.docker的安装及启动 ## \n```bash\n#docker的安装\nsudo wget -qO- https://get.docker.com/ | sh\n#docker启动\nservice docker start\n#docker设置成开机启动\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n## 2.简单运行一个容器 ##\n``` bash\n[root@localhost ~]# docker run ubuntu echo hello docker\nUnable to find image 'ubuntu:latest' locally\nlatest: Pulling from library/ubuntu\na48c500ed24e: Pull complete \n1e1de00ff7e1: Pull complete \n0330ca45a200: Pull complete \n471db38bcfbf: Pull complete \n0b4aba487617: Pull complete \nDigest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e\nStatus: Downloaded newer image for ubuntu:latest\nhello docker\n```\n\n## 3.以交互式运行一个容器 ##\n``` bash \n#-i是持久的标准输入， -t是创建伪tty终端\ndocker run -i -t ubuntu /bin/bash\n#如果要退回宿主机，需要输入exit\n```\n\n## 4.常用操作容器命令 ##\n``` bash\n#指定名称运行容器，用--name\ndocker run --name test -i -t ubuntu /bin/bash\n#查看当前运行中的容器\ndocker ps\n#查看所有容器（包括运行过的）\ndocker ps -a\n#查看最后几个容器（包括运行过的）\ndocker ps -n 5\n#重启某容器，重启某容器时会沿用run命令时指定的参数\ndocker start test\n#停止某容器\ndocker stop test\n#快速停止某容器\ndocker kill test\n#删除某容器，rm后跟容器id或name均可\ndocker rm test\n#删除所有容器\ndocker rm 'docker ps -a -q'\n#连接到正在运行中的容器，attach后跟容器id或name均可\ndocker attach test\n#获取容器日志并返回\ndocker logs test\n#监控容器最新日志，类似tail -f功能\ndocker logs -f test\n#监控容器日志时，还可以使用-t为每条日志加上时间戳\ndocker logs -ft test\n#查看容器内的进程\ndocker top test\n#查看容器内详细信息,配合-f和--format可以有更高级应用\ndocker inspect test\n```\n\n## 未完待续... ## \n\n\n\n\n\n","slug":"p35","published":1,"updated":"2018-05-12T12:58:33.131Z","_id":"cjh3eb6t80000igvg4ltdhc6f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-docker的安装及启动\"><a href=\"#1-docker的安装及启动\" class=\"headerlink\" title=\"1.docker的安装及启动\"></a>1.docker的安装及启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker的安装</span></span><br><span class=\"line\">sudo wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\"><span class=\"comment\">#docker启动</span></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"><span class=\"comment\">#docker设置成开机启动</span></span><br><span class=\"line\">systemctl  start docker.service</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单运行一个容器\"><a href=\"#2-简单运行一个容器\" class=\"headerlink\" title=\"2.简单运行一个容器\"></a>2.简单运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run ubuntu echo hello docker</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">'ubuntu:latest'</span> locally</span><br><span class=\"line\">latest: Pulling from library/ubuntu</span><br><span class=\"line\">a48c500ed24e: Pull complete </span><br><span class=\"line\">1e1de00ff7e1: Pull complete </span><br><span class=\"line\">0330ca45a200: Pull complete </span><br><span class=\"line\">471db38bcfbf: Pull complete </span><br><span class=\"line\">0b4aba487617: Pull complete </span><br><span class=\"line\">Digest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:latest</span><br><span class=\"line\">hello docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-以交互式运行一个容器\"><a href=\"#3-以交互式运行一个容器\" class=\"headerlink\" title=\"3.以交互式运行一个容器\"></a>3.以交互式运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-i是持久的标准输入， -t是创建伪tty终端</span></span><br><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#如果要退回宿主机，需要输入exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-常用操作容器命令\"><a href=\"#4-常用操作容器命令\" class=\"headerlink\" title=\"4.常用操作容器命令\"></a>4.常用操作容器命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定名称运行容器，用--name</span></span><br><span class=\"line\">docker run --name <span class=\"built_in\">test</span> -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#查看当前运行中的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\">#查看所有容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看最后几个容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -n 5</span><br><span class=\"line\"><span class=\"comment\">#重启某容器，重启某容器时会沿用run命令时指定的参数</span></span><br><span class=\"line\">docker start <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#停止某容器</span></span><br><span class=\"line\">docker stop <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#快速停止某容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除某容器，rm后跟容器id或name均可</span></span><br><span class=\"line\">docker rm <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除所有容器</span></span><br><span class=\"line\">docker rm <span class=\"string\">'docker ps -a -q'</span></span><br><span class=\"line\"><span class=\"comment\">#连接到正在运行中的容器，attach后跟容器id或name均可</span></span><br><span class=\"line\">docker attach <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#获取容器日志并返回</span></span><br><span class=\"line\">docker logs <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器最新日志，类似tail -f功能</span></span><br><span class=\"line\">docker logs -f <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器日志时，还可以使用-t为每条日志加上时间戳</span></span><br><span class=\"line\">docker logs -ft <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内的进程</span></span><br><span class=\"line\">docker top <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内详细信息,配合-f和--format可以有更高级应用</span></span><br><span class=\"line\">docker inspect <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-docker的安装及启动\"><a href=\"#1-docker的安装及启动\" class=\"headerlink\" title=\"1.docker的安装及启动\"></a>1.docker的安装及启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker的安装</span></span><br><span class=\"line\">sudo wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\"><span class=\"comment\">#docker启动</span></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"><span class=\"comment\">#docker设置成开机启动</span></span><br><span class=\"line\">systemctl  start docker.service</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单运行一个容器\"><a href=\"#2-简单运行一个容器\" class=\"headerlink\" title=\"2.简单运行一个容器\"></a>2.简单运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run ubuntu echo hello docker</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">'ubuntu:latest'</span> locally</span><br><span class=\"line\">latest: Pulling from library/ubuntu</span><br><span class=\"line\">a48c500ed24e: Pull complete </span><br><span class=\"line\">1e1de00ff7e1: Pull complete </span><br><span class=\"line\">0330ca45a200: Pull complete </span><br><span class=\"line\">471db38bcfbf: Pull complete </span><br><span class=\"line\">0b4aba487617: Pull complete </span><br><span class=\"line\">Digest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:latest</span><br><span class=\"line\">hello docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-以交互式运行一个容器\"><a href=\"#3-以交互式运行一个容器\" class=\"headerlink\" title=\"3.以交互式运行一个容器\"></a>3.以交互式运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-i是持久的标准输入， -t是创建伪tty终端</span></span><br><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#如果要退回宿主机，需要输入exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-常用操作容器命令\"><a href=\"#4-常用操作容器命令\" class=\"headerlink\" title=\"4.常用操作容器命令\"></a>4.常用操作容器命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定名称运行容器，用--name</span></span><br><span class=\"line\">docker run --name <span class=\"built_in\">test</span> -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#查看当前运行中的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\">#查看所有容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看最后几个容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -n 5</span><br><span class=\"line\"><span class=\"comment\">#重启某容器，重启某容器时会沿用run命令时指定的参数</span></span><br><span class=\"line\">docker start <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#停止某容器</span></span><br><span class=\"line\">docker stop <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#快速停止某容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除某容器，rm后跟容器id或name均可</span></span><br><span class=\"line\">docker rm <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除所有容器</span></span><br><span class=\"line\">docker rm <span class=\"string\">'docker ps -a -q'</span></span><br><span class=\"line\"><span class=\"comment\">#连接到正在运行中的容器，attach后跟容器id或name均可</span></span><br><span class=\"line\">docker attach <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#获取容器日志并返回</span></span><br><span class=\"line\">docker logs <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器最新日志，类似tail -f功能</span></span><br><span class=\"line\">docker logs -f <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器日志时，还可以使用-t为每条日志加上时间戳</span></span><br><span class=\"line\">docker logs -ft <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内的进程</span></span><br><span class=\"line\">docker top <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内详细信息,配合-f和--format可以有更高级应用</span></span><br><span class=\"line\">docker inspect <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjg7r8gzs0001c8vgnvse4ieu","category_id":"cjg7r8gzy0004c8vgrv70t0iq","_id":"cjg7r8h08000dc8vgl711c5gi"},{"post_id":"cjg7r8h0k000qc8vg5vmh5766","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h0r0010c8vg1ejfninq"},{"post_id":"cjg7r8h030008c8vgwvs3ixqm","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h0t0013c8vgyu76za5n"},{"post_id":"cjg7r8h05000ac8vgffu67jc8","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h0v0016c8vgytsan743"},{"post_id":"cjg7r8gzw0003c8vgtdj85cvv","category_id":"cjg7r8h040009c8vg25qxz7ur","_id":"cjg7r8h0z001cc8vgac07fs38"},{"post_id":"cjg7r8gzw0003c8vgtdj85cvv","category_id":"cjg7r8h0r0011c8vgg8zez22e","_id":"cjg7r8h10001fc8vgthzagr37"},{"post_id":"cjg7r8h07000cc8vgzqpyek6b","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h12001kc8vgsd2gu1n7"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","category_id":"cjg7r8h040009c8vg25qxz7ur","_id":"cjg7r8h15001oc8vgn4hwxbvd"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","category_id":"cjg7r8h0r0011c8vgg8zez22e","_id":"cjg7r8h19001tc8vgtqscni0h"},{"post_id":"cjg7r8h09000fc8vg4ca29yw7","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h1a001wc8vg3ot2vzxy"},{"post_id":"cjg7r8gzz0005c8vgn892lavj","category_id":"cjg7r8h09000ec8vgtt2dyfwg","_id":"cjg7r8h1d0020c8vgaymccljw"},{"post_id":"cjg7r8gzz0005c8vgn892lavj","category_id":"cjg7r8h12001jc8vgqg5di6uw","_id":"cjg7r8h1e0022c8vg5lheusb6"},{"post_id":"cjg7r8h16001rc8vg17b4o5m4","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h1h0026c8vgd9xc6rr2"},{"post_id":"cjg7r8h0c000hc8vgn8gb6hoy","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h1i0028c8vgxt5f2xlq"},{"post_id":"cjg7r8h0f000jc8vghy1erz4h","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h1l002cc8vg22qptva6"},{"post_id":"cjg7r8h0h000lc8vgsme37w86","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h1n002fc8vgxzli3zax"},{"post_id":"cjg7r8h1k002ac8vgpocz8var","category_id":"cjg7r8gzy0004c8vgrv70t0iq","_id":"cjg7r8h1q002kc8vgrv9qesed"},{"post_id":"cjg7r8h000006c8vg0i54iol3","category_id":"cjg7r8h0e000ic8vgg9g77119","_id":"cjg7r8h1q002mc8vgiluwldw8"},{"post_id":"cjg7r8h000006c8vg0i54iol3","category_id":"cjg7r8h1j0029c8vg9l0da0le","_id":"cjg7r8h1r002oc8vgss8cl023"},{"post_id":"cjg7r8h0j000oc8vgi7xj60px","category_id":"cjg7r8h0i000nc8vgkz5mi4oa","_id":"cjg7r8h1r002pc8vgurqgfslu"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","category_id":"cjg7r8h040009c8vg25qxz7ur","_id":"cjg7r8h1v002xc8vgvjed1933"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","category_id":"cjg7r8h0r0011c8vgg8zez22e","_id":"cjg7r8h1w0030c8vglw2z8fj0"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","category_id":"cjg7r8h1u002tc8vgdkeodtyr","_id":"cjg7r8h1w0031c8vgyw36y3jl"},{"post_id":"cjg7r8h0u0015c8vgbp1ts6ej","category_id":"cjg7r8h1w0032c8vg4rvwityp","_id":"cjg7r8h1y0037c8vg6ewot7lr"},{"post_id":"cjg7r8h13001mc8vg4aqlmnxn","category_id":"cjg7r8h20003fc8vgtowywkzt","_id":"cjg7r8h24003mc8vgesg6sesy"},{"post_id":"cjg7r8h14001nc8vgoii8xeeh","category_id":"cjg7r8h22003ic8vgy4720wam","_id":"cjg7r8h25003qc8vgqknf5xis"},{"post_id":"cjg7r8h1c001zc8vguui8y9ep","category_id":"cjg7r8h20003fc8vgtowywkzt","_id":"cjg7r8h27003uc8vgs3rttnix"},{"post_id":"cjg7r8h0m000tc8vgwawl6f0v","category_id":"cjg7r8h1q002lc8vgwzc0v184","_id":"cjg7r8h2d004ac8vgf8mg1bfo"},{"post_id":"cjg7r8h0m000tc8vgwawl6f0v","category_id":"cjg7r8h2b0044c8vg2cowsbgh","_id":"cjg7r8h2e004dc8vgitnwivhn"},{"post_id":"cjg7r8h0s0012c8vgwzkcqmaw","category_id":"cjg7r8h1v002yc8vgbzua7uuk","_id":"cjg7r8h2e004fc8vgl9u0qabl"},{"post_id":"cjg7r8h0s0012c8vgwzkcqmaw","category_id":"cjg7r8h2c0047c8vg2wk7ti26","_id":"cjg7r8h2f004jc8vgwoe66qmu"},{"post_id":"cjg7r8h0w0018c8vg4cu9ndqn","category_id":"cjg7r8h1x0034c8vgj2dsdiyq","_id":"cjg7r8h2g004kc8vgvandq71l"},{"post_id":"cjg7r8h0w0018c8vg4cu9ndqn","category_id":"cjg7r8h2d004bc8vge0urqu17","_id":"cjg7r8h2h004nc8vg6ytdoery"},{"post_id":"cjg7r8h0x001ac8vglg0xc83g","category_id":"cjg7r8h1y0038c8vg8kwufevc","_id":"cjg7r8h2i004pc8vg2tuewgep"},{"post_id":"cjg7r8h0x001ac8vglg0xc83g","category_id":"cjg7r8h2f004gc8vgzr7cyjy1","_id":"cjg7r8h2i004rc8vgcfvi4zxh"},{"post_id":"cjg7r8h1d0021c8vgb5nwedl6","category_id":"cjg7r8h1q002lc8vgwzc0v184","_id":"cjg7r8h2l004wc8vg5fny3tku"},{"post_id":"cjg7r8h1d0021c8vgb5nwedl6","category_id":"cjg7r8h2b0044c8vg2cowsbgh","_id":"cjg7r8h2l004yc8vg3uc0d0g2"},{"post_id":"cjg7r8h1g0025c8vgtq16rg6j","category_id":"cjg7r8h1q002lc8vgwzc0v184","_id":"cjg7r8h2n0052c8vgef6v68ys"},{"post_id":"cjg7r8h1g0025c8vgtq16rg6j","category_id":"cjg7r8h2b0044c8vg2cowsbgh","_id":"cjg7r8h2o0054c8vggri4arfx"},{"post_id":"cjg7r8h1h0027c8vgrh0jq0kx","category_id":"cjg7r8h1q002lc8vgwzc0v184","_id":"cjg7r8h2q0058c8vgib9tp2pb"},{"post_id":"cjg7r8h1h0027c8vgrh0jq0kx","category_id":"cjg7r8h2b0044c8vg2cowsbgh","_id":"cjg7r8h2q005ac8vgcio1axr2"},{"post_id":"cjg7r8h1m002ec8vgo4bf05eb","category_id":"cjg7r8h1q002lc8vgwzc0v184","_id":"cjg7r8h2r005dc8vgkk5pmd87"},{"post_id":"cjg7r8h1m002ec8vgo4bf05eb","category_id":"cjg7r8h2b0044c8vg2cowsbgh","_id":"cjg7r8h2r005fc8vgdvz3id5o"},{"post_id":"cjg7r8h11001hc8vgs4ioom1y","category_id":"cjg7r8h1x0034c8vgj2dsdiyq","_id":"cjg7r8h2s005hc8vga27q7on3"},{"post_id":"cjg7r8h11001hc8vgs4ioom1y","category_id":"cjg7r8h2d004bc8vge0urqu17","_id":"cjg7r8h2s005ic8vgfbrxv7s6"},{"post_id":"cjg7r8h11001hc8vgs4ioom1y","category_id":"cjg7r8h2p0057c8vg51s8vuyl","_id":"cjg7r8h2t005kc8vg7zasjhm9"},{"post_id":"cjh3eb6t80000igvg4ltdhc6f","category_id":"cjh3eb6th0001igvgaqp2yt45","_id":"cjh3eb6tt0006igvgotx9xciy"},{"post_id":"cjh3eb6t80000igvg4ltdhc6f","category_id":"cjh3eb6tr0004igvgjx5v4a79","_id":"cjh3eb6tu0007igvg70t6xm5r"}],"PostTag":[{"post_id":"cjg7r8gzn0000c8vgh1xx12a3","tag_id":"cjg7r8gzv0002c8vgzxsoya8k","_id":"cjg7r8h0i000mc8vgp2dxz7a9"},{"post_id":"cjg7r8gzn0000c8vgh1xx12a3","tag_id":"cjg7r8h010007c8vg5p8jemn7","_id":"cjg7r8h0k000pc8vghx5i14pf"},{"post_id":"cjg7r8gzn0000c8vgh1xx12a3","tag_id":"cjg7r8h07000bc8vgvo7ixxpn","_id":"cjg7r8h0l000sc8vgxmwqk05l"},{"post_id":"cjg7r8gzn0000c8vgh1xx12a3","tag_id":"cjg7r8h0c000gc8vgwv8nbwgp","_id":"cjg7r8h0o000vc8vge2hwa104"},{"post_id":"cjg7r8gzs0001c8vgnvse4ieu","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h0p000yc8vgvo1mv7mc"},{"post_id":"cjg7r8gzw0003c8vgtdj85cvv","tag_id":"cjg7r8h0l000rc8vg8nwomop2","_id":"cjg7r8h0z001dc8vg5kza2hfu"},{"post_id":"cjg7r8gzw0003c8vgtdj85cvv","tag_id":"cjg7r8h0p000xc8vgyr015q2x","_id":"cjg7r8h10001gc8vgoklii8m5"},{"post_id":"cjg7r8gzw0003c8vgtdj85cvv","tag_id":"cjg7r8h0u0014c8vg13nmwrqv","_id":"cjg7r8h13001lc8vgsn7hj5uo"},{"post_id":"cjg7r8gzz0005c8vgn892lavj","tag_id":"cjg7r8h0x0019c8vgpsmmsfaj","_id":"cjg7r8h18001sc8vge0j2dlp4"},{"post_id":"cjg7r8gzz0005c8vgn892lavj","tag_id":"cjg7r8h12001ic8vgg8brh339","_id":"cjg7r8h1a001vc8vg7j5waxpw"},{"post_id":"cjg7r8h000006c8vg0i54iol3","tag_id":"cjg7r8h16001pc8vg5pag6n3u","_id":"cjg7r8h1m002dc8vgtrliysdd"},{"post_id":"cjg7r8h000006c8vg0i54iol3","tag_id":"cjg7r8h1b001yc8vglzabis3m","_id":"cjg7r8h1o002hc8vg5rr7db0a"},{"post_id":"cjg7r8h000006c8vg0i54iol3","tag_id":"cjg7r8h1f0024c8vghi6urg33","_id":"cjg7r8h1q002jc8vgt7ipciza"},{"post_id":"cjg7r8h030008c8vgwvs3ixqm","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h1u002sc8vg7fgnbdjg"},{"post_id":"cjg7r8h030008c8vgwvs3ixqm","tag_id":"cjg7r8h1p002ic8vgym3sqnu0","_id":"cjg7r8h1u002uc8vge5twtzn0"},{"post_id":"cjg7r8h030008c8vgwvs3ixqm","tag_id":"cjg7r8h1r002nc8vg1kfbh64m","_id":"cjg7r8h1v002wc8vgsqfg0bp2"},{"post_id":"cjg7r8h05000ac8vgffu67jc8","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h1y0036c8vgrszzuoa2"},{"post_id":"cjg7r8h05000ac8vgffu67jc8","tag_id":"cjg7r8h1u002vc8vgkgqh5o4f","_id":"cjg7r8h1y0039c8vgz7p5wf9t"},{"post_id":"cjg7r8h05000ac8vgffu67jc8","tag_id":"cjg7r8h1v002zc8vgv463q2vf","_id":"cjg7r8h1z003bc8vguy1nqsma"},{"post_id":"cjg7r8h05000ac8vgffu67jc8","tag_id":"cjg7r8h1w0033c8vgqcvut525","_id":"cjg7r8h1z003cc8vgeaje0zg1"},{"post_id":"cjg7r8h07000cc8vgzqpyek6b","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h22003hc8vgd6ygnp0u"},{"post_id":"cjg7r8h07000cc8vgzqpyek6b","tag_id":"cjg7r8h1z003ac8vgdjy3i5qu","_id":"cjg7r8h23003jc8vghojt45s2"},{"post_id":"cjg7r8h07000cc8vgzqpyek6b","tag_id":"cjg7r8h20003ec8vgsvkpczo8","_id":"cjg7r8h23003lc8vgjq54b1uk"},{"post_id":"cjg7r8h09000fc8vg4ca29yw7","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h26003sc8vgdiwkqg9u"},{"post_id":"cjg7r8h09000fc8vg4ca29yw7","tag_id":"cjg7r8h1z003ac8vgdjy3i5qu","_id":"cjg7r8h27003vc8vg7o4x3xow"},{"post_id":"cjg7r8h09000fc8vg4ca29yw7","tag_id":"cjg7r8h24003oc8vgwbiaq40m","_id":"cjg7r8h27003xc8vg3l2de6hm"},{"post_id":"cjg7r8h0c000hc8vgn8gb6hoy","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h290040c8vgir3n1qdq"},{"post_id":"cjg7r8h0c000hc8vgn8gb6hoy","tag_id":"cjg7r8h27003wc8vgfjg3djdj","_id":"cjg7r8h2a0042c8vg2ubbuzu1"},{"post_id":"cjg7r8h0f000jc8vghy1erz4h","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h2c0046c8vgcxqd1sqr"},{"post_id":"cjg7r8h0f000jc8vghy1erz4h","tag_id":"cjg7r8h2a0043c8vguytfqxl7","_id":"cjg7r8h2c0048c8vgdbn323dg"},{"post_id":"cjg7r8h0h000lc8vgsme37w86","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h2e004ec8vgb30lsvrg"},{"post_id":"cjg7r8h0h000lc8vgsme37w86","tag_id":"cjg7r8h2c0049c8vgpn7udkqn","_id":"cjg7r8h2f004hc8vg28pjz683"},{"post_id":"cjg7r8h0j000oc8vgi7xj60px","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h2k004uc8vgwnhp2gh3"},{"post_id":"cjg7r8h0j000oc8vgi7xj60px","tag_id":"cjg7r8h2e004cc8vgd2czkmff","_id":"cjg7r8h2l004xc8vgmwqugl2h"},{"post_id":"cjg7r8h0j000oc8vgi7xj60px","tag_id":"cjg7r8h2f004ic8vgju7ieba7","_id":"cjg7r8h2m0050c8vgpfd02y74"},{"post_id":"cjg7r8h0j000oc8vgi7xj60px","tag_id":"cjg7r8h1u002vc8vgkgqh5o4f","_id":"cjg7r8h2o0053c8vgf76uoedm"},{"post_id":"cjg7r8h0j000oc8vgi7xj60px","tag_id":"cjg7r8h2i004qc8vg0clyk8kh","_id":"cjg7r8h2p0056c8vgo94ph2ko"},{"post_id":"cjg7r8h0k000qc8vg5vmh5766","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h2q0059c8vgfjihebxu"},{"post_id":"cjg7r8h0k000qc8vg5vmh5766","tag_id":"cjg7r8h2j004tc8vgvcxjexbf","_id":"cjg7r8h2r005cc8vg2a7fnobm"},{"post_id":"cjg7r8h0k000qc8vg5vmh5766","tag_id":"cjg7r8h20003ec8vgsvkpczo8","_id":"cjg7r8h2r005ec8vgk8272egd"},{"post_id":"cjg7r8h0m000tc8vgwawl6f0v","tag_id":"cjg7r8h2p0055c8vgee80n5zx","_id":"cjg7r8h2t005lc8vgflrntb26"},{"post_id":"cjg7r8h0m000tc8vgwawl6f0v","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h2t005mc8vgd35rvkfl"},{"post_id":"cjg7r8h0m000tc8vgwawl6f0v","tag_id":"cjg7r8h2s005gc8vgt69qquh6","_id":"cjg7r8h2u005oc8vg1skd37s1"},{"post_id":"cjg7r8h0m000tc8vgwawl6f0v","tag_id":"cjg7r8h0c000gc8vgwv8nbwgp","_id":"cjg7r8h2u005pc8vgnomrcg1e"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","tag_id":"cjg7r8h2s005jc8vgup0qy6nw","_id":"cjg7r8h2w005vc8vgh6ln1m4g"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","tag_id":"cjg7r8h2t005nc8vgihwe7woc","_id":"cjg7r8h2w005wc8vgnrtfqf21"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","tag_id":"cjg7r8h2u005qc8vg72rppkhq","_id":"cjg7r8h2w005yc8vg7oki8p64"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","tag_id":"cjg7r8h2u005rc8vgosntc3ov","_id":"cjg7r8h2x005zc8vg3wyhj1z5"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","tag_id":"cjg7r8h2v005sc8vglzlpmwon","_id":"cjg7r8h2x0061c8vggy5a1hlw"},{"post_id":"cjg7r8h0o000wc8vgl9sorjjc","tag_id":"cjg7r8h2v005tc8vgfsdkqq6o","_id":"cjg7r8h2x0062c8vg57jtjfsq"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","tag_id":"cjg7r8h2v005uc8vgtbu02sbq","_id":"cjg7r8h300067c8vg1iv0ei1h"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","tag_id":"cjg7r8h2w005xc8vgq7astxnk","_id":"cjg7r8h310068c8vg1vuc9mi4"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","tag_id":"cjg7r8h2x0060c8vg9gost5yw","_id":"cjg7r8h31006ac8vgevnsu3qb"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","tag_id":"cjg7r8h2x0063c8vgb1p12mo7","_id":"cjg7r8h31006bc8vgqvv7vin0"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h32006dc8vgozudhprl"},{"post_id":"cjg7r8h0q000zc8vg638g4oc0","tag_id":"cjg7r8h2y0065c8vgbz1jovym","_id":"cjg7r8h32006ec8vgg9rltgth"},{"post_id":"cjg7r8h0s0012c8vgwzkcqmaw","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h34006gc8vg59klbwqf"},{"post_id":"cjg7r8h0s0012c8vgwzkcqmaw","tag_id":"cjg7r8h2z0066c8vgcg26x9zi","_id":"cjg7r8h34006hc8vg5ye22fbb"},{"post_id":"cjg7r8h0s0012c8vgwzkcqmaw","tag_id":"cjg7r8h310069c8vg0srnc0b5","_id":"cjg7r8h35006jc8vg6f3dsqy5"},{"post_id":"cjg7r8h0s0012c8vgwzkcqmaw","tag_id":"cjg7r8h32006cc8vgah9mquoa","_id":"cjg7r8h35006kc8vgtxc7dw6t"},{"post_id":"cjg7r8h0u0015c8vgbp1ts6ej","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h36006mc8vg9cmoklie"},{"post_id":"cjg7r8h0w0018c8vg4cu9ndqn","tag_id":"cjg7r8h34006ic8vgo99mm56a","_id":"cjg7r8h37006pc8vgi501sk02"},{"post_id":"cjg7r8h0w0018c8vg4cu9ndqn","tag_id":"cjg7r8h2x0060c8vg9gost5yw","_id":"cjg7r8h37006qc8vge38aoe4w"},{"post_id":"cjg7r8h0w0018c8vg4cu9ndqn","tag_id":"cjg7r8h2v005uc8vgtbu02sbq","_id":"cjg7r8h38006sc8vgvn1padf0"},{"post_id":"cjg7r8h0x001ac8vglg0xc83g","tag_id":"cjg7r8h2u005qc8vg72rppkhq","_id":"cjg7r8h3a006wc8vgsbf5ssbk"},{"post_id":"cjg7r8h0x001ac8vglg0xc83g","tag_id":"cjg7r8h38006rc8vgzte4j0pj","_id":"cjg7r8h3b006xc8vgt6kl2xb3"},{"post_id":"cjg7r8h0x001ac8vglg0xc83g","tag_id":"cjg7r8h38006tc8vg1b7a0y6j","_id":"cjg7r8h3c006zc8vgun7obco3"},{"post_id":"cjg7r8h0x001ac8vglg0xc83g","tag_id":"cjg7r8h39006uc8vg72eilaa0","_id":"cjg7r8h3c0070c8vgtqsah0vn"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","tag_id":"cjg7r8h2s005jc8vgup0qy6nw","_id":"cjg7r8h3f0076c8vgy79ui9ot"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","tag_id":"cjg7r8h1u002vc8vgkgqh5o4f","_id":"cjg7r8h3f0077c8vg5jd66ob5"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","tag_id":"cjg7r8h3c0071c8vg9st8ymxu","_id":"cjg7r8h3g0079c8vg5jkjjhtk"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","tag_id":"cjg7r8h3d0072c8vgf88nyrj9","_id":"cjg7r8h3g007ac8vg9yfwn2od"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","tag_id":"cjg7r8h3d0073c8vgjjyprzh7","_id":"cjg7r8h3h007cc8vgnb07z5a0"},{"post_id":"cjg7r8h0z001ec8vgaeg5zv8b","tag_id":"cjg7r8h3d0074c8vgvk9k8kls","_id":"cjg7r8h3h007dc8vge2xl8c9f"},{"post_id":"cjg7r8h11001hc8vgs4ioom1y","tag_id":"cjg7r8h34006ic8vgo99mm56a","_id":"cjg7r8h3i007fc8vgtliv4lo6"},{"post_id":"cjg7r8h11001hc8vgs4ioom1y","tag_id":"cjg7r8h2x0060c8vg9gost5yw","_id":"cjg7r8h3i007gc8vg15cyqbzz"},{"post_id":"cjg7r8h11001hc8vgs4ioom1y","tag_id":"cjg7r8h2v005uc8vgtbu02sbq","_id":"cjg7r8h3j007ic8vg6md47ray"},{"post_id":"cjg7r8h13001mc8vg4aqlmnxn","tag_id":"cjg7r8h0x0019c8vgpsmmsfaj","_id":"cjg7r8h3j007jc8vgqi656sso"},{"post_id":"cjg7r8h13001mc8vg4aqlmnxn","tag_id":"cjg7r8h1u002vc8vgkgqh5o4f","_id":"cjg7r8h3k007lc8vgz89f5kms"},{"post_id":"cjg7r8h14001nc8vgoii8xeeh","tag_id":"cjg7r8h3j007hc8vgupfvyz44","_id":"cjg7r8h3k007mc8vgcumqj3oy"},{"post_id":"cjg7r8h16001rc8vg17b4o5m4","tag_id":"cjg7r8h0h000kc8vgkjoi90lo","_id":"cjg7r8h3l007pc8vgswpnsa5u"},{"post_id":"cjg7r8h16001rc8vg17b4o5m4","tag_id":"cjg7r8h1u002vc8vgkgqh5o4f","_id":"cjg7r8h3m007qc8vgeffgs9ri"},{"post_id":"cjg7r8h16001rc8vg17b4o5m4","tag_id":"cjg7r8h3k007nc8vg2qcgu0cp","_id":"cjg7r8h3m007sc8vg3hy1dwlc"},{"post_id":"cjg7r8h19001uc8vgzmyc5p0z","tag_id":"cjg7r8h3j007hc8vgupfvyz44","_id":"cjg7r8h3m007tc8vg5m5k1rqz"},{"post_id":"cjg7r8h1c001zc8vguui8y9ep","tag_id":"cjg7r8h0x0019c8vgpsmmsfaj","_id":"cjg7r8h3n007vc8vgh5rgnet3"},{"post_id":"cjg7r8h1c001zc8vguui8y9ep","tag_id":"cjg7r8h3m007rc8vgt7yf8tzs","_id":"cjg7r8h3o007wc8vgbdj2s9or"},{"post_id":"cjg7r8h1d0021c8vgb5nwedl6","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h3o007yc8vgu7bnikrw"},{"post_id":"cjg7r8h1d0021c8vgb5nwedl6","tag_id":"cjg7r8gzv0002c8vgzxsoya8k","_id":"cjg7r8h3p007zc8vgcriyvl7v"},{"post_id":"cjg7r8h1d0021c8vgb5nwedl6","tag_id":"cjg7r8h010007c8vg5p8jemn7","_id":"cjg7r8h3p0081c8vgj8qd54fy"},{"post_id":"cjg7r8h1d0021c8vgb5nwedl6","tag_id":"cjg7r8h0c000gc8vgwv8nbwgp","_id":"cjg7r8h3p0082c8vgyjzcg4xd"},{"post_id":"cjg7r8h1g0025c8vgtq16rg6j","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h3q0084c8vg2ux229dl"},{"post_id":"cjg7r8h1g0025c8vgtq16rg6j","tag_id":"cjg7r8gzv0002c8vgzxsoya8k","_id":"cjg7r8h3q0085c8vgte2ux38k"},{"post_id":"cjg7r8h1g0025c8vgtq16rg6j","tag_id":"cjg7r8h3p0080c8vgdltqhpjk","_id":"cjg7r8h3r0087c8vgnfzutdpu"},{"post_id":"cjg7r8h1h0027c8vgrh0jq0kx","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h3s008bc8vgvpw9o2m3"},{"post_id":"cjg7r8h1h0027c8vgrh0jq0kx","tag_id":"cjg7r8h3r0086c8vgl1vwauyf","_id":"cjg7r8h3t008cc8vg94mez1y8"},{"post_id":"cjg7r8h1h0027c8vgrh0jq0kx","tag_id":"cjg7r8h3r0088c8vg14wtod9v","_id":"cjg7r8h3t008ec8vgj6tsgw6f"},{"post_id":"cjg7r8h1h0027c8vgrh0jq0kx","tag_id":"cjg7r8h3s0089c8vgt3yslmvn","_id":"cjg7r8h3t008fc8vgtj0q5vcu"},{"post_id":"cjg7r8h1k002ac8vgpocz8var","tag_id":"cjg7r8h3s008ac8vgn7mljqf6","_id":"cjg7r8h3v008jc8vg6lenz92g"},{"post_id":"cjg7r8h1k002ac8vgpocz8var","tag_id":"cjg7r8h3t008dc8vgglbdlnnc","_id":"cjg7r8h3v008kc8vg7uzxzxeu"},{"post_id":"cjg7r8h1k002ac8vgpocz8var","tag_id":"cjg7r8h3t008gc8vg5a600ktp","_id":"cjg7r8h3w008mc8vgpcc8indo"},{"post_id":"cjg7r8h1k002ac8vgpocz8var","tag_id":"cjg7r8h2y0065c8vgbz1jovym","_id":"cjg7r8h3w008nc8vglt89h94w"},{"post_id":"cjg7r8h1m002ec8vgo4bf05eb","tag_id":"cjg7r8h2q005bc8vgkcscan57","_id":"cjg7r8h3x008pc8vg7pevjbz2"},{"post_id":"cjg7r8h1m002ec8vgo4bf05eb","tag_id":"cjg7r8h3v008lc8vg97s2fryp","_id":"cjg7r8h3x008qc8vgp913zg7i"},{"post_id":"cjg7r8h1m002ec8vgo4bf05eb","tag_id":"cjg7r8h3w008oc8vguf6nf1pc","_id":"cjg7r8h3x008rc8vgkbhmjn4e"},{"post_id":"cjh3eb6t80000igvg4ltdhc6f","tag_id":"cjh3eb6tp0002igvgad8f7huz","_id":"cjh3eb6tr0003igvgb00xzmua"},{"post_id":"cjh3eb6t80000igvg4ltdhc6f","tag_id":"cjg7r8h32006cc8vgah9mquoa","_id":"cjh3eb6tr0005igvgb6ly6i47"},{"post_id":"cjg7taldn0000zovgai0bbdkj","tag_id":"cjg7r8h27003wc8vgfjg3djdj","_id":"cjh3fkrhr0001asvgck0yz1jc"},{"post_id":"cjg7taldn0000zovgai0bbdkj","tag_id":"cjh3fkrha0000asvgfxa9a5sv","_id":"cjh3fkrhr0002asvgv3vgcos5"}],"Tag":[{"name":"hexo","_id":"cjg7r8gzv0002c8vgzxsoya8k"},{"name":"github","_id":"cjg7r8h010007c8vg5p8jemn7"},{"name":"travisCI","_id":"cjg7r8h07000bc8vgvo7ixxpn"},{"name":"博客","_id":"cjg7r8h0c000gc8vgwv8nbwgp"},{"name":"树莓派","_id":"cjg7r8h0h000kc8vgkjoi90lo"},{"name":"StatSVN","_id":"cjg7r8h0l000rc8vg8nwomop2"},{"name":"SVN","_id":"cjg7r8h0p000xc8vgyr015q2x"},{"name":"技术","_id":"cjg7r8h0u0014c8vg13nmwrqv"},{"name":"rabbitmq","_id":"cjg7r8h0x0019c8vgpsmmsfaj"},{"name":"mqtt","_id":"cjg7r8h12001ic8vgg8brh339"},{"name":"音乐","_id":"cjg7r8h16001pc8vg5pag6n3u"},{"name":"乐器","_id":"cjg7r8h1b001yc8vglzabis3m"},{"name":"笛子","_id":"cjg7r8h1f0024c8vghi6urg33"},{"name":"sht31","_id":"cjg7r8h1p002ic8vgym3sqnu0"},{"name":"i2c","_id":"cjg7r8h1r002nc8vg1kfbh64m"},{"name":"python","_id":"cjg7r8h1u002vc8vgkgqh5o4f"},{"name":"socket","_id":"cjg7r8h1v002zc8vgv463q2vf"},{"name":"json","_id":"cjg7r8h1w0033c8vgqcvut525"},{"name":"ngrok","_id":"cjg7r8h1z003ac8vgdjy3i5qu"},{"name":"ssh","_id":"cjg7r8h20003ec8vgsvkpczo8"},{"name":"内网穿透","_id":"cjg7r8h24003oc8vgwbiaq40m"},{"name":"摄像头","_id":"cjg7r8h27003wc8vgfjg3djdj"},{"name":"忘记密码","_id":"cjg7r8h2a0043c8vguytfqxl7"},{"name":"crontab","_id":"cjg7r8h2c0049c8vgpn7udkqn"},{"name":"dht11","_id":"cjg7r8h2e004cc8vgd2czkmff"},{"name":"gpio","_id":"cjg7r8h2f004ic8vgju7ieba7"},{"name":"传感器","_id":"cjg7r8h2i004qc8vg0clyk8kh"},{"name":"Win32DiskImager","_id":"cjg7r8h2j004tc8vgvcxjexbf"},{"name":"php","_id":"cjg7r8h2p0055c8vgee80n5zx"},{"name":"wordpress","_id":"cjg7r8h2q005bc8vgkcscan57"},{"name":"php-fpm","_id":"cjg7r8h2s005gc8vgt69qquh6"},{"name":"java","_id":"cjg7r8h2s005jc8vgup0qy6nw"},{"name":"maven","_id":"cjg7r8h2t005nc8vgihwe7woc"},{"name":"svn","_id":"cjg7r8h2u005qc8vg72rppkhq"},{"name":"jenkins","_id":"cjg7r8h2u005rc8vgosntc3ov"},{"name":"nexus","_id":"cjg7r8h2v005sc8vglzlpmwon"},{"name":"redhat","_id":"cjg7r8h2v005tc8vgfsdkqq6o"},{"name":"sql","_id":"cjg7r8h2v005uc8vgtbu02sbq"},{"name":"数据","_id":"cjg7r8h2w005xc8vgq7astxnk"},{"name":"数据库","_id":"cjg7r8h2x0060c8vg9gost5yw"},{"name":"备份","_id":"cjg7r8h2x0063c8vgb1p12mo7"},{"name":"闲谈","_id":"cjg7r8h2y0065c8vgbz1jovym"},{"name":"apt","_id":"cjg7r8h2z0066c8vgcg26x9zi"},{"name":"apt-get","_id":"cjg7r8h310069c8vg0srnc0b5"},{"name":"linux","_id":"cjg7r8h32006cc8vgah9mquoa"},{"name":"db2","_id":"cjg7r8h34006ic8vgo99mm56a"},{"name":"gitlab","_id":"cjg7r8h38006rc8vgzte4j0pj"},{"name":"杂谈","_id":"cjg7r8h38006tc8vg1b7a0y6j"},{"name":"感悟","_id":"cjg7r8h39006uc8vg72eilaa0"},{"name":"base64","_id":"cjg7r8h3c0071c8vg9st8ymxu"},{"name":"图片处理","_id":"cjg7r8h3d0072c8vgf88nyrj9"},{"name":"加密","_id":"cjg7r8h3d0073c8vgjjyprzh7"},{"name":"解密","_id":"cjg7r8h3d0074c8vgvk9k8kls"},{"name":"markdown","_id":"cjg7r8h3j007hc8vgupfvyz44"},{"name":"wlan","_id":"cjg7r8h3k007nc8vg2qcgu0cp"},{"name":"错误解决","_id":"cjg7r8h3m007rc8vgt7yf8tzs"},{"name":"文章迁移","_id":"cjg7r8h3p0080c8vgdltqhpjk"},{"name":"域名","_id":"cjg7r8h3r0086c8vgl1vwauyf"},{"name":"ssl","_id":"cjg7r8h3r0088c8vg14wtod9v"},{"name":"https","_id":"cjg7r8h3s0089c8vgt3yslmvn"},{"name":"csv","_id":"cjg7r8h3s008ac8vgn7mljqf6"},{"name":"git","_id":"cjg7r8h3t008dc8vgglbdlnnc"},{"name":"故事","_id":"cjg7r8h3t008gc8vg5a600ktp"},{"name":"apache","_id":"cjg7r8h3v008lc8vg97s2fryp"},{"name":"nginx","_id":"cjg7r8h3w008oc8vguf6nf1pc"},{"name":"docker","_id":"cjh3eb6tp0002igvgad8f7huz"},{"name":"破解","_id":"cjh3fkrha0000asvgfxa9a5sv"}]}}