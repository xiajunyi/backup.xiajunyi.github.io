{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/love.js","path":"love.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/docker1.jpg","path":"img/xjy/docker1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/git0001.jpg","path":"img/xjy/git0001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/gitlab1s.jpg","path":"img/xjy/gitlab1s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/docker1s.jpg","path":"img/xjy/docker1s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/diary.jpg","path":"img/xjy/diary.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/monkey.jpg","path":"img/xjy/monkey.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42001s.jpg","path":"img/xjy/p42001s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab003.jpg","path":"img/xjy/rab003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31003.jpg","path":"img/xjy/sht31003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31001.png","path":"img/xjy/sht31001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31004.png","path":"img/xjy/sht31004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31002.png","path":"img/xjy/sht31002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp002.png","path":"img/xjy/smp002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sjds001.jpg","path":"img/xjy/sjds001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp003.jpg","path":"img/xjy/smp003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp006.jpg","path":"img/xjy/smp006.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp005.png","path":"img/xjy/smp005.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp009.png","path":"img/xjy/smp009.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp008.jpg","path":"img/xjy/smp008.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn002.jpg","path":"img/xjy/statsvn002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/socket001.png","path":"img/xjy/socket001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/tangquanchi.jpg","path":"img/xjy/tangquanchi.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook001s.jpg","path":"img/xjy/webhook001s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/alipay.jpg","path":"img/xjy/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple1.jpg","path":"img/xjy/hexoSimple1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/bch001.jpg","path":"img/xjy/bch001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab0001.png","path":"img/xjy/rab0001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42001.jpg","path":"img/xjy/p42001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42002.jpg","path":"img/xjy/p42002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42003.jpg","path":"img/xjy/p42003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42004.jpg","path":"img/xjy/p42004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab002.jpg","path":"img/xjy/rab002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp007.png","path":"img/xjy/smp007.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn001.jpg","path":"img/xjy/statsvn001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp006.png","path":"img/xjy/smp006.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn003.jpg","path":"img/xjy/statsvn003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/dizi001.jpg","path":"img/xjy/dizi001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/gitlab1.jpg","path":"img/xjy/gitlab1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple3.jpg","path":"img/xjy/hexoSimple3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/jenkins config.png","path":"img/xjy/jenkins config.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp004.png","path":"img/xjy/smp004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple2.jpg","path":"img/xjy/hexoSimple2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab001.jpg","path":"img/xjy/rab001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp001.png","path":"img/xjy/smp001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/wxpay.png","path":"img/xjy/wxpay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook002.vsd","path":"img/xjy/webhook002.vsd","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook002.jpg","path":"img/xjy/webhook002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34004s.jpg","path":"img/xjy/p34004s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook001.jpg","path":"img/xjy/webhook001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34001.jpg","path":"img/xjy/p34001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34004.jpg","path":"img/xjy/p34004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34003.jpg","path":"img/xjy/p34003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34002.jpg","path":"img/xjy/p34002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p43001s.jpg","path":"img/xjy/p43001s.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9c1a550a4b1a792bdef7ca91396a1f8cf2d538d2","modified":1527141153718},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1521366514000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1521366514000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1521366514000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1521366514000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1521366514000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1521366514000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1521366514000},{"_id":"themes/yilia/_config.yml","hash":"2be784c35e483880b224355a9d880f5e7119500a","modified":1527734361830},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1521366514000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1521366514000},{"_id":"source/_posts/p10.md","hash":"f5c3bb9ad503cc8be6e2fe6249aec046635a8f5e","modified":1521701086298},{"_id":"source/_posts/p11.md","hash":"f2088f0660072b7c7b39c1d67d040efc9ab4c161","modified":1527144166905},{"_id":"source/_posts/p1.md","hash":"f5439e57340b6930b2235af0c30abeecedb4c07e","modified":1527143749122},{"_id":"source/_posts/p12.md","hash":"c7b6a04c199c7c84b6aed82b18407fa12a079566","modified":1527144201071},{"_id":"source/_posts/p16.md","hash":"a04771a1acf1e65d62cfb9132a16c9746fd71c97","modified":1526459278535},{"_id":"source/_posts/p14.md","hash":"69338b9aa536bce47c1a3664b99c2b6f0200a45c","modified":1526458833906},{"_id":"source/_posts/p15.md","hash":"2b0a28240ed814076dadddb05ed2037c70f96049","modified":1526459029901},{"_id":"source/_posts/p17.md","hash":"747da32b00fd2969c825bdefebc42775cd546914","modified":1526459753894},{"_id":"source/_posts/p19.md","hash":"09c666786d87f78945c78cde2f62e0f7e2059234","modified":1526460546170},{"_id":"source/_posts/p13.md","hash":"8bd297a3bf56a774892dc2a4fcda767bae24bd76","modified":1526458859397},{"_id":"source/_posts/p20.md","hash":"fee5014974a7c1c1280228d1ecb019ac8808f3b2","modified":1526460689237},{"_id":"source/_posts/p23.md","hash":"a43222681f6deec136419f8e216461cde6617f99","modified":1527144276893},{"_id":"source/_posts/p18.md","hash":"7080022888a7aa97721b1b5040eecc7898add122","modified":1526460375330},{"_id":"source/_posts/p21.md","hash":"ba9c0f6ad1f43a520ea172f97e8abff21f05cfed","modified":1526460835854},{"_id":"source/_posts/p22.md","hash":"1b5d81aa043af2bf7a71135671669fb8afc1a2bf","modified":1526460893450},{"_id":"source/_posts/p26.md","hash":"718a3e5af2072049b13a1b14d8cc21a0a793c050","modified":1521701906605},{"_id":"source/_posts/p25.md","hash":"5831f7c5b056e9069128aa0e6cc70a4ab7773fa1","modified":1527144324546},{"_id":"source/_posts/p28.md","hash":"4a69bfd3d449e046c90c70db8391bf087e35ed22","modified":1526154267000},{"_id":"source/_posts/p27.md","hash":"3fefd2ed3a1f6039bf27434fb85e3f3957eb906c","modified":1527144349996},{"_id":"source/_posts/p2.md","hash":"9a69d12c094f2e742e4e5282241a72109c5ad371","modified":1527143783814},{"_id":"source/_posts/p24.md","hash":"1f90cdd4f113f15f9eb2bfcd8be1464432b1998b","modified":1526461661770},{"_id":"source/_posts/p31.md","hash":"23e555dcc330b5343a637002135e4349c12db4e2","modified":1526462442388},{"_id":"source/_posts/p29.md","hash":"af67fb4f0ca429166df7ee74c81cf3ca557806c6","modified":1527144381833},{"_id":"source/_posts/p30.md","hash":"2b681080a0634136aaad03a18473b5d3e0bc7788","modified":1526150653416},{"_id":"source/_posts/p3.md","hash":"45e7c83cb0ebc25806ee41c0947e18da98959652","modified":1527324412224},{"_id":"source/_posts/p34.md","hash":"426562f366c06e1c2711f89529ec3354624f506c","modified":1527148221421},{"_id":"source/_posts/p35.md","hash":"3c0edacccb0105483b296db7430c7d975fc4e323","modified":1527734439381},{"_id":"source/_posts/p36.md","hash":"ce882142dae98a4871d08117f1683f1e4f574276","modified":1527147918538},{"_id":"source/_posts/p37.md","hash":"83a59e7d2c9d40d0cee9ed095139b5aa9cdba636","modified":1527147315449},{"_id":"source/_posts/p33.md","hash":"20f1e6c234332b0276b217236a7abf0984a1d60f","modified":1527144474749},{"_id":"source/_posts/p39.md","hash":"22d6515cfd86710370d732a7beb378c0bc688e0b","modified":1527147298189},{"_id":"source/_posts/p4.md","hash":"03b7ba9e9e96bed11e1d19a9a76b962f230ae45f","modified":1526458919731},{"_id":"source/_posts/p40.md","hash":"5916d3f4593df75c80a491a4d9315fefba64cbc0","modified":1527324104426},{"_id":"source/_posts/p41.md","hash":"30fa3a0e332a924d6fe9c407319bf79f2f4fa9e9","modified":1527147584517},{"_id":"source/_posts/p43.md","hash":"8966a117de2a85c88f725aecce6a6382d0cb6ba2","modified":1527733976614},{"_id":"source/_posts/p38.md","hash":"a2904eb3825aa3f2627995eed0d72bd3121b09ca","modified":1527147306203},{"_id":"source/_posts/p42.md","hash":"f9c4ae49540de767ba8877e0383da1173f0d8a42","modified":1527324200834},{"_id":"source/_posts/p32.md","hash":"84e4860d2780323d26c954f5f7565a1b43ef16e5","modified":1527144435970},{"_id":"source/_posts/p5.md","hash":"485a8c3053eef55acc7709a1a09d26864c511b48","modified":1527144048909},{"_id":"source/_posts/p7.md","hash":"405dbb610a04256f5b93a2472b72b75d09fd07d0","modified":1527144029098},{"_id":"source/_posts/p9.md","hash":"01b920e2d1b47ead5105c68df00660c15a80d120","modified":1527144120067},{"_id":"source/_posts/p8.md","hash":"8dcca1dd15bb5b624c98fdfebb7051652104d0d7","modified":1527144080596},{"_id":"source/_posts/p6.md","hash":"fb1e5e43f555ee92284a6efe2eaae078c0f3ba03","modified":1527144039091},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1521366514000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1521366514000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1521366514000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1521366514000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1521366514000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1521366514000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1521366514000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1521366514000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1521366514000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1521366514000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521366514000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1521366514000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1521366514000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1521366514000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1521366514000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1521366514000},{"_id":"themes/yilia/source/love.js","hash":"4345136020d12798c907c9094d0be50770f61f1a","modified":1527325627458},{"_id":"source/_drafts/tags/index.md","hash":"a6cbde9edd8a4401264d38298ba6f9fbc1789c73","modified":1521506542601},{"_id":"source/_drafts/categories/index.md","hash":"53d27c5cfaca2eedbe3f429502c95b8422253b0a","modified":1521506542601},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1521366514000},{"_id":"source/_drafts/_posts/Babel-学习笔记.md","hash":"823648fd744d212ecf74e82d86907d24b0032a7f","modified":1521506542589},{"_id":"source/_drafts/_posts/ESlint 超简单入门教程.md","hash":"cdcb0f54ceac98fa268aaee029add792acb78d25","modified":1521506542590},{"_id":"source/_drafts/_posts/GIT-使用之-SSH-以及码云上配置-SSH.md","hash":"9f4f817d0dbdd78c3b916f472487e6064bc65547","modified":1521506542590},{"_id":"source/_drafts/_posts/React-开发中不得不注意的两个大坑.md","hash":"b0772d304b1e0b254cc40fcef1a2fb3096d6dd92","modified":1521506542591},{"_id":"source/_drafts/_posts/XSS-攻击原理、实战、预防.md","hash":"40bb6ecb2a4276497ca595529d66b12a7888fc10","modified":1521506542593},{"_id":"source/_drafts/_posts/Webstorm-超实用教程.md","hash":"5451fa13927624a04d009084c2c5b256a8f47901","modified":1521506542592},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521366514000},{"_id":"source/_drafts/_posts/npm-发布包填坑指南.md","hash":"6e06aa45b8244361e3db60a174e9672ad650e7ef","modified":1521506542594},{"_id":"source/_drafts/_posts/es6-异步编程之-Promise-从认识到使用.md","hash":"dbce12ff74005946a6625eb31e2af2388c8f025f","modified":1521506542593},{"_id":"source/_drafts/_posts/mongoose-学习笔记.md","hash":"848f939a1fa055ea77c1fa7a086239362703bb03","modified":1521506542594},{"_id":"source/_drafts/_posts/三十分钟学会-Less.md","hash":"505624de02e5d2607445585dea7db91e7f7175e9","modified":1521506542595},{"_id":"source/_drafts/_posts/再见，2017！.md","hash":"2985e544fd6c4c1f9fe97ac9ec767160adcc9de6","modified":1521506542596},{"_id":"source/_drafts/_posts/使用Parcel零配置创建React应用（译）.md","hash":"10ae805adf9a22d025c8479d3939403199c1439b","modified":1521506542596},{"_id":"source/_drafts/_posts/前后端分离最佳实践.md","hash":"15f5edb50425db5223dd2d4ff51e4fa16436190a","modified":1521506542597},{"_id":"source/_drafts/_posts/图解Web服务器.md","hash":"34c17fd089afe92fc988c9a0a1db778917993529","modified":1521506542597},{"_id":"source/_drafts/_posts/再识-Angular.md","hash":"c1ae8783eeabc924f8dde7488d926b22a6e16c26","modified":1521506542597},{"_id":"source/_drafts/_posts/不起眼的--editorconfig-.md","hash":"fca32382e29bf75008057448c8a4364ece29c591","modified":1521506542595},{"_id":"source/_drafts/_posts/当然我在扯淡.md","hash":"01cde07deb3f74edc62f43df18642bd46ecb95b8","modified":1521506542597},{"_id":"source/_drafts/_posts/微信小程序原生自定义组件开发实战.md","hash":"25bef68a0410c70863be58e10f9b6b5db28ab10e","modified":1521506542598},{"_id":"source/_drafts/_posts/微信小程序出现【需要进行身份验证】弹框解决方法.md","hash":"4fed0d1d0fc056a6c2fbeadc98e112b63d4ae17a","modified":1521506542598},{"_id":"source/_drafts/_posts/扒一扒路由的演变过程.md","hash":"f37bc16f64aa83cf8f4a4cc92659eced0bbf7900","modified":1521506542598},{"_id":"source/_drafts/_posts/程序员应该重视版本控制.md","hash":"bf507b2cb363f4b9d0a196fd63c88f96224fad87","modified":1521506542599},{"_id":"source/_drafts/_posts/梳理微信小程序登录时序图：授权与-Oauth2-0.md","hash":"400a957cd3158a9078e460ec3892f1d6848693b1","modified":1521506542599},{"_id":"source/_drafts/_posts/认识-Iconfont-以及什么是--eot、-woff、-ttf、-svg.md","hash":"8042dbea20de959927b716fb6370f5a3dcf674fb","modified":1521506542600},{"_id":"source/_drafts/_posts/解决-npm-无法安装-devDependencies-下的依赖包的问题.md","hash":"dd104588c96ccb811e17a06b6b42040bba3ae03a","modified":1521506542599},{"_id":"source/_drafts/_posts/遨游密码世界（二）.md","hash":"2453e1092704f9d5b204e46d11bfbb5c3db1eb19","modified":1521506542600},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1521366514000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1521366514000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1521366514000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1521366514000},{"_id":"source/_drafts/_posts/遨游密码世界（一）.md","hash":"cdf01465ca266d94ed4370752f6eca4491be7fac","modified":1521506542600},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1521366514000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1521366514000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1521366514000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1521366514000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1521366514000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1521366514000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1521366514000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1521366514000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1521366514000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1521366514000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1526956049030},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1521366514000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1521366514000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1521366514000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1521366514000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1521366514000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1521366514000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1521366514000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1521366514000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1521366514000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1521366514000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1521366514000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1521366514000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1521366514000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1521366514000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1521366514000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1521366514000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1521366514000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1521366514000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1521366514000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"d9286cdc54d82ba1e3aa3f7b38b3ca587bd9e5e5","modified":1527325683809},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"c9cc1b081122ab204f19c858bf34d1ad9e8b8590","modified":1526957656396},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1521366514000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1521366514000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1521366514000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1521366514000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1521366514000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1521366514000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1521366514000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1521366514000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1521366514000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1521366514000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1521366514000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1521366514000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1521366514000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1521366514000},{"_id":"themes/yilia/source/img/xjy/docker1.jpg","hash":"0702d8ad888066ef821f0401c0b2c10da3815563","modified":1526548077115},{"_id":"themes/yilia/source/img/xjy/git0001.jpg","hash":"1d45d763e6ebb41b20d1762f81e0d6cc4fae43a5","modified":1521791659335},{"_id":"themes/yilia/source/img/xjy/gitlab1s.jpg","hash":"832eaf262e03b04d91b9ecdb1363dd4d7de64396","modified":1527147684991},{"_id":"themes/yilia/source/img/xjy/docker1s.jpg","hash":"5ee1c61ef57ac3ab80ac6f128eb52fbe8e69963b","modified":1527147868625},{"_id":"themes/yilia/source/img/xjy/diary.jpg","hash":"334a4a7120efd8a59e0f59809d99e1e272cbe450","modified":1527143179331},{"_id":"themes/yilia/source/img/xjy/monkey.jpg","hash":"b8013b45d922d94ad5d8d31a5f237b9d054d5a1b","modified":1521709580008},{"_id":"themes/yilia/source/img/xjy/p42001s.jpg","hash":"9d34434c24838ac2589e0edc5e4cde3d121c82eb","modified":1527317874889},{"_id":"themes/yilia/source/img/xjy/rab003.jpg","hash":"95813b30ef6273510d3ed12a0163783fcc651932","modified":1521787371864},{"_id":"themes/yilia/source/img/xjy/sht31003.jpg","hash":"806acc39fb85b670dac4d86e7f7ac9639db07807","modified":1521788352946},{"_id":"themes/yilia/source/img/xjy/sht31001.png","hash":"bca85173788a7c5e9037178ac436b2290ffb1cb9","modified":1521787463500},{"_id":"themes/yilia/source/img/xjy/sht31004.png","hash":"44bc517adcc7ecd972f7a91d8fc53f8208f7bccf","modified":1521788480021},{"_id":"themes/yilia/source/img/xjy/sht31002.png","hash":"e3fe68a275737fc5ef8ae4e02abf4700fbe583a3","modified":1521788305344},{"_id":"themes/yilia/source/img/xjy/smp002.png","hash":"f5cea7dd21f3676f61ad95909f921a742db3a7e9","modified":1521790526114},{"_id":"themes/yilia/source/img/xjy/sjds001.jpg","hash":"5c8fcd1047b137f8bbceaac8ed4176c3942e18d8","modified":1521791509260},{"_id":"themes/yilia/source/img/xjy/smp003.jpg","hash":"cc29f4201bcbd83e6cb1f58a853728881bfdf474","modified":1521790595442},{"_id":"themes/yilia/source/img/xjy/smp006.jpg","hash":"8c06589ed91dfcb316ae6e50e80769408a092b21","modified":1521790747579},{"_id":"themes/yilia/source/img/xjy/smp005.png","hash":"839a06ab1b4d36c23849022153e91a0eb28c677d","modified":1521790671112},{"_id":"themes/yilia/source/img/xjy/smp009.png","hash":"a174b185ef08d743b51b9a915966e38a19396073","modified":1521791423949},{"_id":"themes/yilia/source/img/xjy/smp008.jpg","hash":"671dfaf19e30c2a87469fc08d2b681f092460277","modified":1521791166313},{"_id":"themes/yilia/source/img/xjy/statsvn002.jpg","hash":"82b8a3e67bffd94f1227d1c547a4633472dcb4ef","modified":1521787260827},{"_id":"themes/yilia/source/img/xjy/socket001.png","hash":"99b03609189c4418c142c5b78a6f58eb8f821fc5","modified":1521790345905},{"_id":"themes/yilia/source/img/xjy/tangquanchi.jpg","hash":"e9f247a2e560364739b23b8244d43236353dc48a","modified":1527147075710},{"_id":"themes/yilia/source/img/xjy/webhook001s.jpg","hash":"39ac6cf9264ab2442845da5459479e8381ffc37e","modified":1527147522398},{"_id":"themes/yilia/source/img/xjy/alipay.jpg","hash":"10353a9442053ad23a26a5588ee37c0bf55049fe","modified":1521373453203},{"_id":"themes/yilia/source/img/xjy/hexoSimple1.jpg","hash":"12dc93fd58c5d2c030f2738945cac5701f522133","modified":1521786602501},{"_id":"themes/yilia/source/img/xjy/bch001.jpg","hash":"a7c836270b54080f7dae17f807997b5b32b1bf8c","modified":1521786961044},{"_id":"themes/yilia/source/img/xjy/rab0001.png","hash":"bd5e373a302cf35f71c162b1bc2d9fe95ec10ac4","modified":1521792162871},{"_id":"themes/yilia/source/img/xjy/p42001.jpg","hash":"f3219c934856f8e9556a70fe26026ac4d4cd917b","modified":1527317784993},{"_id":"themes/yilia/source/img/xjy/p42002.jpg","hash":"405b21c0ab239d998e9555af7ce1c8e3e01a2cab","modified":1527318962138},{"_id":"themes/yilia/source/img/xjy/p42003.jpg","hash":"f6ebccb0fac9a0e4f4459edaeefcb71c272dd413","modified":1527320697214},{"_id":"themes/yilia/source/img/xjy/p42004.jpg","hash":"b7fa84b8a0abc3ef941025d6b758300154f71af5","modified":1527323111581},{"_id":"themes/yilia/source/img/xjy/rab002.jpg","hash":"5fdbaa30955cdd0feb69d08bf7389ed6483d9e0f","modified":1521787344145},{"_id":"themes/yilia/source/img/xjy/smp007.png","hash":"e741fe3989a4b38a33eb5461343dbd5a20efd3e0","modified":1521791132111},{"_id":"themes/yilia/source/img/xjy/statsvn001.jpg","hash":"cb7b9834d7fa1b349673cae88aa1575ef38a2492","modified":1521787120243},{"_id":"themes/yilia/source/img/xjy/smp006.png","hash":"f7e7195f7d31813ba37ceac7867bf59b1db6b498","modified":1521791064975},{"_id":"themes/yilia/source/img/xjy/statsvn003.jpg","hash":"c535344b04301c58f63842aef1d173b3d9e0557e","modified":1521787182938},{"_id":"themes/yilia/source/img/xjy/dizi001.jpg","hash":"f709e47036cfae3f9f6a91a7bd0217dcb9eb4786","modified":1521787047147},{"_id":"themes/yilia/source/img/xjy/gitlab1.jpg","hash":"92f7a1ba7b134909744b64633fea8025d0a87e84","modified":1526904067944},{"_id":"themes/yilia/source/img/xjy/hexoSimple3.jpg","hash":"e68de1ff8d35fe369d4b152579888e283f65da9a","modified":1521786876789},{"_id":"themes/yilia/source/img/xjy/jenkins config.png","hash":"dd952388221ebbc565cfaf9958d6f76451aa2860","modified":1521682729790},{"_id":"themes/yilia/source/img/xjy/smp004.png","hash":"1745e18d62861f7c58356d731f8993940f72b8f0","modified":1521790645446},{"_id":"themes/yilia/source/img/xjy/hexoSimple2.jpg","hash":"cd02d8ef037cf01330ccfc267ee3eaae95842f1a","modified":1521786811507},{"_id":"themes/yilia/source/img/xjy/rab001.jpg","hash":"a2965e40573d981ac3a895af976997405289033e","modified":1521787323797},{"_id":"themes/yilia/source/img/xjy/smp001.png","hash":"986206b653e1e808432e5b57792d0ee137a4ca93","modified":1521790414790},{"_id":"themes/yilia/source/img/xjy/wxpay.png","hash":"7da6e029c93817bb6422313289b0a9fb32dfb632","modified":1521373426022},{"_id":"themes/yilia/source/img/xjy/webhook002.vsd","hash":"031f748828bc873b1ea6c8f645da5fd44093fbe5","modified":1527066838395},{"_id":"themes/yilia/source/img/xjy/webhook002.jpg","hash":"83566c316ccb1571f728c320011d563f010e1c6e","modified":1527062140537},{"_id":"themes/yilia/source/img/xjy/p34004s.jpg","hash":"eb0bcccc43c4b774058fff1850db13097ed7f0d8","modified":1527148163822},{"_id":"themes/yilia/source/img/xjy/webhook001.jpg","hash":"c9e0e81be48317653bdf3d23b34012620da28135","modified":1527066856820},{"_id":"themes/yilia/source/img/xjy/p34001.jpg","hash":"37bccd58d02346c314f67bc00451c95ab4568689","modified":1508124916322},{"_id":"themes/yilia/source/img/xjy/p34004.jpg","hash":"fd78dbb7370685943144d43644ed49b0c88d9df7","modified":1508124906833},{"_id":"themes/yilia/source/img/xjy/p34003.jpg","hash":"5ffcb8d86091365230e4af536d21cc91012e7eae","modified":1508124916309},{"_id":"themes/yilia/source/img/xjy/p34002.jpg","hash":"228af15d63cada5ab0f80fbaeffbff0b62db7a55","modified":1508124910585},{"_id":"themes/yilia/source/img/xjy/p43001s.jpg","hash":"0b7d4d832df8abcb479fd649bd8458e07ab048eb","modified":1527733889363}],"Category":[{"name":"未分类","_id":"cjhtwv12u0002k4vgc3vhsbuu"},{"name":"JAVA","_id":"cjhtwv1300007k4vgvsrdzngz"},{"name":"树莓派学习","_id":"cjhtwv135000dk4vgonrbqp9x"},{"name":"乐器知识","_id":"cjhtwv139000hk4vgqi2iho6w"},{"name":"编程语言","parent":"cjhtwv1300007k4vgvsrdzngz","_id":"cjhtwv13i000sk4vg19swlude"},{"name":"rabbitmq","_id":"cjhtwv13r001ak4vgzoxtl8ve"},{"name":"生活杂记","parent":"cjhtwv139000hk4vgqi2iho6w","_id":"cjhtwv13v001gk4vglnk8b86n"},{"name":"修改页面","_id":"cjhtwv13z001ok4vgml72lg1s"},{"name":"LINUX","_id":"cjhtwv143001vk4vg9feruoaf"},{"name":"DB2","_id":"cjhtwv1480022k4vga1ukzzho"},{"name":"技术感悟","_id":"cjhtwv14b0028k4vgtd3n269b"},{"name":"mqtt","parent":"cjhtwv13r001ak4vgzoxtl8ve","_id":"cjhtwv14g002fk4vgp9b7t51n"},{"name":"WORDPRESS","_id":"cjhtwv14j002lk4vgp6kuh71z"},{"name":"生活杂记","_id":"cjhtwv14o002tk4vg36irn6tu"},{"name":"rabbitmq学习","_id":"cjhtwv14s002zk4vg4e7a95ut"},{"name":"编程语言","parent":"cjhtwv143001vk4vg9feruoaf","_id":"cjhtwv1510038k4vgmg6aevo2"},{"name":"docker","_id":"cjhtwv153003ck4vg42kbp4te"},{"name":"centos","_id":"cjhtwv155003gk4vgnwr3xnre"},{"name":"数据库","parent":"cjhtwv1480022k4vga1ukzzho","_id":"cjhtwv157003mk4vgkr57aqw3"},{"name":"生活杂记","parent":"cjhtwv14b0028k4vgtd3n269b","_id":"cjhtwv159003tk4vgeagyzjz8"},{"name":"nginx","_id":"cjhtwv15b003zk4vge7om7kf3"},{"name":"linux","_id":"cjhtwv15e0049k4vgdzbbnur8"},{"name":"编程语言","parent":"cjhtwv14j002lk4vgp6kuh71z","_id":"cjhtwv15j004nk4vgn8q6surs"},{"name":"markdown","_id":"cjhtwv15r0058k4vg3pu286s0"},{"name":"编程语言","parent":"cjhtwv153003ck4vg42kbp4te","_id":"cjhtwv15w005kk4vg0ekl1twz"},{"name":"shadowsocks","parent":"cjhtwv155003gk4vgnwr3xnre","_id":"cjhtwv15z005pk4vgdh0r3ml4"},{"name":"未分类","parent":"cjhtwv157003mk4vgkr57aqw3","_id":"cjhtwv1630061k4vgc6032ciw"}],"Data":[],"Page":[],"Post":[{"title":"该文章用于记录树莓派custshell的配置","id":"252","date":"2018-01-07T07:52:24.000Z","_content":"\n1.开启ssh功能\n\n\t在内存卡根目录新建一个ssh文件\n\n2.打开i2c和camera功能\n\n\tsudo raspi-config nonint do_i2c 0 \n    sudo raspi-config nonint do_camera 0\n\n3.复制custshell文件到指定目录\n\n4.开启crontab任务","source":"_posts/p10.md","raw":"---\ntitle: 该文章用于记录树莓派custshell的配置\nid: 252\ncategories:\n  - 未分类\ndate: 2018-01-07 15:52:24\ntags: [树莓派]\n---\n\n1.开启ssh功能\n\n\t在内存卡根目录新建一个ssh文件\n\n2.打开i2c和camera功能\n\n\tsudo raspi-config nonint do_i2c 0 \n    sudo raspi-config nonint do_camera 0\n\n3.复制custshell文件到指定目录\n\n4.开启crontab任务","slug":"p10","published":1,"updated":"2018-03-22T06:44:46.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv12j0000k4vg0qn667ia","content":"<p>1.开启ssh功能</p>\n<pre><code>在内存卡根目录新建一个ssh文件\n</code></pre><p>2.打开i2c和camera功能</p>\n<pre><code>sudo raspi-config nonint do_i2c 0 \nsudo raspi-config nonint do_camera 0\n</code></pre><p>3.复制custshell文件到指定目录</p>\n<p>4.开启crontab任务</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.开启ssh功能</p>\n<pre><code>在内存卡根目录新建一个ssh文件\n</code></pre><p>2.打开i2c和camera功能</p>\n<pre><code>sudo raspi-config nonint do_i2c 0 \nsudo raspi-config nonint do_camera 0\n</code></pre><p>3.复制custshell文件到指定目录</p>\n<p>4.开启crontab任务</p>\n"},{"title":"用StatSVN统计SVN库中各作者的提交情况和排行","id":"421","date":"2018-02-09T07:36:46.000Z","_content":"\n# 想法\n\n我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 \n\n# **实践**\n\n又说了一大堆废话，下面是我的安装和使用过程：\n\n<!--more-->\n\n1.下载StatSVN，其实是一个jar包\n\n[http://sourceforge.net/projects/statsvn/](http://sourceforge.net/projects/statsvn/)\n\n2.解压后把jar包拷贝到指定目录\n\n例如我的：D:\\Code\\statsvn-0.7.0\n\n3.进入到上面的目录后checkout出需要的SVN库中的代码\n``` shell \n<svn co http://repo/svn/xxx/branches/1.10.0-dev\n```\n4.导出log文件，需要一段时间\n``` shell \nsvn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log\n```\n5.生成分析网页和图片，需要一段时间\n``` \n#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js \n```\n\n6.待上一步完成后，打开生成的index.html，即可查看统计的结果（**出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径**）\n\n（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）\n\n![](/img/xjy/statsvn001.jpg)\n\n![](/img/xjy/statsvn002.jpg)\n \n![](/img/xjy/statsvn003.jpg)","source":"_posts/p12.md","raw":"---\ntitle: 用StatSVN统计SVN库中各作者的提交情况和排行\ntags:\n  - 运维\n  - StatSVN\n  - SVN\n  - 技术\nid: 421\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-02-09 15:36:46\n---\n\n# 想法\n\n我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 \n\n# **实践**\n\n又说了一大堆废话，下面是我的安装和使用过程：\n\n<!--more-->\n\n1.下载StatSVN，其实是一个jar包\n\n[http://sourceforge.net/projects/statsvn/](http://sourceforge.net/projects/statsvn/)\n\n2.解压后把jar包拷贝到指定目录\n\n例如我的：D:\\Code\\statsvn-0.7.0\n\n3.进入到上面的目录后checkout出需要的SVN库中的代码\n``` shell \n<svn co http://repo/svn/xxx/branches/1.10.0-dev\n```\n4.导出log文件，需要一段时间\n``` shell \nsvn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log\n```\n5.生成分析网页和图片，需要一段时间\n``` \n#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js \n```\n\n6.待上一步完成后，打开生成的index.html，即可查看统计的结果（**出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径**）\n\n（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）\n\n![](/img/xjy/statsvn001.jpg)\n\n![](/img/xjy/statsvn002.jpg)\n \n![](/img/xjy/statsvn003.jpg)","slug":"p12","published":1,"updated":"2018-05-24T06:43:21.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv12s0001k4vgmqqu0w9w","content":"<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 </p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a><strong>实践</strong></h1><p>又说了一大堆废话，下面是我的安装和使用过程：</p>\n<a id=\"more\"></a>\n<p>1.下载StatSVN，其实是一个jar包</p>\n<p><a href=\"http://sourceforge.net/projects/statsvn/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/statsvn/</a></p>\n<p>2.解压后把jar包拷贝到指定目录</p>\n<p>例如我的：D:\\Code\\statsvn-0.7.0</p>\n<p>3.进入到上面的目录后checkout出需要的SVN库中的代码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svn co http://repo/svn/xxx/branches/1.10.0-dev</span><br></pre></td></tr></table></figure></p>\n<p>4.导出log文件，需要一段时间<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &amp;gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</span><br></pre></td></tr></table></figure></p>\n<p>5.生成分析网页和图片，需要一段时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果是常用统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev</span><br><span class=\"line\">#如果是复杂统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</span><br></pre></td></tr></table></figure></p>\n<p>6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<strong>出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径</strong>）</p>\n<p>（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）</p>\n<p><img src=\"/img/xjy/statsvn001.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn002.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn003.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 </p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a><strong>实践</strong></h1><p>又说了一大堆废话，下面是我的安装和使用过程：</p>","more":"<p>1.下载StatSVN，其实是一个jar包</p>\n<p><a href=\"http://sourceforge.net/projects/statsvn/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/statsvn/</a></p>\n<p>2.解压后把jar包拷贝到指定目录</p>\n<p>例如我的：D:\\Code\\statsvn-0.7.0</p>\n<p>3.进入到上面的目录后checkout出需要的SVN库中的代码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svn co http://repo/svn/xxx/branches/1.10.0-dev</span><br></pre></td></tr></table></figure></p>\n<p>4.导出log文件，需要一段时间<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &amp;gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</span><br></pre></td></tr></table></figure></p>\n<p>5.生成分析网页和图片，需要一段时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果是常用统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev</span><br><span class=\"line\">#如果是复杂统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</span><br></pre></td></tr></table></figure></p>\n<p>6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<strong>出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径</strong>）</p>\n<p>（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）</p>\n<p><img src=\"/img/xjy/statsvn001.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn002.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn003.jpg\" alt=\"\"></p>"},{"title":"树莓派学习-ngrok实现开机自启及手机远程SSH访问","id":"195","date":"2017-12-16T07:36:27.000Z","_content":"\n在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化\n\n+ 开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。\n\n+ 实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 \n\n<!--more-->\n\n好了，废话太多，直接来步骤吧：\n\n### VPS端\n``` shell \n#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp; \n```\n\n### 树莓派端\n``` shell \n#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www\n```\n\n看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！![](/img/xjy/smp001.png)","source":"_posts/p16.md","raw":"---\ntitle: 树莓派学习-ngrok实现开机自启及手机远程SSH访问\nid: 195\ncategories:\n  - 树莓派学习\ndate: 2017-12-16 15:36:27\ntags: [树莓派, ngrok, ssh]\n---\n\n在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化\n\n+ 开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。\n\n+ 实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 \n\n<!--more-->\n\n好了，废话太多，直接来步骤吧：\n\n### VPS端\n``` shell \n#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp; \n```\n\n### 树莓派端\n``` shell \n#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www\n```\n\n看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！![](/img/xjy/smp001.png)","slug":"p16","published":1,"updated":"2018-05-16T08:27:58.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv12w0004k4vge89lk5ul","content":"<p>在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化</p>\n<ul>\n<li><p>开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。</p>\n</li>\n<li><p>实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>好了，废话太多，直接来步骤吧：</p>\n<h3 id=\"VPS端\"><a href=\"#VPS端\" class=\"headerlink\" title=\"VPS端\"></a>VPS端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>设置centOS开机启动ngrokd</span><br><span class=\"line\">vi /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /root/ngrok &amp;amp;&amp;amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;amp;&amp;amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - </span><br><span class=\"line\">tunnelAddr=\":8333\" &amp;amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"树莓派端\"><a href=\"#树莓派端\" class=\"headerlink\" title=\"树莓派端\"></a>树莓派端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>指定多端口协议启动方式的配置</span><br><span class=\"line\">vi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  ssh:</span><br><span class=\"line\">    remote_port: 3322</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      tcp: 22</span><br><span class=\"line\">  www:</span><br><span class=\"line\">    subdomain: pi</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: 80&lt;/pre&gt;</span><br><span class=\"line\">&lt;pre class=\"theme:github lang:default decode:true\"&gt;#设置树莓派开机启动ngrok</span><br><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm &amp;amp;&amp;amp; ./ngrok -config=ngrok.cfg start ssh www</span><br></pre></td></tr></table></figure>\n<p>看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！<img src=\"/img/xjy/smp001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化</p>\n<ul>\n<li><p>开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。</p>\n</li>\n<li><p>实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 </p>\n</li>\n</ul>","more":"<p>好了，废话太多，直接来步骤吧：</p>\n<h3 id=\"VPS端\"><a href=\"#VPS端\" class=\"headerlink\" title=\"VPS端\"></a>VPS端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>设置centOS开机启动ngrokd</span><br><span class=\"line\">vi /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /root/ngrok &amp;amp;&amp;amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;amp;&amp;amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - </span><br><span class=\"line\">tunnelAddr=\":8333\" &amp;amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"树莓派端\"><a href=\"#树莓派端\" class=\"headerlink\" title=\"树莓派端\"></a>树莓派端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>指定多端口协议启动方式的配置</span><br><span class=\"line\">vi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  ssh:</span><br><span class=\"line\">    remote_port: 3322</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      tcp: 22</span><br><span class=\"line\">  www:</span><br><span class=\"line\">    subdomain: pi</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: 80&lt;/pre&gt;</span><br><span class=\"line\">&lt;pre class=\"theme:github lang:default decode:true\"&gt;#设置树莓派开机启动ngrok</span><br><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm &amp;amp;&amp;amp; ./ngrok -config=ngrok.cfg start ssh www</span><br></pre></td></tr></table></figure>\n<p>看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！<img src=\"/img/xjy/smp001.png\" alt=\"\"></p>"},{"title":"笛子指法全表","id":"326","date":"2018-01-14T08:11:50.000Z","_content":"\n转载至：[新浪博客](http://blog.sina.com.cn/s/blog_5f3df34701015slp.html) \n\n![](/img/xjy/dizi001.jpg) \n","source":"_posts/p11.md","raw":"---\ntitle: 笛子指法全表\nid: 326\ncategories:\n  - 乐器知识\n  - 生活杂记\ndate: 2018-01-14 16:11:50\ntags: [闲谈, 音乐, 乐器, 笛子]\n---\n\n转载至：[新浪博客](http://blog.sina.com.cn/s/blog_5f3df34701015slp.html) \n\n![](/img/xjy/dizi001.jpg) \n","slug":"p11","published":1,"updated":"2018-05-24T06:42:46.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv12y0005k4vg2ou63hkq","content":"<p>转载至：<a href=\"http://blog.sina.com.cn/s/blog_5f3df34701015slp.html\" target=\"_blank\" rel=\"noopener\">新浪博客</a> </p>\n<p><img src=\"/img/xjy/dizi001.jpg\" alt=\"\"> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载至：<a href=\"http://blog.sina.com.cn/s/blog_5f3df34701015slp.html\" target=\"_blank\" rel=\"noopener\">新浪博客</a> </p>\n<p><img src=\"/img/xjy/dizi001.jpg\" alt=\"\"> </p>\n"},{"title":"树莓派学习-SHT31温湿度读取（I2C接口）","id":"149","date":"2017-12-10T11:13:38.000Z","_content":"\n**1.开启树莓派的I2C功能**\n\n执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。\n``` shell \nsudo raspi-config\n```\n\n![](/img/xjy/sht31001.png) \n\n<!--more-->\n\n**2.连接SHT31与树莓派**\n\n参考及实物图如下：\n\n![](/img/xjy/sht31001.png)\n\n![](/img/xjy/sht31001.jpg)\n\n**3.python代码**\n\nsht31.py：\n``` py \nimport smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)\n```\n\n**4.结果如图：**\n\n![](/img/xjy/sht31004.png)\n\n结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！","source":"_posts/p14.md","raw":"---\ntitle: 树莓派学习-SHT31温湿度读取（I2C接口）\nid: 149\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 19:13:38\ntags: [树莓派, sht31, i2c]\n---\n\n**1.开启树莓派的I2C功能**\n\n执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。\n``` shell \nsudo raspi-config\n```\n\n![](/img/xjy/sht31001.png) \n\n<!--more-->\n\n**2.连接SHT31与树莓派**\n\n参考及实物图如下：\n\n![](/img/xjy/sht31001.png)\n\n![](/img/xjy/sht31001.jpg)\n\n**3.python代码**\n\nsht31.py：\n``` py \nimport smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)\n```\n\n**4.结果如图：**\n\n![](/img/xjy/sht31004.png)\n\n结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！","slug":"p14","published":1,"updated":"2018-05-16T08:20:33.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv12z0006k4vg3c9doy4h","content":"<p><strong>1.开启树莓派的I2C功能</strong></p>\n<p>执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"> </p>\n<a id=\"more\"></a>\n<p><strong>2.连接SHT31与树莓派</strong></p>\n<p>参考及实物图如下：</p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/sht31001.jpg\" alt=\"\"></p>\n<p><strong>3.python代码</strong></p>\n<p>sht31.py：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\"><span class=\"comment\"># 获取 I2C bus</span></span><br><span class=\"line\">bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\"><span class=\"comment\"># 从 0x00(00)读取数据, 6 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换数据</span></span><br><span class=\"line\">temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出数据</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.结果如图：</strong></p>\n<p><img src=\"/img/xjy/sht31004.png\" alt=\"\"></p>\n<p>结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！</p>\n","site":{"data":{}},"excerpt":"<p><strong>1.开启树莓派的I2C功能</strong></p>\n<p>执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"> </p>","more":"<p><strong>2.连接SHT31与树莓派</strong></p>\n<p>参考及实物图如下：</p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/sht31001.jpg\" alt=\"\"></p>\n<p><strong>3.python代码</strong></p>\n<p>sht31.py：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\"><span class=\"comment\"># 获取 I2C bus</span></span><br><span class=\"line\">bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\"><span class=\"comment\"># 从 0x00(00)读取数据, 6 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换数据</span></span><br><span class=\"line\">temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出数据</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.结果如图：</strong></p>\n<p><img src=\"/img/xjy/sht31004.png\" alt=\"\"></p>\n<p>结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！</p>"},{"title":"windows端的hexo+github管理源码+travisCI自动编译+个人域名映射","date":"2018-03-21T06:30:18.000Z","_content":"\n## 前言\n\n之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。\n\n<!--more-->\n\n## 想法\n\n在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。\n\n好了，接下来那就动手去做吧。\n\n## 步骤\n\n本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：[dkvirus的步骤](http://blog.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/ \"dkvirus的步骤\")\n","source":"_posts/p1.md","raw":"---\n\ntitle: windows端的hexo+github管理源码+travisCI自动编译+个人域名映射\ndate: 2018/3/21 14:30:18 \ntags: [建站, 运维, hexo, github, travisCI, 博客]\n\n---\n\n## 前言\n\n之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。\n\n<!--more-->\n\n## 想法\n\n在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。\n\n好了，接下来那就动手去做吧。\n\n## 步骤\n\n本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：[dkvirus的步骤](http://blog.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/ \"dkvirus的步骤\")\n","slug":"p1","published":1,"updated":"2018-05-24T06:35:49.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv131000ak4vg07ea0x5i","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。</p>\n<a id=\"more\"></a>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。</p>\n<p>好了，接下来那就动手去做吧。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：<a href=\"http://blog.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/\" title=\"dkvirus的步骤\" target=\"_blank\" rel=\"noopener\">dkvirus的步骤</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前写了一篇vps端的hexo+vps端的nginx+github实现个人域名和github域名同时访问网站，虽然整体效果还可以，但是有一个突出的缺点：由于写好的markdown文件需要先上传到VPS目录后才可编译再同步到github端，这样就降低了书写的效率。</p>","more":"<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>在网上查到github上的网站内容可以绑定个人域名，所以就想在本地搭建windows端的hexo,再上传源码到github,自己的域名在github上绑定一下，以后直接推送markdown文件就可以了。</p>\n<p>好了，接下来那就动手去做吧。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>本来文章已经写了几步，最后发现我的好友DKVIRUS已经写了相关操作，写的比较全还比较好，那我就不废话了，链接奉上：<a href=\"http://blog.dkvirus.com/2018/03/20/Travis-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/\" title=\"dkvirus的步骤\" target=\"_blank\" rel=\"noopener\">dkvirus的步骤</a></p>"},{"title":"树莓派学习-python实现用socket传输json数据","id":"186","date":"2017-12-11T14:56:16.000Z","_content":"\n今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。\n\n1.服务端代码\n``` py \nimport socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()\n```\n\n2.客户端代码\n``` py \nimport socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()\n```\n3.实现效果\n\n![](/img/xjy/socket001.png)","source":"_posts/p15.md","raw":"---\ntitle: 树莓派学习-python实现用socket传输json数据\nid: 186\ncategories:\n  - 树莓派学习\ndate: 2017-12-11 22:56:16\ntags: [树莓派, python, socket, json]\n---\n\n今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。\n\n1.服务端代码\n``` py \nimport socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()\n```\n\n2.客户端代码\n``` py \nimport socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()\n```\n3.实现效果\n\n![](/img/xjy/socket001.png)","slug":"p15","published":1,"updated":"2018-05-16T08:23:49.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv134000bk4vg3gkiny2p","content":"<p>今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。</p>\n<p>1.服务端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">ip_port = (<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>) </span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) </span><br><span class=\"line\">s.bind(ip_port) </span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">conn,addr=s.accept() </span><br><span class=\"line\">print(<span class=\"string\">'接到来自%s的连接'</span> %addr[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">msg=conn.recv(BUFSIZE) </span><br><span class=\"line\"><span class=\"keyword\">if</span> len(msg) == <span class=\"number\">0</span>:<span class=\"keyword\">break</span> <span class=\"comment\">#如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生</span></span><br><span class=\"line\">print(msg,type(msg))</span><br><span class=\"line\">conn.send(msg.upper()) </span><br><span class=\"line\">conn.close() </span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>2.客户端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立初始连接</span></span><br><span class=\"line\">ip_port=(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>)</span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect_ex(ip_port)           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:                          </span><br><span class=\"line\">    <span class=\"comment\"># 获取I2C bus</span></span><br><span class=\"line\">    bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 0x00(00)读数据, 6 bytes</span></span><br><span class=\"line\">    <span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">    data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 转换成温湿度及获取当前的时间</span></span><br><span class=\"line\">    temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">    cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\">    timer=time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出到屏幕</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#组装json数据并发送 </span></span><br><span class=\"line\">    msg1=&#123;<span class=\"string\">'time'</span>:timer,<span class=\"string\">'Celsius'</span>:str(cTemp),<span class=\"string\">'Humidity'</span>:str(humidity)&#125;</span><br><span class=\"line\">    jmsg1=json.dumps(msg1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(jmsg1) == <span class=\"number\">0</span>:<span class=\"keyword\">continue</span></span><br><span class=\"line\">    s.sendall(jmsg1.encode(<span class=\"string\">'utf-8'</span>))         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确认返回</span></span><br><span class=\"line\">    feedback=s.recv(BUFSIZE)                         </span><br><span class=\"line\">    print(feedback.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#连接关闭</span></span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>3.实现效果</p>\n<p><img src=\"/img/xjy/socket001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。</p>\n<p>1.服务端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">ip_port = (<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>) </span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) </span><br><span class=\"line\">s.bind(ip_port) </span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">conn,addr=s.accept() </span><br><span class=\"line\">print(<span class=\"string\">'接到来自%s的连接'</span> %addr[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">msg=conn.recv(BUFSIZE) </span><br><span class=\"line\"><span class=\"keyword\">if</span> len(msg) == <span class=\"number\">0</span>:<span class=\"keyword\">break</span> <span class=\"comment\">#如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生</span></span><br><span class=\"line\">print(msg,type(msg))</span><br><span class=\"line\">conn.send(msg.upper()) </span><br><span class=\"line\">conn.close() </span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>2.客户端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立初始连接</span></span><br><span class=\"line\">ip_port=(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>)</span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect_ex(ip_port)           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:                          </span><br><span class=\"line\">    <span class=\"comment\"># 获取I2C bus</span></span><br><span class=\"line\">    bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 0x00(00)读数据, 6 bytes</span></span><br><span class=\"line\">    <span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">    data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 转换成温湿度及获取当前的时间</span></span><br><span class=\"line\">    temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">    cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\">    timer=time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出到屏幕</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#组装json数据并发送 </span></span><br><span class=\"line\">    msg1=&#123;<span class=\"string\">'time'</span>:timer,<span class=\"string\">'Celsius'</span>:str(cTemp),<span class=\"string\">'Humidity'</span>:str(humidity)&#125;</span><br><span class=\"line\">    jmsg1=json.dumps(msg1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(jmsg1) == <span class=\"number\">0</span>:<span class=\"keyword\">continue</span></span><br><span class=\"line\">    s.sendall(jmsg1.encode(<span class=\"string\">'utf-8'</span>))         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确认返回</span></span><br><span class=\"line\">    feedback=s.recv(BUFSIZE)                         </span><br><span class=\"line\">    print(feedback.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#连接关闭</span></span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>3.实现效果</p>\n<p><img src=\"/img/xjy/socket001.png\" alt=\"\"></p>\n"},{"title":"树莓派学习-搭建外网ngrok穿透内网访问到树莓派","id":"192","date":"2017-12-14T14:57:25.000Z","_content":"\n今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。\n\n**环境：**\n\n搬瓦工VPS端(centOs6)\n\n树莓派3b(基于Arm) \n\n<!--more-->\n\n## 步骤\n\n1.安装git、gcc、go等\n``` shell \nyum install mercurial git gcc golang\n```\n2.安装 supervisor ，这样可以保持服务运行\n``` shell \nyum install supervisor\n```\n3.git下载ngrok\n``` shell \ncd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git \n```\n4.证书生成\n``` shell \ncd /root/ngrok \n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 \n```\n5.证书的复制准备工作\n``` shell \n\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f \n```\n6.生成服务端的ngrokd\n``` shell \ncd /root/ngrok\nmake release-server \n```\n7.服务端配置并启动ngrokd\n``` shell \ncd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\" \n```\n8.编译给客户端pi上用的ngrokd\n``` shell \ncd /root/ngrok\nGOOS=linux GOARCH=arm make release-client \n```\n9.把bin目录下的客户端打包\n``` shell \ncd /root/ngrok\ntar -cvf bin.tar bin/ \n```\n10.用scp工具复制bin.tar到树莓派的如下目录\n``` shell \n#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar\n```\n11.客户端配置\n``` shell \ncd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false \n```\n12.启动客户端\n``` shell \n./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80\n```\n13.记得加入子域名的解析规则\n``` text \nA *.pi 23.83.224.98 \n```\n\n14.测试是否内网穿透成功，可以在树莓派上安装nginx\n``` shell \nsudo apt-get install nginx \n```\n\n15.访问：[http://pi.www.xiajunyi.com:8331/](http://pi.www.xiajunyi.com:8331/)，成功到达树莓派的nginx主页\n\n![](/img/xjy/smp002.png)\n\n\n## 参考文章：\n\n+ [参考文章1](https://xicheng412.github.io/2016/09/27/ngrok-config/)\n\n+ [参考文章2](https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html)","source":"_posts/p17.md","raw":"---\ntitle: 树莓派学习-搭建外网ngrok穿透内网访问到树莓派\nid: 192\ncategories:\n  - 树莓派学习\ndate: 2017-12-14 22:57:25\ntags: [树莓派, ngrok, 内网穿透]\n---\n\n今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。\n\n**环境：**\n\n搬瓦工VPS端(centOs6)\n\n树莓派3b(基于Arm) \n\n<!--more-->\n\n## 步骤\n\n1.安装git、gcc、go等\n``` shell \nyum install mercurial git gcc golang\n```\n2.安装 supervisor ，这样可以保持服务运行\n``` shell \nyum install supervisor\n```\n3.git下载ngrok\n``` shell \ncd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git \n```\n4.证书生成\n``` shell \ncd /root/ngrok \n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 \n```\n5.证书的复制准备工作\n``` shell \n\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f \n```\n6.生成服务端的ngrokd\n``` shell \ncd /root/ngrok\nmake release-server \n```\n7.服务端配置并启动ngrokd\n``` shell \ncd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\" \n```\n8.编译给客户端pi上用的ngrokd\n``` shell \ncd /root/ngrok\nGOOS=linux GOARCH=arm make release-client \n```\n9.把bin目录下的客户端打包\n``` shell \ncd /root/ngrok\ntar -cvf bin.tar bin/ \n```\n10.用scp工具复制bin.tar到树莓派的如下目录\n``` shell \n#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar\n```\n11.客户端配置\n``` shell \ncd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false \n```\n12.启动客户端\n``` shell \n./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80\n```\n13.记得加入子域名的解析规则\n``` text \nA *.pi 23.83.224.98 \n```\n\n14.测试是否内网穿透成功，可以在树莓派上安装nginx\n``` shell \nsudo apt-get install nginx \n```\n\n15.访问：[http://pi.www.xiajunyi.com:8331/](http://pi.www.xiajunyi.com:8331/)，成功到达树莓派的nginx主页\n\n![](/img/xjy/smp002.png)\n\n\n## 参考文章：\n\n+ [参考文章1](https://xicheng412.github.io/2016/09/27/ngrok-config/)\n\n+ [参考文章2](https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html)","slug":"p17","published":1,"updated":"2018-05-16T08:35:53.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv136000fk4vg06zcqytk","content":"<p>今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。</p>\n<p><strong>环境：</strong></p>\n<p>搬瓦工VPS端(centOs6)</p>\n<p>树莓派3b(基于Arm) </p>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.安装git、gcc、go等<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mercurial git gcc golang</span><br></pre></td></tr></table></figure></p>\n<p>2.安装 supervisor ，这样可以保持服务运行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install supervisor</span><br></pre></td></tr></table></figure></p>\n<p>3.git下载ngrok<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root</span><br><span class=\"line\"><span class=\"meta\">#</span>官方地址，可能会报错，最近应该已经修复</span><br><span class=\"line\">git clone https://github.com/inconshreveable/ngrok.git</span><br><span class=\"line\"><span class=\"meta\">#</span>修复地址，不会报错，感谢 tutumcloud</span><br><span class=\"line\"><span class=\"meta\">#</span>git clone https://github.com/tutumcloud/ngrok.git</span><br></pre></td></tr></table></figure></p>\n<p>4.证书生成<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok </span><br><span class=\"line\"><span class=\"meta\">#</span>这里修改为自己的域名</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\">openssl genrsa -out rootCA.key 2048</span><br><span class=\"line\">openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem</span><br><span class=\"line\">openssl genrsa -out device.key 2048</span><br><span class=\"line\">openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr</span><br><span class=\"line\">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure></p>\n<p>5.证书的复制准备工作<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f</span><br><span class=\"line\">\\cp device.crt assets/server/tls/snakeoil.crt -f</span><br><span class=\"line\">\\cp device.key assets/server/tls/snakeoil.key -f</span><br></pre></td></tr></table></figure></p>\n<p>6.生成服务端的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure></p>\n<p>7.服务端配置并启动ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\"><span class=\"meta\">#</span>http</span><br><span class=\"line\">bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</span><br></pre></td></tr></table></figure></p>\n<p>8.编译给客户端pi上用的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure></p>\n<p>9.把bin目录下的客户端打包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">tar -cvf bin.tar bin/</span><br></pre></td></tr></table></figure></p>\n<p>10.用scp工具复制bin.tar到树莓派的如下目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>解压bin,tar至自定义目录</span><br><span class=\"line\">tar -zxf /home/pi/ngrox-cust/bin.tar</span><br></pre></td></tr></table></figure></p>\n<p>11.客户端配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm</span><br><span class=\"line\">vi ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入如下内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br></pre></td></tr></table></figure></p>\n<p>12.启动客户端<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</span><br></pre></td></tr></table></figure></p>\n<p>13.记得加入子域名的解析规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A *.pi 23.83.224.98</span><br></pre></td></tr></table></figure></p>\n<p>14.测试是否内网穿透成功，可以在树莓派上安装nginx<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p>\n<p>15.访问：<a href=\"http://pi.www.xiajunyi.com:8331/\" target=\"_blank\" rel=\"noopener\">http://pi.www.xiajunyi.com:8331/</a>，成功到达树莓派的nginx主页</p>\n<p><img src=\"/img/xjy/smp002.png\" alt=\"\"></p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><ul>\n<li><p><a href=\"https://xicheng412.github.io/2016/09/27/ngrok-config/\" target=\"_blank\" rel=\"noopener\">参考文章1</a></p>\n</li>\n<li><p><a href=\"https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html\" target=\"_blank\" rel=\"noopener\">参考文章2</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。</p>\n<p><strong>环境：</strong></p>\n<p>搬瓦工VPS端(centOs6)</p>\n<p>树莓派3b(基于Arm) </p>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.安装git、gcc、go等<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mercurial git gcc golang</span><br></pre></td></tr></table></figure></p>\n<p>2.安装 supervisor ，这样可以保持服务运行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install supervisor</span><br></pre></td></tr></table></figure></p>\n<p>3.git下载ngrok<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root</span><br><span class=\"line\"><span class=\"meta\">#</span>官方地址，可能会报错，最近应该已经修复</span><br><span class=\"line\">git clone https://github.com/inconshreveable/ngrok.git</span><br><span class=\"line\"><span class=\"meta\">#</span>修复地址，不会报错，感谢 tutumcloud</span><br><span class=\"line\"><span class=\"meta\">#</span>git clone https://github.com/tutumcloud/ngrok.git</span><br></pre></td></tr></table></figure></p>\n<p>4.证书生成<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok </span><br><span class=\"line\"><span class=\"meta\">#</span>这里修改为自己的域名</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\">openssl genrsa -out rootCA.key 2048</span><br><span class=\"line\">openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem</span><br><span class=\"line\">openssl genrsa -out device.key 2048</span><br><span class=\"line\">openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr</span><br><span class=\"line\">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure></p>\n<p>5.证书的复制准备工作<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f</span><br><span class=\"line\">\\cp device.crt assets/server/tls/snakeoil.crt -f</span><br><span class=\"line\">\\cp device.key assets/server/tls/snakeoil.key -f</span><br></pre></td></tr></table></figure></p>\n<p>6.生成服务端的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure></p>\n<p>7.服务端配置并启动ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\"><span class=\"meta\">#</span>http</span><br><span class=\"line\">bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</span><br></pre></td></tr></table></figure></p>\n<p>8.编译给客户端pi上用的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure></p>\n<p>9.把bin目录下的客户端打包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">tar -cvf bin.tar bin/</span><br></pre></td></tr></table></figure></p>\n<p>10.用scp工具复制bin.tar到树莓派的如下目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>解压bin,tar至自定义目录</span><br><span class=\"line\">tar -zxf /home/pi/ngrox-cust/bin.tar</span><br></pre></td></tr></table></figure></p>\n<p>11.客户端配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm</span><br><span class=\"line\">vi ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入如下内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br></pre></td></tr></table></figure></p>\n<p>12.启动客户端<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</span><br></pre></td></tr></table></figure></p>\n<p>13.记得加入子域名的解析规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A *.pi 23.83.224.98</span><br></pre></td></tr></table></figure></p>\n<p>14.测试是否内网穿透成功，可以在树莓派上安装nginx<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p>\n<p>15.访问：<a href=\"http://pi.www.xiajunyi.com:8331/\" target=\"_blank\" rel=\"noopener\">http://pi.www.xiajunyi.com:8331/</a>，成功到达树莓派的nginx主页</p>\n<p><img src=\"/img/xjy/smp002.png\" alt=\"\"></p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><ul>\n<li><p><a href=\"https://xicheng412.github.io/2016/09/27/ngrok-config/\" target=\"_blank\" rel=\"noopener\">参考文章1</a></p>\n</li>\n<li><p><a href=\"https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html\" target=\"_blank\" rel=\"noopener\">参考文章2</a></p>\n</li>\n</ul>"},{"title":"树莓派学习-实现USB摄像头在web端访问","id":"213","date":"2017-12-26T14:43:07.000Z","_content":"\n之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：\n\n1.系统配置中打开摄像头选项\n``` shell \nsudo raspi-config \n```\n2.安装motion\n``` shell \nsudo apt-get install motion \n```\n<!--more-->\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n``` shell \nsudo nano /etc/default/motion \n```\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n``` shell \nsudo nano /etc/motion/motion.conf \n```\n``` text \n# Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on \n```\n\n5.启动motion\n``` shell \nsudo motion \n```\n6.好了，再加上ngrok映射，就可以在外网访问了\n\n![](/img/xjy/smp004.png)\n\n![](/img/xjy/smp005.png)","source":"_posts/p19.md","raw":"---\ntitle: 树莓派学习-实现USB摄像头在web端访问\nid: 213\ncategories:\n  - 树莓派学习\ndate: 2017-12-26 22:43:07\ntags: [树莓派, 摄像头]\n---\n\n之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：\n\n1.系统配置中打开摄像头选项\n``` shell \nsudo raspi-config \n```\n2.安装motion\n``` shell \nsudo apt-get install motion \n```\n<!--more-->\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n``` shell \nsudo nano /etc/default/motion \n```\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n``` shell \nsudo nano /etc/motion/motion.conf \n```\n``` text \n# Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on \n```\n\n5.启动motion\n``` shell \nsudo motion \n```\n6.好了，再加上ngrok映射，就可以在外网访问了\n\n![](/img/xjy/smp004.png)\n\n![](/img/xjy/smp005.png)","slug":"p19","published":1,"updated":"2018-05-16T08:49:06.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv137000gk4vg37nzij3p","content":"<p>之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：</p>\n<p>1.系统配置中打开摄像头选项<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>2.安装motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install motion</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>3.配置motion可以一直在后台运行：<code>start_motion_daemon=yes</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/default/motion</span><br></pre></td></tr></table></figure></p>\n<p>4.修改motion配置文件，这个文件比较长，请确保以下参数的配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Start in daemon (background) mode and release terminal (default: off)</span><br><span class=\"line\">daemon on</span><br><span class=\"line\"># The mini-http server listens to this port for requests (default: 0 = disabled)</span><br><span class=\"line\">stream_port 8081</span><br><span class=\"line\"># Restrict stream connections to localhost only (default: on)</span><br><span class=\"line\">stream_localhost off</span><br><span class=\"line\"># TCP/IP port for the http server to listen on (default: 0 = disabled)</span><br><span class=\"line\">webcontrol_port 8080</span><br><span class=\"line\"># Restrict control connections to localhost only (default: on)</span><br><span class=\"line\">webcontrol_localhost off</span><br><span class=\"line\"># Output for http server, select off to choose raw text plain (default: on)</span><br><span class=\"line\">webcontrol_html_output on</span><br></pre></td></tr></table></figure>\n<p>5.启动motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo motion</span><br></pre></td></tr></table></figure></p>\n<p>6.好了，再加上ngrok映射，就可以在外网访问了</p>\n<p><img src=\"/img/xjy/smp004.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp005.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：</p>\n<p>1.系统配置中打开摄像头选项<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>2.安装motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install motion</span><br></pre></td></tr></table></figure></p>","more":"<p>3.配置motion可以一直在后台运行：<code>start_motion_daemon=yes</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/default/motion</span><br></pre></td></tr></table></figure></p>\n<p>4.修改motion配置文件，这个文件比较长，请确保以下参数的配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Start in daemon (background) mode and release terminal (default: off)</span><br><span class=\"line\">daemon on</span><br><span class=\"line\"># The mini-http server listens to this port for requests (default: 0 = disabled)</span><br><span class=\"line\">stream_port 8081</span><br><span class=\"line\"># Restrict stream connections to localhost only (default: on)</span><br><span class=\"line\">stream_localhost off</span><br><span class=\"line\"># TCP/IP port for the http server to listen on (default: 0 = disabled)</span><br><span class=\"line\">webcontrol_port 8080</span><br><span class=\"line\"># Restrict control connections to localhost only (default: on)</span><br><span class=\"line\">webcontrol_localhost off</span><br><span class=\"line\"># Output for http server, select off to choose raw text plain (default: on)</span><br><span class=\"line\">webcontrol_html_output on</span><br></pre></td></tr></table></figure>\n<p>5.启动motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo motion</span><br></pre></td></tr></table></figure></p>\n<p>6.好了，再加上ngrok映射，就可以在外网访问了</p>\n<p><img src=\"/img/xjy/smp004.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp005.png\" alt=\"\"></p>"},{"title":"测试mqtt与rabbitmq的消息交互","id":"306","date":"2018-01-09T00:35:04.000Z","_content":"\n**原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）** \n\n<!--more-->\n\n1.开启rabbitmq中的mqtt插件\n\n``` shell \nrabbitmq-plugins enable rabbitmq_mqtt\n```\n\n\n2.python安装mqtt库文件\n\n``` shell \npip install paho-mqtt\n```\n\n3.生产者端代码\n\n``` py \nimport datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()\n```\n\n4.消费者端代码\n\n``` py \nimport pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming() \n```\n\n5.结果如下：\n\n![](/img/xjy/rab001.jpg) \n\n6.rabbitmq管理页面显示情况\n\n（1）交换信息\n\n![](/img/xjy/rab002.jpg) \n\n（2）连接信息\n\n![](/img/xjy/rab003.jpg)\n","source":"_posts/p13.md","raw":"---\ntitle: 测试mqtt与rabbitmq的消息交互\nid: 306\ncategories:\n  - rabbitmq\n  - mqtt\ndate: 2018-01-09 08:35:04\ntags:\n  - rabbitmq\n  - mqtt\n\n---\n\n**原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）** \n\n<!--more-->\n\n1.开启rabbitmq中的mqtt插件\n\n``` shell \nrabbitmq-plugins enable rabbitmq_mqtt\n```\n\n\n2.python安装mqtt库文件\n\n``` shell \npip install paho-mqtt\n```\n\n3.生产者端代码\n\n``` py \nimport datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()\n```\n\n4.消费者端代码\n\n``` py \nimport pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming() \n```\n\n5.结果如下：\n\n![](/img/xjy/rab001.jpg) \n\n6.rabbitmq管理页面显示情况\n\n（1）交换信息\n\n![](/img/xjy/rab002.jpg) \n\n（2）连接信息\n\n![](/img/xjy/rab003.jpg)\n","slug":"p13","published":1,"updated":"2018-05-16T08:20:59.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13a000jk4vg1762nl5s","content":"<p><strong>原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）</strong> </p>\n<a id=\"more\"></a>\n<p>1.开启rabbitmq中的mqtt插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_mqtt</span><br></pre></td></tr></table></figure>\n<p>2.python安装mqtt库文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install paho-mqtt</span><br></pre></td></tr></table></figure>\n<p>3.生产者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> paho.mqtt.client</span><br><span class=\"line\"><span class=\"comment\">#import sense_hat</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">sleepTime = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># MQTT details</span></span><br><span class=\"line\">mqttDeviceId = <span class=\"string\">\"Raspberry-Pi:Prototype\"</span></span><br><span class=\"line\">mqttBrokerHost = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">mqttBrokerPort = <span class=\"number\">1883</span></span><br><span class=\"line\">mqttUser = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttPassword = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttTelemetryTopic = <span class=\"string\">\"RPi.Data\"</span></span><br><span class=\"line\"><span class=\"comment\">#sense = sense_hat.SenseHat()</span></span><br><span class=\"line\"><span class=\"comment\"># Callback methods</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_connect</span><span class=\"params\">(client, userdata, flags, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc == <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connected to MQTT broker (RC: %s)\"</span> % rc)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connection to MQTT broker failed (RC: %s)\"</span> % rc)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_log</span><span class=\"params\">(client, userdata, level, buf)</span>:</span></span><br><span class=\"line\">    print(buf)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_publish</span><span class=\"params\">(client, userdata, mid)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Data published (Mid: %s)\"</span> % mid)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_disconnect</span><span class=\"params\">(client, userdata, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc != <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Unexpected disconnect\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Disconnected from MQTT broker\"</span>)</span><br><span class=\"line\">mqttClient = paho.mqtt.client.Client()</span><br><span class=\"line\">mqttClient.username_pw_set(mqttUser, mqttPassword)</span><br><span class=\"line\"><span class=\"comment\"># Register callbacks</span></span><br><span class=\"line\">mqttClient.on_connect = on_connect</span><br><span class=\"line\">mqttClient.on_log = on_log</span><br><span class=\"line\">mqttClient.on_publish = on_publish</span><br><span class=\"line\">mqttClient.on_disconnnect = on_disconnect</span><br><span class=\"line\"><span class=\"comment\"># Connect to MQTT broker</span></span><br><span class=\"line\">mqttClient.connect(mqttBrokerHost, mqttBrokerPort, <span class=\"number\">60</span>)</span><br><span class=\"line\">mqttClient.loop_start()</span><br><span class=\"line\"><span class=\"comment\"># Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    telemetryData = &#123;&#125;</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"DeviceId\"</span>] = mqttDeviceId</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Timestamp\"</span>] = datetime.datetime.utcnow().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S.%f'</span>)[:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Temperature\"</span>] = <span class=\"string\">'1111'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Humidity\"</span>] = <span class=\"string\">'2222'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Pressure\"</span>] = <span class=\"string\">'3333'</span></span><br><span class=\"line\">    telemetryDataJson = json.dumps(telemetryData)</span><br><span class=\"line\">    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, <span class=\"number\">1</span>)</span><br><span class=\"line\">    time.sleep(sleepTime)</span><br><span class=\"line\">mqttClient.loop_stop()</span><br><span class=\"line\">mqttClient.disconnect()</span><br></pre></td></tr></table></figure>\n<p>4.消费者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定远程rabbitmq的用户名密码</span></span><br><span class=\"line\">username = <span class=\"string\">'guest'</span></span><br><span class=\"line\">pwd = <span class=\"string\">'guest'</span></span><br><span class=\"line\">user_pwd = pika.PlainCredentials(username, pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建连接</span></span><br><span class=\"line\">s_conn = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, credentials=user_pwd))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在连接上创建一个频道</span></span><br><span class=\"line\">channel = s_conn.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明exchange的类型为模糊匹配，这里设置交换为持久化的</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'amq.topic'</span>,exchange_type=<span class=\"string\">'topic'</span>, durable=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建随机一个队列当消费者退出的时候，该队列被删除。</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个随机队列名字。  </span></span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到</span></span><br><span class=\"line\">binding_keys = [<span class=\"string\">'RPi.Data'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'amq.topic'</span>,</span><br><span class=\"line\">                       queue= queue_name,</span><br><span class=\"line\">                       routing_key=binding_key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置callback等，其中不给rabbitmq发送确认</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] %r:%r\"</span> % (method.routing_key, body))</span><br><span class=\"line\">channel.basic_consume(callback,queue= queue_name,no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开始循环接收消息</span></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>5.结果如下：</p>\n<p><img src=\"/img/xjy/rab001.jpg\" alt=\"\"> </p>\n<p>6.rabbitmq管理页面显示情况</p>\n<p>（1）交换信息</p>\n<p><img src=\"/img/xjy/rab002.jpg\" alt=\"\"> </p>\n<p>（2）连接信息</p>\n<p><img src=\"/img/xjy/rab003.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）</strong> </p>","more":"<p>1.开启rabbitmq中的mqtt插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_mqtt</span><br></pre></td></tr></table></figure>\n<p>2.python安装mqtt库文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install paho-mqtt</span><br></pre></td></tr></table></figure>\n<p>3.生产者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> paho.mqtt.client</span><br><span class=\"line\"><span class=\"comment\">#import sense_hat</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">sleepTime = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># MQTT details</span></span><br><span class=\"line\">mqttDeviceId = <span class=\"string\">\"Raspberry-Pi:Prototype\"</span></span><br><span class=\"line\">mqttBrokerHost = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">mqttBrokerPort = <span class=\"number\">1883</span></span><br><span class=\"line\">mqttUser = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttPassword = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttTelemetryTopic = <span class=\"string\">\"RPi.Data\"</span></span><br><span class=\"line\"><span class=\"comment\">#sense = sense_hat.SenseHat()</span></span><br><span class=\"line\"><span class=\"comment\"># Callback methods</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_connect</span><span class=\"params\">(client, userdata, flags, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc == <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connected to MQTT broker (RC: %s)\"</span> % rc)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connection to MQTT broker failed (RC: %s)\"</span> % rc)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_log</span><span class=\"params\">(client, userdata, level, buf)</span>:</span></span><br><span class=\"line\">    print(buf)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_publish</span><span class=\"params\">(client, userdata, mid)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Data published (Mid: %s)\"</span> % mid)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_disconnect</span><span class=\"params\">(client, userdata, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc != <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Unexpected disconnect\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Disconnected from MQTT broker\"</span>)</span><br><span class=\"line\">mqttClient = paho.mqtt.client.Client()</span><br><span class=\"line\">mqttClient.username_pw_set(mqttUser, mqttPassword)</span><br><span class=\"line\"><span class=\"comment\"># Register callbacks</span></span><br><span class=\"line\">mqttClient.on_connect = on_connect</span><br><span class=\"line\">mqttClient.on_log = on_log</span><br><span class=\"line\">mqttClient.on_publish = on_publish</span><br><span class=\"line\">mqttClient.on_disconnnect = on_disconnect</span><br><span class=\"line\"><span class=\"comment\"># Connect to MQTT broker</span></span><br><span class=\"line\">mqttClient.connect(mqttBrokerHost, mqttBrokerPort, <span class=\"number\">60</span>)</span><br><span class=\"line\">mqttClient.loop_start()</span><br><span class=\"line\"><span class=\"comment\"># Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    telemetryData = &#123;&#125;</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"DeviceId\"</span>] = mqttDeviceId</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Timestamp\"</span>] = datetime.datetime.utcnow().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S.%f'</span>)[:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Temperature\"</span>] = <span class=\"string\">'1111'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Humidity\"</span>] = <span class=\"string\">'2222'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Pressure\"</span>] = <span class=\"string\">'3333'</span></span><br><span class=\"line\">    telemetryDataJson = json.dumps(telemetryData)</span><br><span class=\"line\">    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, <span class=\"number\">1</span>)</span><br><span class=\"line\">    time.sleep(sleepTime)</span><br><span class=\"line\">mqttClient.loop_stop()</span><br><span class=\"line\">mqttClient.disconnect()</span><br></pre></td></tr></table></figure>\n<p>4.消费者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定远程rabbitmq的用户名密码</span></span><br><span class=\"line\">username = <span class=\"string\">'guest'</span></span><br><span class=\"line\">pwd = <span class=\"string\">'guest'</span></span><br><span class=\"line\">user_pwd = pika.PlainCredentials(username, pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建连接</span></span><br><span class=\"line\">s_conn = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, credentials=user_pwd))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在连接上创建一个频道</span></span><br><span class=\"line\">channel = s_conn.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明exchange的类型为模糊匹配，这里设置交换为持久化的</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'amq.topic'</span>,exchange_type=<span class=\"string\">'topic'</span>, durable=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建随机一个队列当消费者退出的时候，该队列被删除。</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个随机队列名字。  </span></span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到</span></span><br><span class=\"line\">binding_keys = [<span class=\"string\">'RPi.Data'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'amq.topic'</span>,</span><br><span class=\"line\">                       queue= queue_name,</span><br><span class=\"line\">                       routing_key=binding_key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置callback等，其中不给rabbitmq发送确认</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] %r:%r\"</span> % (method.routing_key, body))</span><br><span class=\"line\">channel.basic_consume(callback,queue= queue_name,no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开始循环接收消息</span></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>5.结果如下：</p>\n<p><img src=\"/img/xjy/rab001.jpg\" alt=\"\"> </p>\n<p>6.rabbitmq管理页面显示情况</p>\n<p>（1）交换信息</p>\n<p><img src=\"/img/xjy/rab002.jpg\" alt=\"\"> </p>\n<p>（2）连接信息</p>\n<p><img src=\"/img/xjy/rab003.jpg\" alt=\"\"></p>"},{"title":"树莓派学习-创建crontab任务","id":"189","date":"2017-12-12T14:20:44.000Z","_content":"\n今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：\n\n1.编辑要执行的脚本\n``` shell \nvi /home/pi/python-xjy/cust.sh \n```\n<!--more-->\n2.比如我要执行socket客户端程序\n``` shell \n/usr/bin/python3 /home/pi/python-xjy/cust.py\n```\n3.修改脚本权限为可执行\n``` shell \nchmod 755 /home/pi/python-xjy/cust.sh \n```\n4.可以查看目前定义的定时任务，确认是否加过该脚本\n``` shell \ncrontab -l \n```\n5.开始编辑crontab任务\n``` shell \ncrontab -e \n```\n6.加入如下任务（格式为：分 时 日 月 周几 命令）\n``` text \n* * * * * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt  \n```\n7.重启crontab\n``` shell \nsudo /etc/init.d/cron restart \n```\n8.查询crontab各任务的状态\n``` shell \nservice cron status \n```\n\n![](/img/xjy/smp006.jpg)","source":"_posts/p20.md","raw":"---\ntitle: 树莓派学习-创建crontab任务\nid: 189\ncategories:\n  - 树莓派学习\ndate: 2017-12-12 22:20:44\ntags: [树莓派, crontab]\n---\n\n今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：\n\n1.编辑要执行的脚本\n``` shell \nvi /home/pi/python-xjy/cust.sh \n```\n<!--more-->\n2.比如我要执行socket客户端程序\n``` shell \n/usr/bin/python3 /home/pi/python-xjy/cust.py\n```\n3.修改脚本权限为可执行\n``` shell \nchmod 755 /home/pi/python-xjy/cust.sh \n```\n4.可以查看目前定义的定时任务，确认是否加过该脚本\n``` shell \ncrontab -l \n```\n5.开始编辑crontab任务\n``` shell \ncrontab -e \n```\n6.加入如下任务（格式为：分 时 日 月 周几 命令）\n``` text \n* * * * * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt  \n```\n7.重启crontab\n``` shell \nsudo /etc/init.d/cron restart \n```\n8.查询crontab各任务的状态\n``` shell \nservice cron status \n```\n\n![](/img/xjy/smp006.jpg)","slug":"p20","published":1,"updated":"2018-05-16T08:51:29.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13c000kk4vghc9jlnm6","content":"<p>今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：</p>\n<p>1.编辑要执行的脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.比如我要执行socket客户端程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python3 /home/pi/python-xjy/cust.py</span><br></pre></td></tr></table></figure></p>\n<p>3.修改脚本权限为可执行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>\n<p>4.可以查看目前定义的定时任务，确认是否加过该脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure></p>\n<p>5.开始编辑crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure></p>\n<p>6.加入如下任务（格式为：分 时 日 月 周几 命令）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /home/pi/python-xjy/cust.sh 1&amp;gt;/home/pi/python-xjy/log.txt</span><br></pre></td></tr></table></figure></p>\n<p>7.重启crontab<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/cron restart</span><br></pre></td></tr></table></figure></p>\n<p>8.查询crontab各任务的状态<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service cron status</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/smp006.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：</p>\n<p>1.编辑要执行的脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>","more":"<p>2.比如我要执行socket客户端程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python3 /home/pi/python-xjy/cust.py</span><br></pre></td></tr></table></figure></p>\n<p>3.修改脚本权限为可执行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>\n<p>4.可以查看目前定义的定时任务，确认是否加过该脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure></p>\n<p>5.开始编辑crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure></p>\n<p>6.加入如下任务（格式为：分 时 日 月 周几 命令）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /home/pi/python-xjy/cust.sh 1&amp;gt;/home/pi/python-xjy/log.txt</span><br></pre></td></tr></table></figure></p>\n<p>7.重启crontab<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/cron restart</span><br></pre></td></tr></table></figure></p>\n<p>8.查询crontab各任务的状态<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service cron status</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/smp006.jpg\" alt=\"\"></p>"},{"title":"树莓派学习-忘记密码后重设","id":"134","date":"2017-12-10T10:08:09.000Z","_content":"\n在网上查到的方法：[原网址点这里](http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html)\n\n## 步骤\n\n下面所有的前提是有键盘。。。\n\n**第1步：取出SD卡**\n\n将树莓派关机，移除sd卡，插入到你的电脑。\n\n#### 第2步：编辑 cmdline.txt\n\n在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后\n``` text \ninit=/bin/sh \n```\n#### 第3步：重设密码\n\n<!--more-->\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n``` shell\nmount -rw -o remount /\npasswd pi\n``` \n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n``` shell \npasswd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully \n```\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n``` shell \nsync\nexec /sbin/init \n```\n树莓派会继续启动，然后关掉树莓派并且断电。\n``` shell \nsudo halt \n```\n\n#### 第4步：编辑cmdline.txt文本\n\n用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。\n现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。\n\n![](/img/xjy/smp003.png)","source":"_posts/p18.md","raw":"---\ntitle: 树莓派学习-忘记密码后重设\nid: 134\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 18:08:09\ntags: [树莓派, 忘记密码]\n---\n\n在网上查到的方法：[原网址点这里](http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html)\n\n## 步骤\n\n下面所有的前提是有键盘。。。\n\n**第1步：取出SD卡**\n\n将树莓派关机，移除sd卡，插入到你的电脑。\n\n#### 第2步：编辑 cmdline.txt\n\n在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后\n``` text \ninit=/bin/sh \n```\n#### 第3步：重设密码\n\n<!--more-->\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n``` shell\nmount -rw -o remount /\npasswd pi\n``` \n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n``` shell \npasswd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully \n```\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n``` shell \nsync\nexec /sbin/init \n```\n树莓派会继续启动，然后关掉树莓派并且断电。\n``` shell \nsudo halt \n```\n\n#### 第4步：编辑cmdline.txt文本\n\n用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。\n现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。\n\n![](/img/xjy/smp003.png)","slug":"p18","published":1,"updated":"2018-05-16T08:46:15.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13e000ok4vg9065kha1","content":"<p>在网上查到的方法：<a href=\"http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html\" target=\"_blank\" rel=\"noopener\">原网址点这里</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>下面所有的前提是有键盘。。。</p>\n<p><strong>第1步：取出SD卡</strong></p>\n<p>将树莓派关机，移除sd卡，插入到你的电脑。</p>\n<h4 id=\"第2步：编辑-cmdline-txt\"><a href=\"#第2步：编辑-cmdline-txt\" class=\"headerlink\" title=\"第2步：编辑 cmdline.txt\"></a>第2步：编辑 cmdline.txt</h4><p>在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init=/bin/sh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第3步：重设密码\"><a href=\"#第3步：重设密码\" class=\"headerlink\" title=\"第3步：重设密码\"></a>第3步：重设密码</h4><a id=\"more\"></a>\n<p>将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。<br>在标识符后，输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -rw -o remount /</span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">``` </span><br><span class=\"line\">你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">Enter new UNIX password:</span><br><span class=\"line\">Retype new UNIX password:</span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p>\n<p>这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync</span><br><span class=\"line\">exec /sbin/init</span><br></pre></td></tr></table></figure></p>\n<p>树莓派会继续启动，然后关掉树莓派并且断电。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo halt</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第4步：编辑cmdline-txt文本\"><a href=\"#第4步：编辑cmdline-txt文本\" class=\"headerlink\" title=\"第4步：编辑cmdline.txt文本\"></a>第4步：编辑cmdline.txt文本</h4><p>用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。<br>现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。</p>\n<p><img src=\"/img/xjy/smp003.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在网上查到的方法：<a href=\"http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html\" target=\"_blank\" rel=\"noopener\">原网址点这里</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>下面所有的前提是有键盘。。。</p>\n<p><strong>第1步：取出SD卡</strong></p>\n<p>将树莓派关机，移除sd卡，插入到你的电脑。</p>\n<h4 id=\"第2步：编辑-cmdline-txt\"><a href=\"#第2步：编辑-cmdline-txt\" class=\"headerlink\" title=\"第2步：编辑 cmdline.txt\"></a>第2步：编辑 cmdline.txt</h4><p>在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init=/bin/sh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第3步：重设密码\"><a href=\"#第3步：重设密码\" class=\"headerlink\" title=\"第3步：重设密码\"></a>第3步：重设密码</h4>","more":"<p>将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。<br>在标识符后，输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -rw -o remount /</span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">``` </span><br><span class=\"line\">你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">Enter new UNIX password:</span><br><span class=\"line\">Retype new UNIX password:</span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p>\n<p>这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync</span><br><span class=\"line\">exec /sbin/init</span><br></pre></td></tr></table></figure></p>\n<p>树莓派会继续启动，然后关掉树莓派并且断电。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo halt</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第4步：编辑cmdline-txt文本\"><a href=\"#第4步：编辑cmdline-txt文本\" class=\"headerlink\" title=\"第4步：编辑cmdline.txt文本\"></a>第4步：编辑cmdline.txt文本</h4><p>用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。<br>现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。</p>\n<p><img src=\"/img/xjy/smp003.png\" alt=\"\"></p>"},{"title":"树莓派学习-先装好环境跑起来","id":"132","date":"2017-12-10T09:57:14.000Z","_content":"\n#### 安装系统\n用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可\n\n#### 连接SSH\n<!--more-->\n<新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。\n\n#### 安装 远程桌面访问\n``` shell \n$ sudo apt-get install xrdp \n```\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n\n#### 运行结果如图：\n\n![](/img/xjy/smp006.png)","source":"_posts/p21.md","raw":"---\ntitle: 树莓派学习-先装好环境跑起来\nid: 132\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 17:57:14\ntags: [树莓派, Win32DiskImager, ssh]\n---\n\n#### 安装系统\n用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可\n\n#### 连接SSH\n<!--more-->\n<新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。\n\n#### 安装 远程桌面访问\n``` shell \n$ sudo apt-get install xrdp \n```\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n\n#### 运行结果如图：\n\n![](/img/xjy/smp006.png)","slug":"p21","published":1,"updated":"2018-05-16T08:53:55.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13h000qk4vgetx9fjxe","content":"<h4 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h4><p>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</p>\n<h4 id=\"连接SSH\"><a href=\"#连接SSH\" class=\"headerlink\" title=\"连接SSH\"></a>连接SSH</h4><a id=\"more\"></a>\n<p>&lt;新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</p>\n<h4 id=\"安装-远程桌面访问\"><a href=\"#安装-远程桌面访问\" class=\"headerlink\" title=\"安装 远程桌面访问\"></a>安装 远程桌面访问</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install xrdp</span><br></pre></td></tr></table></figure>\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n<h4 id=\"运行结果如图：\"><a href=\"#运行结果如图：\" class=\"headerlink\" title=\"运行结果如图：\"></a>运行结果如图：</h4><p><img src=\"/img/xjy/smp006.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h4><p>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</p>\n<h4 id=\"连接SSH\"><a href=\"#连接SSH\" class=\"headerlink\" title=\"连接SSH\"></a>连接SSH</h4>","more":"<p>&lt;新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</p>\n<h4 id=\"安装-远程桌面访问\"><a href=\"#安装-远程桌面访问\" class=\"headerlink\" title=\"安装 远程桌面访问\"></a>安装 远程桌面访问</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt-get install xrdp</span><br></pre></td></tr></table></figure>\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n<h4 id=\"运行结果如图：\"><a href=\"#运行结果如图：\" class=\"headerlink\" title=\"运行结果如图：\"></a>运行结果如图：</h4><p><img src=\"/img/xjy/smp006.png\" alt=\"\"></p>"},{"title":"树莓派学习-DHT11温湿度读取（GPIO接口）","id":"147","date":"2017-12-10T10:35:30.000Z","_content":"\n#### 1.接线顺序可以参照下图：\n\n![](/img/xjy/smp007.png) \n\n<!--more-->\n\n![](/img/xjy/smp008.jpg)\n\n#### 2.python代码如下所示，DHT11.py：\n``` py \nimport RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n```\n\n#### 3.运行结果如图：\n\n![](/img/xjy/smp009.png)","source":"_posts/p22.md","raw":"---\ntitle: 树莓派学习-DHT11温湿度读取（GPIO接口）\nid: 147\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 18:35:30\ntags: [树莓派, dht11, gpio, python, 传感器]\n---\n\n#### 1.接线顺序可以参照下图：\n\n![](/img/xjy/smp007.png) \n\n<!--more-->\n\n![](/img/xjy/smp008.jpg)\n\n#### 2.python代码如下所示，DHT11.py：\n``` py \nimport RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n```\n\n#### 3.运行结果如图：\n\n![](/img/xjy/smp009.png)","slug":"p22","published":1,"updated":"2018-05-16T08:54:53.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13j000tk4vgzxvjqkcb","content":"<h4 id=\"1-接线顺序可以参照下图：\"><a href=\"#1-接线顺序可以参照下图：\" class=\"headerlink\" title=\"1.接线顺序可以参照下图：\"></a>1.接线顺序可以参照下图：</h4><p><img src=\"/img/xjy/smp007.png\" alt=\"\"> </p>\n<a id=\"more\"></a>\n<p><img src=\"/img/xjy/smp008.jpg\" alt=\"\"></p>\n<h4 id=\"2-python代码如下所示，DHT11-py：\"><a href=\"#2-python代码如下所示，DHT11-py：\" class=\"headerlink\" title=\"2.python代码如下所示，DHT11.py：\"></a>2.python代码如下所示，DHT11.py：</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO </span><br><span class=\"line\"><span class=\"keyword\">import</span> time </span><br><span class=\"line\"></span><br><span class=\"line\">defaultT=<span class=\"number\">14</span></span><br><span class=\"line\">defaultS=<span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">channel =<span class=\"number\">4</span> </span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">data = [] </span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.OUT) </span><br><span class=\"line\">GPIO.output(channel, GPIO.LOW) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.02</span>) </span><br><span class=\"line\">GPIO.output(channel, GPIO.HIGH) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.IN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &amp;lt; <span class=\"number\">40</span>: </span><br><span class=\"line\">k = <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\">k += <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;gt; <span class=\"number\">100</span>: </span><br><span class=\"line\"><span class=\"keyword\">break</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;lt; <span class=\"number\">8</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">j += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#print (\"sensor is working.\") </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (data)</span><br><span class=\"line\"></span><br><span class=\"line\">humidity_bit = data[<span class=\"number\">0</span>:<span class=\"number\">8</span>] </span><br><span class=\"line\">humidity_point_bit = data[<span class=\"number\">8</span>:<span class=\"number\">16</span>] </span><br><span class=\"line\">temperature_bit = data[<span class=\"number\">16</span>:<span class=\"number\">24</span>] </span><br><span class=\"line\">temperature_point_bit = data[<span class=\"number\">24</span>:<span class=\"number\">32</span>] </span><br><span class=\"line\">check_bit = data[<span class=\"number\">32</span>:<span class=\"number\">40</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">humidity = <span class=\"number\">0</span> </span><br><span class=\"line\">humidity_point = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature_point = <span class=\"number\">0</span> </span><br><span class=\"line\">check = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>): </span><br><span class=\"line\">humidity += humidity_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">humidity_point += humidity_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature += temperature_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature_point += temperature_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">check += check_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = humidity + humidity_point + temperature + temperature_point</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> check == tmp:</span><br><span class=\"line\">defaultT=temperature</span><br><span class=\"line\">defaultS=humidity</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, temperature, <span class=\"string\">\"*C, humidity :\"</span>, humidity, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, defaultT, <span class=\"string\">\"*C, humidity :\"</span>, defaultS, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">GPIO.cleanup()</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-运行结果如图：\"><a href=\"#3-运行结果如图：\" class=\"headerlink\" title=\"3.运行结果如图：\"></a>3.运行结果如图：</h4><p><img src=\"/img/xjy/smp009.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-接线顺序可以参照下图：\"><a href=\"#1-接线顺序可以参照下图：\" class=\"headerlink\" title=\"1.接线顺序可以参照下图：\"></a>1.接线顺序可以参照下图：</h4><p><img src=\"/img/xjy/smp007.png\" alt=\"\"> </p>","more":"<p><img src=\"/img/xjy/smp008.jpg\" alt=\"\"></p>\n<h4 id=\"2-python代码如下所示，DHT11-py：\"><a href=\"#2-python代码如下所示，DHT11-py：\" class=\"headerlink\" title=\"2.python代码如下所示，DHT11.py：\"></a>2.python代码如下所示，DHT11.py：</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO </span><br><span class=\"line\"><span class=\"keyword\">import</span> time </span><br><span class=\"line\"></span><br><span class=\"line\">defaultT=<span class=\"number\">14</span></span><br><span class=\"line\">defaultS=<span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">channel =<span class=\"number\">4</span> </span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">data = [] </span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.OUT) </span><br><span class=\"line\">GPIO.output(channel, GPIO.LOW) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.02</span>) </span><br><span class=\"line\">GPIO.output(channel, GPIO.HIGH) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.IN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &amp;lt; <span class=\"number\">40</span>: </span><br><span class=\"line\">k = <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\">k += <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;gt; <span class=\"number\">100</span>: </span><br><span class=\"line\"><span class=\"keyword\">break</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;lt; <span class=\"number\">8</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">j += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#print (\"sensor is working.\") </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (data)</span><br><span class=\"line\"></span><br><span class=\"line\">humidity_bit = data[<span class=\"number\">0</span>:<span class=\"number\">8</span>] </span><br><span class=\"line\">humidity_point_bit = data[<span class=\"number\">8</span>:<span class=\"number\">16</span>] </span><br><span class=\"line\">temperature_bit = data[<span class=\"number\">16</span>:<span class=\"number\">24</span>] </span><br><span class=\"line\">temperature_point_bit = data[<span class=\"number\">24</span>:<span class=\"number\">32</span>] </span><br><span class=\"line\">check_bit = data[<span class=\"number\">32</span>:<span class=\"number\">40</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">humidity = <span class=\"number\">0</span> </span><br><span class=\"line\">humidity_point = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature_point = <span class=\"number\">0</span> </span><br><span class=\"line\">check = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>): </span><br><span class=\"line\">humidity += humidity_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">humidity_point += humidity_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature += temperature_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature_point += temperature_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">check += check_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = humidity + humidity_point + temperature + temperature_point</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> check == tmp:</span><br><span class=\"line\">defaultT=temperature</span><br><span class=\"line\">defaultS=humidity</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, temperature, <span class=\"string\">\"*C, humidity :\"</span>, humidity, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, defaultT, <span class=\"string\">\"*C, humidity :\"</span>, defaultS, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">GPIO.cleanup()</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-运行结果如图：\"><a href=\"#3-运行结果如图：\" class=\"headerlink\" title=\"3.运行结果如图：\"></a>3.运行结果如图：</h4><p><img src=\"/img/xjy/smp009.png\" alt=\"\"></p>"},{"title":"搭建之路1-基于redhat","id":"405","date":"2018-02-06T03:25:38.000Z","_content":"在redhat系统下，从jdk->maven->nexus->svn->jenkins，逐步实现从java编译到高级管理环境的搭建。\n\n<!--more-->\n\n# 1 安装jdk #\n\n比较常见,我这里以1.8为例\n\n## 1.1解压复制 ##\n\n``` shell \nsudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm \n```\n\n\n## 1.2执行安装 ##\n``` shell \nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  && sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ && sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ && sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n```\n## 1.3验证版本 ##  \n``` shell \njava -version\n```\n\n## 1.4另外可增加配置 ##\n``` shell \nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n# 2 安装maven #\n\n## 2.1下载安装包 ##\n``` shell \nwget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n```\n\n## 2.2解压 ##\n``` shell \ntar zvxf apache-maven-3.0.5-bin.tar.gz \n```\n## 2.3移到指定目录 ##\n``` shell \nmv apache-maven-3.0.5 /usr/local\n```\n\n## 2.4编辑配置文件/etc/profile，加入 ##\n``` shell \nexport MAVEN_HOME=/usr/local/apache-maven-3.0.5\nexport PATH=$PATH:$MAVEN_HOME/bin\n```\n\n## 2.5始配置生效 ##\n``` shell \n    source /etc/profile\n```\n\n## 2.6确认安装完成 ##\n``` shell \n    mvn -v \n```\n\n# 3 nexus安装 #\n\n## 3.1下载安装包 ## \n``` shell \nwget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n```\n\n## 3.2解压并复制 ##\n``` shell \nsudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n```\n\n## 3.3做链接 ##\n``` shell \nsudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n```\n\n## 3.4赋权限 ##\n``` shell \nchmod 755 /etc/init.d/nexus\n```\n\n## 3.5设置开机启动并运行 ##\n``` shell \ncd /etc/init.d\nchkconfig --add nexus\nchkconfig --levels 345 nexus on\nservice nexus start\ntail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n```\n\n## 3.6配置请查考链接\n\n[配置链接](https://www.xncoding.com/2017/09/02/tool/nexus.html)\n\n\n# 4 svn安装 #\n\n## 4.1yum安装svnversion ##\n\n4.1.1 检查是否安装了低版本的SVN\n``` shell \nrpm -qa subversion\n```\n\n4.1.2 如果存储旧版本，卸载旧版本SVN\n``` shell \nyum remove subversion\n```\n\n4.1.3 安装SVN\n``` shell \nyum install subversion\n```\n\n4.1.4 验证安装版本信息\n``` shell \nsvnserve --version\n```\n\n4.1.5 代码库创建\n``` shell \nmkdir -p /opt/svn/\nsvnadmin create /opt/svn/repo\n```\n## 4.2账户权限及防火墙配置 ##\n\n4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：\n``` text \n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n```\n\n4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：\n``` text \n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n```\n\n4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：\n``` text \n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n```\n\n4.2.4  编辑/etc/sysconfig/iptables，加入如下内容\n``` text \n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n```\n\n## 4.3 启动SVN ##\n\n4.3.1 启动SVN\n``` shell \nsvnserve -d -r /opt/svn/\n```\n\n4.3.2 查看SVN进程\n``` shell \nps -ef|grep svnserve\n```\n\n4.3.3 检测SVN端口\n``` shell \nnetstat -ln |grep 3690 \n```\n\n## 4.4完成上面的步骤即可在客户端正常访问\n\n地址：[svn://ip地址/repo](svn://ip地址/repo)\n\n# 5 jenkins安装 #\n\n## 5.1安装 ##\n``` shell \nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n## 5.2启动并加入开机启动项 ##\n``` shell \nsudo service jenkins start\nsudo chkconfig jenkins on\n```\n\n## 5.3访问jenkins的web管理端 ##\n\n[http://ip:8080](http://ip地址:8080)\n\n\n## 5.4初始进入及安装插件等 ##\n\n- (1).从提示文件中找到输入管理员身份确认码并输入\n\n- (2).安装默认插件\n\n- (3).创建管理员后开始\n\n- (4).安装Maven Integration plugin插件\n\n## 5.5配置一个jenkins任务\n下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：\n![](/img/xjy/jenkins config.png)\n\n# 6 小结\n\n这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。","source":"_posts/p23.md","raw":"---\ntitle: 搭建之路1-基于redhat\nid: 405\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-02-06 11:25:38\ntags: [运维, java, maven, svn, jenkins, nexus, redhat]\n---\n在redhat系统下，从jdk->maven->nexus->svn->jenkins，逐步实现从java编译到高级管理环境的搭建。\n\n<!--more-->\n\n# 1 安装jdk #\n\n比较常见,我这里以1.8为例\n\n## 1.1解压复制 ##\n\n``` shell \nsudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm \n```\n\n\n## 1.2执行安装 ##\n``` shell \nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  && sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ && sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ && sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n```\n## 1.3验证版本 ##  \n``` shell \njava -version\n```\n\n## 1.4另外可增加配置 ##\n``` shell \nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n# 2 安装maven #\n\n## 2.1下载安装包 ##\n``` shell \nwget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n```\n\n## 2.2解压 ##\n``` shell \ntar zvxf apache-maven-3.0.5-bin.tar.gz \n```\n## 2.3移到指定目录 ##\n``` shell \nmv apache-maven-3.0.5 /usr/local\n```\n\n## 2.4编辑配置文件/etc/profile，加入 ##\n``` shell \nexport MAVEN_HOME=/usr/local/apache-maven-3.0.5\nexport PATH=$PATH:$MAVEN_HOME/bin\n```\n\n## 2.5始配置生效 ##\n``` shell \n    source /etc/profile\n```\n\n## 2.6确认安装完成 ##\n``` shell \n    mvn -v \n```\n\n# 3 nexus安装 #\n\n## 3.1下载安装包 ## \n``` shell \nwget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n```\n\n## 3.2解压并复制 ##\n``` shell \nsudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n```\n\n## 3.3做链接 ##\n``` shell \nsudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n```\n\n## 3.4赋权限 ##\n``` shell \nchmod 755 /etc/init.d/nexus\n```\n\n## 3.5设置开机启动并运行 ##\n``` shell \ncd /etc/init.d\nchkconfig --add nexus\nchkconfig --levels 345 nexus on\nservice nexus start\ntail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n```\n\n## 3.6配置请查考链接\n\n[配置链接](https://www.xncoding.com/2017/09/02/tool/nexus.html)\n\n\n# 4 svn安装 #\n\n## 4.1yum安装svnversion ##\n\n4.1.1 检查是否安装了低版本的SVN\n``` shell \nrpm -qa subversion\n```\n\n4.1.2 如果存储旧版本，卸载旧版本SVN\n``` shell \nyum remove subversion\n```\n\n4.1.3 安装SVN\n``` shell \nyum install subversion\n```\n\n4.1.4 验证安装版本信息\n``` shell \nsvnserve --version\n```\n\n4.1.5 代码库创建\n``` shell \nmkdir -p /opt/svn/\nsvnadmin create /opt/svn/repo\n```\n## 4.2账户权限及防火墙配置 ##\n\n4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：\n``` text \n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n```\n\n4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：\n``` text \n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n```\n\n4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：\n``` text \n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n```\n\n4.2.4  编辑/etc/sysconfig/iptables，加入如下内容\n``` text \n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n```\n\n## 4.3 启动SVN ##\n\n4.3.1 启动SVN\n``` shell \nsvnserve -d -r /opt/svn/\n```\n\n4.3.2 查看SVN进程\n``` shell \nps -ef|grep svnserve\n```\n\n4.3.3 检测SVN端口\n``` shell \nnetstat -ln |grep 3690 \n```\n\n## 4.4完成上面的步骤即可在客户端正常访问\n\n地址：[svn://ip地址/repo](svn://ip地址/repo)\n\n# 5 jenkins安装 #\n\n## 5.1安装 ##\n``` shell \nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n## 5.2启动并加入开机启动项 ##\n``` shell \nsudo service jenkins start\nsudo chkconfig jenkins on\n```\n\n## 5.3访问jenkins的web管理端 ##\n\n[http://ip:8080](http://ip地址:8080)\n\n\n## 5.4初始进入及安装插件等 ##\n\n- (1).从提示文件中找到输入管理员身份确认码并输入\n\n- (2).安装默认插件\n\n- (3).创建管理员后开始\n\n- (4).安装Maven Integration plugin插件\n\n## 5.5配置一个jenkins任务\n下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：\n![](/img/xjy/jenkins config.png)\n\n# 6 小结\n\n这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。","slug":"p23","published":1,"updated":"2018-05-24T06:44:36.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13l000xk4vg8wsrik95","content":"<p>在redhat系统下，从jdk-&gt;maven-&gt;nexus-&gt;svn-&gt;jenkins，逐步实现从java编译到高级管理环境的搭建。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-安装jdk\"><a href=\"#1-安装jdk\" class=\"headerlink\" title=\"1 安装jdk\"></a>1 安装jdk</h1><p>比较常见,我这里以1.8为例</p>\n<h2 id=\"1-1解压复制\"><a href=\"#1-1解压复制\" class=\"headerlink\" title=\"1.1解压复制\"></a>1.1解压复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2执行安装\"><a href=\"#1-2执行安装\" class=\"headerlink\" title=\"1.2执行安装\"></a>1.2执行安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  &amp;&amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;&amp; sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ &amp;&amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3验证版本\"><a href=\"#1-3验证版本\" class=\"headerlink\" title=\"1.3验证版本\"></a>1.3验证版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4另外可增加配置\"><a href=\"#1-4另外可增加配置\" class=\"headerlink\" title=\"1.4另外可增加配置\"></a>1.4另外可增加配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-安装maven\"><a href=\"#2-安装maven\" class=\"headerlink\" title=\"2 安装maven\"></a>2 安装maven</h1><h2 id=\"2-1下载安装包\"><a href=\"#2-1下载安装包\" class=\"headerlink\" title=\"2.1下载安装包\"></a>2.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2解压\"><a href=\"#2-2解压\" class=\"headerlink\" title=\"2.2解压\"></a>2.2解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zvxf apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3移到指定目录\"><a href=\"#2-3移到指定目录\" class=\"headerlink\" title=\"2.3移到指定目录\"></a>2.3移到指定目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-maven-3.0.5 /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4编辑配置文件-etc-profile，加入\"><a href=\"#2-4编辑配置文件-etc-profile，加入\" class=\"headerlink\" title=\"2.4编辑配置文件/etc/profile，加入\"></a>2.4编辑配置文件/etc/profile，加入</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/usr/local/apache-maven-3.0.5</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5始配置生效\"><a href=\"#2-5始配置生效\" class=\"headerlink\" title=\"2.5始配置生效\"></a>2.5始配置生效</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6确认安装完成\"><a href=\"#2-6确认安装完成\" class=\"headerlink\" title=\"2.6确认安装完成\"></a>2.6确认安装完成</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-nexus安装\"><a href=\"#3-nexus安装\" class=\"headerlink\" title=\"3 nexus安装\"></a>3 nexus安装</h1><h2 id=\"3-1下载安装包\"><a href=\"#3-1下载安装包\" class=\"headerlink\" title=\"3.1下载安装包\"></a>3.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2解压并复制\"><a href=\"#3-2解压并复制\" class=\"headerlink\" title=\"3.2解压并复制\"></a>3.2解压并复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3做链接\"><a href=\"#3-3做链接\" class=\"headerlink\" title=\"3.3做链接\"></a>3.3做链接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4赋权限\"><a href=\"#3-4赋权限\" class=\"headerlink\" title=\"3.4赋权限\"></a>3.4赋权限</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5设置开机启动并运行\"><a href=\"#3-5设置开机启动并运行\" class=\"headerlink\" title=\"3.5设置开机启动并运行\"></a>3.5设置开机启动并运行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/init.d</span><br><span class=\"line\">chkconfig --add nexus</span><br><span class=\"line\">chkconfig --levels 345 nexus on</span><br><span class=\"line\">service nexus start</span><br><span class=\"line\">tail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6配置请查考链接\"><a href=\"#3-6配置请查考链接\" class=\"headerlink\" title=\"3.6配置请查考链接\"></a>3.6配置请查考链接</h2><p><a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\">配置链接</a></p>\n<h1 id=\"4-svn安装\"><a href=\"#4-svn安装\" class=\"headerlink\" title=\"4 svn安装\"></a>4 svn安装</h1><h2 id=\"4-1yum安装svnversion\"><a href=\"#4-1yum安装svnversion\" class=\"headerlink\" title=\"4.1yum安装svnversion\"></a>4.1yum安装svnversion</h2><p>4.1.1 检查是否安装了低版本的SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.2 如果存储旧版本，卸载旧版本SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.3 安装SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.4 验证安装版本信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve --version</span><br></pre></td></tr></table></figure></p>\n<p>4.1.5 代码库创建<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/svn/</span><br><span class=\"line\">svnadmin create /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2账户权限及防火墙配置\"><a href=\"#4-2账户权限及防火墙配置\" class=\"headerlink\" title=\"4.2账户权限及防火墙配置\"></a>4.2账户权限及防火墙配置</h2><p>4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\"># harry = harryssecret</span><br><span class=\"line\"># sally = sallyssecret</span><br><span class=\"line\">xjy= 123</span><br><span class=\"line\">www = 123</span><br></pre></td></tr></table></figure></p>\n<p>4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">#创建一个admin组，将用户加入到组</span><br><span class=\"line\">admin = xjy,www</span><br><span class=\"line\">[/] #根目录权限设置（就是“svn”这个文件夹）</span><br><span class=\"line\">xjy = rw            #xjy对svn下的所有版本库有读写权限</span><br><span class=\"line\">www = r             #www对svn下的所有版本库有读权限</span><br><span class=\"line\">[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限</span><br><span class=\"line\">@admin = rw         #admin组的用户对repo版本库有读写权限</span><br></pre></td></tr></table></figure></p>\n<p>4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[general]  </span><br><span class=\"line\">#匿名访问的权限，可以是read,write,none,默认为read  </span><br><span class=\"line\">anon-access = none  </span><br><span class=\"line\">#使授权用户有写权限  </span><br><span class=\"line\">auth-access = write  </span><br><span class=\"line\">#密码数据库的路径  </span><br><span class=\"line\">password-db = passwd  </span><br><span class=\"line\">#访问控制文件  </span><br><span class=\"line\">authz-db = authz  </span><br><span class=\"line\">#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  </span><br><span class=\"line\">realm = /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<p>4.2.4  编辑/etc/sysconfig/iptables，加入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-3-启动SVN\"><a href=\"#4-3-启动SVN\" class=\"headerlink\" title=\"4.3 启动SVN\"></a>4.3 启动SVN</h2><p>4.3.1 启动SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /opt/svn/</span><br></pre></td></tr></table></figure></p>\n<p>4.3.2 查看SVN进程<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep svnserve</span><br></pre></td></tr></table></figure></p>\n<p>4.3.3 检测SVN端口<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ln |grep 3690</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-4完成上面的步骤即可在客户端正常访问\"><a href=\"#4-4完成上面的步骤即可在客户端正常访问\" class=\"headerlink\" title=\"4.4完成上面的步骤即可在客户端正常访问\"></a>4.4完成上面的步骤即可在客户端正常访问</h2><p>地址：<a href=\"svn://ip地址/repo\" target=\"_blank\" rel=\"noopener\">svn://ip地址/repo</a></p>\n<h1 id=\"5-jenkins安装\"><a href=\"#5-jenkins安装\" class=\"headerlink\" title=\"5 jenkins安装\"></a>5 jenkins安装</h1><h2 id=\"5-1安装\"><a href=\"#5-1安装\" class=\"headerlink\" title=\"5.1安装\"></a>5.1安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2启动并加入开机启动项\"><a href=\"#5-2启动并加入开机启动项\" class=\"headerlink\" title=\"5.2启动并加入开机启动项\"></a>5.2启动并加入开机启动项</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service jenkins start</span><br><span class=\"line\">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3访问jenkins的web管理端\"><a href=\"#5-3访问jenkins的web管理端\" class=\"headerlink\" title=\"5.3访问jenkins的web管理端\"></a>5.3访问jenkins的web管理端</h2><p><a href=\"http://ip地址:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n<h2 id=\"5-4初始进入及安装插件等\"><a href=\"#5-4初始进入及安装插件等\" class=\"headerlink\" title=\"5.4初始进入及安装插件等\"></a>5.4初始进入及安装插件等</h2><ul>\n<li><p>(1).从提示文件中找到输入管理员身份确认码并输入</p>\n</li>\n<li><p>(2).安装默认插件</p>\n</li>\n<li><p>(3).创建管理员后开始</p>\n</li>\n<li><p>(4).安装Maven Integration plugin插件</p>\n</li>\n</ul>\n<h2 id=\"5-5配置一个jenkins任务\"><a href=\"#5-5配置一个jenkins任务\" class=\"headerlink\" title=\"5.5配置一个jenkins任务\"></a>5.5配置一个jenkins任务</h2><p>下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：<br><img src=\"/img/xjy/jenkins config.png\" alt=\"\"></p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。</p>\n","site":{"data":{}},"excerpt":"<p>在redhat系统下，从jdk-&gt;maven-&gt;nexus-&gt;svn-&gt;jenkins，逐步实现从java编译到高级管理环境的搭建。</p>","more":"<h1 id=\"1-安装jdk\"><a href=\"#1-安装jdk\" class=\"headerlink\" title=\"1 安装jdk\"></a>1 安装jdk</h1><p>比较常见,我这里以1.8为例</p>\n<h2 id=\"1-1解压复制\"><a href=\"#1-1解压复制\" class=\"headerlink\" title=\"1.1解压复制\"></a>1.1解压复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2执行安装\"><a href=\"#1-2执行安装\" class=\"headerlink\" title=\"1.2执行安装\"></a>1.2执行安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  &amp;&amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;&amp; sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ &amp;&amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3验证版本\"><a href=\"#1-3验证版本\" class=\"headerlink\" title=\"1.3验证版本\"></a>1.3验证版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4另外可增加配置\"><a href=\"#1-4另外可增加配置\" class=\"headerlink\" title=\"1.4另外可增加配置\"></a>1.4另外可增加配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-安装maven\"><a href=\"#2-安装maven\" class=\"headerlink\" title=\"2 安装maven\"></a>2 安装maven</h1><h2 id=\"2-1下载安装包\"><a href=\"#2-1下载安装包\" class=\"headerlink\" title=\"2.1下载安装包\"></a>2.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2解压\"><a href=\"#2-2解压\" class=\"headerlink\" title=\"2.2解压\"></a>2.2解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zvxf apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3移到指定目录\"><a href=\"#2-3移到指定目录\" class=\"headerlink\" title=\"2.3移到指定目录\"></a>2.3移到指定目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-maven-3.0.5 /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4编辑配置文件-etc-profile，加入\"><a href=\"#2-4编辑配置文件-etc-profile，加入\" class=\"headerlink\" title=\"2.4编辑配置文件/etc/profile，加入\"></a>2.4编辑配置文件/etc/profile，加入</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/usr/local/apache-maven-3.0.5</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5始配置生效\"><a href=\"#2-5始配置生效\" class=\"headerlink\" title=\"2.5始配置生效\"></a>2.5始配置生效</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6确认安装完成\"><a href=\"#2-6确认安装完成\" class=\"headerlink\" title=\"2.6确认安装完成\"></a>2.6确认安装完成</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-nexus安装\"><a href=\"#3-nexus安装\" class=\"headerlink\" title=\"3 nexus安装\"></a>3 nexus安装</h1><h2 id=\"3-1下载安装包\"><a href=\"#3-1下载安装包\" class=\"headerlink\" title=\"3.1下载安装包\"></a>3.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2解压并复制\"><a href=\"#3-2解压并复制\" class=\"headerlink\" title=\"3.2解压并复制\"></a>3.2解压并复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3做链接\"><a href=\"#3-3做链接\" class=\"headerlink\" title=\"3.3做链接\"></a>3.3做链接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4赋权限\"><a href=\"#3-4赋权限\" class=\"headerlink\" title=\"3.4赋权限\"></a>3.4赋权限</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5设置开机启动并运行\"><a href=\"#3-5设置开机启动并运行\" class=\"headerlink\" title=\"3.5设置开机启动并运行\"></a>3.5设置开机启动并运行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/init.d</span><br><span class=\"line\">chkconfig --add nexus</span><br><span class=\"line\">chkconfig --levels 345 nexus on</span><br><span class=\"line\">service nexus start</span><br><span class=\"line\">tail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6配置请查考链接\"><a href=\"#3-6配置请查考链接\" class=\"headerlink\" title=\"3.6配置请查考链接\"></a>3.6配置请查考链接</h2><p><a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\">配置链接</a></p>\n<h1 id=\"4-svn安装\"><a href=\"#4-svn安装\" class=\"headerlink\" title=\"4 svn安装\"></a>4 svn安装</h1><h2 id=\"4-1yum安装svnversion\"><a href=\"#4-1yum安装svnversion\" class=\"headerlink\" title=\"4.1yum安装svnversion\"></a>4.1yum安装svnversion</h2><p>4.1.1 检查是否安装了低版本的SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.2 如果存储旧版本，卸载旧版本SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.3 安装SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.4 验证安装版本信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve --version</span><br></pre></td></tr></table></figure></p>\n<p>4.1.5 代码库创建<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/svn/</span><br><span class=\"line\">svnadmin create /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2账户权限及防火墙配置\"><a href=\"#4-2账户权限及防火墙配置\" class=\"headerlink\" title=\"4.2账户权限及防火墙配置\"></a>4.2账户权限及防火墙配置</h2><p>4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\"># harry = harryssecret</span><br><span class=\"line\"># sally = sallyssecret</span><br><span class=\"line\">xjy= 123</span><br><span class=\"line\">www = 123</span><br></pre></td></tr></table></figure></p>\n<p>4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">#创建一个admin组，将用户加入到组</span><br><span class=\"line\">admin = xjy,www</span><br><span class=\"line\">[/] #根目录权限设置（就是“svn”这个文件夹）</span><br><span class=\"line\">xjy = rw            #xjy对svn下的所有版本库有读写权限</span><br><span class=\"line\">www = r             #www对svn下的所有版本库有读权限</span><br><span class=\"line\">[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限</span><br><span class=\"line\">@admin = rw         #admin组的用户对repo版本库有读写权限</span><br></pre></td></tr></table></figure></p>\n<p>4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[general]  </span><br><span class=\"line\">#匿名访问的权限，可以是read,write,none,默认为read  </span><br><span class=\"line\">anon-access = none  </span><br><span class=\"line\">#使授权用户有写权限  </span><br><span class=\"line\">auth-access = write  </span><br><span class=\"line\">#密码数据库的路径  </span><br><span class=\"line\">password-db = passwd  </span><br><span class=\"line\">#访问控制文件  </span><br><span class=\"line\">authz-db = authz  </span><br><span class=\"line\">#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  </span><br><span class=\"line\">realm = /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<p>4.2.4  编辑/etc/sysconfig/iptables，加入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-3-启动SVN\"><a href=\"#4-3-启动SVN\" class=\"headerlink\" title=\"4.3 启动SVN\"></a>4.3 启动SVN</h2><p>4.3.1 启动SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /opt/svn/</span><br></pre></td></tr></table></figure></p>\n<p>4.3.2 查看SVN进程<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep svnserve</span><br></pre></td></tr></table></figure></p>\n<p>4.3.3 检测SVN端口<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ln |grep 3690</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-4完成上面的步骤即可在客户端正常访问\"><a href=\"#4-4完成上面的步骤即可在客户端正常访问\" class=\"headerlink\" title=\"4.4完成上面的步骤即可在客户端正常访问\"></a>4.4完成上面的步骤即可在客户端正常访问</h2><p>地址：<a href=\"svn://ip地址/repo\" target=\"_blank\" rel=\"noopener\">svn://ip地址/repo</a></p>\n<h1 id=\"5-jenkins安装\"><a href=\"#5-jenkins安装\" class=\"headerlink\" title=\"5 jenkins安装\"></a>5 jenkins安装</h1><h2 id=\"5-1安装\"><a href=\"#5-1安装\" class=\"headerlink\" title=\"5.1安装\"></a>5.1安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2启动并加入开机启动项\"><a href=\"#5-2启动并加入开机启动项\" class=\"headerlink\" title=\"5.2启动并加入开机启动项\"></a>5.2启动并加入开机启动项</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service jenkins start</span><br><span class=\"line\">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3访问jenkins的web管理端\"><a href=\"#5-3访问jenkins的web管理端\" class=\"headerlink\" title=\"5.3访问jenkins的web管理端\"></a>5.3访问jenkins的web管理端</h2><p><a href=\"http://ip地址:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n<h2 id=\"5-4初始进入及安装插件等\"><a href=\"#5-4初始进入及安装插件等\" class=\"headerlink\" title=\"5.4初始进入及安装插件等\"></a>5.4初始进入及安装插件等</h2><ul>\n<li><p>(1).从提示文件中找到输入管理员身份确认码并输入</p>\n</li>\n<li><p>(2).安装默认插件</p>\n</li>\n<li><p>(3).创建管理员后开始</p>\n</li>\n<li><p>(4).安装Maven Integration plugin插件</p>\n</li>\n</ul>\n<h2 id=\"5-5配置一个jenkins任务\"><a href=\"#5-5配置一个jenkins任务\" class=\"headerlink\" title=\"5.5配置一个jenkins任务\"></a>5.5配置一个jenkins任务</h2><p>下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：<br><img src=\"/img/xjy/jenkins config.png\" alt=\"\"></p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。</p>"},{"title":"修改下雪主题页脚备忘","id":"298","date":"2018-01-07T12:18:06.000Z","_content":"\n去掉了第37行的：\n\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>","source":"_posts/p26.md","raw":"---\ntitle: 修改下雪主题页脚备忘\nid: 298\ncategories:\n  - 修改页面\ndate: 2018-01-07 20:18:06\ntags: [wordpress]\n---\n\n去掉了第37行的：\n\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>","slug":"p26","published":1,"updated":"2018-03-22T06:58:26.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13m0010k4vgogjlnw9f","content":"<p>去掉了第37行的：</p>\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>","site":{"data":{}},"excerpt":"","more":"<p>去掉了第37行的：</p>\n<pre class=\"prettyprint lang-php\">&lt;?php\n /**\n  * Hook - x_corporate_action_footer.\n  *\n  * @hooked x_corporate_footer_copyright - 10\n  */\n do_action( 'x_corporate_action_footer' );\n?&gt;</pre>"},{"title":"常用的apt-get命令","id":"355","date":"2018-01-28T05:07:24.000Z","_content":"\n在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：\n<!--more-->\n``` shell \n#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n```","source":"_posts/p25.md","raw":"---\ntitle: 常用的apt-get命令\nid: 355\ncategories:\n  - LINUX\n  - 编程语言\ndate: 2018-01-28 13:07:24\ntags: [树莓派, 运维, apt, apt-get, linux]\n---\n\n在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：\n<!--more-->\n``` shell \n#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n```","slug":"p25","published":1,"updated":"2018-05-24T06:45:24.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13p0015k4vglajimul5","content":"<p>在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：<br><a id=\"more\"></a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>列出所有安装过的软件</span><br><span class=\"line\">apt list --installed </span><br><span class=\"line\"><span class=\"meta\">#</span>更新软件源索引</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"meta\">#</span>安装xxx软件</span><br><span class=\"line\">sudo apt-get install xxx</span><br><span class=\"line\"><span class=\"meta\">#</span>将xxx软件升级到最新版本                      </span><br><span class=\"line\">sudo apt-get upgrade xxx</span><br><span class=\"line\">＃卸载软件（删除软件包）</span><br><span class=\"line\">sudo apt-get remove xxx　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件但保留其配置文件</span><br><span class=\"line\">sudo apt-get autoremove xxx     　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件其删除其配置文件</span><br><span class=\"line\">sudo apt-get autoremove --purge  xxx　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>重装同一软件xxx</span><br><span class=\"line\">sudo apt-get --reinstall install xxx</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：<br>","more":"<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>列出所有安装过的软件</span><br><span class=\"line\">apt list --installed </span><br><span class=\"line\"><span class=\"meta\">#</span>更新软件源索引</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"meta\">#</span>安装xxx软件</span><br><span class=\"line\">sudo apt-get install xxx</span><br><span class=\"line\"><span class=\"meta\">#</span>将xxx软件升级到最新版本                      </span><br><span class=\"line\">sudo apt-get upgrade xxx</span><br><span class=\"line\">＃卸载软件（删除软件包）</span><br><span class=\"line\">sudo apt-get remove xxx　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件但保留其配置文件</span><br><span class=\"line\">sudo apt-get autoremove xxx     　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件其删除其配置文件</span><br><span class=\"line\">sudo apt-get autoremove --purge  xxx　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>重装同一软件xxx</span><br><span class=\"line\">sudo apt-get --reinstall install xxx</span><br></pre></td></tr></table></figure></p>"},{"title":"db2相关操作知识点积累及WINDOWS环境DB2连接远程数据库实例","id":"209","date":"2017-12-22T08:34:40.000Z","_content":"\n## 知识点积累 ##\n1.登陆\n``` shell \nssh 10.240.40.191\n```\n2.连接数据库\n```shell \ndb2 connect to 数据库名 user 用户名 using 密码\n```\n<!--more-->\n3.断开连接\n``` shell \ndisconnect current\n```\n4.查询\n``` shell \ndb2 \"slect * from 表名\"\n```\n5.导入表数据\n``` shell \ndb2 import from [文件名].ixf of ixf insert into [表名]\n```\n6.导出表数据\n``` shell \ndb2 export to [文件名].ixf of ixf select * from [表名]\n```\n7.导出数据库-暂未验证\n``` text \n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n```\n8.查看数据库配置\n``` shell  \nget db cfg\n``` shell \n9.创建指定编码的数据库\n``` shell \ncreate db SRCDB using codeset GBK territory CN\n```\n10.创建型导入表数据\n``` shell \nimport from d://xxx.ixf of ixf create into ib_customer_product_bak\n```\n11.db2修改表结构\n``` shell \nalter table 表名 alter 字段 set data type 值类型（长度）\n```\n12.增加索引\n``` shell \ncreate index 索引名 on 表名 (字段名1,字段名2...) \n```\n13.增加表字段\n``` shell \nalter table 表名 add column 字段1 类型 add column 字段2 类型\n```\n\n## WINDOWS环境DB2连接远程数据库实例 ## \n\n1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器\n\n2.输入”db2”,进入命令处理状态\n\n3.建立目录关系与连接关系 \n\n``` shell \nCATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin\n\n#注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例\n``` \n4.输入\n``` shell\nCATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone\n\n#注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称\n```\n5.连接数据库 \n``` shell \nconnect    to   testdb   user   myuser using  mypassword\n\n#注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码\n``` \n此时即可像操作本地数据库一样操作远程数据库了！","source":"_posts/p28.md","raw":"---\ntitle: db2相关操作知识点积累及WINDOWS环境DB2连接远程数据库实例\nid: 209\ncategories:\n  - DB2\n  - 数据库\ndate: 2017-12-22 16:34:40\ntags: [db2, 数据库, sql]\n---\n\n## 知识点积累 ##\n1.登陆\n``` shell \nssh 10.240.40.191\n```\n2.连接数据库\n```shell \ndb2 connect to 数据库名 user 用户名 using 密码\n```\n<!--more-->\n3.断开连接\n``` shell \ndisconnect current\n```\n4.查询\n``` shell \ndb2 \"slect * from 表名\"\n```\n5.导入表数据\n``` shell \ndb2 import from [文件名].ixf of ixf insert into [表名]\n```\n6.导出表数据\n``` shell \ndb2 export to [文件名].ixf of ixf select * from [表名]\n```\n7.导出数据库-暂未验证\n``` text \n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n```\n8.查看数据库配置\n``` shell  \nget db cfg\n``` shell \n9.创建指定编码的数据库\n``` shell \ncreate db SRCDB using codeset GBK territory CN\n```\n10.创建型导入表数据\n``` shell \nimport from d://xxx.ixf of ixf create into ib_customer_product_bak\n```\n11.db2修改表结构\n``` shell \nalter table 表名 alter 字段 set data type 值类型（长度）\n```\n12.增加索引\n``` shell \ncreate index 索引名 on 表名 (字段名1,字段名2...) \n```\n13.增加表字段\n``` shell \nalter table 表名 add column 字段1 类型 add column 字段2 类型\n```\n\n## WINDOWS环境DB2连接远程数据库实例 ## \n\n1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器\n\n2.输入”db2”,进入命令处理状态\n\n3.建立目录关系与连接关系 \n\n``` shell \nCATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin\n\n#注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例\n``` \n4.输入\n``` shell\nCATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone\n\n#注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称\n```\n5.连接数据库 \n``` shell \nconnect    to   testdb   user   myuser using  mypassword\n\n#注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码\n``` \n此时即可像操作本地数据库一样操作远程数据库了！","slug":"p28","published":1,"updated":"2018-05-12T19:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13q0018k4vgzfyj15re","content":"<h2 id=\"知识点积累\"><a href=\"#知识点积累\" class=\"headerlink\" title=\"知识点积累\"></a>知识点积累</h2><p>1.登陆<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 10.240.40.191</span><br></pre></td></tr></table></figure></p>\n<p>2.连接数据库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 connect to 数据库名 user 用户名 using 密码</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>3.断开连接<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disconnect current</span><br></pre></td></tr></table></figure></p>\n<p>4.查询<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 \"slect * from 表名\"</span><br></pre></td></tr></table></figure></p>\n<p>5.导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 import from [文件名].ixf of ixf insert into [表名]</span><br></pre></td></tr></table></figure></p>\n<p>6.导出表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 export to [文件名].ixf of ixf select * from [表名]</span><br></pre></td></tr></table></figure></p>\n<p>7.导出数据库-暂未验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据</span><br></pre></td></tr></table></figure></p>\n<p>8.查看数据库配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get db cfg</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">9.创建指定编码的数据库</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">create db SRCDB using codeset GBK territory CN</span><br></pre></td></tr></table></figure></p>\n<p>10.创建型导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</span><br></pre></td></tr></table></figure></p>\n<p>11.db2修改表结构<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 alter 字段 set data type 值类型（长度）</span><br></pre></td></tr></table></figure></p>\n<p>12.增加索引<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create index 索引名 on 表名 (字段名1,字段名2...)</span><br></pre></td></tr></table></figure></p>\n<p>13.增加表字段<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 add column 字段1 类型 add column 字段2 类型</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"WINDOWS环境DB2连接远程数据库实例\"><a href=\"#WINDOWS环境DB2连接远程数据库实例\" class=\"headerlink\" title=\"WINDOWS环境DB2连接远程数据库实例\"></a>WINDOWS环境DB2连接远程数据库实例</h2><p>1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器</p>\n<p>2.输入”db2”,进入命令处理状态</p>\n<p>3.建立目录关系与连接关系 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例</span><br><span class=\"line\">``` </span><br><span class=\"line\">4.输入</span><br><span class=\"line\">``` shell</span><br><span class=\"line\">CATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称</span><br></pre></td></tr></table></figure>\n<p>5.连接数据库 </p>\n<pre><code class=\"shell\">connect    to   testdb   user   myuser using  mypassword\n\n<span class=\"meta\">#</span><span class=\"bash\">注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码</span>\n</code></pre>\n<p>此时即可像操作本地数据库一样操作远程数据库了！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"知识点积累\"><a href=\"#知识点积累\" class=\"headerlink\" title=\"知识点积累\"></a>知识点积累</h2><p>1.登陆<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 10.240.40.191</span><br></pre></td></tr></table></figure></p>\n<p>2.连接数据库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 connect to 数据库名 user 用户名 using 密码</span><br></pre></td></tr></table></figure></p>","more":"<p>3.断开连接<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disconnect current</span><br></pre></td></tr></table></figure></p>\n<p>4.查询<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 \"slect * from 表名\"</span><br></pre></td></tr></table></figure></p>\n<p>5.导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 import from [文件名].ixf of ixf insert into [表名]</span><br></pre></td></tr></table></figure></p>\n<p>6.导出表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 export to [文件名].ixf of ixf select * from [表名]</span><br></pre></td></tr></table></figure></p>\n<p>7.导出数据库-暂未验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据</span><br></pre></td></tr></table></figure></p>\n<p>8.查看数据库配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get db cfg</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">9.创建指定编码的数据库</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">create db SRCDB using codeset GBK territory CN</span><br></pre></td></tr></table></figure></p>\n<p>10.创建型导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</span><br></pre></td></tr></table></figure></p>\n<p>11.db2修改表结构<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 alter 字段 set data type 值类型（长度）</span><br></pre></td></tr></table></figure></p>\n<p>12.增加索引<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create index 索引名 on 表名 (字段名1,字段名2...)</span><br></pre></td></tr></table></figure></p>\n<p>13.增加表字段<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 add column 字段1 类型 add column 字段2 类型</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"WINDOWS环境DB2连接远程数据库实例\"><a href=\"#WINDOWS环境DB2连接远程数据库实例\" class=\"headerlink\" title=\"WINDOWS环境DB2连接远程数据库实例\"></a>WINDOWS环境DB2连接远程数据库实例</h2><p>1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器</p>\n<p>2.输入”db2”,进入命令处理状态</p>\n<p>3.建立目录关系与连接关系 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例</span><br><span class=\"line\">``` </span><br><span class=\"line\">4.输入</span><br><span class=\"line\">``` shell</span><br><span class=\"line\">CATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称</span><br></pre></td></tr></table></figure>\n<p>5.连接数据库 </p>\n<pre><code class=\"shell\">connect    to   testdb   user   myuser using  mypassword\n\n<span class=\"meta\">#</span><span class=\"bash\">注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码</span>\n</code></pre>\n<p>此时即可像操作本地数据库一样操作远程数据库了！</p>"},{"title":"从SVN到GITLAB的搭建计划","id":"396","date":"2018-02-06T01:58:29.000Z","_content":"\n## 年度回顾 ##\n今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。\n<!--more-->\n\n##新年打气##\n新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）\n\n\n## 总体预期 ##\n通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。\n\n\n## 详细计划 ##\n下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。\n\n\n\n** SVN相关 **\n\n+ 安装jdk\n+ 安装maven\n+ 安装nexus\n+ 安装jenkins\n+ 安装SVN\n+ 安装 SONAR\n+ 配置jenkins+maven+SVN+SONAR_nexus\n\n** GITLAB相关 **\n\n+ 完成SVN相关的安装\n\n+ 安装gitlab\n\n+ 先配置gitlab+jenkins\n\n+ 目前知识面有限，实现到上面这一步时我再来更新下面的计划。\n\n----------\n\n\n期待自己的实现和后续的更新。。。\n\n![](/img/xjy/git0001.jpg)\n\n","source":"_posts/p27.md","raw":"---\ntitle: 从SVN到GITLAB的搭建计划\nid: 396\ncategories:\n  - 技术感悟\n  - 生活杂记\ndate: 2018-02-06 09:58:29\ntags: [svn, gitlab, 闲谈, 感悟]\n---\n\n## 年度回顾 ##\n今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。\n<!--more-->\n\n##新年打气##\n新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）\n\n\n## 总体预期 ##\n通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。\n\n\n## 详细计划 ##\n下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。\n\n\n\n** SVN相关 **\n\n+ 安装jdk\n+ 安装maven\n+ 安装nexus\n+ 安装jenkins\n+ 安装SVN\n+ 安装 SONAR\n+ 配置jenkins+maven+SVN+SONAR_nexus\n\n** GITLAB相关 **\n\n+ 完成SVN相关的安装\n\n+ 安装gitlab\n\n+ 先配置gitlab+jenkins\n\n+ 目前知识面有限，实现到上面这一步时我再来更新下面的计划。\n\n----------\n\n\n期待自己的实现和后续的更新。。。\n\n![](/img/xjy/git0001.jpg)\n\n","slug":"p27","published":1,"updated":"2018-05-24T06:45:49.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13s001ck4vgnor155tm","content":"<h2 id=\"年度回顾\"><a href=\"#年度回顾\" class=\"headerlink\" title=\"年度回顾\"></a>年度回顾</h2><p>今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。<br><a id=\"more\"></a></p>\n<p>##新年打气##<br>新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）</p>\n<h2 id=\"总体预期\"><a href=\"#总体预期\" class=\"headerlink\" title=\"总体预期\"></a>总体预期</h2><p>通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。</p>\n<h2 id=\"详细计划\"><a href=\"#详细计划\" class=\"headerlink\" title=\"详细计划\"></a>详细计划</h2><p>下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。</p>\n<p><strong> SVN相关 </strong></p>\n<ul>\n<li>安装jdk</li>\n<li>安装maven</li>\n<li>安装nexus</li>\n<li>安装jenkins</li>\n<li>安装SVN</li>\n<li>安装 SONAR</li>\n<li>配置jenkins+maven+SVN+SONAR_nexus</li>\n</ul>\n<p><strong> GITLAB相关 </strong></p>\n<ul>\n<li><p>完成SVN相关的安装</p>\n</li>\n<li><p>安装gitlab</p>\n</li>\n<li><p>先配置gitlab+jenkins</p>\n</li>\n<li><p>目前知识面有限，实现到上面这一步时我再来更新下面的计划。</p>\n</li>\n</ul>\n<hr>\n<p>期待自己的实现和后续的更新。。。</p>\n<p><img src=\"/img/xjy/git0001.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"年度回顾\"><a href=\"#年度回顾\" class=\"headerlink\" title=\"年度回顾\"></a>年度回顾</h2><p>今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。<br>","more":"</p>\n<p>##新年打气##<br>新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）</p>\n<h2 id=\"总体预期\"><a href=\"#总体预期\" class=\"headerlink\" title=\"总体预期\"></a>总体预期</h2><p>通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。</p>\n<h2 id=\"详细计划\"><a href=\"#详细计划\" class=\"headerlink\" title=\"详细计划\"></a>详细计划</h2><p>下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。</p>\n<p><strong> SVN相关 </strong></p>\n<ul>\n<li>安装jdk</li>\n<li>安装maven</li>\n<li>安装nexus</li>\n<li>安装jenkins</li>\n<li>安装SVN</li>\n<li>安装 SONAR</li>\n<li>配置jenkins+maven+SVN+SONAR_nexus</li>\n</ul>\n<p><strong> GITLAB相关 </strong></p>\n<ul>\n<li><p>完成SVN相关的安装</p>\n</li>\n<li><p>安装gitlab</p>\n</li>\n<li><p>先配置gitlab+jenkins</p>\n</li>\n<li><p>目前知识面有限，实现到上面这一步时我再来更新下面的计划。</p>\n</li>\n</ul>\n<hr>\n<p>期待自己的实现和后续的更新。。。</p>\n<p><img src=\"/img/xjy/git0001.jpg\" alt=\"\"></p>"},{"title":"php-fpm占用大量内存的解决方法","id":"351","date":"2018-01-27T14:12:35.000Z","_content":"\n## 背景\n\n由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.\n<!--more-->\n\n## 现状\n\n可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。\n\n## 分析\n\n先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：[https://www.cnblogs.com/smallrookie/p/5634054.html](https://www.cnblogs.com/smallrookie/p/5634054.html)\n\n## 解决\n\n通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：[http://www.jb51.net/article/129528.htm](http://www.jb51.net/article/129528.htm)\n\n我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。\n``` text \n最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M\n```","source":"_posts/p2.md","raw":"---\ntitle: php-fpm占用大量内存的解决方法\nid: 351\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-01-27 22:12:35\ntags: [运维, php, wordpress, php-fpm, 博客]\n---\n\n## 背景\n\n由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.\n<!--more-->\n\n## 现状\n\n可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。\n\n## 分析\n\n先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：[https://www.cnblogs.com/smallrookie/p/5634054.html](https://www.cnblogs.com/smallrookie/p/5634054.html)\n\n## 解决\n\n通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：[http://www.jb51.net/article/129528.htm](http://www.jb51.net/article/129528.htm)\n\n我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。\n``` text \n最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M\n```","slug":"p2","published":1,"updated":"2018-05-24T06:36:23.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13u001ek4vg35482vuh","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.<br><a id=\"more\"></a></p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：<a href=\"https://www.cnblogs.com/smallrookie/p/5634054.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5634054.html</a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：<a href=\"http://www.jb51.net/article/129528.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/129528.htm</a></p>\n<p>我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最大线程数</span><br><span class=\"line\">pm.max_children = 3</span><br><span class=\"line\">;初始线程数</span><br><span class=\"line\">pm.start_servers = 1</span><br><span class=\"line\">;最小空余线程数</span><br><span class=\"line\">pm.min_spare_servers = 1</span><br><span class=\"line\">;最大空余线程数</span><br><span class=\"line\">pm.max_spare_servers = 1</span><br><span class=\"line\">;php_admin内存最大限制</span><br><span class=\"line\">php_admin_value[memory_limit] = 128M</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.<br>","more":"</p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：<a href=\"https://www.cnblogs.com/smallrookie/p/5634054.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5634054.html</a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：<a href=\"http://www.jb51.net/article/129528.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/129528.htm</a></p>\n<p>我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最大线程数</span><br><span class=\"line\">pm.max_children = 3</span><br><span class=\"line\">;初始线程数</span><br><span class=\"line\">pm.start_servers = 1</span><br><span class=\"line\">;最小空余线程数</span><br><span class=\"line\">pm.min_spare_servers = 1</span><br><span class=\"line\">;最大空余线程数</span><br><span class=\"line\">pm.max_spare_servers = 1</span><br><span class=\"line\">;php_admin内存最大限制</span><br><span class=\"line\">php_admin_value[memory_limit] = 128M</span><br></pre></td></tr></table></figure></p>"},{"title":"我的文章丢了","id":"126","date":"2017-12-10T09:37:45.000Z","_content":"\n今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-**没有备份数据**\n\n下面是我更换域名执行的sql，这一步还好，没有丢东西 \n<!--more-->\n``` sql \nUPDATE xjywp_options SET option_value = replace(option_value, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_posts SET post_content = replace(post_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_content = replace(comment_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, 'www.zyshops.xyz','www.xiajunyi.com')\n```\n我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误\n``` sql \nUPDATE xjywp_posts SET post_content = replace(guid, 'www.zyshops.xyz','www.xiajunyi.com')\n``` \n原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。\n\n我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。\n\n最后，我很无奈的说一句：数据无价，务必备份！\n\n![](/img/xjy/sjds001.jpg)","source":"_posts/p24.md","raw":"---\ntitle: 我的文章丢了\nid: 126\ncategories:\n  - 生活杂记\ndate: 2017-12-10 17:37:45\ntags: [sql, 数据, 数据库, 备份, wordpress, 闲谈]\n---\n\n今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-**没有备份数据**\n\n下面是我更换域名执行的sql，这一步还好，没有丢东西 \n<!--more-->\n``` sql \nUPDATE xjywp_options SET option_value = replace(option_value, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_posts SET post_content = replace(post_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_content = replace(comment_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, 'www.zyshops.xyz','www.xiajunyi.com')\n```\n我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误\n``` sql \nUPDATE xjywp_posts SET post_content = replace(guid, 'www.zyshops.xyz','www.xiajunyi.com')\n``` \n原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。\n\n我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。\n\n最后，我很无奈的说一句：数据无价，务必备份！\n\n![](/img/xjy/sjds001.jpg)","slug":"p24","published":1,"updated":"2018-05-16T09:07:41.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13w001ik4vgvgjhghc0","content":"<p>今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-<strong>没有备份数据</strong></p>\n<p>下面是我更换域名执行的sql，这一步还好，没有丢东西<br><a id=\"more\"></a><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_options <span class=\"keyword\">SET</span> option_value = <span class=\"keyword\">replace</span>(option_value, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(post_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_content = <span class=\"keyword\">replace</span>(comment_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_author_url = <span class=\"keyword\">replace</span>(comment_author_url, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误</p>\n<pre><code class=\"sql\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(guid, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)\n</code></pre>\n<p>原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。</p>\n<p>我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。</p>\n<p>最后，我很无奈的说一句：数据无价，务必备份！</p>\n<p><img src=\"/img/xjy/sjds001.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-<strong>没有备份数据</strong></p>\n<p>下面是我更换域名执行的sql，这一步还好，没有丢东西<br>","more":"<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_options <span class=\"keyword\">SET</span> option_value = <span class=\"keyword\">replace</span>(option_value, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(post_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_content = <span class=\"keyword\">replace</span>(comment_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_author_url = <span class=\"keyword\">replace</span>(comment_author_url, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误</p>\n<pre><code class=\"sql\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(guid, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)\n</code></pre>\n<p>原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。</p>\n<p>我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。</p>\n<p>最后，我很无奈的说一句：数据无价，务必备份！</p>\n<p><img src=\"/img/xjy/sjds001.jpg\" alt=\"\"></p>"},{"title":"1代树莓派改造","id":"379","date":"2018-02-04T17:29:56.000Z","toc":true,"_content":"\n把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！ \n<!--more-->\n\n1.安装usb无线网卡,\n\n+ 进入图形界面，用wifi config扫描到wifi信号，连接后保存配置\n\n+ 执行下面命令加入auto wlan0\n\n+ 重启即可开机自连上面的无线信号\n\n``` shell \nvi /etc/network/interface \n```\n\n2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除\n\n``` shell \nvi /etc/wpa_supplicant/wpa_supplicant.conf\n``` \n\n3.更新源\n``` shell \nsudo view /etc/apt/sources.list\nsudo apt-get update \n```\n\n4.安装远程桌面\n``` shell \nsudo apt-get install xrdp \n```\n\n5.开启摄像头、I2C支持\n``` shell \nsudo raspi-config \n```\n\n6.加入crontab任务\n``` shell \nsudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp; \n```\n\n7.报出“ImportError: No module named smbus”的错误,解决办法 \n``` shell \nsudo apt-get install python-smbus \n```\n\n8.报出“ImportError: No module named RPi.GPIO”的错误\n``` shell \nsudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO \n```\n\n9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip\n``` shell \n#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus \n```\n\n10.如果还不行，说明还要额外启用I2C一系列操作，可参考[扩展文章](http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html)\n ","source":"_posts/p31.md","raw":"---\ntitle: 1代树莓派改造\nid: 379\ncategories:\n  - 树莓派学习\ndate: 2018-02-05 01:29:56\ntags: [树莓派, python, wlan]\ntoc: true\n---\n\n把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！ \n<!--more-->\n\n1.安装usb无线网卡,\n\n+ 进入图形界面，用wifi config扫描到wifi信号，连接后保存配置\n\n+ 执行下面命令加入auto wlan0\n\n+ 重启即可开机自连上面的无线信号\n\n``` shell \nvi /etc/network/interface \n```\n\n2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除\n\n``` shell \nvi /etc/wpa_supplicant/wpa_supplicant.conf\n``` \n\n3.更新源\n``` shell \nsudo view /etc/apt/sources.list\nsudo apt-get update \n```\n\n4.安装远程桌面\n``` shell \nsudo apt-get install xrdp \n```\n\n5.开启摄像头、I2C支持\n``` shell \nsudo raspi-config \n```\n\n6.加入crontab任务\n``` shell \nsudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp; \n```\n\n7.报出“ImportError: No module named smbus”的错误,解决办法 \n``` shell \nsudo apt-get install python-smbus \n```\n\n8.报出“ImportError: No module named RPi.GPIO”的错误\n``` shell \nsudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO \n```\n\n9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip\n``` shell \n#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus \n```\n\n10.如果还不行，说明还要额外启用I2C一系列操作，可参考[扩展文章](http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html)\n ","slug":"p31","published":1,"updated":"2018-05-16T09:20:42.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv13x001lk4vg5npdyr6a","content":"<p>把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！<br><a id=\"more\"></a></p>\n<p>1.安装usb无线网卡,</p>\n<ul>\n<li><p>进入图形界面，用wifi config扫描到wifi信号，连接后保存配置</p>\n</li>\n<li><p>执行下面命令加入auto wlan0</p>\n</li>\n<li><p>重启即可开机自连上面的无线信号</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/network/interface</span><br></pre></td></tr></table></figure>\n<p>2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">3.更新源</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">sudo view /etc/apt/sources.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>4.安装远程桌面<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>5.开启摄像头、I2C支持<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>6.加入crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e </span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面这一句</span><br><span class=\"line\"><span class=\"meta\">#</span>*/10 * * * * /usr/local/custshell/cust.sh 1&amp;gt;&amp;gt;/usr/local/custshell/log.txt &amp;amp;</span><br></pre></td></tr></table></figure></p>\n<p>7.报出“ImportError: No module named smbus”的错误,解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-smbus</span><br></pre></td></tr></table></figure></p>\n<p>8.报出“ImportError: No module named RPi.GPIO”的错误<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-setuptools python-pip python-dev</span><br><span class=\"line\">pip install RPi.GPIO</span><br></pre></td></tr></table></figure></p>\n<p>9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>还可以通过pip3安装: </span><br><span class=\"line\">sudo apt-get install python3-pip </span><br><span class=\"line\">sudo sudo pip-3.2 install</span><br><span class=\"line\"><span class=\"meta\">#</span>python3-smbus</span><br><span class=\"line\">sudo apt-get install python3-smbus</span><br></pre></td></tr></table></figure></p>\n<p>10.如果还不行，说明还要额外启用I2C一系列操作，可参考<a href=\"http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html\" target=\"_blank\" rel=\"noopener\">扩展文章</a></p>\n","site":{"data":{}},"excerpt":"<p>把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！<br>","more":"</p>\n<p>1.安装usb无线网卡,</p>\n<ul>\n<li><p>进入图形界面，用wifi config扫描到wifi信号，连接后保存配置</p>\n</li>\n<li><p>执行下面命令加入auto wlan0</p>\n</li>\n<li><p>重启即可开机自连上面的无线信号</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/network/interface</span><br></pre></td></tr></table></figure>\n<p>2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">3.更新源</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">sudo view /etc/apt/sources.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>4.安装远程桌面<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>5.开启摄像头、I2C支持<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>6.加入crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e </span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面这一句</span><br><span class=\"line\"><span class=\"meta\">#</span>*/10 * * * * /usr/local/custshell/cust.sh 1&amp;gt;&amp;gt;/usr/local/custshell/log.txt &amp;amp;</span><br></pre></td></tr></table></figure></p>\n<p>7.报出“ImportError: No module named smbus”的错误,解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-smbus</span><br></pre></td></tr></table></figure></p>\n<p>8.报出“ImportError: No module named RPi.GPIO”的错误<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-setuptools python-pip python-dev</span><br><span class=\"line\">pip install RPi.GPIO</span><br></pre></td></tr></table></figure></p>\n<p>9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>还可以通过pip3安装: </span><br><span class=\"line\">sudo apt-get install python3-pip </span><br><span class=\"line\">sudo sudo pip-3.2 install</span><br><span class=\"line\"><span class=\"meta\">#</span>python3-smbus</span><br><span class=\"line\">sudo apt-get install python3-smbus</span><br></pre></td></tr></table></figure></p>\n<p>10.如果还不行，说明还要额外启用I2C一系列操作，可参考<a href=\"http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html\" target=\"_blank\" rel=\"noopener\">扩展文章</a></p>"},{"title":"用python测试连接rabbitmq的简单通讯","id":"303","date":"2018-01-08T07:06:12.000Z","_content":"\n** 环境: ** \n\n+ windows\n+ erlang-otp_win64_17\n+ rabbitmq 3.5.6\n+ Python 3.6.1 \n\n<!--more-->\n\n** 步骤：** \n\n1.erlang和rabbitmq安装，可以参考：\n\n[林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》](https://blog.csdn.net/Anonymous_L/article/details/78205785)\n\n2.安装pika \n``` shell\n#打开命令行，执行：\npip install pika\n```\n\n3.编写消费者receive.py \n``` py\nimport pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()\n``` \n\n4.编写生产者send.py \n``` py\nimport pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n``` \n\n5.执行py脚本，结果如下：\n![](/img/xjy/rab0001.png)","source":"_posts/p30.md","raw":"---\ntitle: 用python测试连接rabbitmq的简单通讯\nid: 303\ncategories:\n  - rabbitmq学习\ndate: 2018-01-08 15:06:12\ntags: [rabbitmq, python]\n---\n\n** 环境: ** \n\n+ windows\n+ erlang-otp_win64_17\n+ rabbitmq 3.5.6\n+ Python 3.6.1 \n\n<!--more-->\n\n** 步骤：** \n\n1.erlang和rabbitmq安装，可以参考：\n\n[林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》](https://blog.csdn.net/Anonymous_L/article/details/78205785)\n\n2.安装pika \n``` shell\n#打开命令行，执行：\npip install pika\n```\n\n3.编写消费者receive.py \n``` py\nimport pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()\n``` \n\n4.编写生产者send.py \n``` py\nimport pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n``` \n\n5.执行py脚本，结果如下：\n![](/img/xjy/rab0001.png)","slug":"p30","published":1,"updated":"2018-05-12T18:44:13.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv140001qk4vgjm3otkbm","content":"<p><strong> 环境: </strong> </p>\n<ul>\n<li>windows</li>\n<li>erlang-otp_win64_17</li>\n<li>rabbitmq 3.5.6</li>\n<li>Python 3.6.1 </li>\n</ul>\n<a id=\"more\"></a>\n<p><strong> 步骤：</strong> </p>\n<p>1.erlang和rabbitmq安装，可以参考：</p>\n<p><a href=\"https://blog.csdn.net/Anonymous_L/article/details/78205785\" target=\"_blank\" rel=\"noopener\">林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》</a></p>\n<p>2.安装pika<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>打开命令行，执行：</span><br><span class=\"line\">pip install pika</span><br></pre></td></tr></table></figure></p>\n<p>3.编写消费者receive.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika  \n<span class=\"keyword\">import</span> random  \n<span class=\"keyword\">while</span> <span class=\"number\">1</span> :\n    credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)  \n    <span class=\"comment\">#这里可以连接远程IP，请记得打开远程端口    </span>\n    parameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    <span class=\"comment\">#channel.queue_declare(queue='hello')    </span>\n    body = input(<span class=\"string\">\"Enter your input,To exit press CTRL+C: \"</span>); \n    channel.basic_publish(exchange=<span class=\"string\">''</span>,routing_key=<span class=\"string\">'hello'</span>,body=body)    \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Sent %s\"</span> %body)    \n    connection.close()\n</code></pre>\n<p>4.编写生产者send.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika    \ncredentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)    \nparameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue=<span class=\"string\">'hello'</span>)    \n<span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span> )   \n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>    \n    bodystr=body.decode(<span class=\"string\">'utf-8'</span>) \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Received %r\"</span> % (bodystr,))    \nchannel.basic_consume(callback,queue=<span class=\"string\">'hello'</span>,no_ack=<span class=\"keyword\">True</span>)    \nchannel.start_consuming()&lt;/pre&gt;\n</code></pre>\n<p>5.执行py脚本，结果如下：<br><img src=\"/img/xjy/rab0001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><strong> 环境: </strong> </p>\n<ul>\n<li>windows</li>\n<li>erlang-otp_win64_17</li>\n<li>rabbitmq 3.5.6</li>\n<li>Python 3.6.1 </li>\n</ul>","more":"<p><strong> 步骤：</strong> </p>\n<p>1.erlang和rabbitmq安装，可以参考：</p>\n<p><a href=\"https://blog.csdn.net/Anonymous_L/article/details/78205785\" target=\"_blank\" rel=\"noopener\">林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》</a></p>\n<p>2.安装pika<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>打开命令行，执行：</span><br><span class=\"line\">pip install pika</span><br></pre></td></tr></table></figure></p>\n<p>3.编写消费者receive.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika  \n<span class=\"keyword\">import</span> random  \n<span class=\"keyword\">while</span> <span class=\"number\">1</span> :\n    credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)  \n    <span class=\"comment\">#这里可以连接远程IP，请记得打开远程端口    </span>\n    parameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    <span class=\"comment\">#channel.queue_declare(queue='hello')    </span>\n    body = input(<span class=\"string\">\"Enter your input,To exit press CTRL+C: \"</span>); \n    channel.basic_publish(exchange=<span class=\"string\">''</span>,routing_key=<span class=\"string\">'hello'</span>,body=body)    \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Sent %s\"</span> %body)    \n    connection.close()\n</code></pre>\n<p>4.编写生产者send.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika    \ncredentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)    \nparameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue=<span class=\"string\">'hello'</span>)    \n<span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span> )   \n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>    \n    bodystr=body.decode(<span class=\"string\">'utf-8'</span>) \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Received %r\"</span> % (bodystr,))    \nchannel.basic_consume(callback,queue=<span class=\"string\">'hello'</span>,no_ack=<span class=\"keyword\">True</span>)    \nchannel.start_consuming()&lt;/pre&gt;\n</code></pre>\n<p>5.执行py脚本，结果如下：<br><img src=\"/img/xjy/rab0001.png\" alt=\"\"></p>"},{"title":"base64加解密图片（分别用java和python实现）","id":"227","date":"2018-01-04T03:22:48.000Z","_content":"\n今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：\n<!--more-->\n1.java代码 \n\n```java\npackage com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n\t/**\n\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate String GetImageStr(String imgFilePath) {\n\t\tbyte[] data = null;\n\n\t\t// 读取图片字节数组\n\t\ttry {\n\t\t\tInputStream in = new FileInputStream(imgFilePath);\n\t\t\tdata = new byte[in.available()];\n\t\t\tin.read(data);\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// 对字节数组Base64编码\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\treturn encoder.encode(data);// 返回Base64编码过的字节数组字符串\n\t}\n\n\t/**\n\t * 对字符串进行Base64解码并生成图片\n\t * @param imgStr\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate boolean GenerateImage(String imgStr, String imgFilePath) {\n\t\tif (imgStr == null) // 图像数据为空\n\t\t\treturn false;\n\t\ttry {\n\t\t\t// Base64解码\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] bytes = decoder.decodeBuffer(imgStr);\n\t\t\tfor (int i = 0; i &lt; bytes.length; ++i) {\n\t\t\t\tif (bytes[i] &lt; 0) {// 调整异常数据\n\t\t\t\t\tbytes[i] += 256;\n\t\t\t\t}\n\t\t\t}\n\t\t\tOutputStream out = new FileOutputStream(imgFilePath);\n\t\t\tout.write(bytes);\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n```\n\n2.python3代码 \n\n``` py\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n``` \n\n好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n\n","source":"_posts/p29.md","raw":"---\ntitle: base64加解密图片（分别用java和python实现）\nid: 227\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-01-04 11:22:48\ntags: [编程, java, python, base64, 图片处理, 加密, 解密]\n---\n\n今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：\n<!--more-->\n1.java代码 \n\n```java\npackage com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n\t/**\n\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate String GetImageStr(String imgFilePath) {\n\t\tbyte[] data = null;\n\n\t\t// 读取图片字节数组\n\t\ttry {\n\t\t\tInputStream in = new FileInputStream(imgFilePath);\n\t\t\tdata = new byte[in.available()];\n\t\t\tin.read(data);\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// 对字节数组Base64编码\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\treturn encoder.encode(data);// 返回Base64编码过的字节数组字符串\n\t}\n\n\t/**\n\t * 对字符串进行Base64解码并生成图片\n\t * @param imgStr\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate boolean GenerateImage(String imgStr, String imgFilePath) {\n\t\tif (imgStr == null) // 图像数据为空\n\t\t\treturn false;\n\t\ttry {\n\t\t\t// Base64解码\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] bytes = decoder.decodeBuffer(imgStr);\n\t\t\tfor (int i = 0; i &lt; bytes.length; ++i) {\n\t\t\t\tif (bytes[i] &lt; 0) {// 调整异常数据\n\t\t\t\t\tbytes[i] += 256;\n\t\t\t\t}\n\t\t\t}\n\t\t\tOutputStream out = new FileOutputStream(imgFilePath);\n\t\t\tout.write(bytes);\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n```\n\n2.python3代码 \n\n``` py\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n``` \n\n好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n\n","slug":"p29","published":1,"updated":"2018-05-24T06:46:21.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv141001tk4vgdg0oh4h2","content":"<p>今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：<br><a id=\"more\"></a><br>1.java代码 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mzshop.sensors.service.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Decoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Encoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base64ImageUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">GetImageStr</span><span class=\"params\">(String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取图片字节数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tInputStream in = <span class=\"keyword\">new</span> FileInputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tdata = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[in.available()];</span><br><span class=\"line\">\t\t\tin.read(data);</span><br><span class=\"line\">\t\t\tin.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 对字节数组Base64编码</span></span><br><span class=\"line\">\t\tBASE64Encoder encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> encoder.encode(data);<span class=\"comment\">// 返回Base64编码过的字节数组字符串</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 对字符串进行Base64解码并生成图片</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgStr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">GenerateImage</span><span class=\"params\">(String imgStr, String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (imgStr == <span class=\"keyword\">null</span>) <span class=\"comment\">// 图像数据为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Base64解码</span></span><br><span class=\"line\">\t\t\tBASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = decoder.decodeBuffer(imgStr);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (bytes[i] &amp;lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 调整异常数据</span></span><br><span class=\"line\">\t\t\t\t\tbytes[i] += <span class=\"number\">256</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tout.write(bytes);</span><br><span class=\"line\">\t\t\tout.flush();</span><br><span class=\"line\">\t\t\tout.close();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.python3代码 </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> base64\n\n<span class=\"comment\">#读取图片信息</span>\nf=open(<span class=\"string\">r'd:\\1.jpg'</span>,<span class=\"string\">'rb'</span>) <span class=\"comment\">#二进制方式打开图文件</span>\nls_f=base64.b64encode(f.read()) <span class=\"comment\">#读取文件内容，转换为base64编码</span>\nimg_info=str(ls_f,<span class=\"string\">'utf-8'</span>)\nf.close()\n<span class=\"keyword\">print</span> (ls_f)\n\n<span class=\"comment\">#还原图片信息</span>\nls_f2=bytes(img_info, encoding = <span class=\"string\">\"utf8\"</span>)\nimgdata=base64.b64decode(ls_f2)\nfile=open(<span class=\"string\">r'd:\\2.jpg'</span>,<span class=\"string\">'wb'</span>) \nfile.write(imgdata)\nfile.close()&lt;/pre&gt;\n</code></pre>\n<p>好了，留在这里为了下次方面查找，还是四个字：亲测可用！</p>\n","site":{"data":{}},"excerpt":"<p>今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：<br>","more":"<br>1.java代码 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mzshop.sensors.service.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Decoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Encoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base64ImageUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">GetImageStr</span><span class=\"params\">(String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取图片字节数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tInputStream in = <span class=\"keyword\">new</span> FileInputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tdata = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[in.available()];</span><br><span class=\"line\">\t\t\tin.read(data);</span><br><span class=\"line\">\t\t\tin.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 对字节数组Base64编码</span></span><br><span class=\"line\">\t\tBASE64Encoder encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> encoder.encode(data);<span class=\"comment\">// 返回Base64编码过的字节数组字符串</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 对字符串进行Base64解码并生成图片</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgStr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">GenerateImage</span><span class=\"params\">(String imgStr, String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (imgStr == <span class=\"keyword\">null</span>) <span class=\"comment\">// 图像数据为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Base64解码</span></span><br><span class=\"line\">\t\t\tBASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = decoder.decodeBuffer(imgStr);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (bytes[i] &amp;lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 调整异常数据</span></span><br><span class=\"line\">\t\t\t\t\tbytes[i] += <span class=\"number\">256</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tout.write(bytes);</span><br><span class=\"line\">\t\t\tout.flush();</span><br><span class=\"line\">\t\t\tout.close();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.python3代码 </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> base64\n\n<span class=\"comment\">#读取图片信息</span>\nf=open(<span class=\"string\">r'd:\\1.jpg'</span>,<span class=\"string\">'rb'</span>) <span class=\"comment\">#二进制方式打开图文件</span>\nls_f=base64.b64encode(f.read()) <span class=\"comment\">#读取文件内容，转换为base64编码</span>\nimg_info=str(ls_f,<span class=\"string\">'utf-8'</span>)\nf.close()\n<span class=\"keyword\">print</span> (ls_f)\n\n<span class=\"comment\">#还原图片信息</span>\nls_f2=bytes(img_info, encoding = <span class=\"string\">\"utf8\"</span>)\nimgdata=base64.b64decode(ls_f2)\nfile=open(<span class=\"string\">r'd:\\2.jpg'</span>,<span class=\"string\">'wb'</span>) \nfile.write(imgdata)\nfile.close()&lt;/pre&gt;\n</code></pre>\n<p>好了，留在这里为了下次方面查找，还是四个字：亲测可用！</p>"},{"title":"Sql中有关联的两个表,怎么查出一个表中没有对应到另一个表的数据?","id":"448","date":"2018-02-28T10:01:13.000Z","_content":"主要是JPAQUERY的实现方式：假定通过id字段关联。\n\n第1种方法在JPAQUERY没法简单实现: \n\n``` sql\nselect *\nfrom A\nwhere id not in (select id from B)\n```  \n\n第2种方法JPAQUERY3.0以上的版本才支持.on: \n\n``` sql \nselect A.*\nfrom A LEFT JOIN B ON A.id = B.ID\nWHERE B.ID IS NULL\n``` \n\n","source":"_posts/p3.md","raw":"---\ntitle: 'Sql中有关联的两个表,怎么查出一个表中没有对应到另一个表的数据?'\nid: 448\ncategories:\n  - DB2\n  - 数据库\n  - 未分类\ndate: 2018-02-28 18:01:13\ntags: [db2, 数据库, sql] \n---\n主要是JPAQUERY的实现方式：假定通过id字段关联。\n\n第1种方法在JPAQUERY没法简单实现: \n\n``` sql\nselect *\nfrom A\nwhere id not in (select id from B)\n```  \n\n第2种方法JPAQUERY3.0以上的版本才支持.on: \n\n``` sql \nselect A.*\nfrom A LEFT JOIN B ON A.id = B.ID\nWHERE B.ID IS NULL\n``` \n\n","slug":"p3","published":1,"updated":"2018-05-26T08:46:52.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv144001wk4vg2645vgmm","content":"<p>主要是JPAQUERY的实现方式：假定通过id字段关联。</p>\n<p>第1种方法在JPAQUERY没法简单实现: </p>\n<pre><code class=\"sql\"><span class=\"keyword\">select</span> *\n<span class=\"keyword\">from</span> A\n<span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> B)\n</code></pre>\n<p>第2种方法JPAQUERY3.0以上的版本才支持.on: </p>\n<pre><code class=\"sql\"><span class=\"keyword\">select</span> A.*\n<span class=\"keyword\">from</span> A <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> B <span class=\"keyword\">ON</span> A.id = B.ID\n<span class=\"keyword\">WHERE</span> B.ID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>主要是JPAQUERY的实现方式：假定通过id字段关联。</p>\n<p>第1种方法在JPAQUERY没法简单实现: </p>\n<pre><code class=\"sql\"><span class=\"keyword\">select</span> *\n<span class=\"keyword\">from</span> A\n<span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> B)\n</code></pre>\n<p>第2种方法JPAQUERY3.0以上的版本才支持.on: </p>\n<pre><code class=\"sql\"><span class=\"keyword\">select</span> A.*\n<span class=\"keyword\">from</span> A <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> B <span class=\"keyword\">ON</span> A.id = B.ID\n<span class=\"keyword\">WHERE</span> B.ID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>\n</code></pre>\n"},{"title":"举例说明弱密码摄像头的坏处","date":"2018-05-11T13:32:44.000Z","toc":true,"_content":"![img](/img/xjy/p34004s.jpg)<br/><br/>\n该示例仅为证明弱密码的害处，提醒大家防范。\n\n## 工具\n+ 傻蛋网\n+ 各大网络摄像头默认账号密码v3.0\n+ IpCameraViewer \n \n<!--more-->\n\n## 步骤\n\n1. 登陆www.oshadan.com(注册用户搜索结果更多)\n\n![img](/img/xjy/p34001.jpg)\n\n2. 按照产品名称搜索\n\n![img](/img/xjy/p34002.jpg)\n\n3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) \n\n![img](/img/xjy/p34003.jpg)\n\n4. 如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看\n\n![img](/img/xjy/p34004.jpg)\n\n### 资源链接： ### \n\n[点击这里](https://pan.baidu.com/share/link?shareid=2925240709&uk=3811069734 )\n","source":"_posts/p34.md","raw":"---\n\ntitle: 举例说明弱密码摄像头的坏处\ndate: 2018/5/11 21:32:44   \ntags: [运维, 闲谈, 摄像头, 破解]\ntoc: true\n---\n![img](/img/xjy/p34004s.jpg)<br/><br/>\n该示例仅为证明弱密码的害处，提醒大家防范。\n\n## 工具\n+ 傻蛋网\n+ 各大网络摄像头默认账号密码v3.0\n+ IpCameraViewer \n \n<!--more-->\n\n## 步骤\n\n1. 登陆www.oshadan.com(注册用户搜索结果更多)\n\n![img](/img/xjy/p34001.jpg)\n\n2. 按照产品名称搜索\n\n![img](/img/xjy/p34002.jpg)\n\n3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) \n\n![img](/img/xjy/p34003.jpg)\n\n4. 如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看\n\n![img](/img/xjy/p34004.jpg)\n\n### 资源链接： ### \n\n[点击这里](https://pan.baidu.com/share/link?shareid=2925240709&uk=3811069734 )\n","slug":"p34","published":1,"updated":"2018-05-24T07:50:21.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv146001zk4vgpgyvir8y","content":"<p><img src=\"/img/xjy/p34004s.jpg\" alt=\"img\"><br><br><br>该示例仅为证明弱密码的害处，提醒大家防范。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>傻蛋网</li>\n<li>各大网络摄像头默认账号密码v3.0</li>\n<li>IpCameraViewer </li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>登陆<a href=\"http://www.oshadan.com(注册用户搜索结果更多)\" target=\"_blank\" rel=\"noopener\">www.oshadan.com(注册用户搜索结果更多)</a></li>\n</ol>\n<p><img src=\"/img/xjy/p34001.jpg\" alt=\"img\"></p>\n<ol>\n<li>按照产品名称搜索</li>\n</ol>\n<p><img src=\"/img/xjy/p34002.jpg\" alt=\"img\"></p>\n<p>3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) </p>\n<p><img src=\"/img/xjy/p34003.jpg\" alt=\"img\"></p>\n<ol>\n<li>如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看</li>\n</ol>\n<p><img src=\"/img/xjy/p34004.jpg\" alt=\"img\"></p>\n<h3 id=\"资源链接：\"><a href=\"#资源链接：\" class=\"headerlink\" title=\"资源链接：\"></a>资源链接：</h3><p><a href=\"https://pan.baidu.com/share/link?shareid=2925240709&amp;uk=3811069734\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p34004s.jpg\" alt=\"img\"><br><br><br>该示例仅为证明弱密码的害处，提醒大家防范。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>傻蛋网</li>\n<li>各大网络摄像头默认账号密码v3.0</li>\n<li>IpCameraViewer </li>\n</ul>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>登陆<a href=\"http://www.oshadan.com(注册用户搜索结果更多)\" target=\"_blank\" rel=\"noopener\">www.oshadan.com(注册用户搜索结果更多)</a></li>\n</ol>\n<p><img src=\"/img/xjy/p34001.jpg\" alt=\"img\"></p>\n<ol>\n<li>按照产品名称搜索</li>\n</ol>\n<p><img src=\"/img/xjy/p34002.jpg\" alt=\"img\"></p>\n<p>3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) </p>\n<p><img src=\"/img/xjy/p34003.jpg\" alt=\"img\"></p>\n<ol>\n<li>如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看</li>\n</ol>\n<p><img src=\"/img/xjy/p34004.jpg\" alt=\"img\"></p>\n<h3 id=\"资源链接：\"><a href=\"#资源链接：\" class=\"headerlink\" title=\"资源链接：\"></a>资源链接：</h3><p><a href=\"https://pan.baidu.com/share/link?shareid=2925240709&amp;uk=3811069734\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>"},{"title":"Docker初学（一）安装并操作容器","id":"405","date":"2018-05-12T12:58:29.000Z","_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n初次接触docker，记录了docker的安装启动、容器的运行和常用操作。\n\n<!--more-->\n\n## 1.docker的安装及启动 ## \n```bash\n#docker的安装\nsudo wget -qO- https://get.docker.com/ | sh\n#docker启动\nservice docker start\n#docker设置成开机启动\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n\n## 2.简单运行一个容器 ##\n``` bash\n[root@localhost ~]# docker run ubuntu echo hello docker\nUnable to find image 'ubuntu:latest' locally\nlatest: Pulling from library/ubuntu\na48c500ed24e: Pull complete \n1e1de00ff7e1: Pull complete \n0330ca45a200: Pull complete \n471db38bcfbf: Pull complete \n0b4aba487617: Pull complete \nDigest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e\nStatus: Downloaded newer image for ubuntu:latest\nhello docker\n```\n\n## 3.以交互式运行一个容器 ##\n``` bash \n#-i是持久的标准输入， -t是创建伪tty终端\ndocker run -i -t ubuntu /bin/bash\n#如果要退回宿主机，需要输入exit\n```\n\n## 4.常用操作容器命令 ##\n``` bash\n#指定名称运行容器，用--name\ndocker run --name test -i -t ubuntu /bin/bash\n#查看当前运行中的容器\ndocker ps\n#查看所有容器（包括运行过的）\ndocker ps -a\n#查看最后几个容器（包括运行过的）\ndocker ps -n 5\n#重启某容器，重启某容器时会沿用run命令时指定的参数\ndocker start test\n#停止某容器\ndocker stop test\n#快速停止某容器\ndocker kill test\n#删除某容器，rm后跟容器id或name均可\ndocker rm test\n#删除所有容器\ndocker rm 'docker ps -a -q'\n#连接到正在运行中的容器，attach后跟容器id或name均可\ndocker attach test\n#获取容器日志并返回\ndocker logs test\n#监控容器最新日志，类似tail -f功能\ndocker logs -f test\n#监控容器日志时，还可以使用-t为每条日志加上时间戳\ndocker logs -ft test\n#查看容器内的进程\ndocker top test\n#查看容器内详细信息,配合-f和--format可以有更高级应用\ndocker inspect test\n```\n\n## 未完待续... ## \n\n\n\n\n\n","source":"_posts/p35.md","raw":"---\ntitle: Docker初学（一）安装并操作容器\nid: 405\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/12 20:58:29 \ntags: [运维, 编程, docker, linux]\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n初次接触docker，记录了docker的安装启动、容器的运行和常用操作。\n\n<!--more-->\n\n## 1.docker的安装及启动 ## \n```bash\n#docker的安装\nsudo wget -qO- https://get.docker.com/ | sh\n#docker启动\nservice docker start\n#docker设置成开机启动\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n\n## 2.简单运行一个容器 ##\n``` bash\n[root@localhost ~]# docker run ubuntu echo hello docker\nUnable to find image 'ubuntu:latest' locally\nlatest: Pulling from library/ubuntu\na48c500ed24e: Pull complete \n1e1de00ff7e1: Pull complete \n0330ca45a200: Pull complete \n471db38bcfbf: Pull complete \n0b4aba487617: Pull complete \nDigest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e\nStatus: Downloaded newer image for ubuntu:latest\nhello docker\n```\n\n## 3.以交互式运行一个容器 ##\n``` bash \n#-i是持久的标准输入， -t是创建伪tty终端\ndocker run -i -t ubuntu /bin/bash\n#如果要退回宿主机，需要输入exit\n```\n\n## 4.常用操作容器命令 ##\n``` bash\n#指定名称运行容器，用--name\ndocker run --name test -i -t ubuntu /bin/bash\n#查看当前运行中的容器\ndocker ps\n#查看所有容器（包括运行过的）\ndocker ps -a\n#查看最后几个容器（包括运行过的）\ndocker ps -n 5\n#重启某容器，重启某容器时会沿用run命令时指定的参数\ndocker start test\n#停止某容器\ndocker stop test\n#快速停止某容器\ndocker kill test\n#删除某容器，rm后跟容器id或name均可\ndocker rm test\n#删除所有容器\ndocker rm 'docker ps -a -q'\n#连接到正在运行中的容器，attach后跟容器id或name均可\ndocker attach test\n#获取容器日志并返回\ndocker logs test\n#监控容器最新日志，类似tail -f功能\ndocker logs -f test\n#监控容器日志时，还可以使用-t为每条日志加上时间戳\ndocker logs -ft test\n#查看容器内的进程\ndocker top test\n#查看容器内详细信息,配合-f和--format可以有更高级应用\ndocker inspect test\n```\n\n## 未完待续... ## \n\n\n\n\n\n","slug":"p35","published":1,"updated":"2018-05-31T02:40:39.381Z","_id":"cjhtwv1470021k4vgdngbeord","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>初次接触docker，记录了docker的安装启动、容器的运行和常用操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-docker的安装及启动\"><a href=\"#1-docker的安装及启动\" class=\"headerlink\" title=\"1.docker的安装及启动\"></a>1.docker的安装及启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker的安装</span></span><br><span class=\"line\">sudo wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\"><span class=\"comment\">#docker启动</span></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"><span class=\"comment\">#docker设置成开机启动</span></span><br><span class=\"line\">systemctl  start docker.service</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单运行一个容器\"><a href=\"#2-简单运行一个容器\" class=\"headerlink\" title=\"2.简单运行一个容器\"></a>2.简单运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run ubuntu echo hello docker</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">'ubuntu:latest'</span> locally</span><br><span class=\"line\">latest: Pulling from library/ubuntu</span><br><span class=\"line\">a48c500ed24e: Pull complete </span><br><span class=\"line\">1e1de00ff7e1: Pull complete </span><br><span class=\"line\">0330ca45a200: Pull complete </span><br><span class=\"line\">471db38bcfbf: Pull complete </span><br><span class=\"line\">0b4aba487617: Pull complete </span><br><span class=\"line\">Digest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:latest</span><br><span class=\"line\">hello docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-以交互式运行一个容器\"><a href=\"#3-以交互式运行一个容器\" class=\"headerlink\" title=\"3.以交互式运行一个容器\"></a>3.以交互式运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-i是持久的标准输入， -t是创建伪tty终端</span></span><br><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#如果要退回宿主机，需要输入exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-常用操作容器命令\"><a href=\"#4-常用操作容器命令\" class=\"headerlink\" title=\"4.常用操作容器命令\"></a>4.常用操作容器命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定名称运行容器，用--name</span></span><br><span class=\"line\">docker run --name <span class=\"built_in\">test</span> -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#查看当前运行中的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\">#查看所有容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看最后几个容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -n 5</span><br><span class=\"line\"><span class=\"comment\">#重启某容器，重启某容器时会沿用run命令时指定的参数</span></span><br><span class=\"line\">docker start <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#停止某容器</span></span><br><span class=\"line\">docker stop <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#快速停止某容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除某容器，rm后跟容器id或name均可</span></span><br><span class=\"line\">docker rm <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除所有容器</span></span><br><span class=\"line\">docker rm <span class=\"string\">'docker ps -a -q'</span></span><br><span class=\"line\"><span class=\"comment\">#连接到正在运行中的容器，attach后跟容器id或name均可</span></span><br><span class=\"line\">docker attach <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#获取容器日志并返回</span></span><br><span class=\"line\">docker logs <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器最新日志，类似tail -f功能</span></span><br><span class=\"line\">docker logs -f <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器日志时，还可以使用-t为每条日志加上时间戳</span></span><br><span class=\"line\">docker logs -ft <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内的进程</span></span><br><span class=\"line\">docker top <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内详细信息,配合-f和--format可以有更高级应用</span></span><br><span class=\"line\">docker inspect <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>初次接触docker，记录了docker的安装启动、容器的运行和常用操作。</p>","more":"<h2 id=\"1-docker的安装及启动\"><a href=\"#1-docker的安装及启动\" class=\"headerlink\" title=\"1.docker的安装及启动\"></a>1.docker的安装及启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker的安装</span></span><br><span class=\"line\">sudo wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\"><span class=\"comment\">#docker启动</span></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"><span class=\"comment\">#docker设置成开机启动</span></span><br><span class=\"line\">systemctl  start docker.service</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单运行一个容器\"><a href=\"#2-简单运行一个容器\" class=\"headerlink\" title=\"2.简单运行一个容器\"></a>2.简单运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run ubuntu echo hello docker</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">'ubuntu:latest'</span> locally</span><br><span class=\"line\">latest: Pulling from library/ubuntu</span><br><span class=\"line\">a48c500ed24e: Pull complete </span><br><span class=\"line\">1e1de00ff7e1: Pull complete </span><br><span class=\"line\">0330ca45a200: Pull complete </span><br><span class=\"line\">471db38bcfbf: Pull complete </span><br><span class=\"line\">0b4aba487617: Pull complete </span><br><span class=\"line\">Digest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:latest</span><br><span class=\"line\">hello docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-以交互式运行一个容器\"><a href=\"#3-以交互式运行一个容器\" class=\"headerlink\" title=\"3.以交互式运行一个容器\"></a>3.以交互式运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-i是持久的标准输入， -t是创建伪tty终端</span></span><br><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#如果要退回宿主机，需要输入exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-常用操作容器命令\"><a href=\"#4-常用操作容器命令\" class=\"headerlink\" title=\"4.常用操作容器命令\"></a>4.常用操作容器命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定名称运行容器，用--name</span></span><br><span class=\"line\">docker run --name <span class=\"built_in\">test</span> -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#查看当前运行中的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\">#查看所有容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看最后几个容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -n 5</span><br><span class=\"line\"><span class=\"comment\">#重启某容器，重启某容器时会沿用run命令时指定的参数</span></span><br><span class=\"line\">docker start <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#停止某容器</span></span><br><span class=\"line\">docker stop <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#快速停止某容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除某容器，rm后跟容器id或name均可</span></span><br><span class=\"line\">docker rm <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除所有容器</span></span><br><span class=\"line\">docker rm <span class=\"string\">'docker ps -a -q'</span></span><br><span class=\"line\"><span class=\"comment\">#连接到正在运行中的容器，attach后跟容器id或name均可</span></span><br><span class=\"line\">docker attach <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#获取容器日志并返回</span></span><br><span class=\"line\">docker logs <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器最新日志，类似tail -f功能</span></span><br><span class=\"line\">docker logs -f <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器日志时，还可以使用-t为每条日志加上时间戳</span></span><br><span class=\"line\">docker logs -ft <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内的进程</span></span><br><span class=\"line\">docker top <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内详细信息,配合-f和--format可以有更高级应用</span></span><br><span class=\"line\">docker inspect <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>"},{"title":"CentOS 7 安装并配置Shadowsocks客户端","id":"407","date":"2018-05-19T14:13:45.000Z","toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者[\"运维前线\"](https://www.jianshu.com/p/824912d9afda)的方法，现在记录详细操作。\n\n<!--more-->\n\n## 1.安装Shadowsocks客户端\n+ 依次安装epel-release、python-pip后再安装shadowsocks\n``` shell \nsudo yum -y install epel-release\nsudo yum -y install python-pip\nsudo pip install shadowsocks\n```\n\n## 2.配置自己的socks信息 \n\n+ 先新建配置文件 \n\n``` shell   \nsudo mkdir /etc/shadowsocks\nsudo vi /etc/shadowsocks/shadowsocks.json\n```\n\n+ 加入如下格式的配置\n``` text  \n{\n    \"server\":\"x.x.x.x\",  # Shadowsocks服务器地址\n    \"server_port\":1035,  # Shadowsocks服务器端口\n    \"local_address\": \"127.0.0.1\", # 本地IP\n    \"local_port\":1080,  # 本地端口\n    \"password\":\"password\", # Shadowsocks连接密码\n    \"timeout\":300,  # 等待超时时间\n    \"method\":\"aes-256-cfb\",  # 加密方式\n    \"fast_open\": false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+\n    \"workers\": 1  #工作线程数 \n}\n```\n\n## 3.配置shadowsocks客户端自启动 \n\n+ 配置自启动脚本/etc/systemd/system/shadowsocks.service \n\n``` text \n[Unit]\nDescription=Shadowsocks\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json\n[Install]\nWantedBy=multi-user.target\n```\n+ 加入自启动 \n\n``` shell \nsystemctl enable shadowsocks.service\nsystemctl start shadowsocks.service\nsystemctl status shadowsocks.service\n```\n+ 验证Shadowsocks客户端服务是否正常运行 \n\n``` shell\ncurl --socks5 127.0.0.1:1080 http://httpbin.org/ip\n```\n\n## 4.安装配置privoxy \n\n+ 安装privoxy\n\n``` shell \nyum install privoxy -y\nsystemctl enable privoxy\nsystemctl start privoxy\nsystemctl status privoxy  \n```\n\n+ 配置/etc/privoxy/config \n\n``` text \nlisten-address 127.0.0.1:8118 # 8118 是默认端口，不用改\nforward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点\n```\n\n+ 设置http、https代理，在/etc/profile末尾添加：\n\n``` text \nPROXY_HOST=127.0.0.1\nexport all_proxy=http://$PROXY_HOST:8118\nexport ftp_proxy=http://$PROXY_HOST:8118\nexport http_proxy=http://$PROXY_HOST:8118\nexport https_proxy=http://$PROXY_HOST:8118\nexport no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16\n```\n\n+ 重载环境变量 \n\n``` shell \nsource /etc/profile\n```\n\n+ 测试代理 \n\n``` shell\ncurl google.com\n```\n\n+ 取消代理 \n\n``` shell\nwhile read var; do unset $var; done < <(env | grep -i proxy | awk -F= '{print $1}')\n```\n\n## *.参考链接 \n+ [https://www.jianshu.com/p/824912d9afda](https://www.jianshu.com/p/824912d9afda)","source":"_posts/p37.md","raw":"---\ntitle: CentOS 7 安装并配置Shadowsocks客户端\nid: 407\ncategories:\n  - centos\n  - shadowsocks\ndate: 2018/5/19 22:13:45   \ntags: [运维, shadowsocks, linux]\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者[\"运维前线\"](https://www.jianshu.com/p/824912d9afda)的方法，现在记录详细操作。\n\n<!--more-->\n\n## 1.安装Shadowsocks客户端\n+ 依次安装epel-release、python-pip后再安装shadowsocks\n``` shell \nsudo yum -y install epel-release\nsudo yum -y install python-pip\nsudo pip install shadowsocks\n```\n\n## 2.配置自己的socks信息 \n\n+ 先新建配置文件 \n\n``` shell   \nsudo mkdir /etc/shadowsocks\nsudo vi /etc/shadowsocks/shadowsocks.json\n```\n\n+ 加入如下格式的配置\n``` text  \n{\n    \"server\":\"x.x.x.x\",  # Shadowsocks服务器地址\n    \"server_port\":1035,  # Shadowsocks服务器端口\n    \"local_address\": \"127.0.0.1\", # 本地IP\n    \"local_port\":1080,  # 本地端口\n    \"password\":\"password\", # Shadowsocks连接密码\n    \"timeout\":300,  # 等待超时时间\n    \"method\":\"aes-256-cfb\",  # 加密方式\n    \"fast_open\": false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+\n    \"workers\": 1  #工作线程数 \n}\n```\n\n## 3.配置shadowsocks客户端自启动 \n\n+ 配置自启动脚本/etc/systemd/system/shadowsocks.service \n\n``` text \n[Unit]\nDescription=Shadowsocks\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json\n[Install]\nWantedBy=multi-user.target\n```\n+ 加入自启动 \n\n``` shell \nsystemctl enable shadowsocks.service\nsystemctl start shadowsocks.service\nsystemctl status shadowsocks.service\n```\n+ 验证Shadowsocks客户端服务是否正常运行 \n\n``` shell\ncurl --socks5 127.0.0.1:1080 http://httpbin.org/ip\n```\n\n## 4.安装配置privoxy \n\n+ 安装privoxy\n\n``` shell \nyum install privoxy -y\nsystemctl enable privoxy\nsystemctl start privoxy\nsystemctl status privoxy  \n```\n\n+ 配置/etc/privoxy/config \n\n``` text \nlisten-address 127.0.0.1:8118 # 8118 是默认端口，不用改\nforward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点\n```\n\n+ 设置http、https代理，在/etc/profile末尾添加：\n\n``` text \nPROXY_HOST=127.0.0.1\nexport all_proxy=http://$PROXY_HOST:8118\nexport ftp_proxy=http://$PROXY_HOST:8118\nexport http_proxy=http://$PROXY_HOST:8118\nexport https_proxy=http://$PROXY_HOST:8118\nexport no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16\n```\n\n+ 重载环境变量 \n\n``` shell \nsource /etc/profile\n```\n\n+ 测试代理 \n\n``` shell\ncurl google.com\n```\n\n+ 取消代理 \n\n``` shell\nwhile read var; do unset $var; done < <(env | grep -i proxy | awk -F= '{print $1}')\n```\n\n## *.参考链接 \n+ [https://www.jianshu.com/p/824912d9afda](https://www.jianshu.com/p/824912d9afda)","slug":"p37","published":1,"updated":"2018-05-24T07:35:15.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv1490025k4vg51zt4zw7","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者<a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">“运维前线”</a>的方法，现在记录详细操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-安装Shadowsocks客户端\"><a href=\"#1-安装Shadowsocks客户端\" class=\"headerlink\" title=\"1.安装Shadowsocks客户端\"></a>1.安装Shadowsocks客户端</h2><ul>\n<li>依次安装epel-release、python-pip后再安装shadowsocks<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br><span class=\"line\">sudo yum -y install python-pip</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-配置自己的socks信息\"><a href=\"#2-配置自己的socks信息\" class=\"headerlink\" title=\"2.配置自己的socks信息\"></a>2.配置自己的socks信息</h2><ul>\n<li>先新建配置文件 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/shadowsocks</span><br><span class=\"line\">sudo vi /etc/shadowsocks/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入如下格式的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;x.x.x.x&quot;,  # Shadowsocks服务器地址</span><br><span class=\"line\">    &quot;server_port&quot;:1035,  # Shadowsocks服务器端口</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, # 本地IP</span><br><span class=\"line\">    &quot;local_port&quot;:1080,  # 本地端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;, # Shadowsocks连接密码</span><br><span class=\"line\">    &quot;timeout&quot;:300,  # 等待超时时间</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  # 加密方式</span><br><span class=\"line\">    &quot;fast_open&quot;: false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+</span><br><span class=\"line\">    &quot;workers&quot;: 1  #工作线程数 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-配置shadowsocks客户端自启动\"><a href=\"#3-配置shadowsocks客户端自启动\" class=\"headerlink\" title=\"3.配置shadowsocks客户端自启动\"></a>3.配置shadowsocks客户端自启动</h2><ul>\n<li>配置自启动脚本/etc/systemd/system/shadowsocks.service </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入自启动 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable shadowsocks.service</span><br><span class=\"line\">systemctl start shadowsocks.service</span><br><span class=\"line\">systemctl status shadowsocks.service</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证Shadowsocks客户端服务是否正常运行 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-安装配置privoxy\"><a href=\"#4-安装配置privoxy\" class=\"headerlink\" title=\"4.安装配置privoxy\"></a>4.安装配置privoxy</h2><ul>\n<li>安装privoxy</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install privoxy -y</span><br><span class=\"line\">systemctl enable privoxy</span><br><span class=\"line\">systemctl start privoxy</span><br><span class=\"line\">systemctl status privoxy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置/etc/privoxy/config </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address 127.0.0.1:8118 # 8118 是默认端口，不用改</span><br><span class=\"line\">forward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置http、https代理，在/etc/profile末尾添加：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PROXY_HOST=127.0.0.1</span><br><span class=\"line\">export all_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export ftp_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export http_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export https_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重载环境变量 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl google.com</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取消代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while read var; do unset $var; done &lt; &lt;(env | grep -i proxy | awk -F= '&#123;print $1&#125;')</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/824912d9afda</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者<a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">“运维前线”</a>的方法，现在记录详细操作。</p>","more":"<h2 id=\"1-安装Shadowsocks客户端\"><a href=\"#1-安装Shadowsocks客户端\" class=\"headerlink\" title=\"1.安装Shadowsocks客户端\"></a>1.安装Shadowsocks客户端</h2><ul>\n<li>依次安装epel-release、python-pip后再安装shadowsocks<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br><span class=\"line\">sudo yum -y install python-pip</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-配置自己的socks信息\"><a href=\"#2-配置自己的socks信息\" class=\"headerlink\" title=\"2.配置自己的socks信息\"></a>2.配置自己的socks信息</h2><ul>\n<li>先新建配置文件 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/shadowsocks</span><br><span class=\"line\">sudo vi /etc/shadowsocks/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入如下格式的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;x.x.x.x&quot;,  # Shadowsocks服务器地址</span><br><span class=\"line\">    &quot;server_port&quot;:1035,  # Shadowsocks服务器端口</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, # 本地IP</span><br><span class=\"line\">    &quot;local_port&quot;:1080,  # 本地端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;, # Shadowsocks连接密码</span><br><span class=\"line\">    &quot;timeout&quot;:300,  # 等待超时时间</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  # 加密方式</span><br><span class=\"line\">    &quot;fast_open&quot;: false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+</span><br><span class=\"line\">    &quot;workers&quot;: 1  #工作线程数 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-配置shadowsocks客户端自启动\"><a href=\"#3-配置shadowsocks客户端自启动\" class=\"headerlink\" title=\"3.配置shadowsocks客户端自启动\"></a>3.配置shadowsocks客户端自启动</h2><ul>\n<li>配置自启动脚本/etc/systemd/system/shadowsocks.service </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入自启动 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable shadowsocks.service</span><br><span class=\"line\">systemctl start shadowsocks.service</span><br><span class=\"line\">systemctl status shadowsocks.service</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证Shadowsocks客户端服务是否正常运行 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-安装配置privoxy\"><a href=\"#4-安装配置privoxy\" class=\"headerlink\" title=\"4.安装配置privoxy\"></a>4.安装配置privoxy</h2><ul>\n<li>安装privoxy</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install privoxy -y</span><br><span class=\"line\">systemctl enable privoxy</span><br><span class=\"line\">systemctl start privoxy</span><br><span class=\"line\">systemctl status privoxy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置/etc/privoxy/config </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address 127.0.0.1:8118 # 8118 是默认端口，不用改</span><br><span class=\"line\">forward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置http、https代理，在/etc/profile末尾添加：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PROXY_HOST=127.0.0.1</span><br><span class=\"line\">export all_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export ftp_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export http_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export https_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重载环境变量 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl google.com</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取消代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while read var; do unset $var; done &lt; &lt;(env | grep -i proxy | awk -F= '&#123;print $1&#125;')</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/824912d9afda</a></li>\n</ul>"},{"title":"常用markdown标签(来自强哥的markdown教程)","date":"2018-04-19T10:46:40.000Z","toc":true,"_content":"\n## 强哥的教程源码：#\n这里记录一下强哥的markdown演示教程，先粘一下源码：\n<!--more-->\n````\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项1\n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n }\n```\n\n```bash\n echo \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为\n````\n \n## 教程显示效果：\n---\n\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项 \n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n}\n```\n\n```bash\necho \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为","source":"_posts/p33.md","raw":"---\n\ntitle: 常用markdown标签(来自强哥的markdown教程)\ndate: 2018/4/19 18:46:40  \ntags: [markdown, 编程, 建站]\ntoc: true\n---\n\n## 强哥的教程源码：#\n这里记录一下强哥的markdown演示教程，先粘一下源码：\n<!--more-->\n````\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项1\n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n }\n```\n\n```bash\n echo \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为\n````\n \n## 教程显示效果：\n---\n\n# 原理分离\n\n# markdown实例讲解\n\n## 强调\n\n**粗体**  \n*斜体*  \n~~删除线~~  \n++下划线++  \n\n## 列表\n\n**有序列表：**\n1. 有序列表项 \n2. 有序列表项2\n3. 有序列表项3\n\n**无序列表：**\n+ 无序列表项1\n+ 无序列表项2\n+ 无序列表项3\n\n**任务列表：**\n- [ ] 任务列表项1\n- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\\n- [ ] 任务列表项3\n\n\n## 引用\n\n### 段落中的引用\n段落中的`引用`，\n\n---\n### 代码的引用\n```java\n\tpublic class Xx {\n    private String haha;\n}\n```\n\n```bash\necho \"haha\";\n```\n\n## 表格\n\nheader 1 | header 2\n---|---\nrow 1 col 1 | row 1 col 2\nrow 2 col 1 | row 2 col 2\n\n## 链接和图片\n[youdao](http://note.youdao.com/)\n![image](http://note.youdao.com/favicon.ico)\n\n\n## 引用\n\n> 张晓斌说他很帅\n\n我们不这么认为","slug":"p33","published":1,"updated":"2018-05-24T06:47:54.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14a0027k4vgmn4w5ute","content":"<h2 id=\"强哥的教程源码：\"><a href=\"#强哥的教程源码：\" class=\"headerlink\" title=\"强哥的教程源码：\"></a>强哥的教程源码：</h2><p>这里记录一下强哥的markdown演示教程，先粘一下源码：<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 原理分离</span><br><span class=\"line\"></span><br><span class=\"line\"># markdown实例讲解</span><br><span class=\"line\"></span><br><span class=\"line\">## 强调</span><br><span class=\"line\"></span><br><span class=\"line\">**粗体**  </span><br><span class=\"line\">*斜体*  </span><br><span class=\"line\">~~删除线~~  </span><br><span class=\"line\">++下划线++  </span><br><span class=\"line\"></span><br><span class=\"line\">## 列表</span><br><span class=\"line\"></span><br><span class=\"line\">**有序列表：**</span><br><span class=\"line\">1. 有序列表项1</span><br><span class=\"line\">2. 有序列表项2</span><br><span class=\"line\">3. 有序列表项3</span><br><span class=\"line\"></span><br><span class=\"line\">**无序列表：**</span><br><span class=\"line\">+ 无序列表项1</span><br><span class=\"line\">+ 无序列表项2</span><br><span class=\"line\">+ 无序列表项3</span><br><span class=\"line\"></span><br><span class=\"line\">**任务列表：**</span><br><span class=\"line\">- [ ] 任务列表项1</span><br><span class=\"line\">- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\</span><br><span class=\"line\">- [ ] 任务列表项3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 引用</span><br><span class=\"line\"></span><br><span class=\"line\">### 段落中的引用</span><br><span class=\"line\">段落中的`引用`，</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 代码的引用</span><br><span class=\"line\">```java</span><br><span class=\"line\">\tpublic class Xx &#123;</span><br><span class=\"line\">    private String haha;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\"> echo &quot;haha&quot;;</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">## 表格</span><br><span class=\"line\"></span><br><span class=\"line\">header 1 | header 2</span><br><span class=\"line\">---|---</span><br><span class=\"line\">row 1 col 1 | row 1 col 2</span><br><span class=\"line\">row 2 col 1 | row 2 col 2</span><br><span class=\"line\"></span><br><span class=\"line\">## 链接和图片</span><br><span class=\"line\">[youdao](http://note.youdao.com/)</span><br><span class=\"line\">![image](http://note.youdao.com/favicon.ico)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 引用</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 张晓斌说他很帅</span><br><span class=\"line\"></span><br><span class=\"line\">我们不这么认为</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"教程显示效果：\"><a href=\"#教程显示效果：\" class=\"headerlink\" title=\"教程显示效果：\"></a>教程显示效果：</h2><hr>\n<h1 id=\"原理分离\"><a href=\"#原理分离\" class=\"headerlink\" title=\"原理分离\"></a>原理分离</h1><h1 id=\"markdown实例讲解\"><a href=\"#markdown实例讲解\" class=\"headerlink\" title=\"markdown实例讲解\"></a>markdown实例讲解</h1><h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p><strong>粗体</strong><br><em>斜体</em><br><del>删除线</del><br>++下划线++  </p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>有序列表：</strong></p>\n<ol>\n<li>有序列表项 </li>\n<li>有序列表项2</li>\n<li>有序列表项3</li>\n</ol>\n<p><strong>无序列表：</strong></p>\n<ul>\n<li>无序列表项1</li>\n<li>无序列表项2</li>\n<li>无序列表项3</li>\n</ul>\n<p><strong>任务列表：</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项1</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 任务列表项2xzzxxxx\\\\\\\\\\</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项3</li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><h3 id=\"段落中的引用\"><a href=\"#段落中的引用\" class=\"headerlink\" title=\"段落中的引用\"></a>段落中的引用</h3><p>段落中的<code>引用</code>，</p>\n<hr>\n<h3 id=\"代码的引用\"><a href=\"#代码的引用\" class=\"headerlink\" title=\"代码的引用\"></a>代码的引用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xx</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String haha;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row 1 col 1</td>\n<td>row 1 col 2</td>\n</tr>\n<tr>\n<td>row 2 col 1</td>\n<td>row 2 col 2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h2><p><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">youdao</a><br><img src=\"http://note.youdao.com/favicon.ico\" alt=\"image\"></p>\n<h2 id=\"引用-1\"><a href=\"#引用-1\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>张晓斌说他很帅</p>\n</blockquote>\n<p>我们不这么认为</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"强哥的教程源码：\"><a href=\"#强哥的教程源码：\" class=\"headerlink\" title=\"强哥的教程源码：\"></a>强哥的教程源码：</h2><p>这里记录一下强哥的markdown演示教程，先粘一下源码：<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 原理分离</span><br><span class=\"line\"></span><br><span class=\"line\"># markdown实例讲解</span><br><span class=\"line\"></span><br><span class=\"line\">## 强调</span><br><span class=\"line\"></span><br><span class=\"line\">**粗体**  </span><br><span class=\"line\">*斜体*  </span><br><span class=\"line\">~~删除线~~  </span><br><span class=\"line\">++下划线++  </span><br><span class=\"line\"></span><br><span class=\"line\">## 列表</span><br><span class=\"line\"></span><br><span class=\"line\">**有序列表：**</span><br><span class=\"line\">1. 有序列表项1</span><br><span class=\"line\">2. 有序列表项2</span><br><span class=\"line\">3. 有序列表项3</span><br><span class=\"line\"></span><br><span class=\"line\">**无序列表：**</span><br><span class=\"line\">+ 无序列表项1</span><br><span class=\"line\">+ 无序列表项2</span><br><span class=\"line\">+ 无序列表项3</span><br><span class=\"line\"></span><br><span class=\"line\">**任务列表：**</span><br><span class=\"line\">- [ ] 任务列表项1</span><br><span class=\"line\">- [x] 任务列表项2xzzxxxx\\\\\\\\\\\\\\\\\\\\</span><br><span class=\"line\">- [ ] 任务列表项3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 引用</span><br><span class=\"line\"></span><br><span class=\"line\">### 段落中的引用</span><br><span class=\"line\">段落中的`引用`，</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 代码的引用</span><br><span class=\"line\">```java</span><br><span class=\"line\">\tpublic class Xx &#123;</span><br><span class=\"line\">    private String haha;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\"> echo &quot;haha&quot;;</span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">## 表格</span><br><span class=\"line\"></span><br><span class=\"line\">header 1 | header 2</span><br><span class=\"line\">---|---</span><br><span class=\"line\">row 1 col 1 | row 1 col 2</span><br><span class=\"line\">row 2 col 1 | row 2 col 2</span><br><span class=\"line\"></span><br><span class=\"line\">## 链接和图片</span><br><span class=\"line\">[youdao](http://note.youdao.com/)</span><br><span class=\"line\">![image](http://note.youdao.com/favicon.ico)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 引用</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 张晓斌说他很帅</span><br><span class=\"line\"></span><br><span class=\"line\">我们不这么认为</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"教程显示效果：\"><a href=\"#教程显示效果：\" class=\"headerlink\" title=\"教程显示效果：\"></a>教程显示效果：</h2><hr>\n<h1 id=\"原理分离\"><a href=\"#原理分离\" class=\"headerlink\" title=\"原理分离\"></a>原理分离</h1><h1 id=\"markdown实例讲解\"><a href=\"#markdown实例讲解\" class=\"headerlink\" title=\"markdown实例讲解\"></a>markdown实例讲解</h1><h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p><strong>粗体</strong><br><em>斜体</em><br><del>删除线</del><br>++下划线++  </p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>有序列表：</strong></p>\n<ol>\n<li>有序列表项 </li>\n<li>有序列表项2</li>\n<li>有序列表项3</li>\n</ol>\n<p><strong>无序列表：</strong></p>\n<ul>\n<li>无序列表项1</li>\n<li>无序列表项2</li>\n<li>无序列表项3</li>\n</ul>\n<p><strong>任务列表：</strong></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项1</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 任务列表项2xzzxxxx\\\\\\\\\\</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 任务列表项3</li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><h3 id=\"段落中的引用\"><a href=\"#段落中的引用\" class=\"headerlink\" title=\"段落中的引用\"></a>段落中的引用</h3><p>段落中的<code>引用</code>，</p>\n<hr>\n<h3 id=\"代码的引用\"><a href=\"#代码的引用\" class=\"headerlink\" title=\"代码的引用\"></a>代码的引用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xx</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String haha;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>row 1 col 1</td>\n<td>row 1 col 2</td>\n</tr>\n<tr>\n<td>row 2 col 1</td>\n<td>row 2 col 2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h2><p><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">youdao</a><br><img src=\"http://note.youdao.com/favicon.ico\" alt=\"image\"></p>\n<h2 id=\"引用-1\"><a href=\"#引用-1\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>张晓斌说他很帅</p>\n</blockquote>\n<p>我们不这么认为</p>"},{"title":"Docker初学（二）自定义构建镜像并发布","id":"406","date":"2018-05-17T09:11:50.000Z","toc":true,"_content":"![img](/img/xjy/docker1s.jpg)<br/><br/>\n学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。\n\n<!--more-->\n\n## 1.注册[Docker Hub](https://hub.docker.com/)\n注册很简单，直接点击上面的官网链接进行注册即可。\n\n## 2.在本地登录dockerhub\n为了后续的push到dockerhub，需要首先录入自己的github信息\n```shell\ndocker login \n```\n## 3.运行一个容器\n例如，以交互形式运行ubuntu。\n``` shell \ndocker run -i -t ubuntu /bin/bash\n```\n## 4.对容器做修改\n例如，进入容器后，新建一个文件test。\n``` shell \nmkdir /bin/test   \n```\n\n## 5.查找容器的id\n执行\"exit\"退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。\n```shell \n[root@localhost docker]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES\n0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg\n86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner\n4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport\n6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle\nb498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test\n69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth\ncb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff\n```\n\n## 6.提交新镜像\n提交刚刚修改过的容器为新的镜像。\n``` shell \ndocker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test\n```\n\n## 7.推送到Docker Hub\n在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。\n``` shell \ndocker push xiajunyi/test\n```\n## 8.效果\nDocker Hub端看到的效果\n![img](/img/xjy/docker1.jpg) \n\n## 9.搜索命令\n另外，常用的还有搜索镜像的命令\n```shell\ndocker search\n```\n## 10.如果速度慢，可配置镜像加速\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:\n```text\n{\n\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n}\n#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\nsystemctl daemon-reload\nservice docker restart\n```\n\n## *.参考资料 \n[reallinxu的docker学习](https://www.reallinxu.com/aticle/Docker-Learning.html#more)\n\n\n\n\n","source":"_posts/p36.md","raw":"---\ntitle: Docker初学（二）自定义构建镜像并发布\nid: 406\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/17 17:11:50  \ntags: [运维, 编程, docker, linux]\ntoc: true\n---\n![img](/img/xjy/docker1s.jpg)<br/><br/>\n学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。\n\n<!--more-->\n\n## 1.注册[Docker Hub](https://hub.docker.com/)\n注册很简单，直接点击上面的官网链接进行注册即可。\n\n## 2.在本地登录dockerhub\n为了后续的push到dockerhub，需要首先录入自己的github信息\n```shell\ndocker login \n```\n## 3.运行一个容器\n例如，以交互形式运行ubuntu。\n``` shell \ndocker run -i -t ubuntu /bin/bash\n```\n## 4.对容器做修改\n例如，进入容器后，新建一个文件test。\n``` shell \nmkdir /bin/test   \n```\n\n## 5.查找容器的id\n执行\"exit\"退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。\n```shell \n[root@localhost docker]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES\n0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg\n86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner\n4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport\n6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle\nb498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test\n69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth\ncb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff\n```\n\n## 6.提交新镜像\n提交刚刚修改过的容器为新的镜像。\n``` shell \ndocker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test\n```\n\n## 7.推送到Docker Hub\n在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。\n``` shell \ndocker push xiajunyi/test\n```\n## 8.效果\nDocker Hub端看到的效果\n![img](/img/xjy/docker1.jpg) \n\n## 9.搜索命令\n另外，常用的还有搜索镜像的命令\n```shell\ndocker search\n```\n## 10.如果速度慢，可配置镜像加速\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:\n```text\n{\n\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n}\n#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\nsystemctl daemon-reload\nservice docker restart\n```\n\n## *.参考资料 \n[reallinxu的docker学习](https://www.reallinxu.com/aticle/Docker-Learning.html#more)\n\n\n\n\n","slug":"p36","published":1,"updated":"2018-05-24T07:45:18.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14d002bk4vg20aj5sjj","content":"<p><img src=\"/img/xjy/docker1s.jpg\" alt=\"img\"><br><br><br>学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-注册Docker-Hub\"><a href=\"#1-注册Docker-Hub\" class=\"headerlink\" title=\"1.注册Docker Hub\"></a>1.注册<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></h2><p>注册很简单，直接点击上面的官网链接进行注册即可。</p>\n<h2 id=\"2-在本地登录dockerhub\"><a href=\"#2-在本地登录dockerhub\" class=\"headerlink\" title=\"2.在本地登录dockerhub\"></a>2.在本地登录dockerhub</h2><p>为了后续的push到dockerhub，需要首先录入自己的github信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-运行一个容器\"><a href=\"#3-运行一个容器\" class=\"headerlink\" title=\"3.运行一个容器\"></a>3.运行一个容器</h2><p>例如，以交互形式运行ubuntu。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-对容器做修改\"><a href=\"#4-对容器做修改\" class=\"headerlink\" title=\"4.对容器做修改\"></a>4.对容器做修改</h2><p>例如，进入容器后，新建一个文件test。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /bin/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-查找容器的id\"><a href=\"#5-查找容器的id\" class=\"headerlink\" title=\"5.查找容器的id\"></a>5.查找容器的id</h2><p>执行”exit”退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost docker]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES</span><br><span class=\"line\">0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg</span><br><span class=\"line\">86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner</span><br><span class=\"line\">4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport</span><br><span class=\"line\">6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle</span><br><span class=\"line\">b498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test</span><br><span class=\"line\">69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth</span><br><span class=\"line\">cb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-提交新镜像\"><a href=\"#6-提交新镜像\" class=\"headerlink\" title=\"6.提交新镜像\"></a>6.提交新镜像</h2><p>提交刚刚修改过的容器为新的镜像。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-推送到Docker-Hub\"><a href=\"#7-推送到Docker-Hub\" class=\"headerlink\" title=\"7.推送到Docker Hub\"></a>7.推送到Docker Hub</h2><p>在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-效果\"><a href=\"#8-效果\" class=\"headerlink\" title=\"8.效果\"></a>8.效果</h2><p>Docker Hub端看到的效果<br><img src=\"/img/xjy/docker1.jpg\" alt=\"img\"> </p>\n<h2 id=\"9-搜索命令\"><a href=\"#9-搜索命令\" class=\"headerlink\" title=\"9.搜索命令\"></a>9.搜索命令</h2><p>另外，常用的还有搜索镜像的命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-如果速度慢，可配置镜像加速\"><a href=\"#10-如果速度慢，可配置镜像加速\" class=\"headerlink\" title=\"10.如果速度慢，可配置镜像加速\"></a>10.如果速度慢，可配置镜像加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://www.reallinxu.com/aticle/Docker-Learning.html#more\" target=\"_blank\" rel=\"noopener\">reallinxu的docker学习</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/docker1s.jpg\" alt=\"img\"><br><br><br>学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。</p>","more":"<h2 id=\"1-注册Docker-Hub\"><a href=\"#1-注册Docker-Hub\" class=\"headerlink\" title=\"1.注册Docker Hub\"></a>1.注册<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></h2><p>注册很简单，直接点击上面的官网链接进行注册即可。</p>\n<h2 id=\"2-在本地登录dockerhub\"><a href=\"#2-在本地登录dockerhub\" class=\"headerlink\" title=\"2.在本地登录dockerhub\"></a>2.在本地登录dockerhub</h2><p>为了后续的push到dockerhub，需要首先录入自己的github信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-运行一个容器\"><a href=\"#3-运行一个容器\" class=\"headerlink\" title=\"3.运行一个容器\"></a>3.运行一个容器</h2><p>例如，以交互形式运行ubuntu。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-对容器做修改\"><a href=\"#4-对容器做修改\" class=\"headerlink\" title=\"4.对容器做修改\"></a>4.对容器做修改</h2><p>例如，进入容器后，新建一个文件test。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /bin/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-查找容器的id\"><a href=\"#5-查找容器的id\" class=\"headerlink\" title=\"5.查找容器的id\"></a>5.查找容器的id</h2><p>执行”exit”退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost docker]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES</span><br><span class=\"line\">0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg</span><br><span class=\"line\">86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner</span><br><span class=\"line\">4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport</span><br><span class=\"line\">6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle</span><br><span class=\"line\">b498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test</span><br><span class=\"line\">69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth</span><br><span class=\"line\">cb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-提交新镜像\"><a href=\"#6-提交新镜像\" class=\"headerlink\" title=\"6.提交新镜像\"></a>6.提交新镜像</h2><p>提交刚刚修改过的容器为新的镜像。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-推送到Docker-Hub\"><a href=\"#7-推送到Docker-Hub\" class=\"headerlink\" title=\"7.推送到Docker Hub\"></a>7.推送到Docker Hub</h2><p>在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-效果\"><a href=\"#8-效果\" class=\"headerlink\" title=\"8.效果\"></a>8.效果</h2><p>Docker Hub端看到的效果<br><img src=\"/img/xjy/docker1.jpg\" alt=\"img\"> </p>\n<h2 id=\"9-搜索命令\"><a href=\"#9-搜索命令\" class=\"headerlink\" title=\"9.搜索命令\"></a>9.搜索命令</h2><p>另外，常用的还有搜索镜像的命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-如果速度慢，可配置镜像加速\"><a href=\"#10-如果速度慢，可配置镜像加速\" class=\"headerlink\" title=\"10.如果速度慢，可配置镜像加速\"></a>10.如果速度慢，可配置镜像加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://www.reallinxu.com/aticle/Docker-Learning.html#more\" target=\"_blank\" rel=\"noopener\">reallinxu的docker学习</a></p>"},{"title":"Nginx内置变量大全","id":"409","date":"2018-05-20T05:34:34.000Z","toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了[内置变量](https://www.cnblogs.com/wajika/p/6426270.html)，以便后续查找。\n\n<!--more-->\n\n## nginx内置变量\n变量名 | 简要说明\n---|---\n$args|#请求中的参数值\n$query_string|#同 $args\n$arg_NAME|#GET请求中NAME的值\n$is_args|#如果请求中有参数，值为\"?\"，否则为空字符串\n$uri|#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。\n$document_uri|#同 $uri\n$document_root|#当前请求的文档根目录或别名\n$host|#优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称\n$hostname|#主机名\n$https|#如果开启了SSL安全模式，值为\"on\"，否则为空字符串。\n$binary_remote_addr|#客户端地址的二进制形式，固定长度为4个字节\n$body_bytes_sent|#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容\n$bytes_sent|#传输给客户端的字节数\n$connection|#TCP连接的序列号\n$connection_requests|#TCP连接当前的请求数量\n$content_length|#\"Content-Length\" 请求头字段\n$content_type|#\"Content-Type\" 请求头字段\n$cookie_name|#cookie名称\n$limit_rate|#用于设置响应的速度限制\n$msec|#当前的Unix时间戳\n$nginx_version|#nginx版本\n$pid|#工作进程的PID\n$pipe|#如果请求来自管道通信，值为\"p\"，否则为\".\"\n$proxy_protocol_addr|#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串\n$realpath_root|#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径\n$remote_addr|#客户端地址\n$remote_port|#客户端端口\n$remote_user|#用于HTTP基础认证服务的用户名\n$request|#代表客户端的请求地址\n$request_body|#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器\n$request_body_file|#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off\n$request_completion|#如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空\n$request_filename|#当前连接请求的文件路径，由root或alias指令与URI请求生成\n$request_length|#请求的长度 (包括请求的地址，http请求头和请求主体)\n$request_method|#HTTP请求方法，通常为\"GET\"或\"POST\"\n$request_time|#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n$request_uri|#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"\n$scheme|#请求使用的Web协议，\"http\" 或 \"https\"\n$server_addr|#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中\n$server_name|#服务器名\n$server_port|#服务器端口\n$server_protocol|#服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"\n$status|#HTTP响应代码\n$time_iso8601|#服务器时间的ISO 8610格式\n$time_local|#服务器时间（LOG Format 格式）\n$cookie_NAME|#客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值\n$http_NAME|#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可\n$http_cookie| \n$http_host|#请求地址，即浏览器中你输入的地址（IP或域名）\n$http_referer|#url跳转来源,用来记录从那个页面链接访问过来的\n$http_user_agent|#用户终端浏览器等信息\n$http_x_forwarded_for|\n$sent_http_NAME|#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可\n$sent_http_cache_control| \n$sent_http_connection| \n$sent_http_content_type| \n$sent_http_keep_alive| \n$sent_http_last_modified| \n$sent_http_location| \n$sent_http_transfer_encoding| \n\n\n## *.参考链接 \n+ [https://www.cnblogs.com/wajika/p/6426270.html](https://www.cnblogs.com/wajika/p/6426270.html)","source":"_posts/p39.md","raw":"---\ntitle: Nginx内置变量大全\nid: 409\ncategories:\n  - nginx\ndate: 2018/5/20 13:34:34     \ntags: [运维, nginx]\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了[内置变量](https://www.cnblogs.com/wajika/p/6426270.html)，以便后续查找。\n\n<!--more-->\n\n## nginx内置变量\n变量名 | 简要说明\n---|---\n$args|#请求中的参数值\n$query_string|#同 $args\n$arg_NAME|#GET请求中NAME的值\n$is_args|#如果请求中有参数，值为\"?\"，否则为空字符串\n$uri|#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。\n$document_uri|#同 $uri\n$document_root|#当前请求的文档根目录或别名\n$host|#优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称\n$hostname|#主机名\n$https|#如果开启了SSL安全模式，值为\"on\"，否则为空字符串。\n$binary_remote_addr|#客户端地址的二进制形式，固定长度为4个字节\n$body_bytes_sent|#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容\n$bytes_sent|#传输给客户端的字节数\n$connection|#TCP连接的序列号\n$connection_requests|#TCP连接当前的请求数量\n$content_length|#\"Content-Length\" 请求头字段\n$content_type|#\"Content-Type\" 请求头字段\n$cookie_name|#cookie名称\n$limit_rate|#用于设置响应的速度限制\n$msec|#当前的Unix时间戳\n$nginx_version|#nginx版本\n$pid|#工作进程的PID\n$pipe|#如果请求来自管道通信，值为\"p\"，否则为\".\"\n$proxy_protocol_addr|#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串\n$realpath_root|#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径\n$remote_addr|#客户端地址\n$remote_port|#客户端端口\n$remote_user|#用于HTTP基础认证服务的用户名\n$request|#代表客户端的请求地址\n$request_body|#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器\n$request_body_file|#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off\n$request_completion|#如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空\n$request_filename|#当前连接请求的文件路径，由root或alias指令与URI请求生成\n$request_length|#请求的长度 (包括请求的地址，http请求头和请求主体)\n$request_method|#HTTP请求方法，通常为\"GET\"或\"POST\"\n$request_time|#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n$request_uri|#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"\n$scheme|#请求使用的Web协议，\"http\" 或 \"https\"\n$server_addr|#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中\n$server_name|#服务器名\n$server_port|#服务器端口\n$server_protocol|#服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"\n$status|#HTTP响应代码\n$time_iso8601|#服务器时间的ISO 8610格式\n$time_local|#服务器时间（LOG Format 格式）\n$cookie_NAME|#客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值\n$http_NAME|#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可\n$http_cookie| \n$http_host|#请求地址，即浏览器中你输入的地址（IP或域名）\n$http_referer|#url跳转来源,用来记录从那个页面链接访问过来的\n$http_user_agent|#用户终端浏览器等信息\n$http_x_forwarded_for|\n$sent_http_NAME|#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可\n$sent_http_cache_control| \n$sent_http_connection| \n$sent_http_content_type| \n$sent_http_keep_alive| \n$sent_http_last_modified| \n$sent_http_location| \n$sent_http_transfer_encoding| \n\n\n## *.参考链接 \n+ [https://www.cnblogs.com/wajika/p/6426270.html](https://www.cnblogs.com/wajika/p/6426270.html)","slug":"p39","published":1,"updated":"2018-05-24T07:34:58.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14e002dk4vg96yics22","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了<a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">内置变量</a>，以便后续查找。</p>\n<a id=\"more\"></a>\n<h2 id=\"nginx内置变量\"><a href=\"#nginx内置变量\" class=\"headerlink\" title=\"nginx内置变量\"></a>nginx内置变量</h2><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>简要说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args</td>\n<td>#请求中的参数值</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>#同 $args</td>\n</tr>\n<tr>\n<td>$arg_NAME</td>\n<td>#GET请求中NAME的值</td>\n</tr>\n<tr>\n<td>$is_args</td>\n<td>#如果请求中有参数，值为”?”，否则为空字符串</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>#同 $uri</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>#当前请求的文档根目录或别名</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>#优先级：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</td>\n</tr>\n<tr>\n<td>$hostname</td>\n<td>#主机名</td>\n</tr>\n<tr>\n<td>$https</td>\n<td>#如果开启了SSL安全模式，值为”on”，否则为空字符串。</td>\n</tr>\n<tr>\n<td>$binary_remote_addr</td>\n<td>#客户端地址的二进制形式，固定长度为4个字节</td>\n</tr>\n<tr>\n<td>$body_bytes_sent</td>\n<td>#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的”%B”参数保持兼容</td>\n</tr>\n<tr>\n<td>$bytes_sent</td>\n<td>#传输给客户端的字节数</td>\n</tr>\n<tr>\n<td>$connection</td>\n<td>#TCP连接的序列号</td>\n</tr>\n<tr>\n<td>$connection_requests</td>\n<td>#TCP连接当前的请求数量</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>#”Content-Length” 请求头字段</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>#”Content-Type” 请求头字段</td>\n</tr>\n<tr>\n<td>$cookie_name</td>\n<td>#cookie名称</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>#用于设置响应的速度限制</td>\n</tr>\n<tr>\n<td>$msec</td>\n<td>#当前的Unix时间戳</td>\n</tr>\n<tr>\n<td>$nginx_version</td>\n<td>#nginx版本</td>\n</tr>\n<tr>\n<td>$pid</td>\n<td>#工作进程的PID</td>\n</tr>\n<tr>\n<td>$pipe</td>\n<td>#如果请求来自管道通信，值为”p”，否则为”.”</td>\n</tr>\n<tr>\n<td>$proxy_protocol_addr</td>\n<td>#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</td>\n</tr>\n<tr>\n<td>$realpath_root</td>\n<td>#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>#客户端地址</td>\n</tr>\n<tr>\n<td>$remote_port</td>\n<td>#客户端端口</td>\n</tr>\n<tr>\n<td>$remote_user</td>\n<td>#用于HTTP基础认证服务的用户名</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>#代表客户端的请求地址</td>\n</tr>\n<tr>\n<td>$request_body</td>\n<td>#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</td>\n</tr>\n<tr>\n<td>$request_body_file</td>\n<td>#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</td>\n</tr>\n<tr>\n<td>$request_completion</td>\n<td>#如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</td>\n</tr>\n<tr>\n<td>$request_filename</td>\n<td>#当前连接请求的文件路径，由root或alias指令与URI请求生成</td>\n</tr>\n<tr>\n<td>$request_length</td>\n<td>#请求的长度 (包括请求的地址，http请求头和请求主体)</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>#HTTP请求方法，通常为”GET”或”POST”</td>\n</tr>\n<tr>\n<td>$request_time</td>\n<td>#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>#请求使用的Web协议，”http” 或 “https”</td>\n</tr>\n<tr>\n<td>$server_addr</td>\n<td>#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</td>\n</tr>\n<tr>\n<td>$server_name</td>\n<td>#服务器名</td>\n</tr>\n<tr>\n<td>$server_port</td>\n<td>#服务器端口</td>\n</tr>\n<tr>\n<td>$server_protocol</td>\n<td>#服务器的HTTP版本，通常为 “HTTP/1.0” 或 “HTTP/1.1”</td>\n</tr>\n<tr>\n<td>$status</td>\n<td>#HTTP响应代码</td>\n</tr>\n<tr>\n<td>$time_iso8601</td>\n<td>#服务器时间的ISO 8610格式</td>\n</tr>\n<tr>\n<td>$time_local</td>\n<td>#服务器时间（LOG Format 格式）</td>\n</tr>\n<tr>\n<td>$cookie_NAME</td>\n<td>#客户端请求Header头中的cookie变量，前缀”$cookie_”加上cookie名称的变量，该变量的值即为cookie名称的值</td>\n</tr>\n<tr>\n<td>$http_NAME</td>\n<td>#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：”Accept-Language”，$http_accept_language即可</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_host</td>\n<td>#请求地址，即浏览器中你输入的地址（IP或域名）</td>\n</tr>\n<tr>\n<td>$http_referer</td>\n<td>#url跳转来源,用来记录从那个页面链接访问过来的</td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td>#用户终端浏览器等信息</td>\n</tr>\n<tr>\n<td>$http_x_forwarded_for</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_NAME</td>\n<td>#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</td>\n</tr>\n<tr>\n<td>$sent_http_cache_control</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_connection</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_content_type</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_keep_alive</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_last_modified</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_location</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_transfer_encoding</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wajika/p/6426270.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了<a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">内置变量</a>，以便后续查找。</p>","more":"<h2 id=\"nginx内置变量\"><a href=\"#nginx内置变量\" class=\"headerlink\" title=\"nginx内置变量\"></a>nginx内置变量</h2><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>简要说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args</td>\n<td>#请求中的参数值</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>#同 $args</td>\n</tr>\n<tr>\n<td>$arg_NAME</td>\n<td>#GET请求中NAME的值</td>\n</tr>\n<tr>\n<td>$is_args</td>\n<td>#如果请求中有参数，值为”?”，否则为空字符串</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>#同 $uri</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>#当前请求的文档根目录或别名</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>#优先级：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</td>\n</tr>\n<tr>\n<td>$hostname</td>\n<td>#主机名</td>\n</tr>\n<tr>\n<td>$https</td>\n<td>#如果开启了SSL安全模式，值为”on”，否则为空字符串。</td>\n</tr>\n<tr>\n<td>$binary_remote_addr</td>\n<td>#客户端地址的二进制形式，固定长度为4个字节</td>\n</tr>\n<tr>\n<td>$body_bytes_sent</td>\n<td>#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的”%B”参数保持兼容</td>\n</tr>\n<tr>\n<td>$bytes_sent</td>\n<td>#传输给客户端的字节数</td>\n</tr>\n<tr>\n<td>$connection</td>\n<td>#TCP连接的序列号</td>\n</tr>\n<tr>\n<td>$connection_requests</td>\n<td>#TCP连接当前的请求数量</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>#”Content-Length” 请求头字段</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>#”Content-Type” 请求头字段</td>\n</tr>\n<tr>\n<td>$cookie_name</td>\n<td>#cookie名称</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>#用于设置响应的速度限制</td>\n</tr>\n<tr>\n<td>$msec</td>\n<td>#当前的Unix时间戳</td>\n</tr>\n<tr>\n<td>$nginx_version</td>\n<td>#nginx版本</td>\n</tr>\n<tr>\n<td>$pid</td>\n<td>#工作进程的PID</td>\n</tr>\n<tr>\n<td>$pipe</td>\n<td>#如果请求来自管道通信，值为”p”，否则为”.”</td>\n</tr>\n<tr>\n<td>$proxy_protocol_addr</td>\n<td>#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</td>\n</tr>\n<tr>\n<td>$realpath_root</td>\n<td>#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>#客户端地址</td>\n</tr>\n<tr>\n<td>$remote_port</td>\n<td>#客户端端口</td>\n</tr>\n<tr>\n<td>$remote_user</td>\n<td>#用于HTTP基础认证服务的用户名</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>#代表客户端的请求地址</td>\n</tr>\n<tr>\n<td>$request_body</td>\n<td>#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</td>\n</tr>\n<tr>\n<td>$request_body_file</td>\n<td>#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</td>\n</tr>\n<tr>\n<td>$request_completion</td>\n<td>#如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</td>\n</tr>\n<tr>\n<td>$request_filename</td>\n<td>#当前连接请求的文件路径，由root或alias指令与URI请求生成</td>\n</tr>\n<tr>\n<td>$request_length</td>\n<td>#请求的长度 (包括请求的地址，http请求头和请求主体)</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>#HTTP请求方法，通常为”GET”或”POST”</td>\n</tr>\n<tr>\n<td>$request_time</td>\n<td>#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>#请求使用的Web协议，”http” 或 “https”</td>\n</tr>\n<tr>\n<td>$server_addr</td>\n<td>#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</td>\n</tr>\n<tr>\n<td>$server_name</td>\n<td>#服务器名</td>\n</tr>\n<tr>\n<td>$server_port</td>\n<td>#服务器端口</td>\n</tr>\n<tr>\n<td>$server_protocol</td>\n<td>#服务器的HTTP版本，通常为 “HTTP/1.0” 或 “HTTP/1.1”</td>\n</tr>\n<tr>\n<td>$status</td>\n<td>#HTTP响应代码</td>\n</tr>\n<tr>\n<td>$time_iso8601</td>\n<td>#服务器时间的ISO 8610格式</td>\n</tr>\n<tr>\n<td>$time_local</td>\n<td>#服务器时间（LOG Format 格式）</td>\n</tr>\n<tr>\n<td>$cookie_NAME</td>\n<td>#客户端请求Header头中的cookie变量，前缀”$cookie_”加上cookie名称的变量，该变量的值即为cookie名称的值</td>\n</tr>\n<tr>\n<td>$http_NAME</td>\n<td>#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：”Accept-Language”，$http_accept_language即可</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_host</td>\n<td>#请求地址，即浏览器中你输入的地址（IP或域名）</td>\n</tr>\n<tr>\n<td>$http_referer</td>\n<td>#url跳转来源,用来记录从那个页面链接访问过来的</td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td>#用户终端浏览器等信息</td>\n</tr>\n<tr>\n<td>$http_x_forwarded_for</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_NAME</td>\n<td>#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</td>\n</tr>\n<tr>\n<td>$sent_http_cache_control</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_connection</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_content_type</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_keep_alive</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_last_modified</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_location</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_transfer_encoding</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wajika/p/6426270.html</a></li>\n</ul>"},{"title":"TypeError: exchange_declare() got an unexpected keyword argument 'type'的解决办法","id":"300","date":"2018-01-08T06:59:25.000Z","_content":"\n在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。\n\n*   **原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：** \n<!--more-->\n\n源代码：\n``` py \n#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming() \n```\n\n报错如下：\n\n``` text \nFile \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'\n```\n\n修改如下：\n\n``` py \nchannel.exchange_declare(exchange='logs', exchange_type='fanout') \n```","source":"_posts/p4.md","raw":"---\ntitle: 'TypeError: exchange_declare() got an unexpected keyword argument ''type''的解决办法'\nid: 300\ncategories:\n  - rabbitmq学习\ndate: 2018-01-08 14:59:25\ntags: [rabbitmq, 错误解决]\n---\n\n在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。\n\n*   **原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：** \n<!--more-->\n\n源代码：\n``` py \n#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming() \n```\n\n报错如下：\n\n``` text \nFile \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'\n```\n\n修改如下：\n\n``` py \nchannel.exchange_declare(exchange='logs', exchange_type='fanout') \n```","slug":"p4","published":1,"updated":"2018-05-16T08:21:59.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14h002hk4vgn9vtr1t6","content":"<p>在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。</p>\n<ul>\n<li><strong>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：</strong> <a id=\"more\"></a>\n</li>\n</ul>\n<p>源代码：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding:utf8  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika  </span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'localhost'</span>))  </span><br><span class=\"line\">channel = connection.channel()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  </span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)  </span><br><span class=\"line\"><span class=\"comment\">#在不同的producer和consumer间共享queue时指明queue的name是重要的  </span></span><br><span class=\"line\"><span class=\"comment\">#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  </span></span><br><span class=\"line\"><span class=\"comment\">#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  </span></span><br><span class=\"line\"><span class=\"comment\">#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  </span></span><br><span class=\"line\"><span class=\"comment\">#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  </span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用于获取临时queue的name  </span></span><br><span class=\"line\">queue_name = result.method.queue  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#exchange与queue之间的关系成为binding  </span></span><br><span class=\"line\"><span class=\"comment\">#binding告诉exchange将message发送该哪些queue  </span></span><br><span class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'logs'</span>,queue=queue_name)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] %r\"</span> % (body,))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从指定地queue中consume message且不确认  </span></span><br><span class=\"line\">channel.basic_consume(callback,queue=queue_name,no_ack=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure></p>\n<p>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File &quot;receive_logs.py&quot;, line 9, in &amp;lt;module&amp;gt;                                    channel.exchange_declare(exchange=&apos;logs&apos;,type=&apos;fanout&apos;)</span><br><span class=\"line\">TypeError: exchange_declare() got an unexpected keyword argument &apos;type&apos;</span><br></pre></td></tr></table></figure>\n<p>修改如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。</p>\n<ul>\n<li><strong>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：</strong>","more":"</li>\n</ul>\n<p>源代码：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding:utf8  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika  </span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'localhost'</span>))  </span><br><span class=\"line\">channel = connection.channel()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  </span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)  </span><br><span class=\"line\"><span class=\"comment\">#在不同的producer和consumer间共享queue时指明queue的name是重要的  </span></span><br><span class=\"line\"><span class=\"comment\">#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  </span></span><br><span class=\"line\"><span class=\"comment\">#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  </span></span><br><span class=\"line\"><span class=\"comment\">#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  </span></span><br><span class=\"line\"><span class=\"comment\">#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  </span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用于获取临时queue的name  </span></span><br><span class=\"line\">queue_name = result.method.queue  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#exchange与queue之间的关系成为binding  </span></span><br><span class=\"line\"><span class=\"comment\">#binding告诉exchange将message发送该哪些queue  </span></span><br><span class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'logs'</span>,queue=queue_name)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] %r\"</span> % (body,))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从指定地queue中consume message且不确认  </span></span><br><span class=\"line\">channel.basic_consume(callback,queue=queue_name,no_ack=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure></p>\n<p>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File &quot;receive_logs.py&quot;, line 9, in &amp;lt;module&amp;gt;                                    channel.exchange_declare(exchange=&apos;logs&apos;,type=&apos;fanout&apos;)</span><br><span class=\"line\">TypeError: exchange_declare() got an unexpected keyword argument &apos;type&apos;</span><br></pre></td></tr></table></figure>\n<p>修改如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)</span><br></pre></td></tr></table></figure>"},{"title":"Gitlab安装及配置","id":"410","date":"2018-05-20T05:34:34.000Z","toc":true,"_content":"![img](/img/xjy/gitlab1s.jpg)<br/><br/>\n一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照[官网](https://about.gitlab.com/installation/#centos-7)的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。\n\n<!--more-->\n\n## 安装\n允许http和ssh通过防火墙\n``` shell\nsudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld \n```\n\n安装 Postfix用于后面的gitlab发送邮件\n```shell\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n增加gitlab包的库\n```shell\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n```\n\n可以执行安装了\n``` shell\nsudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee\n```\n\n## 运行及维护\n执行启动：\n```shell\ngitlab-ctl start\n```\n想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：\n```text\n[root@localhost ~]# gitlab-ctl status\nrun: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s\nrun: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s\nrun: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s\nrun: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s\nrun: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s\nrun: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s\nrun: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s\nrun: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s\nrun: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s\nrun: redis: (pid 672) 28346s; run: log: (pid 670) 28346s\nrun: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s\nrun: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s\nrun: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s\n```\n有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：\n```shell\n#查看相关运行日志\ngitlab-ctl tail\n#查看网络访问日志\ngitlab-ctl tail nginx\n```\n\n## 界面及配置\n第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。\n**后续随着学习的深入，我会再更新这一部分。。。**\n![img](/img/xjy/gitlab1.jpg)\n\n<font color=\"red\">**已更新的配置部分:**</font>\n+ [Gitlab的第一个Runners配置(shared类型)](http://localhost:4000/pages/p42.html)\n## 问题记录\n在安装的过程中遇到了两个问题，也在这里记录一下吧:\n+ 状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。\n+ 能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。\n\n\n## *.参考链接 \n+ [https://blog.devzeng.com/blog/simple-usage-of-gitlab.html](\nhttps://blog.devzeng.com/blog/simple-usage-of-gitlab.html)","source":"_posts/p40.md","raw":"---\ntitle: Gitlab安装及配置\nid: 410\ncategories:\n  - linux\ndate: 2018/5/20 13:34:34     \ntags: [运维, gitlab, linux]\ntoc: true\n---\n![img](/img/xjy/gitlab1s.jpg)<br/><br/>\n一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照[官网](https://about.gitlab.com/installation/#centos-7)的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。\n\n<!--more-->\n\n## 安装\n允许http和ssh通过防火墙\n``` shell\nsudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld \n```\n\n安装 Postfix用于后面的gitlab发送邮件\n```shell\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n增加gitlab包的库\n```shell\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n```\n\n可以执行安装了\n``` shell\nsudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee\n```\n\n## 运行及维护\n执行启动：\n```shell\ngitlab-ctl start\n```\n想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：\n```text\n[root@localhost ~]# gitlab-ctl status\nrun: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s\nrun: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s\nrun: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s\nrun: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s\nrun: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s\nrun: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s\nrun: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s\nrun: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s\nrun: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s\nrun: redis: (pid 672) 28346s; run: log: (pid 670) 28346s\nrun: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s\nrun: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s\nrun: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s\n```\n有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：\n```shell\n#查看相关运行日志\ngitlab-ctl tail\n#查看网络访问日志\ngitlab-ctl tail nginx\n```\n\n## 界面及配置\n第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。\n**后续随着学习的深入，我会再更新这一部分。。。**\n![img](/img/xjy/gitlab1.jpg)\n\n<font color=\"red\">**已更新的配置部分:**</font>\n+ [Gitlab的第一个Runners配置(shared类型)](http://localhost:4000/pages/p42.html)\n## 问题记录\n在安装的过程中遇到了两个问题，也在这里记录一下吧:\n+ 状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。\n+ 能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。\n\n\n## *.参考链接 \n+ [https://blog.devzeng.com/blog/simple-usage-of-gitlab.html](\nhttps://blog.devzeng.com/blog/simple-usage-of-gitlab.html)","slug":"p40","published":1,"updated":"2018-05-26T08:41:44.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14i002jk4vgxkke6qpj","content":"<p><img src=\"/img/xjy/gitlab1s.jpg\" alt=\"img\"><br><br><br>一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照<a href=\"https://about.gitlab.com/installation/#centos-7\" target=\"_blank\" rel=\"noopener\">官网</a>的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>允许http和ssh通过防火墙<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></p>\n<p>安装 Postfix用于后面的gitlab发送邮件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure></p>\n<p>增加gitlab包的库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>\n<p>可以执行安装了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行及维护\"><a href=\"#运行及维护\" class=\"headerlink\" title=\"运行及维护\"></a>运行及维护</h2><p>执行启动：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl start</span><br></pre></td></tr></table></figure></p>\n<p>想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ctl status</span><br><span class=\"line\">run: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s</span><br><span class=\"line\">run: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s</span><br><span class=\"line\">run: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s</span><br><span class=\"line\">run: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s</span><br><span class=\"line\">run: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s</span><br><span class=\"line\">run: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s</span><br><span class=\"line\">run: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s</span><br><span class=\"line\">run: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s</span><br><span class=\"line\">run: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s</span><br><span class=\"line\">run: redis: (pid 672) 28346s; run: log: (pid 670) 28346s</span><br><span class=\"line\">run: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s</span><br><span class=\"line\">run: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s</span><br><span class=\"line\">run: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s</span><br></pre></td></tr></table></figure></p>\n<p>有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看相关运行日志</span></span><br><span class=\"line\">gitlab-ctl tail</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看网络访问日志</span></span><br><span class=\"line\">gitlab-ctl tail nginx</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"界面及配置\"><a href=\"#界面及配置\" class=\"headerlink\" title=\"界面及配置\"></a>界面及配置</h2><p>第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。<br><strong>后续随着学习的深入，我会再更新这一部分。。。</strong><br><img src=\"/img/xjy/gitlab1.jpg\" alt=\"img\"></p>\n<p><font color=\"red\"><strong>已更新的配置部分:</strong></font></p>\n<ul>\n<li><a href=\"http://localhost:4000/pages/p42.html\" target=\"_blank\" rel=\"noopener\">Gitlab的第一个Runners配置(shared类型)</a><h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2>在安装的过程中遇到了两个问题，也在这里记录一下吧:</li>\n<li>状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。</li>\n<li>能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.devzeng.com/blog/simple-usage-of-gitlab.html\" target=\"_blank\" rel=\"noopener\">https://blog.devzeng.com/blog/simple-usage-of-gitlab.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/gitlab1s.jpg\" alt=\"img\"><br><br><br>一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照<a href=\"https://about.gitlab.com/installation/#centos-7\" target=\"_blank\" rel=\"noopener\">官网</a>的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>允许http和ssh通过防火墙<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></p>\n<p>安装 Postfix用于后面的gitlab发送邮件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure></p>\n<p>增加gitlab包的库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>\n<p>可以执行安装了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行及维护\"><a href=\"#运行及维护\" class=\"headerlink\" title=\"运行及维护\"></a>运行及维护</h2><p>执行启动：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl start</span><br></pre></td></tr></table></figure></p>\n<p>想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ctl status</span><br><span class=\"line\">run: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s</span><br><span class=\"line\">run: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s</span><br><span class=\"line\">run: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s</span><br><span class=\"line\">run: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s</span><br><span class=\"line\">run: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s</span><br><span class=\"line\">run: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s</span><br><span class=\"line\">run: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s</span><br><span class=\"line\">run: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s</span><br><span class=\"line\">run: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s</span><br><span class=\"line\">run: redis: (pid 672) 28346s; run: log: (pid 670) 28346s</span><br><span class=\"line\">run: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s</span><br><span class=\"line\">run: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s</span><br><span class=\"line\">run: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s</span><br></pre></td></tr></table></figure></p>\n<p>有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看相关运行日志</span></span><br><span class=\"line\">gitlab-ctl tail</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看网络访问日志</span></span><br><span class=\"line\">gitlab-ctl tail nginx</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"界面及配置\"><a href=\"#界面及配置\" class=\"headerlink\" title=\"界面及配置\"></a>界面及配置</h2><p>第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。<br><strong>后续随着学习的深入，我会再更新这一部分。。。</strong><br><img src=\"/img/xjy/gitlab1.jpg\" alt=\"img\"></p>\n<p><font color=\"red\"><strong>已更新的配置部分:</strong></font></p>\n<ul>\n<li><a href=\"http://localhost:4000/pages/p42.html\" target=\"_blank\" rel=\"noopener\">Gitlab的第一个Runners配置(shared类型)</a><h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2>在安装的过程中遇到了两个问题，也在这里记录一下吧:</li>\n<li>状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。</li>\n<li>能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.devzeng.com/blog/simple-usage-of-gitlab.html\" target=\"_blank\" rel=\"noopener\">https://blog.devzeng.com/blog/simple-usage-of-gitlab.html</a></li>\n</ul>"},{"title":"Github的webhook触发vps上的脚本","id":"411","date":"2018-05-23T09:04:15.000Z","toc":true,"_content":"![img](/img/xjy/webhook001s.jpg)<br/><br/>\n一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。\n\n<!--more-->\n\n## 环境\n+ VPS端(CENTOS6):NodeJs、Git\n+ WINDOWS端：Git\n+ GitHub\n+ Travis_Ci\n\n\n## 原理\n原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br/>\n![img](/img/xjy/webhook001.jpg)\n\n## webhook配置\ngithub端webhook主要配置的就是推送的地址，下面是我的配置:  <br/>\n![img](/img/xjy/webhook002.jpg)\n\n## vps端代码及配置\n+ **nodejs代码:**下面是vps端nodejs的代码hexoHook.js。\n\n``` py\nvar http = require('http');\n\nhttp.createServer(function (request, response) {\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n');\n\t//开始准备调用脚本\n\tvar callfile = require('child_process');\n\tcallfile.execFile('/opt/gitCode/hexoHook.sh',null,null,function (err, stdout, stderr) {\n     if (stderr) {\n       console.log(stderr);\n     }\n     console.log(stdout);\n });\n}).listen(8888);\n```\n\n+ **sh脚本:**下面是vps端被nodejs调用的sh脚本。\n\n``` shell\ncd /opt/gitCode/xiajunyi.github.io\ngit fetch --all\ngit reset --hard origin/master\ngit pull origin master\n```\n\n+ **执行监听程序：**真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。\n\n``` shell\n[root@zyshops nodeTest]# node hexoHook.js \nServer running at http://127.0.0.1:8888/\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n + 641d46e...b41a89d master     -> origin/master  (forced update)\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n * branch            master     -> FETCH_HEAD\n\nFetching origin\nHEAD is now at b41a89d docs:update articles\nAlready up-to-date.\n```\n\n## 效果\n当访问[http://hexo.xiajunyi.com/pages/p41.html#more](http://hexo.xiajunyi.com/pages/p41.html#more)看到这篇文章时,说明vps端已经同步到了最新的资源。\n\n## 补充(开机启动nodejs)\n在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：\n\n+ 安装forever，该程序保证nodeJs程序万一停止后能被重复启动\n\n```shell\nnpm install forever -g\n```\n\n+ 在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：\n\n```text\n\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n\"nodeserver\" [readonly] 62L, 1342C\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                start\n        else\n                export NODE_ENV=production\n                start\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production\"\n        fi\n        ;;\nstop)\n        stop\n        ;;\nrestart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                stop\n                start\n        else\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        fi\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        echo 0;\nesac\n\nexit 0\n```\n\n+ 用chkconfig加入到开机启动项\n\n```shell\nchkconfig --add nodeserver\n```\n\n+ 重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。\n\n``` shell\n[root@zyshops init.d]# ps -ef | grep node\nroot       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js\nroot       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js\n```","source":"_posts/p41.md","raw":"---\ntitle: Github的webhook触发vps上的脚本\nid: 411\ncategories:\n  - linux\ndate: 2018/5/23 17:04:15     \ntags: [运维, github, webhook]\ntoc: true\n---\n![img](/img/xjy/webhook001s.jpg)<br/><br/>\n一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。\n\n<!--more-->\n\n## 环境\n+ VPS端(CENTOS6):NodeJs、Git\n+ WINDOWS端：Git\n+ GitHub\n+ Travis_Ci\n\n\n## 原理\n原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br/>\n![img](/img/xjy/webhook001.jpg)\n\n## webhook配置\ngithub端webhook主要配置的就是推送的地址，下面是我的配置:  <br/>\n![img](/img/xjy/webhook002.jpg)\n\n## vps端代码及配置\n+ **nodejs代码:**下面是vps端nodejs的代码hexoHook.js。\n\n``` py\nvar http = require('http');\n\nhttp.createServer(function (request, response) {\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n');\n\t//开始准备调用脚本\n\tvar callfile = require('child_process');\n\tcallfile.execFile('/opt/gitCode/hexoHook.sh',null,null,function (err, stdout, stderr) {\n     if (stderr) {\n       console.log(stderr);\n     }\n     console.log(stdout);\n });\n}).listen(8888);\n```\n\n+ **sh脚本:**下面是vps端被nodejs调用的sh脚本。\n\n``` shell\ncd /opt/gitCode/xiajunyi.github.io\ngit fetch --all\ngit reset --hard origin/master\ngit pull origin master\n```\n\n+ **执行监听程序：**真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。\n\n``` shell\n[root@zyshops nodeTest]# node hexoHook.js \nServer running at http://127.0.0.1:8888/\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n + 641d46e...b41a89d master     -> origin/master  (forced update)\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n * branch            master     -> FETCH_HEAD\n\nFetching origin\nHEAD is now at b41a89d docs:update articles\nAlready up-to-date.\n```\n\n## 效果\n当访问[http://hexo.xiajunyi.com/pages/p41.html#more](http://hexo.xiajunyi.com/pages/p41.html#more)看到这篇文章时,说明vps端已经同步到了最新的资源。\n\n## 补充(开机启动nodejs)\n在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：\n\n+ 安装forever，该程序保证nodeJs程序万一停止后能被重复启动\n\n```shell\nnpm install forever -g\n```\n\n+ 在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：\n\n```text\n\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n\"nodeserver\" [readonly] 62L, 1342C\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                start\n        else\n                export NODE_ENV=production\n                start\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production\"\n        fi\n        ;;\nstop)\n        stop\n        ;;\nrestart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                stop\n                start\n        else\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        fi\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        echo 0;\nesac\n\nexit 0\n```\n\n+ 用chkconfig加入到开机启动项\n\n```shell\nchkconfig --add nodeserver\n```\n\n+ 重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。\n\n``` shell\n[root@zyshops init.d]# ps -ef | grep node\nroot       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js\nroot       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js\n```","slug":"p41","published":1,"updated":"2018-05-24T07:39:44.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14j002mk4vgh99fxe1s","content":"<p><img src=\"/img/xjy/webhook001s.jpg\" alt=\"img\"><br><br><br>一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>VPS端(CENTOS6):NodeJs、Git</li>\n<li>WINDOWS端：Git</li>\n<li>GitHub</li>\n<li>Travis_Ci</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br><br><img src=\"/img/xjy/webhook001.jpg\" alt=\"img\"></p>\n<h2 id=\"webhook配置\"><a href=\"#webhook配置\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h2><p>github端webhook主要配置的就是推送的地址，下面是我的配置:  <br><br><img src=\"/img/xjy/webhook002.jpg\" alt=\"img\"></p>\n<h2 id=\"vps端代码及配置\"><a href=\"#vps端代码及配置\" class=\"headerlink\" title=\"vps端代码及配置\"></a>vps端代码及配置</h2><ul>\n<li><strong>nodejs代码:</strong>下面是vps端nodejs的代码hexoHook.js。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</span><br><span class=\"line\">    response.end(<span class=\"string\">'Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n'</span>);</span><br><span class=\"line\">\t//开始准备调用脚本</span><br><span class=\"line\">\tvar callfile = require(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\">\tcallfile.execFile(<span class=\"string\">'/opt/gitCode/hexoHook.sh'</span>,null,null,function (err, stdout, stderr) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (stderr) &#123;</span><br><span class=\"line\">       console.log(stderr);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     console.log(stdout);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>sh脚本:</strong>下面是vps端被nodejs调用的sh脚本。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/gitCode/xiajunyi.github.io</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>执行监听程序：</strong>真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops nodeTest]# node hexoHook.js </span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> + 641d46e...b41a89d master     -&gt; origin/master  (forced update)</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">Fetching origin</span><br><span class=\"line\">HEAD is now at b41a89d docs:update articles</span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>当访问<a href=\"http://hexo.xiajunyi.com/pages/p41.html#more\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/pages/p41.html#more</a>看到这篇文章时,说明vps端已经同步到了最新的资源。</p>\n<h2 id=\"补充-开机启动nodejs\"><a href=\"#补充-开机启动nodejs\" class=\"headerlink\" title=\"补充(开机启动nodejs)\"></a>补充(开机启动nodejs)</h2><p>在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：</p>\n<ul>\n<li>安装forever，该程序保证nodeJs程序万一停止后能被重复启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">&quot;nodeserver&quot; [readonly] 62L, 1342C</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                export NODE_ENV=production</span><br><span class=\"line\">                start</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                stop</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        echo 0;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用chkconfig加入到开机启动项</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add nodeserver</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops init.d]# ps -ef | grep node</span><br><span class=\"line\">root       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js</span><br><span class=\"line\">root       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/webhook001s.jpg\" alt=\"img\"><br><br><br>一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。</p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>VPS端(CENTOS6):NodeJs、Git</li>\n<li>WINDOWS端：Git</li>\n<li>GitHub</li>\n<li>Travis_Ci</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br><br><img src=\"/img/xjy/webhook001.jpg\" alt=\"img\"></p>\n<h2 id=\"webhook配置\"><a href=\"#webhook配置\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h2><p>github端webhook主要配置的就是推送的地址，下面是我的配置:  <br><br><img src=\"/img/xjy/webhook002.jpg\" alt=\"img\"></p>\n<h2 id=\"vps端代码及配置\"><a href=\"#vps端代码及配置\" class=\"headerlink\" title=\"vps端代码及配置\"></a>vps端代码及配置</h2><ul>\n<li><strong>nodejs代码:</strong>下面是vps端nodejs的代码hexoHook.js。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</span><br><span class=\"line\">    response.end(<span class=\"string\">'Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n'</span>);</span><br><span class=\"line\">\t//开始准备调用脚本</span><br><span class=\"line\">\tvar callfile = require(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\">\tcallfile.execFile(<span class=\"string\">'/opt/gitCode/hexoHook.sh'</span>,null,null,function (err, stdout, stderr) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (stderr) &#123;</span><br><span class=\"line\">       console.log(stderr);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     console.log(stdout);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>sh脚本:</strong>下面是vps端被nodejs调用的sh脚本。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/gitCode/xiajunyi.github.io</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>执行监听程序：</strong>真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops nodeTest]# node hexoHook.js </span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> + 641d46e...b41a89d master     -&gt; origin/master  (forced update)</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">Fetching origin</span><br><span class=\"line\">HEAD is now at b41a89d docs:update articles</span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>当访问<a href=\"http://hexo.xiajunyi.com/pages/p41.html#more\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/pages/p41.html#more</a>看到这篇文章时,说明vps端已经同步到了最新的资源。</p>\n<h2 id=\"补充-开机启动nodejs\"><a href=\"#补充-开机启动nodejs\" class=\"headerlink\" title=\"补充(开机启动nodejs)\"></a>补充(开机启动nodejs)</h2><p>在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：</p>\n<ul>\n<li>安装forever，该程序保证nodeJs程序万一停止后能被重复启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">&quot;nodeserver&quot; [readonly] 62L, 1342C</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                export NODE_ENV=production</span><br><span class=\"line\">                start</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                stop</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        echo 0;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用chkconfig加入到开机启动项</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add nodeserver</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops init.d]# ps -ef | grep node</span><br><span class=\"line\">root       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js</span><br><span class=\"line\">root       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js</span><br></pre></td></tr></table></figure>"},{"title":"Docker初学（三）docker-compose的使用","id":"407","date":"2018-05-31T02:17:36.000Z","toc":true,"_content":"![img](/img/xjy/p43001s.jpg)<br/><br/>\n前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。\n\n<!--more-->\n\n## docker-compose是什么\ndocker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。\n\n## docker-compose运行方式\ndocker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:\n1. dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用\n2. 在docker-compose.yml中定义你的服务\n3. 最后运行docker-compose up命令，将会启动和运行你的整个应用程序\n\n## docker-compose安装\n最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至[原地址](https://github.com/docker/compose/releases)查看最新的curl命令。\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n如果启动时报如下错误,说明curl安装方式下载的包不完整。\n```text\n[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg\n```\n解决步骤：\n1. 进入[原地址](https://github.com/docker/compose/releases)手动下载最新的docker-compose-Linux-x86_64\n2. 找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose\n3. 赋权限\n```shell\nchmod +x /usr/local/bin/docker-compose\n```\n## docker-compose配置\n截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解[最新的配置规则](https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md)，下面是摘出供参考的version3的配置例子:\n\n```text\nversion: \"3\"\nservices:\nredis:\nimage: redis:alpine\nports:\n- \"6379\"\nnetworks:\n- frontend\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\ndb:\nimage: postgres:9.4\nvolumes:\n- db-data:/var/lib/postgresql/data\nnetworks:\n- backend\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nvote:\nimage: dockersamples/examplevotingapp_vote:before\nports:\n- \"5000:80\"\nnetworks:\n- frontend\ndepends_on:\n- redis\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\nrestart_policy:\ncondition: on-failure\n\n\nresult:\nimage: dockersamples/examplevotingapp_result:before\nports:\n- \"5001:80\"\nnetworks:\n- backend\ndepends_on:\n- db\ndeploy:\nreplicas: 1\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\nworker:\nimage: dockersamples/examplevotingapp_worker\nnetworks:\n- frontend\n- backend\ndeploy:\nmode: replicated\nreplicas: 1\nlabels: [APP=VOTING]\nrestart_policy:\ncondition: on-failure\ndelay: 10s\nmax_attempts: 3\nwindow: 120s\nplacement:\nconstraints: [node.role == manager]\n\n\nvisualizer:\nimage: dockersamples/visualizer:stable\nports:\n- \"8080:8080\"\nstop_grace_period: 1m30s\nvolumes:\n- \"/var/run/docker.sock:/var/run/docker.sock\"\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nnetworks:\nfrontend:\nbackend:\n\n\nvolumes:\ndb-data:\n```\n## docker-compose使用\n启动容器：\n```shell\ndocker-compose up -d\n```\n停止容器：\n```shell\ndocker-compose stop\n```\n## *.参考资料 \n[https://github.com/docker/compose](https://github.com/docker/compose)\n\n\n\n\n","source":"_posts/p43.md","raw":"---\ntitle: Docker初学（三）docker-compose的使用\nid: 407\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/31 10:17:36  \ntags: [运维, 编程, docker, linux]\ntoc: true\n---\n![img](/img/xjy/p43001s.jpg)<br/><br/>\n前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。\n\n<!--more-->\n\n## docker-compose是什么\ndocker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。\n\n## docker-compose运行方式\ndocker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:\n1. dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用\n2. 在docker-compose.yml中定义你的服务\n3. 最后运行docker-compose up命令，将会启动和运行你的整个应用程序\n\n## docker-compose安装\n最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至[原地址](https://github.com/docker/compose/releases)查看最新的curl命令。\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n如果启动时报如下错误,说明curl安装方式下载的包不完整。\n```text\n[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg\n```\n解决步骤：\n1. 进入[原地址](https://github.com/docker/compose/releases)手动下载最新的docker-compose-Linux-x86_64\n2. 找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose\n3. 赋权限\n```shell\nchmod +x /usr/local/bin/docker-compose\n```\n## docker-compose配置\n截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解[最新的配置规则](https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md)，下面是摘出供参考的version3的配置例子:\n\n```text\nversion: \"3\"\nservices:\nredis:\nimage: redis:alpine\nports:\n- \"6379\"\nnetworks:\n- frontend\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\ndb:\nimage: postgres:9.4\nvolumes:\n- db-data:/var/lib/postgresql/data\nnetworks:\n- backend\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nvote:\nimage: dockersamples/examplevotingapp_vote:before\nports:\n- \"5000:80\"\nnetworks:\n- frontend\ndepends_on:\n- redis\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\nrestart_policy:\ncondition: on-failure\n\n\nresult:\nimage: dockersamples/examplevotingapp_result:before\nports:\n- \"5001:80\"\nnetworks:\n- backend\ndepends_on:\n- db\ndeploy:\nreplicas: 1\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\nworker:\nimage: dockersamples/examplevotingapp_worker\nnetworks:\n- frontend\n- backend\ndeploy:\nmode: replicated\nreplicas: 1\nlabels: [APP=VOTING]\nrestart_policy:\ncondition: on-failure\ndelay: 10s\nmax_attempts: 3\nwindow: 120s\nplacement:\nconstraints: [node.role == manager]\n\n\nvisualizer:\nimage: dockersamples/visualizer:stable\nports:\n- \"8080:8080\"\nstop_grace_period: 1m30s\nvolumes:\n- \"/var/run/docker.sock:/var/run/docker.sock\"\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nnetworks:\nfrontend:\nbackend:\n\n\nvolumes:\ndb-data:\n```\n## docker-compose使用\n启动容器：\n```shell\ndocker-compose up -d\n```\n停止容器：\n```shell\ndocker-compose stop\n```\n## *.参考资料 \n[https://github.com/docker/compose](https://github.com/docker/compose)\n\n\n\n\n","slug":"p43","published":1,"updated":"2018-05-31T02:32:56.614Z","_id":"cjhtwv14l002pk4vg8ig8co81","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/xjy/p43001s.jpg\" alt=\"img\"><br><br><br>前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。</p>\n<a id=\"more\"></a>\n<h2 id=\"docker-compose是什么\"><a href=\"#docker-compose是什么\" class=\"headerlink\" title=\"docker-compose是什么\"></a>docker-compose是什么</h2><p>docker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。</p>\n<h2 id=\"docker-compose运行方式\"><a href=\"#docker-compose运行方式\" class=\"headerlink\" title=\"docker-compose运行方式\"></a>docker-compose运行方式</h2><p>docker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:</p>\n<ol>\n<li>dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用</li>\n<li>在docker-compose.yml中定义你的服务</li>\n<li>最后运行docker-compose up命令，将会启动和运行你的整个应用程序</li>\n</ol>\n<h2 id=\"docker-compose安装\"><a href=\"#docker-compose安装\" class=\"headerlink\" title=\"docker-compose安装\"></a>docker-compose安装</h2><p>最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>查看最新的curl命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时报如下错误,说明curl安装方式下载的包不完整。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg</span><br></pre></td></tr></table></figure></p>\n<p>解决步骤：</p>\n<ol>\n<li>进入<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>手动下载最新的docker-compose-Linux-x86_64</li>\n<li>找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose</li>\n<li>赋权限<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"docker-compose配置\"><a href=\"#docker-compose配置\" class=\"headerlink\" title=\"docker-compose配置\"></a>docker-compose配置</h2><p>截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解<a href=\"https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md\" target=\"_blank\" rel=\"noopener\">最新的配置规则</a>，下面是摘出供参考的version3的配置例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">redis:</span><br><span class=\"line\">image: redis:alpine</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;6379&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db:</span><br><span class=\"line\">image: postgres:9.4</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- db-data:/var/lib/postgresql/data</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vote:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_vote:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5000:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- redis</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_result:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5001:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- db</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">worker:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_worker</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">mode: replicated</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">labels: [APP=VOTING]</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">max_attempts: 3</span><br><span class=\"line\">window: 120s</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">visualizer:</span><br><span class=\"line\">image: dockersamples/visualizer:stable</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;8080:8080&quot;</span><br><span class=\"line\">stop_grace_period: 1m30s</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">frontend:</span><br><span class=\"line\">backend:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">db-data:</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose使用\"><a href=\"#docker-compose使用\" class=\"headerlink\" title=\"docker-compose使用\"></a>docker-compose使用</h2><p>启动容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>停止容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://github.com/docker/compose\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p43001s.jpg\" alt=\"img\"><br><br><br>前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。</p>","more":"<h2 id=\"docker-compose是什么\"><a href=\"#docker-compose是什么\" class=\"headerlink\" title=\"docker-compose是什么\"></a>docker-compose是什么</h2><p>docker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。</p>\n<h2 id=\"docker-compose运行方式\"><a href=\"#docker-compose运行方式\" class=\"headerlink\" title=\"docker-compose运行方式\"></a>docker-compose运行方式</h2><p>docker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:</p>\n<ol>\n<li>dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用</li>\n<li>在docker-compose.yml中定义你的服务</li>\n<li>最后运行docker-compose up命令，将会启动和运行你的整个应用程序</li>\n</ol>\n<h2 id=\"docker-compose安装\"><a href=\"#docker-compose安装\" class=\"headerlink\" title=\"docker-compose安装\"></a>docker-compose安装</h2><p>最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>查看最新的curl命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时报如下错误,说明curl安装方式下载的包不完整。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg</span><br></pre></td></tr></table></figure></p>\n<p>解决步骤：</p>\n<ol>\n<li>进入<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>手动下载最新的docker-compose-Linux-x86_64</li>\n<li>找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose</li>\n<li>赋权限<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"docker-compose配置\"><a href=\"#docker-compose配置\" class=\"headerlink\" title=\"docker-compose配置\"></a>docker-compose配置</h2><p>截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解<a href=\"https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md\" target=\"_blank\" rel=\"noopener\">最新的配置规则</a>，下面是摘出供参考的version3的配置例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">redis:</span><br><span class=\"line\">image: redis:alpine</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;6379&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db:</span><br><span class=\"line\">image: postgres:9.4</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- db-data:/var/lib/postgresql/data</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vote:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_vote:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5000:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- redis</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_result:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5001:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- db</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">worker:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_worker</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">mode: replicated</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">labels: [APP=VOTING]</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">max_attempts: 3</span><br><span class=\"line\">window: 120s</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">visualizer:</span><br><span class=\"line\">image: dockersamples/visualizer:stable</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;8080:8080&quot;</span><br><span class=\"line\">stop_grace_period: 1m30s</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">frontend:</span><br><span class=\"line\">backend:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">db-data:</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose使用\"><a href=\"#docker-compose使用\" class=\"headerlink\" title=\"docker-compose使用\"></a>docker-compose使用</h2><p>启动容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>停止容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://github.com/docker/compose\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose</a></p>"},{"title":"Nginx配置端口转发遇到no resolver defined错误","id":"409","date":"2018-05-20T05:20:05.000Z","toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。\n\n<!--more-->\n\n## 1.配置nginx转发规则\n这里面用到了nginx内置的参数，如有需要可以[参考这里](https://www.xiajunyi.com/pages/p39.html)\n```text \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n## 2.然后就报错啦 \n错误信息如下：\n```text \n[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com\n```\n\n## 3.错误原因\n网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至[这里](https://blog.csdn.net/mimei123/article/details/65446732)。\n\n## 4.错误修复\n在配置中加入一句**resolver 8.8.8.8**就ok啦：\n``` text  \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    resolver 8.8.8.8;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n\n## *.参考链接 \n+ [https://blog.csdn.net/mimei123/article/details/65446732](https://blog.csdn.net/mimei123/article/details/65446732)","source":"_posts/p38.md","raw":"---\ntitle: Nginx配置端口转发遇到no resolver defined错误\nid: 409\ncategories:\n  - nginx\ndate: 2018/5/20 13:20:05    \ntags: [运维, nginx, 错误]\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。\n\n<!--more-->\n\n## 1.配置nginx转发规则\n这里面用到了nginx内置的参数，如有需要可以[参考这里](https://www.xiajunyi.com/pages/p39.html)\n```text \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n## 2.然后就报错啦 \n错误信息如下：\n```text \n[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com\n```\n\n## 3.错误原因\n网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至[这里](https://blog.csdn.net/mimei123/article/details/65446732)。\n\n## 4.错误修复\n在配置中加入一句**resolver 8.8.8.8**就ok啦：\n``` text  \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    resolver 8.8.8.8;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n\n## *.参考链接 \n+ [https://blog.csdn.net/mimei123/article/details/65446732](https://blog.csdn.net/mimei123/article/details/65446732)","slug":"p38","published":1,"updated":"2018-05-24T07:35:06.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14n002sk4vg16l84lnl","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-配置nginx转发规则\"><a href=\"#1-配置nginx转发规则\" class=\"headerlink\" title=\"1.配置nginx转发规则\"></a>1.配置nginx转发规则</h2><p>这里面用到了nginx内置的参数，如有需要可以<a href=\"https://www.xiajunyi.com/pages/p39.html\">参考这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-然后就报错啦\"><a href=\"#2-然后就报错啦\" class=\"headerlink\" title=\"2.然后就报错啦\"></a>2.然后就报错啦</h2><p>错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-错误原因\"><a href=\"#3-错误原因\" class=\"headerlink\" title=\"3.错误原因\"></a>3.错误原因</h2><p>网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至<a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"4-错误修复\"><a href=\"#4-错误修复\" class=\"headerlink\" title=\"4.错误修复\"></a>4.错误修复</h2><p>在配置中加入一句<strong>resolver 8.8.8.8</strong>就ok啦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    resolver 8.8.8.8;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mimei123/article/details/65446732</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。</p>","more":"<h2 id=\"1-配置nginx转发规则\"><a href=\"#1-配置nginx转发规则\" class=\"headerlink\" title=\"1.配置nginx转发规则\"></a>1.配置nginx转发规则</h2><p>这里面用到了nginx内置的参数，如有需要可以<a href=\"https://www.xiajunyi.com/pages/p39.html\">参考这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-然后就报错啦\"><a href=\"#2-然后就报错啦\" class=\"headerlink\" title=\"2.然后就报错啦\"></a>2.然后就报错啦</h2><p>错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-错误原因\"><a href=\"#3-错误原因\" class=\"headerlink\" title=\"3.错误原因\"></a>3.错误原因</h2><p>网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至<a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"4-错误修复\"><a href=\"#4-错误修复\" class=\"headerlink\" title=\"4.错误修复\"></a>4.错误修复</h2><p>在配置中加入一句<strong>resolver 8.8.8.8</strong>就ok啦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    resolver 8.8.8.8;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mimei123/article/details/65446732</a></li>\n</ul>"},{"title":"Gitlab的第一个Runners配置(shared类型)","id":"412","date":"2018-05-23T09:04:15.000Z","toc":true,"_content":"![img](/img/xjy/p42001s.jpg)<br/><br/>\n在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。\n\n<!--more-->\n\n## 管理员相关操作\n该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。\n\n+ 开启自动部署的功能\n![img](/img/xjy/p42002.jpg)\n\n+ 查看当前shared类型runner的token值\n![img](/img/xjy/p42003.jpg)\n\n## gitlab-runner的安装\n该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。\n\n+ 获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件\n```shell\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n```\n+ 安装gitlab-ci-multi-runner\n```shell\nyum install gitlab-ci-multi-runner\n```\n\n+ 注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token\n\n```shell\n[root@localhost ~]# gitlab-ci-multi-runner register\nRunning in system-mode.                            \n                                                   \nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xiajunyi.com\nPlease enter the gitlab-ci token for this runner:\nnN-V4oyoSjdiuiC_ehpZ\nPlease enter the gitlab-ci description for this runner:\n[localhost.localdomain]: my-runner\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]:    \nRegistering runner... succeeded                     runner=nN-V4oyo\nPlease enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n```\n+ 刷新admin用户的页面，发现runner已经被关联\n\n![img](/img/xjy/p42001.jpg)\n\n## 普通用户的使用\n普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。\n![img](/img/xjy/p42004.jpg)\n","source":"_posts/p42.md","raw":"---\ntitle: Gitlab的第一个Runners配置(shared类型)\nid: 412\ncategories:\n  - linux\ndate: 2018/5/23 17:04:15     \ntags: [运维, gitlab]\ntoc: true\n---\n![img](/img/xjy/p42001s.jpg)<br/><br/>\n在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。\n\n<!--more-->\n\n## 管理员相关操作\n该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。\n\n+ 开启自动部署的功能\n![img](/img/xjy/p42002.jpg)\n\n+ 查看当前shared类型runner的token值\n![img](/img/xjy/p42003.jpg)\n\n## gitlab-runner的安装\n该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。\n\n+ 获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件\n```shell\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n```\n+ 安装gitlab-ci-multi-runner\n```shell\nyum install gitlab-ci-multi-runner\n```\n\n+ 注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token\n\n```shell\n[root@localhost ~]# gitlab-ci-multi-runner register\nRunning in system-mode.                            \n                                                   \nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xiajunyi.com\nPlease enter the gitlab-ci token for this runner:\nnN-V4oyoSjdiuiC_ehpZ\nPlease enter the gitlab-ci description for this runner:\n[localhost.localdomain]: my-runner\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]:    \nRegistering runner... succeeded                     runner=nN-V4oyo\nPlease enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n```\n+ 刷新admin用户的页面，发现runner已经被关联\n\n![img](/img/xjy/p42001.jpg)\n\n## 普通用户的使用\n普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。\n![img](/img/xjy/p42004.jpg)\n","slug":"p42","published":1,"updated":"2018-05-26T08:43:20.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14p002xk4vg2940z3yl","content":"<p><img src=\"/img/xjy/p42001s.jpg\" alt=\"img\"><br><br><br>在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。</p>\n<a id=\"more\"></a>\n<h2 id=\"管理员相关操作\"><a href=\"#管理员相关操作\" class=\"headerlink\" title=\"管理员相关操作\"></a>管理员相关操作</h2><p>该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。</p>\n<ul>\n<li><p>开启自动部署的功能<br><img src=\"/img/xjy/p42002.jpg\" alt=\"img\"></p>\n</li>\n<li><p>查看当前shared类型runner的token值<br><img src=\"/img/xjy/p42003.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"gitlab-runner的安装\"><a href=\"#gitlab-runner的安装\" class=\"headerlink\" title=\"gitlab-runner的安装\"></a>gitlab-runner的安装</h2><p>该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。</p>\n<ul>\n<li><p>获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装gitlab-ci-multi-runner</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ci-multi-runner register</span><br><span class=\"line\">Running in system-mode.                            </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class=\"line\">http://gitlab.xiajunyi.com</span><br><span class=\"line\">Please enter the gitlab-ci token for this runner:</span><br><span class=\"line\">nN-V4oyoSjdiuiC_ehpZ</span><br><span class=\"line\">Please enter the gitlab-ci description for this runner:</span><br><span class=\"line\">[localhost.localdomain]: my-runner</span><br><span class=\"line\">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class=\"line\">my-tag</span><br><span class=\"line\">Whether to run untagged builds [true/false]:</span><br><span class=\"line\">[false]: true</span><br><span class=\"line\">Whether to lock Runner to current project [true/false]:</span><br><span class=\"line\">[false]:    </span><br><span class=\"line\">Registering runner... succeeded                     runner=nN-V4oyo</span><br><span class=\"line\">Please enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:</span><br><span class=\"line\">shell</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>\n<ul>\n<li>刷新admin用户的页面，发现runner已经被关联</li>\n</ul>\n<p><img src=\"/img/xjy/p42001.jpg\" alt=\"img\"></p>\n<h2 id=\"普通用户的使用\"><a href=\"#普通用户的使用\" class=\"headerlink\" title=\"普通用户的使用\"></a>普通用户的使用</h2><p>普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。<br><img src=\"/img/xjy/p42004.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p42001s.jpg\" alt=\"img\"><br><br><br>在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。</p>","more":"<h2 id=\"管理员相关操作\"><a href=\"#管理员相关操作\" class=\"headerlink\" title=\"管理员相关操作\"></a>管理员相关操作</h2><p>该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。</p>\n<ul>\n<li><p>开启自动部署的功能<br><img src=\"/img/xjy/p42002.jpg\" alt=\"img\"></p>\n</li>\n<li><p>查看当前shared类型runner的token值<br><img src=\"/img/xjy/p42003.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"gitlab-runner的安装\"><a href=\"#gitlab-runner的安装\" class=\"headerlink\" title=\"gitlab-runner的安装\"></a>gitlab-runner的安装</h2><p>该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。</p>\n<ul>\n<li><p>获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装gitlab-ci-multi-runner</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ci-multi-runner register</span><br><span class=\"line\">Running in system-mode.                            </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class=\"line\">http://gitlab.xiajunyi.com</span><br><span class=\"line\">Please enter the gitlab-ci token for this runner:</span><br><span class=\"line\">nN-V4oyoSjdiuiC_ehpZ</span><br><span class=\"line\">Please enter the gitlab-ci description for this runner:</span><br><span class=\"line\">[localhost.localdomain]: my-runner</span><br><span class=\"line\">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class=\"line\">my-tag</span><br><span class=\"line\">Whether to run untagged builds [true/false]:</span><br><span class=\"line\">[false]: true</span><br><span class=\"line\">Whether to lock Runner to current project [true/false]:</span><br><span class=\"line\">[false]:    </span><br><span class=\"line\">Registering runner... succeeded                     runner=nN-V4oyo</span><br><span class=\"line\">Please enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:</span><br><span class=\"line\">shell</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>\n<ul>\n<li>刷新admin用户的页面，发现runner已经被关联</li>\n</ul>\n<p><img src=\"/img/xjy/p42001.jpg\" alt=\"img\"></p>\n<h2 id=\"普通用户的使用\"><a href=\"#普通用户的使用\" class=\"headerlink\" title=\"普通用户的使用\"></a>普通用户的使用</h2><p>普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。<br><img src=\"/img/xjy/p42004.jpg\" alt=\"img\"></p>"},{"title":"vps+github上安装hexo next个人博客网站","id":"463","date":"2018-03-18T07:41:42.000Z","_content":"\n本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。\n\n## 环境\n\n+ 安装centos系统的搬瓦工VPS\n\n+ 在github.com中登录的账号\n\n+ 软件：nodeJs、git、nginx、hexo \n\n<!--more-->\n\n## 步骤\n\n### 1.安装nodejs\n我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。\n``` shell\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n```\n\n### 2.v安装git和nginx\n这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。\n``` shell \nyum -y update yum install -y git nginx\n```\n\n### 3.安装hexo\n具体命令如下：\n``` shell \n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n```\n\n### 4.生成ssh秘钥\nvps上生成ssh秘钥，后面会在github上使用\n``` shell\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n```\n\n### 5.新建远程github项目\n\n+ 在[github.com](http://github.com)登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）\n\n+ 将第4步生成的公钥复制并配置到你的github中，[配置地址](https://github.com/settings/ssh) (界面里选择Add An SSH Key进入)\n\n+ 将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：git@github.com:账户名/账户名.github.io.git）\n\n### 6.配置hexo\n\n``` text \n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n```\n\n### 7.配置git\n进入配置命令行，输入下面命令：\n```shell \n#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n```\n\n### 8.配置nginx\n找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:\n``` text \n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}\n```\n\n### 9.编译hexo资源\n上面一切就绪，可以编译生成网站文件并上传github了\n``` shell \n#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d\n```\n\n### 10.通过github结尾的网址访问\n账户名.github.io，例如我的[https://xiajunyi.github.io/](https://xiajunyi.github.io/)，第一次进入后的界面还是很清爽的。\n\n![](/img/xjy/hexoSimple1.jpg)\n\n### 11.自定义域名访问\n当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，[http://hexo.xiajunyi.com/](http://hexo.xiajunyi.com/)，别忘了启动nginx哦！\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n### 12.后续安排\n下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。\n\n## 参考链接\n+ [参考链接1](https://www.jianshu.com/p/0823e387c019)\n\n+ [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n\n+ [参考链接3](https://segmentfault.com/a/1190000010680022)","source":"_posts/p5.md","raw":"---\ntitle: vps+github上安装hexo next个人博客网站\nid: 463\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-03-18 15:41:42\ntags: [建站, hexo, github, 博客]\n---\n\n本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。\n\n## 环境\n\n+ 安装centos系统的搬瓦工VPS\n\n+ 在github.com中登录的账号\n\n+ 软件：nodeJs、git、nginx、hexo \n\n<!--more-->\n\n## 步骤\n\n### 1.安装nodejs\n我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。\n``` shell\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n```\n\n### 2.v安装git和nginx\n这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。\n``` shell \nyum -y update yum install -y git nginx\n```\n\n### 3.安装hexo\n具体命令如下：\n``` shell \n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n```\n\n### 4.生成ssh秘钥\nvps上生成ssh秘钥，后面会在github上使用\n``` shell\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n```\n\n### 5.新建远程github项目\n\n+ 在[github.com](http://github.com)登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）\n\n+ 将第4步生成的公钥复制并配置到你的github中，[配置地址](https://github.com/settings/ssh) (界面里选择Add An SSH Key进入)\n\n+ 将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：git@github.com:账户名/账户名.github.io.git）\n\n### 6.配置hexo\n\n``` text \n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n```\n\n### 7.配置git\n进入配置命令行，输入下面命令：\n```shell \n#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n```\n\n### 8.配置nginx\n找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:\n``` text \n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}\n```\n\n### 9.编译hexo资源\n上面一切就绪，可以编译生成网站文件并上传github了\n``` shell \n#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d\n```\n\n### 10.通过github结尾的网址访问\n账户名.github.io，例如我的[https://xiajunyi.github.io/](https://xiajunyi.github.io/)，第一次进入后的界面还是很清爽的。\n\n![](/img/xjy/hexoSimple1.jpg)\n\n### 11.自定义域名访问\n当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，[http://hexo.xiajunyi.com/](http://hexo.xiajunyi.com/)，别忘了启动nginx哦！\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n### 12.后续安排\n下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。\n\n## 参考链接\n+ [参考链接1](https://www.jianshu.com/p/0823e387c019)\n\n+ [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n\n+ [参考链接3](https://segmentfault.com/a/1190000010680022)","slug":"p5","published":1,"updated":"2018-05-24T06:40:48.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14r002yk4vg9qjwhid1","content":"<p>本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>安装centos系统的搬瓦工VPS</p>\n</li>\n<li><p>在github.com中登录的账号</p>\n</li>\n<li><p>软件：nodeJs、git、nginx、hexo </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-安装nodejs\"><a href=\"#1-安装nodejs\" class=\"headerlink\" title=\"1.安装nodejs\"></a>1.安装nodejs</h3><p>我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取文件并解压到指定目录</span></span><br><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">tar -xvf  node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.0.0-linux-x64 /usr/local/node</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加/etc/profile配置-加入如下两句</span></span><br><span class=\"line\">export NODE_HOME=/usr/local/node</span><br><span class=\"line\">export PATH=$NODE_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使设置生效</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">验证版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-v安装git和nginx\"><a href=\"#2-v安装git和nginx\" class=\"headerlink\" title=\"2.v安装git和nginx\"></a>2.v安装git和nginx</h3><p>这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update yum install -y git nginx</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><p>具体命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建用于存放hexo博客站点的目录，并赋予权限</span></span><br><span class=\"line\">mkdir -p /data/www/hexo</span><br><span class=\"line\">chown -R $USER:$USER /data/www/hexo</span><br><span class=\"line\">chmod -R 755 /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装hexo</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">初始化hexo</span></span><br><span class=\"line\">hexo init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装插件</span></span><br><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可先查看默认配置文件（待github项目建成后方可配置）</span></span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-生成ssh秘钥\"><a href=\"#4-生成ssh秘钥\" class=\"headerlink\" title=\"4.生成ssh秘钥\"></a>4.生成ssh秘钥</h3><p>vps上生成ssh秘钥，后面会在github上使用<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意-C后面跟的是你在github上注册时的邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa -C example@163.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后会让你输入和确认密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看生成好的公钥</span></span><br><span class=\"line\">less ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-新建远程github项目\"><a href=\"#5-新建远程github项目\" class=\"headerlink\" title=\"5.新建远程github项目\"></a>5.新建远程github项目</h3><ul>\n<li><p>在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）</p>\n</li>\n<li><p>将第4步生成的公钥复制并配置到你的github中，<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">配置地址</a> (界面里选择Add An SSH Key进入)</p>\n</li>\n<li><p>将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:账户名/账户名.github.io.git）</span></p>\n</li>\n</ul>\n<h3 id=\"6-配置hexo\"><a href=\"#6-配置hexo\" class=\"headerlink\" title=\"6.配置hexo\"></a>6.配置hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#还记得第3步最后的这句吗</span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br><span class=\"line\">#修改末尾的deploy部分，改成下面这个样子，注意替换账户名</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:账户名/账户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-配置git\"><a href=\"#7-配置git\" class=\"headerlink\" title=\"7.配置git\"></a>7.配置git</h3><p>进入配置命令行，输入下面命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git用户名，即为github上的用户名</span></span><br><span class=\"line\">git config --global user.name \"github用户名\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git邮箱，即为github上的邮箱</span></span><br><span class=\"line\">git config --global user.email \"github邮箱\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果想测试连接是否正常，可执行下面这句</span></span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">待输入密码后看到successful字段，即表示连接配置正常</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-配置nginx\"><a href=\"#8-配置nginx\" class=\"headerlink\" title=\"8.配置nginx\"></a>8.配置nginx</h3><p>找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将转发给hexo，特别注意hexo的网页文件在public目录中</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">      listen       80 ;</span><br><span class=\"line\">      server_name  www.example.com; # 填写个人域名</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">             root /data/www/hexo/public;</span><br><span class=\"line\">             index  index.html index.htm;</span><br><span class=\"line\">       &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-编译hexo资源\"><a href=\"#9-编译hexo资源\" class=\"headerlink\" title=\"9.编译hexo资源\"></a>9.编译hexo资源</h3><p>上面一切就绪，可以编译生成网站文件并上传github了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开网站目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译hexo</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传并更新到github上</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-通过github结尾的网址访问\"><a href=\"#10-通过github结尾的网址访问\" class=\"headerlink\" title=\"10.通过github结尾的网址访问\"></a>10.通过github结尾的网址访问</h3><p>账户名.github.io，例如我的<a href=\"https://xiajunyi.github.io/\" target=\"_blank\" rel=\"noopener\">https://xiajunyi.github.io/</a>，第一次进入后的界面还是很清爽的。</p>\n<p><img src=\"/img/xjy/hexoSimple1.jpg\" alt=\"\"></p>\n<h3 id=\"11-自定义域名访问\"><a href=\"#11-自定义域名访问\" class=\"headerlink\" title=\"11.自定义域名访问\"></a>11.自定义域名访问</h3><p>当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，<a href=\"http://hexo.xiajunyi.com/\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/</a>，别忘了启动nginx哦！</p>\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n<h3 id=\"12-后续安排\"><a href=\"#12-后续安排\" class=\"headerlink\" title=\"12.后续安排\"></a>12.后续安排</h3><p>下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><p><a href=\"https://www.jianshu.com/p/0823e387c019\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/31eb5c754c01\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000010680022\" target=\"_blank\" rel=\"noopener\">参考链接3</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>安装centos系统的搬瓦工VPS</p>\n</li>\n<li><p>在github.com中登录的账号</p>\n</li>\n<li><p>软件：nodeJs、git、nginx、hexo </p>\n</li>\n</ul>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-安装nodejs\"><a href=\"#1-安装nodejs\" class=\"headerlink\" title=\"1.安装nodejs\"></a>1.安装nodejs</h3><p>我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取文件并解压到指定目录</span></span><br><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">tar -xvf  node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.0.0-linux-x64 /usr/local/node</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加/etc/profile配置-加入如下两句</span></span><br><span class=\"line\">export NODE_HOME=/usr/local/node</span><br><span class=\"line\">export PATH=$NODE_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使设置生效</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">验证版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-v安装git和nginx\"><a href=\"#2-v安装git和nginx\" class=\"headerlink\" title=\"2.v安装git和nginx\"></a>2.v安装git和nginx</h3><p>这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update yum install -y git nginx</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><p>具体命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建用于存放hexo博客站点的目录，并赋予权限</span></span><br><span class=\"line\">mkdir -p /data/www/hexo</span><br><span class=\"line\">chown -R $USER:$USER /data/www/hexo</span><br><span class=\"line\">chmod -R 755 /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装hexo</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">初始化hexo</span></span><br><span class=\"line\">hexo init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装插件</span></span><br><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可先查看默认配置文件（待github项目建成后方可配置）</span></span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-生成ssh秘钥\"><a href=\"#4-生成ssh秘钥\" class=\"headerlink\" title=\"4.生成ssh秘钥\"></a>4.生成ssh秘钥</h3><p>vps上生成ssh秘钥，后面会在github上使用<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意-C后面跟的是你在github上注册时的邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa -C example@163.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后会让你输入和确认密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看生成好的公钥</span></span><br><span class=\"line\">less ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-新建远程github项目\"><a href=\"#5-新建远程github项目\" class=\"headerlink\" title=\"5.新建远程github项目\"></a>5.新建远程github项目</h3><ul>\n<li><p>在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）</p>\n</li>\n<li><p>将第4步生成的公钥复制并配置到你的github中，<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">配置地址</a> (界面里选择Add An SSH Key进入)</p>\n</li>\n<li><p>将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:账户名/账户名.github.io.git）</span></p>\n</li>\n</ul>\n<h3 id=\"6-配置hexo\"><a href=\"#6-配置hexo\" class=\"headerlink\" title=\"6.配置hexo\"></a>6.配置hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#还记得第3步最后的这句吗</span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br><span class=\"line\">#修改末尾的deploy部分，改成下面这个样子，注意替换账户名</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:账户名/账户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-配置git\"><a href=\"#7-配置git\" class=\"headerlink\" title=\"7.配置git\"></a>7.配置git</h3><p>进入配置命令行，输入下面命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git用户名，即为github上的用户名</span></span><br><span class=\"line\">git config --global user.name \"github用户名\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git邮箱，即为github上的邮箱</span></span><br><span class=\"line\">git config --global user.email \"github邮箱\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果想测试连接是否正常，可执行下面这句</span></span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">待输入密码后看到successful字段，即表示连接配置正常</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-配置nginx\"><a href=\"#8-配置nginx\" class=\"headerlink\" title=\"8.配置nginx\"></a>8.配置nginx</h3><p>找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将转发给hexo，特别注意hexo的网页文件在public目录中</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">      listen       80 ;</span><br><span class=\"line\">      server_name  www.example.com; # 填写个人域名</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">             root /data/www/hexo/public;</span><br><span class=\"line\">             index  index.html index.htm;</span><br><span class=\"line\">       &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-编译hexo资源\"><a href=\"#9-编译hexo资源\" class=\"headerlink\" title=\"9.编译hexo资源\"></a>9.编译hexo资源</h3><p>上面一切就绪，可以编译生成网站文件并上传github了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开网站目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译hexo</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传并更新到github上</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-通过github结尾的网址访问\"><a href=\"#10-通过github结尾的网址访问\" class=\"headerlink\" title=\"10.通过github结尾的网址访问\"></a>10.通过github结尾的网址访问</h3><p>账户名.github.io，例如我的<a href=\"https://xiajunyi.github.io/\" target=\"_blank\" rel=\"noopener\">https://xiajunyi.github.io/</a>，第一次进入后的界面还是很清爽的。</p>\n<p><img src=\"/img/xjy/hexoSimple1.jpg\" alt=\"\"></p>\n<h3 id=\"11-自定义域名访问\"><a href=\"#11-自定义域名访问\" class=\"headerlink\" title=\"11.自定义域名访问\"></a>11.自定义域名访问</h3><p>当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，<a href=\"http://hexo.xiajunyi.com/\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/</a>，别忘了启动nginx哦！</p>\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n<h3 id=\"12-后续安排\"><a href=\"#12-后续安排\" class=\"headerlink\" title=\"12.后续安排\"></a>12.后续安排</h3><p>下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><p><a href=\"https://www.jianshu.com/p/0823e387c019\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/31eb5c754c01\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000010680022\" target=\"_blank\" rel=\"noopener\">参考链接3</a></p>\n</li>\n</ul>"},{"title":"wordpress网站由apache改为nginx发布","id":"345","date":"2018-01-27T12:17:40.000Z","_content":"\n我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：\n<!--more-->\n\n\n1.停掉httpd当前服务，禁用重启\n``` shell\n#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off\n```\n\n2.安装nginx,这里以centos系统为例\n``` shell \nyum -y install nginx\n```\n\n3.安装php-fpm\nPHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：\n``` shell \nyum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on\n```\n\n4.编辑nginx配置文件\n例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:\n``` text \n#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }\n```\n\n\n5.新建日志目录并赋权限\n``` shell \nmkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa\n```\n\n6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误\n``` text \nYour PHP installation appears to be missing the MySQL extension which is required by WordPress.\n```\n\n7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：\n``` shell \nyum update\nyum install php-mysql\n```\n\n8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！\n``` shell \nservice nginx start\n```\n\n9.具体能提升多少，就看后续的访问的效果了","source":"_posts/p7.md","raw":"---\ntitle: wordpress网站由apache改为nginx发布\nid: 345\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-01-27 20:17:40\ntags: [建站, wordpress, apache, nginx]\n---\n\n我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：\n<!--more-->\n\n\n1.停掉httpd当前服务，禁用重启\n``` shell\n#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off\n```\n\n2.安装nginx,这里以centos系统为例\n``` shell \nyum -y install nginx\n```\n\n3.安装php-fpm\nPHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：\n``` shell \nyum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on\n```\n\n4.编辑nginx配置文件\n例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:\n``` text \n#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }\n```\n\n\n5.新建日志目录并赋权限\n``` shell \nmkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa\n```\n\n6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误\n``` text \nYour PHP installation appears to be missing the MySQL extension which is required by WordPress.\n```\n\n7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：\n``` shell \nyum update\nyum install php-mysql\n```\n\n8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！\n``` shell \nservice nginx start\n```\n\n9.具体能提升多少，就看后续的访问的效果了","slug":"p7","published":1,"updated":"2018-05-24T06:40:29.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14t0031k4vgmatty3gn","content":"<p>我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：<br><a id=\"more\"></a></p>\n<p>1.停掉httpd当前服务，禁用重启<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停掉httpd</span></span><br><span class=\"line\">service httpd stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机重启后，apache服务不再启动p       </span></span><br><span class=\"line\">chkconfig httpd off</span><br></pre></td></tr></table></figure></p>\n<p>2.安装nginx,这里以centos系统为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure></p>\n<p>3.安装php-fpm<br>PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php-fpm</span><br><span class=\"line\">/etc/init.d/php-fpm start</span><br><span class=\"line\">chkconfig php-fpm on</span><br></pre></td></tr></table></figure></p>\n<p>4.编辑nginx配置文件<br>例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转发给wordpress网站</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; </span><br><span class=\"line\">    server_name www.xiajunyi.com;        </span><br><span class=\"line\">    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info</span><br><span class=\"line\">    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些</span><br><span class=\"line\">             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)</span><br><span class=\"line\">    location = /404.html &#123;            #这是一个典型的location</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)</span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;</span><br><span class=\"line\">             if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class=\"line\">                     return 404;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）</span><br><span class=\"line\">             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">             fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">             fastcgi_index index.php;</span><br><span class=\"line\">             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">             deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.新建日志目录并赋权限<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/log/nginx/aaa</span><br><span class=\"line\">chown -R nginx:adm  /var/log/nginx/aaa</span><br></pre></td></tr></table></figure></p>\n<p>6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</span><br></pre></td></tr></table></figure></p>\n<p>7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install php-mysql</span><br></pre></td></tr></table></figure></p>\n<p>8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>9.具体能提升多少，就看后续的访问的效果了</p>\n","site":{"data":{}},"excerpt":"<p>我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：<br>","more":"</p>\n<p>1.停掉httpd当前服务，禁用重启<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停掉httpd</span></span><br><span class=\"line\">service httpd stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机重启后，apache服务不再启动p       </span></span><br><span class=\"line\">chkconfig httpd off</span><br></pre></td></tr></table></figure></p>\n<p>2.安装nginx,这里以centos系统为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure></p>\n<p>3.安装php-fpm<br>PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php-fpm</span><br><span class=\"line\">/etc/init.d/php-fpm start</span><br><span class=\"line\">chkconfig php-fpm on</span><br></pre></td></tr></table></figure></p>\n<p>4.编辑nginx配置文件<br>例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转发给wordpress网站</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; </span><br><span class=\"line\">    server_name www.xiajunyi.com;        </span><br><span class=\"line\">    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info</span><br><span class=\"line\">    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些</span><br><span class=\"line\">             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)</span><br><span class=\"line\">    location = /404.html &#123;            #这是一个典型的location</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)</span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;</span><br><span class=\"line\">             if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class=\"line\">                     return 404;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）</span><br><span class=\"line\">             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">             fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">             fastcgi_index index.php;</span><br><span class=\"line\">             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">             deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.新建日志目录并赋权限<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/log/nginx/aaa</span><br><span class=\"line\">chown -R nginx:adm  /var/log/nginx/aaa</span><br></pre></td></tr></table></figure></p>\n<p>6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</span><br></pre></td></tr></table></figure></p>\n<p>7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install php-mysql</span><br></pre></td></tr></table></figure></p>\n<p>8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>9.具体能提升多少，就看后续的访问的效果了</p>"},{"title":"Git的诞生","id":"461","date":"2018-03-11T04:10:56.000Z","_content":"\n转载自：[廖雪峰老师的文章](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000)\n\n很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\n\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ \n<!--more-->\n\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\n\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\n\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\n\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n\n** 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。**","source":"_posts/p9.md","raw":"---\ntitle: Git的诞生\ntags:\n  - csv\n  - git\n  - 故事\n  - 闲谈\nid: 461\ncategories:\n  - 未分类\ndate: 2018-03-11 12:10:56\n---\n\n转载自：[廖雪峰老师的文章](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000)\n\n很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\n\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ \n<!--more-->\n\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\n\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\n\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\n\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n\n** 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。**","slug":"p9","published":1,"updated":"2018-05-24T06:42:00.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14v0032k4vg28a4rm8i","content":"<p>转载自：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的文章</a></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？<br><a id=\"more\"></a></p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p><strong> 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</strong></p>\n","site":{"data":{}},"excerpt":"<p>转载自：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的文章</a></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？<br>","more":"</p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p><strong> 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</strong></p>"},{"title":"替换hexo的markdown渲染引擎","id":"379","date":"2018-04-19T10:22:21.000Z","toc":true,"_content":"\n## 介绍\n\n由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： \n\n<!--more-->\n\n+ Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) \n+ hexo-renderer-markdown-it，支持 CommonMark 标准\n+ hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）\n\n## 更换方法\n \n把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it\n\n","source":"_posts/p32.md","raw":"---\ntitle: 替换hexo的markdown渲染引擎\nid: 379\ncategories:\n  - markdown\ndate: 2018/4/19 18:22:21  \ntags: [markdown, 建站]\ntoc: true\n---\n\n## 介绍\n\n由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： \n\n<!--more-->\n\n+ Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) \n+ hexo-renderer-markdown-it，支持 CommonMark 标准\n+ hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）\n\n## 更换方法\n \n把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it\n\n","slug":"p32","published":1,"updated":"2018-05-24T06:47:15.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14x0036k4vg0qtmqs7p","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： </p>\n<a id=\"more\"></a>\n<ul>\n<li>Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) </li>\n<li>hexo-renderer-markdown-it，支持 CommonMark 标准</li>\n<li>hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）</li>\n</ul>\n<h2 id=\"更换方法\"><a href=\"#更换方法\" class=\"headerlink\" title=\"更换方法\"></a>更换方法</h2><p>把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>由于不同的书写要求，需要展现在页面上的效果可能不一样，针对特殊要求，可尝试更换你的hexo的渲染引擎，下面是了解到的三种： </p>","more":"<ul>\n<li>Hexo 默认选用是 Markdown 渲染引擎是 marked (hexo-renderer-marked) </li>\n<li>hexo-renderer-markdown-it，支持 CommonMark 标准</li>\n<li>hexo-renderer-pandoc， 支持Pandoc（标记语言转换器）</li>\n</ul>\n<h2 id=\"更换方法\"><a href=\"#更换方法\" class=\"headerlink\" title=\"更换方法\"></a>更换方法</h2><p>把 hexo 里 package.json 的 Markdown 渲染器依赖换掉就行了，比如 hexo-renderer-marked 换成 hexo-renderer-markdown-it</p>"},{"title":"wordpress网站迁移：更换域名、开启SSL支持（解决https无法访问wordpress后台的问题）","id":"363","date":"2018-02-03T11:26:55.000Z","_content":"\n今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！\n\n<!--more-->\n\n\n1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）\n\n推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。\n\n备份设置可以参考一下[这篇文章](https://www.sabia.cc/shi-yong-backwpup-backup.html)，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。\n\n2.百度BCH端解压及导入数据\n\n(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。\n\n(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。\n\n3.替换域名\n\n在上面的数据导入完成后，执行如下sql语句\n\n``` sql \nUPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。\n```\n\n4.申请SSL证书 \n\n如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以[参考链接](https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html),申请好后可将证书文件下载下来。\n\n5.百度BCH上导入证书，并开启 HTTPS\n\n证书导入可[参考链接](https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6),导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。\n\n![](/img/xjy/bch001.jpg) \n\n6.解决https无法访问wordpress后台的问题 \n\n解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样\"Really Simple SSL\"(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。\n\n插件具体设置可[参考链接](https://www.nixonli.com/wordpress/22541.html) ","source":"_posts/p8.md","raw":"---\ntitle: wordpress网站迁移：更换域名、开启SSL支持（解决https无法访问wordpress后台的问题）\nid: 363\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-02-03 19:26:55\ntags: [建站, wordpress, 域名, ssl, https]\n---\n\n今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！\n\n<!--more-->\n\n\n1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）\n\n推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。\n\n备份设置可以参考一下[这篇文章](https://www.sabia.cc/shi-yong-backwpup-backup.html)，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。\n\n2.百度BCH端解压及导入数据\n\n(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。\n\n(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。\n\n3.替换域名\n\n在上面的数据导入完成后，执行如下sql语句\n\n``` sql \nUPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。\n```\n\n4.申请SSL证书 \n\n如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以[参考链接](https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html),申请好后可将证书文件下载下来。\n\n5.百度BCH上导入证书，并开启 HTTPS\n\n证书导入可[参考链接](https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6),导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。\n\n![](/img/xjy/bch001.jpg) \n\n6.解决https无法访问wordpress后台的问题 \n\n解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样\"Really Simple SSL\"(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。\n\n插件具体设置可[参考链接](https://www.nixonli.com/wordpress/22541.html) ","slug":"p8","published":1,"updated":"2018-05-24T06:41:20.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv14z0037k4vguup2q81b","content":"<p>今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！</p>\n<a id=\"more\"></a>\n<p>1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）</p>\n<p>推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。</p>\n<p>备份设置可以参考一下<a href=\"https://www.sabia.cc/shi-yong-backwpup-backup.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。</p>\n<p>2.百度BCH端解压及导入数据</p>\n<p>(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。</p>\n<p>(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</p>\n<p>3.替换域名</p>\n<p>在上面的数据导入完成后，执行如下sql语句</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</span><br></pre></td></tr></table></figure>\n<p>4.申请SSL证书 </p>\n<p>如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以<a href=\"https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>,申请好后可将证书文件下载下来。</p>\n<p>5.百度BCH上导入证书，并开启 HTTPS</p>\n<p>证书导入可<a href=\"https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6\" target=\"_blank\" rel=\"noopener\">参考链接</a>,导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。</p>\n<p><img src=\"/img/xjy/bch001.jpg\" alt=\"\"> </p>\n<p>6.解决https无法访问wordpress后台的问题 </p>\n<p>解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样”Really Simple SSL”(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。</p>\n<p>插件具体设置可<a href=\"https://www.nixonli.com/wordpress/22541.html\" target=\"_blank\" rel=\"noopener\">参考链接</a> </p>\n","site":{"data":{}},"excerpt":"<p>今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！</p>","more":"<p>1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）</p>\n<p>推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。</p>\n<p>备份设置可以参考一下<a href=\"https://www.sabia.cc/shi-yong-backwpup-backup.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。</p>\n<p>2.百度BCH端解压及导入数据</p>\n<p>(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。</p>\n<p>(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</p>\n<p>3.替换域名</p>\n<p>在上面的数据导入完成后，执行如下sql语句</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</span><br></pre></td></tr></table></figure>\n<p>4.申请SSL证书 </p>\n<p>如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以<a href=\"https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>,申请好后可将证书文件下载下来。</p>\n<p>5.百度BCH上导入证书，并开启 HTTPS</p>\n<p>证书导入可<a href=\"https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6\" target=\"_blank\" rel=\"noopener\">参考链接</a>,导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。</p>\n<p><img src=\"/img/xjy/bch001.jpg\" alt=\"\"> </p>\n<p>6.解决https无法访问wordpress后台的问题 </p>\n<p>解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样”Really Simple SSL”(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。</p>\n<p>插件具体设置可<a href=\"https://www.nixonli.com/wordpress/22541.html\" target=\"_blank\" rel=\"noopener\">参考链接</a> </p>"},{"title":"wordpress文章迁移到hexo next及主题美化","id":"474","date":"2018-03-18T09:10:01.000Z","_content":"在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：\n<!--more-->\n1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件\n<!--more-->\n2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ \n\n3.安装迁移插件\n```shell \n#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save\n```\n4.执行迁移\n``` shell \n#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名 \n```\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n6.好了，可以访问网站中文章的变化啦！\n\n![](/img/xjy/hexoSimple2.jpg)\n\n7.后续对主题的跟换和具体网站的美化，可参考[http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n\n8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n下面以改成yilia主题为例\n``` shell\n#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d\n```\n\n9.可以看下效果变化啦，欢迎访问[http://www.xiajunyi.com](http://www.xiajunyi.com)\n\n![](/img/xjy/hexoSimple3.jpg)","source":"_posts/p6.md","raw":"---\ntitle: wordpress文章迁移到hexo next及主题美化\nid: 474\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-03-18 17:10:01\ntags: [建站, wordpress, hexo, 文章迁移]\n---\n在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：\n<!--more-->\n1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件\n<!--more-->\n2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ \n\n3.安装迁移插件\n```shell \n#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save\n```\n4.执行迁移\n``` shell \n#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名 \n```\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n6.好了，可以访问网站中文章的变化啦！\n\n![](/img/xjy/hexoSimple2.jpg)\n\n7.后续对主题的跟换和具体网站的美化，可参考[http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n\n8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n下面以改成yilia主题为例\n``` shell\n#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d\n```\n\n9.可以看下效果变化啦，欢迎访问[http://www.xiajunyi.com](http://www.xiajunyi.com)\n\n![](/img/xjy/hexoSimple3.jpg)","slug":"p6","published":1,"updated":"2018-05-24T06:40:39.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv17z00b5k4vgdvl4779z","content":"<p>在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：<br><a id=\"more\"></a><br>1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件<br><!--more--><br>2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ </p>\n<p>3.安装迁移插件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站的根目录</span></span><br><span class=\"line\">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure></p>\n<p>4.执行迁移<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站根目录</span></span><br><span class=\"line\">hexo migrate wordpress xml文件名</span><br></pre></td></tr></table></figure></p>\n<p>5.重新编译网站文件并上传github</p>\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n<p>6.好了，可以访问网站中文章的变化啦！</p>\n<p><img src=\"/img/xjy/hexoSimple2.jpg\" alt=\"\"></p>\n<p>7.后续对主题的跟换和具体网站的美化，可参考<a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"noopener\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p>\n<p>8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n<p>下面以改成yilia主题为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入网站的根目录</span></span><br><span class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改根目录下的_config.yml，找到theme字段</span></span><br><span class=\"line\">theme: yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新生成public目录里的资源文件</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这时候可以通过本地的4000端口访问了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果让通过域名访问的资源生效</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传到github</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>9.可以看下效果变化啦，欢迎访问<a href=\"http://www.xiajunyi.com\">http://www.xiajunyi.com</a></p>\n<p><img src=\"/img/xjy/hexoSimple3.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：<br>","more":"<br>1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件<br><!--more--><br>2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ </p>\n<p>3.安装迁移插件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站的根目录</span></span><br><span class=\"line\">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure></p>\n<p>4.执行迁移<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站根目录</span></span><br><span class=\"line\">hexo migrate wordpress xml文件名</span><br></pre></td></tr></table></figure></p>\n<p>5.重新编译网站文件并上传github</p>\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n<p>6.好了，可以访问网站中文章的变化啦！</p>\n<p><img src=\"/img/xjy/hexoSimple2.jpg\" alt=\"\"></p>\n<p>7.后续对主题的跟换和具体网站的美化，可参考<a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"noopener\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p>\n<p>8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n<p>下面以改成yilia主题为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入网站的根目录</span></span><br><span class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改根目录下的_config.yml，找到theme字段</span></span><br><span class=\"line\">theme: yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新生成public目录里的资源文件</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这时候可以通过本地的4000端口访问了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果让通过域名访问的资源生效</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传到github</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>9.可以看下效果变化啦，欢迎访问<a href=\"http://www.xiajunyi.com\">http://www.xiajunyi.com</a></p>\n<p><img src=\"/img/xjy/hexoSimple3.jpg\" alt=\"\"></p>"},{"title":"标签","date":"2018-03-18T12:00:14.000Z","type":"tags","_content":"","source":"_drafts/tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-18 20:00:14\ntype: \"tags\"\n---\n","slug":"tags/index","published":0,"updated":"2018-03-20T00:42:22.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv1ia00bdk4vgz2y4a6zw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2018-03-18T11:57:37.000Z","type":"categories","_content":"","source":"_drafts/categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-03-18 19:57:37\ntype: \"categories\"\n---\n","slug":"categories/index","published":0,"updated":"2018-03-20T00:42:22.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwv1ie00bek4vgzg82xxiw","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cjhtwv12j0000k4vg0qn667ia","category_id":"cjhtwv12u0002k4vgc3vhsbuu","_id":"cjhtwv134000ck4vg0cnu9o0m"},{"post_id":"cjhtwv136000fk4vg06zcqytk","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13d000lk4vging6nwxq"},{"post_id":"cjhtwv12w0004k4vge89lk5ul","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13f000pk4vgwc4cd5hk"},{"post_id":"cjhtwv137000gk4vg37nzij3p","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13h000rk4vgpsphngd7"},{"post_id":"cjhtwv13c000kk4vghc9jlnm6","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13j000uk4vg2i10mbbx"},{"post_id":"cjhtwv13e000ok4vg9065kha1","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13m000yk4vgogvmq4ff"},{"post_id":"cjhtwv12z0006k4vg3c9doy4h","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13n0011k4vg3u4n132w"},{"post_id":"cjhtwv13h000qk4vgetx9fjxe","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13q0016k4vg68se8d45"},{"post_id":"cjhtwv13j000tk4vgzxvjqkcb","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv13r0019k4vgwxoq2vff"},{"post_id":"cjhtwv12s0001k4vgmqqu0w9w","category_id":"cjhtwv1300007k4vgvsrdzngz","_id":"cjhtwv13t001dk4vgzzkhs6me"},{"post_id":"cjhtwv12s0001k4vgmqqu0w9w","category_id":"cjhtwv13i000sk4vg19swlude","_id":"cjhtwv13v001fk4vg3urag9vz"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","category_id":"cjhtwv1300007k4vgvsrdzngz","_id":"cjhtwv13x001jk4vgu976flc1"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","category_id":"cjhtwv13i000sk4vg19swlude","_id":"cjhtwv13y001mk4vgeojpyevb"},{"post_id":"cjhtwv134000bk4vg3gkiny2p","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv140001rk4vggbu92ge6"},{"post_id":"cjhtwv12y0005k4vg2ou63hkq","category_id":"cjhtwv139000hk4vgqi2iho6w","_id":"cjhtwv143001uk4vg36iqmiew"},{"post_id":"cjhtwv12y0005k4vg2ou63hkq","category_id":"cjhtwv13v001gk4vglnk8b86n","_id":"cjhtwv145001yk4vgkbnvmd8n"},{"post_id":"cjhtwv13x001lk4vg5npdyr6a","category_id":"cjhtwv135000dk4vgonrbqp9x","_id":"cjhtwv1470020k4vgg9gw01jm"},{"post_id":"cjhtwv13m0010k4vgogjlnw9f","category_id":"cjhtwv13z001ok4vgml72lg1s","_id":"cjhtwv1490024k4vg6hmhz6gx"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","category_id":"cjhtwv1300007k4vgvsrdzngz","_id":"cjhtwv14a0026k4vg48imkfgh"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","category_id":"cjhtwv13i000sk4vg19swlude","_id":"cjhtwv14c0029k4vg4k8hj3hl"},{"post_id":"cjhtwv13a000jk4vg1762nl5s","category_id":"cjhtwv13r001ak4vgzoxtl8ve","_id":"cjhtwv14n002qk4vg3yqfhofj"},{"post_id":"cjhtwv13a000jk4vg1762nl5s","category_id":"cjhtwv14g002fk4vgp9b7t51n","_id":"cjhtwv14p002vk4vgfkpufmqv"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","category_id":"cjhtwv14o002tk4vg36irn6tu","_id":"cjhtwv14w0033k4vgl59d9avg"},{"post_id":"cjhtwv140001qk4vgjm3otkbm","category_id":"cjhtwv14s002zk4vg4e7a95ut","_id":"cjhtwv1510039k4vgc59um864"},{"post_id":"cjhtwv14v0032k4vg28a4rm8i","category_id":"cjhtwv12u0002k4vgc3vhsbuu","_id":"cjhtwv152003bk4vgu7rimmqc"},{"post_id":"cjhtwv13p0015k4vglajimul5","category_id":"cjhtwv143001vk4vg9feruoaf","_id":"cjhtwv155003fk4vgfdia2w36"},{"post_id":"cjhtwv13p0015k4vglajimul5","category_id":"cjhtwv1510038k4vgmg6aevo2","_id":"cjhtwv156003jk4vg1kghjksz"},{"post_id":"cjhtwv13q0018k4vgzfyj15re","category_id":"cjhtwv1480022k4vga1ukzzho","_id":"cjhtwv15a003uk4vgfrqifrzd"},{"post_id":"cjhtwv13q0018k4vgzfyj15re","category_id":"cjhtwv157003mk4vgkr57aqw3","_id":"cjhtwv15b003xk4vg2jm5ghbc"},{"post_id":"cjhtwv13s001ck4vgnor155tm","category_id":"cjhtwv14b0028k4vgtd3n269b","_id":"cjhtwv15c0043k4vgknt1qunt"},{"post_id":"cjhtwv13s001ck4vgnor155tm","category_id":"cjhtwv159003tk4vgeagyzjz8","_id":"cjhtwv15e0047k4vgx2xxafb3"},{"post_id":"cjhtwv14e002dk4vg96yics22","category_id":"cjhtwv15b003zk4vge7om7kf3","_id":"cjhtwv15f004ak4vgcid56jes"},{"post_id":"cjhtwv14h002hk4vgn9vtr1t6","category_id":"cjhtwv14s002zk4vg4e7a95ut","_id":"cjhtwv15g004ek4vgui7gsfxc"},{"post_id":"cjhtwv14i002jk4vgxkke6qpj","category_id":"cjhtwv15e0049k4vgdzbbnur8","_id":"cjhtwv15i004jk4vg90bb79hh"},{"post_id":"cjhtwv14j002mk4vgh99fxe1s","category_id":"cjhtwv15e0049k4vgdzbbnur8","_id":"cjhtwv15k004ok4vge1no4vye"},{"post_id":"cjhtwv13u001ek4vg35482vuh","category_id":"cjhtwv14j002lk4vgp6kuh71z","_id":"cjhtwv15n004wk4vg5avoulub"},{"post_id":"cjhtwv13u001ek4vg35482vuh","category_id":"cjhtwv15j004nk4vgn8q6surs","_id":"cjhtwv15n004xk4vghywf3p99"},{"post_id":"cjhtwv14n002sk4vg16l84lnl","category_id":"cjhtwv15b003zk4vge7om7kf3","_id":"cjhtwv15o0050k4vgh1vpw8lg"},{"post_id":"cjhtwv14p002xk4vg2940z3yl","category_id":"cjhtwv15e0049k4vgdzbbnur8","_id":"cjhtwv15q0055k4vggwpa6ffw"},{"post_id":"cjhtwv14r002yk4vg9qjwhid1","category_id":"cjhtwv14j002lk4vgp6kuh71z","_id":"cjhtwv15r0059k4vgv9ipglqv"},{"post_id":"cjhtwv14r002yk4vg9qjwhid1","category_id":"cjhtwv15j004nk4vgn8q6surs","_id":"cjhtwv15r005ak4vgw6qzym4z"},{"post_id":"cjhtwv14t0031k4vgmatty3gn","category_id":"cjhtwv14j002lk4vgp6kuh71z","_id":"cjhtwv15s005ck4vgmd0v03ib"},{"post_id":"cjhtwv14t0031k4vgmatty3gn","category_id":"cjhtwv15j004nk4vgn8q6surs","_id":"cjhtwv15t005ek4vgzwof2ezx"},{"post_id":"cjhtwv14x0036k4vg0qtmqs7p","category_id":"cjhtwv15r0058k4vg3pu286s0","_id":"cjhtwv15t005hk4vg8aw4iw39"},{"post_id":"cjhtwv14z0037k4vguup2q81b","category_id":"cjhtwv14j002lk4vgp6kuh71z","_id":"cjhtwv15y005ok4vgsk40045p"},{"post_id":"cjhtwv14z0037k4vguup2q81b","category_id":"cjhtwv15j004nk4vgn8q6surs","_id":"cjhtwv15z005sk4vg4i7gjp0j"},{"post_id":"cjhtwv1470021k4vgdngbeord","category_id":"cjhtwv153003ck4vg42kbp4te","_id":"cjhtwv160005tk4vgmg94w1f9"},{"post_id":"cjhtwv1470021k4vgdngbeord","category_id":"cjhtwv15w005kk4vg0ekl1twz","_id":"cjhtwv161005wk4vgbixa5utd"},{"post_id":"cjhtwv1490025k4vg51zt4zw7","category_id":"cjhtwv155003gk4vgnwr3xnre","_id":"cjhtwv162005yk4vg0ij3a9s2"},{"post_id":"cjhtwv1490025k4vg51zt4zw7","category_id":"cjhtwv15z005pk4vgdh0r3ml4","_id":"cjhtwv1630060k4vgnkh1zvs4"},{"post_id":"cjhtwv14d002bk4vg20aj5sjj","category_id":"cjhtwv153003ck4vg42kbp4te","_id":"cjhtwv1640062k4vgcjvs67xc"},{"post_id":"cjhtwv14d002bk4vg20aj5sjj","category_id":"cjhtwv15w005kk4vg0ekl1twz","_id":"cjhtwv1640064k4vgt3l7cmlp"},{"post_id":"cjhtwv14l002pk4vg8ig8co81","category_id":"cjhtwv153003ck4vg42kbp4te","_id":"cjhtwv1640065k4vg80a6356y"},{"post_id":"cjhtwv14l002pk4vg8ig8co81","category_id":"cjhtwv15w005kk4vg0ekl1twz","_id":"cjhtwv1650067k4vgdso9ch7p"},{"post_id":"cjhtwv144001wk4vg2645vgmm","category_id":"cjhtwv1480022k4vga1ukzzho","_id":"cjhtwv1660069k4vgwop0jgp0"},{"post_id":"cjhtwv144001wk4vg2645vgmm","category_id":"cjhtwv157003mk4vgkr57aqw3","_id":"cjhtwv167006ck4vgqoylgtxm"},{"post_id":"cjhtwv144001wk4vg2645vgmm","category_id":"cjhtwv1630061k4vgc6032ciw","_id":"cjhtwv167006ek4vgr1jrq40c"},{"post_id":"cjhtwv17z00b5k4vgdvl4779z","category_id":"cjhtwv14j002lk4vgp6kuh71z","_id":"cjhtwv18800b7k4vglpnle0uu"},{"post_id":"cjhtwv17z00b5k4vgdvl4779z","category_id":"cjhtwv15j004nk4vgn8q6surs","_id":"cjhtwv18800b8k4vgkwqkxzl6"}],"PostTag":[{"post_id":"cjhtwv12j0000k4vg0qn667ia","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv1310009k4vgo7oh6ztg"},{"post_id":"cjhtwv12s0001k4vgmqqu0w9w","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv13k000wk4vgojazxjnv"},{"post_id":"cjhtwv12s0001k4vgmqqu0w9w","tag_id":"cjhtwv135000ek4vg5lelcw8y","_id":"cjhtwv13m000zk4vgmpmz2g01"},{"post_id":"cjhtwv12s0001k4vgmqqu0w9w","tag_id":"cjhtwv13a000ik4vgemo2hnjb","_id":"cjhtwv13p0014k4vg8d6zj2lf"},{"post_id":"cjhtwv12s0001k4vgmqqu0w9w","tag_id":"cjhtwv13e000nk4vgums5dfwn","_id":"cjhtwv13q0017k4vg4olh0bcw"},{"post_id":"cjhtwv12w0004k4vge89lk5ul","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv13x001kk4vgdnfrmo5f"},{"post_id":"cjhtwv12w0004k4vge89lk5ul","tag_id":"cjhtwv13o0013k4vg3f7725nj","_id":"cjhtwv13z001nk4vgrqycspqm"},{"post_id":"cjhtwv12w0004k4vge89lk5ul","tag_id":"cjhtwv13s001bk4vg5uu9r0uf","_id":"cjhtwv141001sk4vgabngmuob"},{"post_id":"cjhtwv12y0005k4vg2ou63hkq","tag_id":"cjhtwv13v001hk4vgjbsmkh4f","_id":"cjhtwv14e002ck4vgv66b4at8"},{"post_id":"cjhtwv12y0005k4vg2ou63hkq","tag_id":"cjhtwv13z001pk4vgegq2gpkz","_id":"cjhtwv14g002ek4vg2gjwz2os"},{"post_id":"cjhtwv12y0005k4vg2ou63hkq","tag_id":"cjhtwv145001xk4vg79m9a71a","_id":"cjhtwv14i002ik4vgeg0jk6lq"},{"post_id":"cjhtwv12y0005k4vg2ou63hkq","tag_id":"cjhtwv1480023k4vgzv8f2igp","_id":"cjhtwv14j002kk4vgb94v4qux"},{"post_id":"cjhtwv12z0006k4vg3c9doy4h","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv14l002ok4vgpaha80y4"},{"post_id":"cjhtwv12z0006k4vg3c9doy4h","tag_id":"cjhtwv14c002ak4vgp7r6arz3","_id":"cjhtwv14n002rk4vgmeopvpi0"},{"post_id":"cjhtwv12z0006k4vg3c9doy4h","tag_id":"cjhtwv14g002gk4vg41edxc4u","_id":"cjhtwv14p002wk4vglvoeeo5y"},{"post_id":"cjhtwv131000ak4vg07ea0x5i","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv154003ek4vgf760s4pc"},{"post_id":"cjhtwv131000ak4vg07ea0x5i","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv155003hk4vg0kyrbrzh"},{"post_id":"cjhtwv131000ak4vg07ea0x5i","tag_id":"cjhtwv14o002uk4vg1bngqylm","_id":"cjhtwv156003kk4vgvvvhlud2"},{"post_id":"cjhtwv131000ak4vg07ea0x5i","tag_id":"cjhtwv14t0030k4vg5ed9py4f","_id":"cjhtwv156003lk4vgx76mei8w"},{"post_id":"cjhtwv131000ak4vg07ea0x5i","tag_id":"cjhtwv14x0035k4vgs2pqwsd2","_id":"cjhtwv157003ok4vg5w1oiiu9"},{"post_id":"cjhtwv131000ak4vg07ea0x5i","tag_id":"cjhtwv152003ak4vgg0v07713","_id":"cjhtwv158003pk4vgtfer23pu"},{"post_id":"cjhtwv134000bk4vg3gkiny2p","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv159003sk4vgs9tcs88c"},{"post_id":"cjhtwv134000bk4vg3gkiny2p","tag_id":"cjhtwv154003dk4vgfps9ysbt","_id":"cjhtwv15a003vk4vga9bvp3xh"},{"post_id":"cjhtwv134000bk4vg3gkiny2p","tag_id":"cjhtwv156003ik4vgfc67cydj","_id":"cjhtwv15b003yk4vgcqiz6zf6"},{"post_id":"cjhtwv134000bk4vg3gkiny2p","tag_id":"cjhtwv157003nk4vgvgggn3gb","_id":"cjhtwv15b0040k4vgt8uziia7"},{"post_id":"cjhtwv136000fk4vg06zcqytk","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv15c0042k4vgkb8kn45d"},{"post_id":"cjhtwv136000fk4vg06zcqytk","tag_id":"cjhtwv13o0013k4vg3f7725nj","_id":"cjhtwv15d0045k4vgz5nefnuu"},{"post_id":"cjhtwv136000fk4vg06zcqytk","tag_id":"cjhtwv15a003wk4vg9brucqma","_id":"cjhtwv15e0048k4vgeh2oahr3"},{"post_id":"cjhtwv137000gk4vg37nzij3p","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv15f004bk4vg9tifm97v"},{"post_id":"cjhtwv137000gk4vg37nzij3p","tag_id":"cjhtwv15c0041k4vgtl2gksnd","_id":"cjhtwv15f004dk4vgs1erv0e8"},{"post_id":"cjhtwv13a000jk4vg1762nl5s","tag_id":"cjhtwv15d0046k4vgo798auk3","_id":"cjhtwv15h004hk4vgfb3luqe6"},{"post_id":"cjhtwv13a000jk4vg1762nl5s","tag_id":"cjhtwv15f004ck4vgce7jfhzd","_id":"cjhtwv15i004kk4vgufkywb3x"},{"post_id":"cjhtwv13c000kk4vghc9jlnm6","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv15j004mk4vglx7k9274"},{"post_id":"cjhtwv13c000kk4vghc9jlnm6","tag_id":"cjhtwv15h004gk4vgc6nqxi6z","_id":"cjhtwv15k004pk4vg16mswhvo"},{"post_id":"cjhtwv13e000ok4vg9065kha1","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv15l004rk4vgeglhzdb9"},{"post_id":"cjhtwv13e000ok4vg9065kha1","tag_id":"cjhtwv15j004lk4vgqajf1gu3","_id":"cjhtwv15m004tk4vg3ai3nmqs"},{"post_id":"cjhtwv13h000qk4vgetx9fjxe","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv15p0051k4vg4w235hh2"},{"post_id":"cjhtwv13h000qk4vgetx9fjxe","tag_id":"cjhtwv15k004qk4vg0eilfj2d","_id":"cjhtwv15p0052k4vgg5f0xxkb"},{"post_id":"cjhtwv13h000qk4vgetx9fjxe","tag_id":"cjhtwv13s001bk4vg5uu9r0uf","_id":"cjhtwv15q0056k4vgmjkgoc3y"},{"post_id":"cjhtwv13j000tk4vgzxvjqkcb","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv15u005ik4vg6xoco3tq"},{"post_id":"cjhtwv13j000tk4vgzxvjqkcb","tag_id":"cjhtwv15o004yk4vgj5hd0w0g","_id":"cjhtwv15v005jk4vglsv2bljy"},{"post_id":"cjhtwv13j000tk4vgzxvjqkcb","tag_id":"cjhtwv15p0053k4vgx61t9mvb","_id":"cjhtwv15y005mk4vghq3xl6ue"},{"post_id":"cjhtwv13j000tk4vgzxvjqkcb","tag_id":"cjhtwv154003dk4vgfps9ysbt","_id":"cjhtwv15y005nk4vgmln1m7o8"},{"post_id":"cjhtwv13j000tk4vgzxvjqkcb","tag_id":"cjhtwv15s005bk4vg1n3nkyxx","_id":"cjhtwv15z005rk4vgx06hrcdf"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv1650068k4vgsavuq8q1"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv15t005fk4vgukpr0lzu","_id":"cjhtwv166006ak4vgkamiovnk"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv15w005lk4vgyg977qmx","_id":"cjhtwv167006dk4vghdho0i3j"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv15z005qk4vghsm0tdov","_id":"cjhtwv167006fk4vgie9vd48w"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv161005vk4vg4x58nssl","_id":"cjhtwv168006hk4vg2vbz06zq"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv162005zk4vgvpekhhql","_id":"cjhtwv168006ik4vgpjxmux74"},{"post_id":"cjhtwv13l000xk4vg8wsrik95","tag_id":"cjhtwv1640063k4vghtig0ea0","_id":"cjhtwv168006kk4vgadc3y6bt"},{"post_id":"cjhtwv13m0010k4vgogjlnw9f","tag_id":"cjhtwv1650066k4vgjvd6n0eo","_id":"cjhtwv168006lk4vg2ymg1wvy"},{"post_id":"cjhtwv13p0015k4vglajimul5","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv169006nk4vg1hrlo26q"},{"post_id":"cjhtwv13p0015k4vglajimul5","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv169006ok4vg1o0sbp36"},{"post_id":"cjhtwv13p0015k4vglajimul5","tag_id":"cjhtwv166006bk4vgytzr7guv","_id":"cjhtwv16a006qk4vgc5gx3lat"},{"post_id":"cjhtwv13p0015k4vglajimul5","tag_id":"cjhtwv167006gk4vgh63ffcve","_id":"cjhtwv16a006rk4vg3p1y9i2v"},{"post_id":"cjhtwv13p0015k4vglajimul5","tag_id":"cjhtwv168006jk4vgyg03yef3","_id":"cjhtwv16a006tk4vg11zdw1d5"},{"post_id":"cjhtwv13q0018k4vgzfyj15re","tag_id":"cjhtwv169006mk4vgrl7636hm","_id":"cjhtwv16b006vk4vgmigj8jre"},{"post_id":"cjhtwv13q0018k4vgzfyj15re","tag_id":"cjhtwv16a006pk4vgb30hq8xh","_id":"cjhtwv16b006wk4vg4ws6kxzw"},{"post_id":"cjhtwv13q0018k4vgzfyj15re","tag_id":"cjhtwv16a006sk4vghmqijgza","_id":"cjhtwv16c006yk4vgutz2zo41"},{"post_id":"cjhtwv13s001ck4vgnor155tm","tag_id":"cjhtwv15z005qk4vghsm0tdov","_id":"cjhtwv16e0072k4vg7ck39td2"},{"post_id":"cjhtwv13s001ck4vgnor155tm","tag_id":"cjhtwv16c006xk4vg0wkgmtzd","_id":"cjhtwv16e0073k4vgz786vzwj"},{"post_id":"cjhtwv13s001ck4vgnor155tm","tag_id":"cjhtwv13v001hk4vgjbsmkh4f","_id":"cjhtwv16e0075k4vgstichv49"},{"post_id":"cjhtwv13s001ck4vgnor155tm","tag_id":"cjhtwv16d0070k4vg3teon8hy","_id":"cjhtwv16e0076k4vg58n2wu1e"},{"post_id":"cjhtwv13u001ek4vg35482vuh","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv16g007ak4vgchh72tzx"},{"post_id":"cjhtwv13u001ek4vg35482vuh","tag_id":"cjhtwv16d0071k4vgh9xbcjr3","_id":"cjhtwv16g007bk4vgmq5otefe"},{"post_id":"cjhtwv13u001ek4vg35482vuh","tag_id":"cjhtwv1650066k4vgjvd6n0eo","_id":"cjhtwv16h007dk4vguhuzwvs8"},{"post_id":"cjhtwv13u001ek4vg35482vuh","tag_id":"cjhtwv16f0077k4vg5qxx6537","_id":"cjhtwv16h007ek4vgcpk76ar0"},{"post_id":"cjhtwv13u001ek4vg35482vuh","tag_id":"cjhtwv152003ak4vgg0v07713","_id":"cjhtwv16i007gk4vgq39y9mvx"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","tag_id":"cjhtwv16a006sk4vghmqijgza","_id":"cjhtwv16k007kk4vgq6llwgjq"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","tag_id":"cjhtwv16g007ck4vg2tw06jby","_id":"cjhtwv16k007lk4vgzh8c1tce"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","tag_id":"cjhtwv16a006pk4vgb30hq8xh","_id":"cjhtwv16k007nk4vghhu1yuu5"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","tag_id":"cjhtwv16i007hk4vgv3en43gj","_id":"cjhtwv16l007ok4vgdpmoobwe"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","tag_id":"cjhtwv1650066k4vgjvd6n0eo","_id":"cjhtwv16l007qk4vg81ipxqch"},{"post_id":"cjhtwv13w001ik4vgvgjhghc0","tag_id":"cjhtwv13v001hk4vgjbsmkh4f","_id":"cjhtwv16l007rk4vggal9b6dj"},{"post_id":"cjhtwv13x001lk4vg5npdyr6a","tag_id":"cjhtwv12w0003k4vg81flnskf","_id":"cjhtwv16m007tk4vg2vbdgvnb"},{"post_id":"cjhtwv13x001lk4vg5npdyr6a","tag_id":"cjhtwv154003dk4vgfps9ysbt","_id":"cjhtwv16m007uk4vg2r9grg0o"},{"post_id":"cjhtwv13x001lk4vg5npdyr6a","tag_id":"cjhtwv16k007mk4vg16aipa8n","_id":"cjhtwv16n007wk4vgpt60xxf8"},{"post_id":"cjhtwv140001qk4vgjm3otkbm","tag_id":"cjhtwv15d0046k4vgo798auk3","_id":"cjhtwv16n007xk4vgf0dggaea"},{"post_id":"cjhtwv140001qk4vgjm3otkbm","tag_id":"cjhtwv154003dk4vgfps9ysbt","_id":"cjhtwv16o007zk4vg908l8mld"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv16m007vk4vgzgqiy78o","_id":"cjhtwv16q0086k4vgoah86olq"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv15t005fk4vgukpr0lzu","_id":"cjhtwv16q0087k4vgjcx59m7y"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv154003dk4vgfps9ysbt","_id":"cjhtwv16r0089k4vgybzuqbem"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv16o0081k4vgsjm8pzuu","_id":"cjhtwv16r008ak4vg45jkb8aq"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv16p0082k4vgvae8w7gg","_id":"cjhtwv16s008ck4vg4hh6j5px"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv16p0083k4vg1ur62vja","_id":"cjhtwv16s008dk4vgulsia1c4"},{"post_id":"cjhtwv141001tk4vgdg0oh4h2","tag_id":"cjhtwv16p0084k4vg4qvol81t","_id":"cjhtwv16t008fk4vgfmtdk9fw"},{"post_id":"cjhtwv144001wk4vg2645vgmm","tag_id":"cjhtwv169006mk4vgrl7636hm","_id":"cjhtwv16t008gk4vgcdtxkj0p"},{"post_id":"cjhtwv144001wk4vg2645vgmm","tag_id":"cjhtwv16a006pk4vgb30hq8xh","_id":"cjhtwv16u008ik4vguhpn0p1j"},{"post_id":"cjhtwv144001wk4vg2645vgmm","tag_id":"cjhtwv16a006sk4vghmqijgza","_id":"cjhtwv16u008jk4vg1hjl2szu"},{"post_id":"cjhtwv146001zk4vgpgyvir8y","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv16v008lk4vgifb471qz"},{"post_id":"cjhtwv146001zk4vgpgyvir8y","tag_id":"cjhtwv13v001hk4vgjbsmkh4f","_id":"cjhtwv16v008mk4vgug9ps68s"},{"post_id":"cjhtwv146001zk4vgpgyvir8y","tag_id":"cjhtwv15c0041k4vgtl2gksnd","_id":"cjhtwv16v008ok4vgn5th02gf"},{"post_id":"cjhtwv146001zk4vgpgyvir8y","tag_id":"cjhtwv16t008hk4vg02i0z6pa","_id":"cjhtwv16w008pk4vg9iwgpjtv"},{"post_id":"cjhtwv1470021k4vgdngbeord","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv16x008sk4vgx4kfxbmv"},{"post_id":"cjhtwv1470021k4vgdngbeord","tag_id":"cjhtwv16m007vk4vgzgqiy78o","_id":"cjhtwv16y008tk4vgv1dgvvpv"},{"post_id":"cjhtwv1470021k4vgdngbeord","tag_id":"cjhtwv16v008nk4vg843ikjln","_id":"cjhtwv16z008vk4vg0v3lm0fb"},{"post_id":"cjhtwv1470021k4vgdngbeord","tag_id":"cjhtwv168006jk4vgyg03yef3","_id":"cjhtwv16z008wk4vgpletj41r"},{"post_id":"cjhtwv1490025k4vg51zt4zw7","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv170008yk4vgpwzjevq5"},{"post_id":"cjhtwv1490025k4vg51zt4zw7","tag_id":"cjhtwv16w008rk4vgzheg6jpn","_id":"cjhtwv170008zk4vgbyuzm4if"},{"post_id":"cjhtwv1490025k4vg51zt4zw7","tag_id":"cjhtwv168006jk4vgyg03yef3","_id":"cjhtwv1700091k4vgqnuwmlez"},{"post_id":"cjhtwv14a0027k4vgmn4w5ute","tag_id":"cjhtwv16z008xk4vgcqdi9tna","_id":"cjhtwv1720094k4vgxpxce7uv"},{"post_id":"cjhtwv14a0027k4vgmn4w5ute","tag_id":"cjhtwv16m007vk4vgzgqiy78o","_id":"cjhtwv1720095k4vg1aav34zl"},{"post_id":"cjhtwv14a0027k4vgmn4w5ute","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv1730097k4vgqn6ack54"},{"post_id":"cjhtwv14d002bk4vg20aj5sjj","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv174009ak4vgbatwlomu"},{"post_id":"cjhtwv14d002bk4vg20aj5sjj","tag_id":"cjhtwv16m007vk4vgzgqiy78o","_id":"cjhtwv175009bk4vg51en74ci"},{"post_id":"cjhtwv14d002bk4vg20aj5sjj","tag_id":"cjhtwv16v008nk4vg843ikjln","_id":"cjhtwv175009dk4vgx7accgn1"},{"post_id":"cjhtwv14d002bk4vg20aj5sjj","tag_id":"cjhtwv168006jk4vgyg03yef3","_id":"cjhtwv176009ek4vgo1m6ygp6"},{"post_id":"cjhtwv14e002dk4vg96yics22","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv176009gk4vg4lhuagpb"},{"post_id":"cjhtwv14e002dk4vg96yics22","tag_id":"cjhtwv1740099k4vgu2wipg6y","_id":"cjhtwv176009hk4vg3pd1l2xs"},{"post_id":"cjhtwv14h002hk4vgn9vtr1t6","tag_id":"cjhtwv15d0046k4vgo798auk3","_id":"cjhtwv177009jk4vgaubnm6oz"},{"post_id":"cjhtwv14h002hk4vgn9vtr1t6","tag_id":"cjhtwv176009fk4vgcrh61vn4","_id":"cjhtwv177009kk4vgexvl4n2p"},{"post_id":"cjhtwv14i002jk4vgxkke6qpj","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv178009nk4vg7wx394r8"},{"post_id":"cjhtwv14i002jk4vgxkke6qpj","tag_id":"cjhtwv16c006xk4vg0wkgmtzd","_id":"cjhtwv179009ok4vgzxwqo6jg"},{"post_id":"cjhtwv14i002jk4vgxkke6qpj","tag_id":"cjhtwv168006jk4vgyg03yef3","_id":"cjhtwv179009qk4vg948cvj26"},{"post_id":"cjhtwv14j002mk4vgh99fxe1s","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv17a009sk4vg6zcpy6l0"},{"post_id":"cjhtwv14j002mk4vgh99fxe1s","tag_id":"cjhtwv14t0030k4vg5ed9py4f","_id":"cjhtwv17a009tk4vgpzqme90j"},{"post_id":"cjhtwv14j002mk4vgh99fxe1s","tag_id":"cjhtwv179009pk4vgdn7jvay8","_id":"cjhtwv17b009vk4vg3qew776k"},{"post_id":"cjhtwv14l002pk4vg8ig8co81","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv17c009yk4vg1zkl5xmn"},{"post_id":"cjhtwv14l002pk4vg8ig8co81","tag_id":"cjhtwv16m007vk4vgzgqiy78o","_id":"cjhtwv17c009zk4vgwmo0mn3a"},{"post_id":"cjhtwv14l002pk4vg8ig8co81","tag_id":"cjhtwv16v008nk4vg843ikjln","_id":"cjhtwv17d00a1k4vg914mv9up"},{"post_id":"cjhtwv14l002pk4vg8ig8co81","tag_id":"cjhtwv168006jk4vgyg03yef3","_id":"cjhtwv17d00a2k4vge638adeu"},{"post_id":"cjhtwv14n002sk4vg16l84lnl","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv17e00a4k4vgam53v14f"},{"post_id":"cjhtwv14n002sk4vg16l84lnl","tag_id":"cjhtwv1740099k4vgu2wipg6y","_id":"cjhtwv17e00a5k4vg5bd5ub9r"},{"post_id":"cjhtwv14n002sk4vg16l84lnl","tag_id":"cjhtwv17d00a0k4vgxihfcx74","_id":"cjhtwv17f00a7k4vg0b77e49z"},{"post_id":"cjhtwv14p002xk4vg2940z3yl","tag_id":"cjhtwv1300008k4vg9s8vir0o","_id":"cjhtwv17f00a8k4vgef8lxsuf"},{"post_id":"cjhtwv14p002xk4vg2940z3yl","tag_id":"cjhtwv16c006xk4vg0wkgmtzd","_id":"cjhtwv17g00aak4vgdwkutzaf"},{"post_id":"cjhtwv14r002yk4vg9qjwhid1","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv17h00ack4vg4kcw6myf"},{"post_id":"cjhtwv14r002yk4vg9qjwhid1","tag_id":"cjhtwv14o002uk4vg1bngqylm","_id":"cjhtwv17h00adk4vg2yc32ymw"},{"post_id":"cjhtwv14r002yk4vg9qjwhid1","tag_id":"cjhtwv14t0030k4vg5ed9py4f","_id":"cjhtwv17h00afk4vgl9kbkyic"},{"post_id":"cjhtwv14r002yk4vg9qjwhid1","tag_id":"cjhtwv152003ak4vgg0v07713","_id":"cjhtwv17i00agk4vgalt9i09f"},{"post_id":"cjhtwv14t0031k4vgmatty3gn","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv17k00ajk4vgcesce6to"},{"post_id":"cjhtwv14t0031k4vgmatty3gn","tag_id":"cjhtwv1650066k4vgjvd6n0eo","_id":"cjhtwv17k00akk4vgtd711tmt"},{"post_id":"cjhtwv14t0031k4vgmatty3gn","tag_id":"cjhtwv17h00aek4vgqymbavsq","_id":"cjhtwv17k00amk4vgvzuvwrop"},{"post_id":"cjhtwv14t0031k4vgmatty3gn","tag_id":"cjhtwv1740099k4vgu2wipg6y","_id":"cjhtwv17l00ank4vgkgebgkbn"},{"post_id":"cjhtwv14v0032k4vg28a4rm8i","tag_id":"cjhtwv17j00aik4vg7dtagjm2","_id":"cjhtwv17m00aqk4vgvee0bb8o"},{"post_id":"cjhtwv14v0032k4vg28a4rm8i","tag_id":"cjhtwv17k00alk4vgxbcls3gu","_id":"cjhtwv17m00ark4vga88ej17z"},{"post_id":"cjhtwv14v0032k4vg28a4rm8i","tag_id":"cjhtwv17l00aok4vgl0ludldv","_id":"cjhtwv17n00atk4vgs3elxkt8"},{"post_id":"cjhtwv14v0032k4vg28a4rm8i","tag_id":"cjhtwv13v001hk4vgjbsmkh4f","_id":"cjhtwv17n00auk4vgd23clk0f"},{"post_id":"cjhtwv14x0036k4vg0qtmqs7p","tag_id":"cjhtwv16z008xk4vgcqdi9tna","_id":"cjhtwv17o00awk4vgyfkf2i58"},{"post_id":"cjhtwv14x0036k4vg0qtmqs7p","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv17o00axk4vgxc3150vb"},{"post_id":"cjhtwv14z0037k4vguup2q81b","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv17p00b0k4vgegvp5lp7"},{"post_id":"cjhtwv14z0037k4vguup2q81b","tag_id":"cjhtwv1650066k4vgjvd6n0eo","_id":"cjhtwv17q00b1k4vgckkc3mrl"},{"post_id":"cjhtwv14z0037k4vguup2q81b","tag_id":"cjhtwv17o00avk4vgzi01fp0e","_id":"cjhtwv17q00b2k4vgk49b2he6"},{"post_id":"cjhtwv14z0037k4vguup2q81b","tag_id":"cjhtwv17o00ayk4vgz9913nhj","_id":"cjhtwv17q00b3k4vgx2mi1rno"},{"post_id":"cjhtwv14z0037k4vguup2q81b","tag_id":"cjhtwv17p00azk4vgi1hdftrd","_id":"cjhtwv17q00b4k4vg5hta68eu"},{"post_id":"cjhtwv17z00b5k4vgdvl4779z","tag_id":"cjhtwv14k002nk4vgoaocgtcv","_id":"cjhtwv18900b9k4vg2vdtnjov"},{"post_id":"cjhtwv17z00b5k4vgdvl4779z","tag_id":"cjhtwv1650066k4vgjvd6n0eo","_id":"cjhtwv18900bak4vgbelxi9dy"},{"post_id":"cjhtwv17z00b5k4vgdvl4779z","tag_id":"cjhtwv14o002uk4vg1bngqylm","_id":"cjhtwv18900bbk4vg0hbwl2rb"},{"post_id":"cjhtwv17z00b5k4vgdvl4779z","tag_id":"cjhtwv18700b6k4vgc02b8m5o","_id":"cjhtwv18900bck4vglmkqpx18"}],"Tag":[{"name":"树莓派","_id":"cjhtwv12w0003k4vg81flnskf"},{"name":"运维","_id":"cjhtwv1300008k4vg9s8vir0o"},{"name":"StatSVN","_id":"cjhtwv135000ek4vg5lelcw8y"},{"name":"SVN","_id":"cjhtwv13a000ik4vgemo2hnjb"},{"name":"技术","_id":"cjhtwv13e000nk4vgums5dfwn"},{"name":"ngrok","_id":"cjhtwv13o0013k4vg3f7725nj"},{"name":"ssh","_id":"cjhtwv13s001bk4vg5uu9r0uf"},{"name":"闲谈","_id":"cjhtwv13v001hk4vgjbsmkh4f"},{"name":"音乐","_id":"cjhtwv13z001pk4vgegq2gpkz"},{"name":"乐器","_id":"cjhtwv145001xk4vg79m9a71a"},{"name":"笛子","_id":"cjhtwv1480023k4vgzv8f2igp"},{"name":"sht31","_id":"cjhtwv14c002ak4vgp7r6arz3"},{"name":"i2c","_id":"cjhtwv14g002gk4vg41edxc4u"},{"name":"建站","_id":"cjhtwv14k002nk4vgoaocgtcv"},{"name":"hexo","_id":"cjhtwv14o002uk4vg1bngqylm"},{"name":"github","_id":"cjhtwv14t0030k4vg5ed9py4f"},{"name":"travisCI","_id":"cjhtwv14x0035k4vgs2pqwsd2"},{"name":"博客","_id":"cjhtwv152003ak4vgg0v07713"},{"name":"python","_id":"cjhtwv154003dk4vgfps9ysbt"},{"name":"socket","_id":"cjhtwv156003ik4vgfc67cydj"},{"name":"json","_id":"cjhtwv157003nk4vgvgggn3gb"},{"name":"内网穿透","_id":"cjhtwv15a003wk4vg9brucqma"},{"name":"摄像头","_id":"cjhtwv15c0041k4vgtl2gksnd"},{"name":"rabbitmq","_id":"cjhtwv15d0046k4vgo798auk3"},{"name":"mqtt","_id":"cjhtwv15f004ck4vgce7jfhzd"},{"name":"crontab","_id":"cjhtwv15h004gk4vgc6nqxi6z"},{"name":"忘记密码","_id":"cjhtwv15j004lk4vgqajf1gu3"},{"name":"Win32DiskImager","_id":"cjhtwv15k004qk4vg0eilfj2d"},{"name":"dht11","_id":"cjhtwv15o004yk4vgj5hd0w0g"},{"name":"gpio","_id":"cjhtwv15p0053k4vgx61t9mvb"},{"name":"传感器","_id":"cjhtwv15s005bk4vg1n3nkyxx"},{"name":"java","_id":"cjhtwv15t005fk4vgukpr0lzu"},{"name":"maven","_id":"cjhtwv15w005lk4vgyg977qmx"},{"name":"svn","_id":"cjhtwv15z005qk4vghsm0tdov"},{"name":"jenkins","_id":"cjhtwv161005vk4vg4x58nssl"},{"name":"nexus","_id":"cjhtwv162005zk4vgvpekhhql"},{"name":"redhat","_id":"cjhtwv1640063k4vghtig0ea0"},{"name":"wordpress","_id":"cjhtwv1650066k4vgjvd6n0eo"},{"name":"apt","_id":"cjhtwv166006bk4vgytzr7guv"},{"name":"apt-get","_id":"cjhtwv167006gk4vgh63ffcve"},{"name":"linux","_id":"cjhtwv168006jk4vgyg03yef3"},{"name":"db2","_id":"cjhtwv169006mk4vgrl7636hm"},{"name":"数据库","_id":"cjhtwv16a006pk4vgb30hq8xh"},{"name":"sql","_id":"cjhtwv16a006sk4vghmqijgza"},{"name":"gitlab","_id":"cjhtwv16c006xk4vg0wkgmtzd"},{"name":"感悟","_id":"cjhtwv16d0070k4vg3teon8hy"},{"name":"php","_id":"cjhtwv16d0071k4vgh9xbcjr3"},{"name":"php-fpm","_id":"cjhtwv16f0077k4vg5qxx6537"},{"name":"数据","_id":"cjhtwv16g007ck4vg2tw06jby"},{"name":"备份","_id":"cjhtwv16i007hk4vgv3en43gj"},{"name":"wlan","_id":"cjhtwv16k007mk4vg16aipa8n"},{"name":"编程","_id":"cjhtwv16m007vk4vgzgqiy78o"},{"name":"base64","_id":"cjhtwv16o0081k4vgsjm8pzuu"},{"name":"图片处理","_id":"cjhtwv16p0082k4vgvae8w7gg"},{"name":"加密","_id":"cjhtwv16p0083k4vg1ur62vja"},{"name":"解密","_id":"cjhtwv16p0084k4vg4qvol81t"},{"name":"破解","_id":"cjhtwv16t008hk4vg02i0z6pa"},{"name":"docker","_id":"cjhtwv16v008nk4vg843ikjln"},{"name":"shadowsocks","_id":"cjhtwv16w008rk4vgzheg6jpn"},{"name":"markdown","_id":"cjhtwv16z008xk4vgcqdi9tna"},{"name":"nginx","_id":"cjhtwv1740099k4vgu2wipg6y"},{"name":"错误解决","_id":"cjhtwv176009fk4vgcrh61vn4"},{"name":"webhook","_id":"cjhtwv179009pk4vgdn7jvay8"},{"name":"错误","_id":"cjhtwv17d00a0k4vgxihfcx74"},{"name":"apache","_id":"cjhtwv17h00aek4vgqymbavsq"},{"name":"csv","_id":"cjhtwv17j00aik4vg7dtagjm2"},{"name":"git","_id":"cjhtwv17k00alk4vgxbcls3gu"},{"name":"故事","_id":"cjhtwv17l00aok4vgl0ludldv"},{"name":"域名","_id":"cjhtwv17o00avk4vgzi01fp0e"},{"name":"ssl","_id":"cjhtwv17o00ayk4vgz9913nhj"},{"name":"https","_id":"cjhtwv17p00azk4vgi1hdftrd"},{"name":"文章迁移","_id":"cjhtwv18700b6k4vgc02b8m5o"}]}}