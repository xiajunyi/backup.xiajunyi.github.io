{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/love.js","path":"love.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/docker1.jpg","path":"img/xjy/docker1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/docker1s.jpg","path":"img/xjy/docker1s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/git0001.jpg","path":"img/xjy/git0001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/gitlab1s.jpg","path":"img/xjy/gitlab1s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/monkey.jpg","path":"img/xjy/monkey.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42001s.jpg","path":"img/xjy/p42001s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p43001s.jpg","path":"img/xjy/p43001s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45001.jpg","path":"img/xjy/p45001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45002.jpg","path":"img/xjy/p45002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45003.jpg","path":"img/xjy/p45003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45005.jpg","path":"img/xjy/p45005.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45004.jpg","path":"img/xjy/p45004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45008.jpg","path":"img/xjy/p45008.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45010.jpg","path":"img/xjy/p45010.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p47003.png","path":"img/xjy/p47003.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p48000.jpg","path":"img/xjy/p48000.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p48001.jpg","path":"img/xjy/p48001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p48002.jpg","path":"img/xjy/p48002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p48003.jpg","path":"img/xjy/p48003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p48004.jpg","path":"img/xjy/p48004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p49000.png","path":"img/xjy/p49000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p49001.png","path":"img/xjy/p49001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p50000.png","path":"img/xjy/p50000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p47001.png","path":"img/xjy/p47001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p49002.png","path":"img/xjy/p49002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p52000.jpg","path":"img/xjy/p52000.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p52001.jpg","path":"img/xjy/p52001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p51000.png","path":"img/xjy/p51000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p52002.png","path":"img/xjy/p52002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p54001.png","path":"img/xjy/p54001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p55001.png","path":"img/xjy/p55001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p56000.png","path":"img/xjy/p56000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p57000.jpg","path":"img/xjy/p57000.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p57001.png","path":"img/xjy/p57001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p58000.png","path":"img/xjy/p58000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p59000.png","path":"img/xjy/p59000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p59003.png","path":"img/xjy/p59003.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p59006.png","path":"img/xjy/p59006.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p60000.png","path":"img/xjy/p60000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab003.jpg","path":"img/xjy/rab003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p59002.png","path":"img/xjy/p59002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31001.png","path":"img/xjy/sht31001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31003.jpg","path":"img/xjy/sht31003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sjds001.jpg","path":"img/xjy/sjds001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31004.png","path":"img/xjy/sht31004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp003.jpg","path":"img/xjy/smp003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp006.jpg","path":"img/xjy/smp006.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp002.png","path":"img/xjy/smp002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp005.png","path":"img/xjy/smp005.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/sht31002.png","path":"img/xjy/sht31002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp008.jpg","path":"img/xjy/smp008.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/socket001.png","path":"img/xjy/socket001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp009.png","path":"img/xjy/smp009.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn002.jpg","path":"img/xjy/statsvn002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook001s.jpg","path":"img/xjy/webhook001s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/tangquanchi.jpg","path":"img/xjy/tangquanchi.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/diary.jpg","path":"img/xjy/diary.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42001.jpg","path":"img/xjy/p42001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42002.jpg","path":"img/xjy/p42002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42004.jpg","path":"img/xjy/p42004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p42003.jpg","path":"img/xjy/p42003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/alipay.jpg","path":"img/xjy/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45000s.jpg","path":"img/xjy/p45000s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45000.jpg","path":"img/xjy/p45000.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p44001s.jpg","path":"img/xjy/p44001s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45006.jpg","path":"img/xjy/p45006.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45007.jpg","path":"img/xjy/p45007.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p45009.jpg","path":"img/xjy/p45009.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46000s.jpg","path":"img/xjy/p46000s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46001.png","path":"img/xjy/p46001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/bch001.jpg","path":"img/xjy/bch001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p47002.png","path":"img/xjy/p47002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p47004.png","path":"img/xjy/p47004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p50002.png","path":"img/xjy/p50002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p54000.jpg","path":"img/xjy/p54000.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p57002.png","path":"img/xjy/p57002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p59001.png","path":"img/xjy/p59001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab002.jpg","path":"img/xjy/rab002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab0001.png","path":"img/xjy/rab0001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp004.png","path":"img/xjy/smp004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp007.png","path":"img/xjy/smp007.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn001.jpg","path":"img/xjy/statsvn001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/statsvn003.jpg","path":"img/xjy/statsvn003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp006.png","path":"img/xjy/smp006.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook002.vsd","path":"img/xjy/webhook002.vsd","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook002.jpg","path":"img/xjy/webhook002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple1.jpg","path":"img/xjy/hexoSimple1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple2.jpg","path":"img/xjy/hexoSimple2.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/hexoSimple3.jpg","path":"img/xjy/hexoSimple3.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p47006.jpg","path":"img/xjy/p47006.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p50001.png","path":"img/xjy/p50001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46007.png","path":"img/xjy/p46007.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p55000.png","path":"img/xjy/p55000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p60003.png","path":"img/xjy/p60003.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/rab001.jpg","path":"img/xjy/rab001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/wxpay.png","path":"img/xjy/wxpay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/gitlab1.jpg","path":"img/xjy/gitlab1.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/jenkins config.png","path":"img/xjy/jenkins config.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46002.png","path":"img/xjy/p46002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p50004.png","path":"img/xjy/p50004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p60002.png","path":"img/xjy/p60002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p50003.png","path":"img/xjy/p50003.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/smp001.png","path":"img/xjy/smp001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/webhook001.jpg","path":"img/xjy/webhook001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/dizi001.jpg","path":"img/xjy/dizi001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p44002.png","path":"img/xjy/p44002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46003.png","path":"img/xjy/p46003.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p47005.jpg","path":"img/xjy/p47005.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46006.png","path":"img/xjy/p46006.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34004s.jpg","path":"img/xjy/p34004s.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p44001.jpg","path":"img/xjy/p44001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46005.png","path":"img/xjy/p46005.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46004.png","path":"img/xjy/p46004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p46008.png","path":"img/xjy/p46008.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/优惠券.vsd","path":"img/xjy/优惠券.vsd","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34001.jpg","path":"img/xjy/p34001.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34003.jpg","path":"img/xjy/p34003.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34004.jpg","path":"img/xjy/p34004.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p34002.jpg","path":"img/xjy/p34002.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/music/人生何处不相逢.mp3","path":"music/人生何处不相逢.mp3","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61001.png","path":"img/xjy/p61001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61002.png","path":"img/xjy/p61002.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61003.png","path":"img/xjy/p61003.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61004.png","path":"img/xjy/p61004.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61005.png","path":"img/xjy/p61005.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61010.png","path":"img/xjy/p61010.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61008.png","path":"img/xjy/p61008.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61007.png","path":"img/xjy/p61007.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61009.png","path":"img/xjy/p61009.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61014.png","path":"img/xjy/p61014.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61012.png","path":"img/xjy/p61012.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61015.png","path":"img/xjy/p61015.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61016.png","path":"img/xjy/p61016.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61019.png","path":"img/xjy/p61019.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61018.png","path":"img/xjy/p61018.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61017.png","path":"img/xjy/p61017.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61020.png","path":"img/xjy/p61020.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61006.png","path":"img/xjy/p61006.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61013.png","path":"img/xjy/p61013.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61011.png","path":"img/xjy/p61011.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p61000.png","path":"img/xjy/p61000.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/xjy/p62000.png","path":"img/xjy/p62000.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a91e40a00db19f352a707e1620e5c1c0f5f1bc52","modified":1571540043798},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1566387661000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1566387661000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1566387661000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1566387661000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1566387661000},{"_id":"themes/yilia/_config.yml","hash":"66441f05efd1b10bdb22ee7311052a137f1a7249","modified":1566387661000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1566387661000},{"_id":"themes/yilia/README.md","hash":"99985dc9f0f3473a26341245e436751bc42fd322","modified":1566387661000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1566387661000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1566387661000},{"_id":"source/_posts/p1.md.bak","hash":"9ab08cb2437bac36a97fadadcc1ed78d5251b195","modified":1566387660000},{"_id":"source/_posts/p10.md","hash":"4b7a3675d9324879aae501a543a4523d672fa010","modified":1566387660000},{"_id":"source/_posts/p11.md","hash":"e2a992dbeeb5d41034ecffdc1926c829eb9d816d","modified":1566387660000},{"_id":"source/_posts/p12.md","hash":"b00e39bf074b84a09ac808126504d9a8f661fc14","modified":1566387660000},{"_id":"source/_posts/p13.md","hash":"fa5803c525728cda082db033b625faea1aede9c7","modified":1566387660000},{"_id":"source/_posts/p15.md","hash":"73e9b73da848eecbe9ffce9b448758e318c5f779","modified":1566387660000},{"_id":"source/_posts/p16.md","hash":"839506be135d28fc7331058344ea2157526f4d01","modified":1566387660000},{"_id":"source/_posts/p14.md","hash":"086deb24dafe819e7569d08022a6df59e242ced1","modified":1566387660000},{"_id":"source/_posts/p17.md","hash":"4667184d00db16681866991c8ec2a547be035770","modified":1566387660000},{"_id":"source/_posts/p19.md","hash":"04b606a8d68a9ebe7a8445322b65a17d8cc1557b","modified":1566387660000},{"_id":"source/_posts/p21.md","hash":"8e8ceefb0a27e9022349332e335417da9770d261","modified":1566387660000},{"_id":"source/_posts/p20.md","hash":"788f45264212b1be96349d19f64ac490eccbc2a7","modified":1566387660000},{"_id":"source/_posts/p2.md","hash":"633981819a523417be16f1c5047d2a11ede4d9c7","modified":1566387660000},{"_id":"source/_posts/p22.md","hash":"08994a114352fc464f0e145b6ee13746d963cae4","modified":1566387660000},{"_id":"source/_posts/p24.md","hash":"776abe45d82e09461ac69f7a62632badd14eff05","modified":1566387660000},{"_id":"source/_posts/p25.md","hash":"2cf9e4b7b16a867c26b90960bca2b98ed117d0f1","modified":1566387660000},{"_id":"source/_posts/p26.md.bak","hash":"dc57507c89796d99e4202dbb4f1e94deac247232","modified":1566387660000},{"_id":"source/_posts/p23.md","hash":"07eec0b92e22c266b0797aa9dca46b4c8391b573","modified":1566387660000},{"_id":"source/_posts/p27.md","hash":"c36c7b93d0f82967bfa95595bd3496ba417d9ccc","modified":1566387660000},{"_id":"source/_posts/p3.md.bak","hash":"39f5bcdc203d1d27762808621c55bd426f7f0caf","modified":1566387660000},{"_id":"source/_posts/p30.md","hash":"a75658b1ea732bb8ab52659e2d2402bb65467061","modified":1566387660000},{"_id":"source/_posts/p28.md","hash":"475d7514e2a31e567c2bd00c60ab9aa8c26e1626","modified":1566387660000},{"_id":"source/_posts/p18.md","hash":"d95b559bccf2e31ae779055efafe8e06da727451","modified":1566387660000},{"_id":"source/_posts/p29.md","hash":"730408f998266f7223fc6138bc2f90739b19efbe","modified":1566387660000},{"_id":"source/_posts/p31.md","hash":"5efe285bce3699929116e3009b1e6d75c7cd938c","modified":1566387660000},{"_id":"source/_posts/p32.md.bak","hash":"60154c69df658aa67e3c6a7ffb35d18b59f52f89","modified":1566387660000},{"_id":"source/_posts/p33.md.bak","hash":"906aca0087fa575a7c8b41c15db7026802d44d6b","modified":1566387660000},{"_id":"source/_posts/p34.md","hash":"1d29d3fb39565d4f7b8273acf975b91493d98382","modified":1566387660000},{"_id":"source/_posts/p35.md","hash":"f3f282b42c156be5d8e51ecbd241e0c9fec2c5eb","modified":1566387660000},{"_id":"source/_posts/p37.md","hash":"82a280ec250bc312723ffa28182aed14fbf98fa0","modified":1566387660000},{"_id":"source/_posts/p36.md","hash":"b7b7c18d007af8bc5a16dda592ba574eeac17b1a","modified":1566387660000},{"_id":"source/_posts/p38.md","hash":"3c8d912e4c87005758033de82a4897d4cae9d10e","modified":1566387660000},{"_id":"source/_posts/p39.md","hash":"ecefa9aa1aa2fa862098c3cddfa3f0556505ae69","modified":1566387660000},{"_id":"source/_posts/p4.md","hash":"4b64dc62d4ee43d32aa5dfb1f6e9330b10804639","modified":1566387660000},{"_id":"source/_posts/p41.md","hash":"8792453ea55f4dcc157e2839db8637685148adf9","modified":1566387660000},{"_id":"source/_posts/p42.md","hash":"f43eaa16cb559b30ade850366c3caed0aa75758d","modified":1566387660000},{"_id":"source/_posts/p43.md","hash":"265dd43eeaeeb4ab31be8a4e8e6d1f669c668b99","modified":1566387660000},{"_id":"source/_posts/p46.md","hash":"06e73d80bfb25b44601d9734b9bab95104fb32b3","modified":1566387660000},{"_id":"source/_posts/p40.md","hash":"aaa16e36b364a399761ac3bee461ea3a7720d9ba","modified":1566387660000},{"_id":"source/_posts/p44.md.bak","hash":"3c4541d5b308dc136023c16773c3833d5e2d54f7","modified":1566387660000},{"_id":"source/_posts/p45.md","hash":"7d08bdf2cba57d0cf19fc31128bde0090c681b3f","modified":1566387660000},{"_id":"source/_posts/p48.md","hash":"54cac7470aa7e52069f81c20378aca2b39ec16c2","modified":1566387660000},{"_id":"source/_posts/p47.md.bak","hash":"626b7168466281dbff4c59742334f4a703c0770e","modified":1566387660000},{"_id":"source/_posts/p5.md","hash":"a9b8f27e2531922fba01535be332c4ffcd3b4384","modified":1566387660000},{"_id":"source/_posts/p51.md","hash":"4dc9fcbf576fa68c2f5bcd6698287ff28e66388c","modified":1566387660000},{"_id":"source/_posts/p49.md","hash":"c5242ffd70de9e0a3f2c6d7d80e341ad0253bfa5","modified":1566387660000},{"_id":"source/_posts/p54.md","hash":"cfe41c806efeecb9ce6bc13ed19e92701fef09ba","modified":1566387660000},{"_id":"source/_posts/p55.md","hash":"e012f02dab9fc3c1cbe9f3aa4f28b2fe9c1346fd","modified":1566387660000},{"_id":"source/_posts/p52.md","hash":"68553fed0f154a87ae0c77cb200632789fcc84bc","modified":1566387660000},{"_id":"source/_posts/p56.md","hash":"70e1a725c865dabb508f3457c09bcbf04f036a7a","modified":1566387660000},{"_id":"source/_posts/p57.md","hash":"4aa6c8eaddcc85d2e3b2e8216b75ea2f3e157727","modified":1566387660000},{"_id":"source/_posts/p59.md","hash":"af691bc35724c5d142c92c5b0cfc8deb0fa11c8b","modified":1571540043802},{"_id":"source/_posts/p6.md","hash":"589583732e9a0a9900f9ef4f3a26828f5eae571e","modified":1566387660000},{"_id":"source/_posts/p58.md","hash":"6cb3071b2c88c40cb952a3a49395f4808c77ec87","modified":1571540043800},{"_id":"source/_posts/p8.md","hash":"bf8a459308443c8aef70f2b6d6141f54d51bf2bd","modified":1566387660000},{"_id":"source/_posts/p50.md","hash":"a5b73c7873650a31f8bf7b4b4340a8b04f3bb8bc","modified":1566387660000},{"_id":"source/_posts/p7.md","hash":"1d62c4f5a5369bd2eaa6515bc206c947c78d97cc","modified":1566387660000},{"_id":"source/_posts/p9.md","hash":"3dd917b4249fec536760a1ca93d5ea4ca60b95f2","modified":1566387660000},{"_id":"source/_posts/p60.md","hash":"242a55fe47a581a3db94fed1b635f9cddee11734","modified":1566541527208},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1566387661000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1566387661000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1566387661000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1566387661000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1566387661000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1566387661000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1566387661000},{"_id":"themes/yilia/source/love.js","hash":"4345136020d12798c907c9094d0be50770f61f1a","modified":1566387661000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddb1a68dbd1aa3a05e8d0149ce2acdfd44b616b8","modified":1566387661000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1566387661000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1566387661000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1566387661000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1566387661000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1566387661000},{"_id":"source/_drafts/categories/index.md","hash":"a2cac8850a74e0547823ef930fd7e16be6079e5c","modified":1566387660000},{"_id":"source/_drafts/_posts/Babel-学习笔记.md","hash":"9c17588a9625b0fd5c6dee46549bae89abbc4b32","modified":1566387660000},{"_id":"source/_drafts/_posts/ESlint 超简单入门教程.md","hash":"14c83010e70d9a65757f2e94aeff6f47ec899e17","modified":1566387660000},{"_id":"source/_drafts/_posts/GIT-使用之-SSH-以及码云上配置-SSH.md","hash":"ac88f2d9099ae3e3fc5456f0a6e6f484a307d710","modified":1566387660000},{"_id":"source/_drafts/_posts/React-开发中不得不注意的两个大坑.md","hash":"578db81cd9a253eb3d3fd0c07b175bad8fc54816","modified":1566387660000},{"_id":"source/_drafts/_posts/Webstorm-超实用教程.md","hash":"d552fd8150f1d771d0d07818e7688e4aebb38c1b","modified":1566387660000},{"_id":"source/_drafts/_posts/XSS-攻击原理、实战、预防.md","hash":"5e36d821b67c7b46c6f3fa10ad8ccd0d6975ba20","modified":1566387660000},{"_id":"source/_drafts/_posts/mongoose-学习笔记.md","hash":"aba6e90ce470f93c1feeb2fd6200b940b3fa8c4e","modified":1566387660000},{"_id":"source/_drafts/_posts/npm-发布包填坑指南.md","hash":"bf1c55f7a36d4fb676c9ab706c5303a029ab9f50","modified":1566387660000},{"_id":"source/_drafts/_posts/三十分钟学会-Less.md","hash":"85d2447bc811fa010b1501d0bbc200f14c3c5f48","modified":1566387660000},{"_id":"source/_drafts/_posts/es6-异步编程之-Promise-从认识到使用.md","hash":"abaeda775747abdae8b0e655698299903ffbb7ab","modified":1566387660000},{"_id":"source/_drafts/_posts/使用Parcel零配置创建React应用（译）.md","hash":"ec717bdabb0b61115310a8c3de3e4828bf74514c","modified":1566387660000},{"_id":"source/_drafts/_posts/不起眼的--editorconfig-.md","hash":"68e7d62e125a9e2cce54fc396e45027988851c26","modified":1566387660000},{"_id":"source/_drafts/_posts/前后端分离最佳实践.md","hash":"0aae53aa3d5f0a9de1a1c1032b9240499a2945b0","modified":1566387660000},{"_id":"source/_drafts/_posts/再见，2017！.md","hash":"ebb3eac12132ecc0da81c8ed46654078a1c07939","modified":1566387660000},{"_id":"source/_drafts/_posts/再识-Angular.md","hash":"fe1404de9c853ce93c87c18ffbfa1d1afd0918d5","modified":1566387660000},{"_id":"source/_drafts/_posts/图解Web服务器.md","hash":"4cb300e6e727b693ffefe02fd479827a093ef11e","modified":1566387660000},{"_id":"source/_drafts/_posts/当然我在扯淡.md","hash":"300d747e9c218f47579598a25c0cd7300fac3111","modified":1566387660000},{"_id":"source/_drafts/_posts/微信小程序出现【需要进行身份验证】弹框解决方法.md","hash":"e81de52e73bce54a7342672df24bca48208d913e","modified":1566387660000},{"_id":"source/_drafts/_posts/微信小程序原生自定义组件开发实战.md","hash":"dce49d93377faf70b52bbc8a42dee3d59c9338e4","modified":1566387660000},{"_id":"source/_drafts/_posts/扒一扒路由的演变过程.md","hash":"b01df1e7ffdb2a5e7074d60c1eb6724e4ddfa8c1","modified":1566387660000},{"_id":"source/_drafts/_posts/梳理微信小程序登录时序图：授权与-Oauth2-0.md","hash":"da4fdacd383e6a6b3f77cf1020ed74bae7271d7d","modified":1566387660000},{"_id":"source/_drafts/_posts/程序员应该重视版本控制.md","hash":"a242075b9431e3df51054a2f5304550d6b6990d4","modified":1566387660000},{"_id":"source/_drafts/_posts/解决-npm-无法安装-devDependencies-下的依赖包的问题.md","hash":"2fe7a17396096c522198bd3e5a4cc468cabb7107","modified":1566387660000},{"_id":"source/_drafts/_posts/遨游密码世界（一）.md","hash":"b96c574e27baa02cef04c2ee24a1bc471a808054","modified":1566387660000},{"_id":"source/_drafts/tags/index.md","hash":"8a3c773a8c58543e81634e360b384c5091a43393","modified":1566387660000},{"_id":"source/_drafts/_posts/认识-Iconfont-以及什么是--eot、-woff、-ttf、-svg.md","hash":"d186eab29bdfad3ca68362f281f6cafc3612925e","modified":1566387660000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1566387661000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1566387661000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1566387661000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1566387661000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1566387661000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"dd89d13f3d96e664aefb1fd18f43921eff2ae29d","modified":1571540043806},{"_id":"source/_drafts/_posts/遨游密码世界（二）.md","hash":"f5985560bf6eba1de3bd893758f07cd3da34c1be","modified":1566387660000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"1bb461be32f6c2a13125a25fbbf2204faf06560b","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"0bf393a57e421899396d4b5bf3e78b2c8971f0dd","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1566387661000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1566387661000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1566387661000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1566387661000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1566387661000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1566387661000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1566387661000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1566387661000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1566387661000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1566387661000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1566387661000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1566387661000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1566387661000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1566387661000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1566387661000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1566387661000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1566387661000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1566387661000},{"_id":"themes/yilia/source-src/css/declare.scss","hash":"81785d0d2dc1f8ecf60d52767c8324fdf7a27d80","modified":1566387661000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1566387661000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1566387661000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1566387661000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1566387661000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1566387661000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1566387661000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"93689683dcdc6d98246932efb45fc79a3032e391","modified":1566387661000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1566387661000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1566387661000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1566387661000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1566387661000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1566387661000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1566387661000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1566387661000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1566387661000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1566387661000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1566387661000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1566387661000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1566387661000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1566387661000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1566387661000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1566387661000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1566387661000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1566387661000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1566387661000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1566387661000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1566387661000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1566387661000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1566387661000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1566387661000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/docker1.jpg","hash":"0702d8ad888066ef821f0401c0b2c10da3815563","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/docker1s.jpg","hash":"5ee1c61ef57ac3ab80ac6f128eb52fbe8e69963b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/git0001.jpg","hash":"1d45d763e6ebb41b20d1762f81e0d6cc4fae43a5","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/gitlab1s.jpg","hash":"832eaf262e03b04d91b9ecdb1363dd4d7de64396","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/monkey.jpg","hash":"b8013b45d922d94ad5d8d31a5f237b9d054d5a1b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p42001s.jpg","hash":"9d34434c24838ac2589e0edc5e4cde3d121c82eb","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p43001s.jpg","hash":"0b7d4d832df8abcb479fd649bd8458e07ab048eb","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45001.jpg","hash":"c4c0af861982d6b7ad7adbdefaeab4f9d1d428cf","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45002.jpg","hash":"026b14df23e591164bb1036ac0497b7a019b6444","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45003.jpg","hash":"dd8ef4bef7f73efe9572d2371db37fbbfcb05c4c","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45005.jpg","hash":"a2f78c2bace6a73234d12e68a87e1d7815ee349d","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45004.jpg","hash":"807c41af57547a6061b9495368eebada93b35bd7","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45008.jpg","hash":"ca4a65ac34f90c415ab5152051d70cb1a5c380d5","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45010.jpg","hash":"74d808f10f06d9595a11c75e8824edc3428c4a33","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p47003.png","hash":"adedd0a2584454efcce63c3da6053bafc9682583","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p48000.jpg","hash":"c5477d5598a94594e36966594ba881268cf5aa2c","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p48001.jpg","hash":"1175941a4e7adb2f70d411968e5656b749466af0","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p48002.jpg","hash":"14f48aecfb86808f825d201e5e9a4cc1b0ee3626","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p48003.jpg","hash":"41f3aead830f0df48162e01de206c701a5f0aea6","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p48004.jpg","hash":"2c039ad0953d5a69468ab40bc5092631a67ea58b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p49000.png","hash":"64cc1fa3f60cbba2cd6e7d7804296a39caecee64","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p49001.png","hash":"7ad1ed7de6b97eb35f10e5ebebea2818ee6c2627","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p50000.png","hash":"68f5cca4597f0126201eb5baef532258fe0c63fc","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p47001.png","hash":"7c3786ca4bf1c176a646ea001c0db6631aa78190","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p49002.png","hash":"92dbced0f8dff89f8b5246af3c879bc82fa300a1","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p52000.jpg","hash":"18bd0292acd62b52a6e14119414936b4cd45f8cb","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p52001.jpg","hash":"98e93e61e971fc6ec5f3c92d5eeb7ce72fbff02e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p51000.png","hash":"1cd3e67c9a83fc08853ea6877c53cfe1d1d9e76f","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p52002.png","hash":"222ef8f7b6cd5e3aa07382c922e0d573a6e50f7c","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p54001.png","hash":"964bff3217ef2164a0d962601f78e6c48cac5a3d","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p55001.png","hash":"720fe1c18d8c39ce9dddae7e3dddf719cdf5c18a","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p56000.png","hash":"56cf4e532d7ed4cf7480cde1c1f61f5b26f56c1d","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p57000.jpg","hash":"aaa4e3cf42dd6c140598bef7402b2e071ab468a4","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p57001.png","hash":"bdf063a0d565ffe7ab9b0cc5936e6bb37497eebb","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p58000.png","hash":"fcc79fc1d340ec29efa5b7cc1844ca48d6f89c5f","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p59000.png","hash":"6c6c1bb883c14e9192db8e7e8062b44c5b1911b1","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p59003.png","hash":"8cfb793f3f3608051d2a362d74cfed017020bfab","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p59006.png","hash":"0e6c08e3fa188b407a107bee98c0f2ce22df8c79","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p60000.png","hash":"409b9abb2d9ea1732bfc6371d16f937c6e1c5f5d","modified":1566540681117},{"_id":"themes/yilia/source/img/xjy/rab003.jpg","hash":"95813b30ef6273510d3ed12a0163783fcc651932","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p59002.png","hash":"13c55f4af2af877b3cc0ee9ba571bd57a77f12ca","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/sht31001.png","hash":"bca85173788a7c5e9037178ac436b2290ffb1cb9","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/sht31003.jpg","hash":"806acc39fb85b670dac4d86e7f7ac9639db07807","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/sjds001.jpg","hash":"5c8fcd1047b137f8bbceaac8ed4176c3942e18d8","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/sht31004.png","hash":"44bc517adcc7ecd972f7a91d8fc53f8208f7bccf","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp003.jpg","hash":"cc29f4201bcbd83e6cb1f58a853728881bfdf474","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp006.jpg","hash":"8c06589ed91dfcb316ae6e50e80769408a092b21","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp002.png","hash":"f5cea7dd21f3676f61ad95909f921a742db3a7e9","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp005.png","hash":"839a06ab1b4d36c23849022153e91a0eb28c677d","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/sht31002.png","hash":"e3fe68a275737fc5ef8ae4e02abf4700fbe583a3","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp008.jpg","hash":"671dfaf19e30c2a87469fc08d2b681f092460277","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/socket001.png","hash":"99b03609189c4418c142c5b78a6f58eb8f821fc5","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp009.png","hash":"a174b185ef08d743b51b9a915966e38a19396073","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/statsvn002.jpg","hash":"82b8a3e67bffd94f1227d1c547a4633472dcb4ef","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/webhook001s.jpg","hash":"39ac6cf9264ab2442845da5459479e8381ffc37e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/tangquanchi.jpg","hash":"e9f247a2e560364739b23b8244d43236353dc48a","modified":1566387661000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1566387661000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1566387661000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1566387661000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1566387661000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1566387661000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1566387661000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1566387661000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1566387661000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1566387661000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1566387661000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1566387661000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/diary.jpg","hash":"334a4a7120efd8a59e0f59809d99e1e272cbe450","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p42001.jpg","hash":"f3219c934856f8e9556a70fe26026ac4d4cd917b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p42002.jpg","hash":"405b21c0ab239d998e9555af7ce1c8e3e01a2cab","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p42004.jpg","hash":"b7fa84b8a0abc3ef941025d6b758300154f71af5","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p42003.jpg","hash":"f6ebccb0fac9a0e4f4459edaeefcb71c272dd413","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/alipay.jpg","hash":"10353a9442053ad23a26a5588ee37c0bf55049fe","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45000s.jpg","hash":"719432c1fd9e131ffb0e4c28cbef0d474d175bbd","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45000.jpg","hash":"2f0c237566c496de3d026da52f5ba720aefd950d","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p44001s.jpg","hash":"f0bd601865dcc9c9d7c29a1c1d78b6760f4e79a3","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45006.jpg","hash":"b60fbbb558d32e082a3df4ba3b96c5aa77c05fa6","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45007.jpg","hash":"b05a89c605ebb3158e02317673cd76a1ca85498c","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p45009.jpg","hash":"dd8fb215bc8d4a2c6e4f6ede89bbe366574c720b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46000s.jpg","hash":"3a29eb95932d1f3155782d2d8727f8aaa3f466bb","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46001.png","hash":"3a944a0548c92a7d8129ac6decfe9e249068af68","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/bch001.jpg","hash":"a7c836270b54080f7dae17f807997b5b32b1bf8c","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p47002.png","hash":"2550a35834b0e203dff61bf157ac7b8baa955a71","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p47004.png","hash":"5942abbe76735a4ea78764f7d15adc6d32cad3c9","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p50002.png","hash":"659a6abd93aa985671560d579efdbffe3188cff7","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p54000.jpg","hash":"9d71e939304957b8062307f2c8ce65a22cccf368","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p57002.png","hash":"c5d56ea75e9cf823e0fc8c42c890967269bbe1fd","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p59001.png","hash":"33edadca34cfbfd0d1768fecb08231bc9e27f3ba","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/rab002.jpg","hash":"5fdbaa30955cdd0feb69d08bf7389ed6483d9e0f","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/rab0001.png","hash":"bd5e373a302cf35f71c162b1bc2d9fe95ec10ac4","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp004.png","hash":"1745e18d62861f7c58356d731f8993940f72b8f0","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp007.png","hash":"e741fe3989a4b38a33eb5461343dbd5a20efd3e0","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/statsvn001.jpg","hash":"cb7b9834d7fa1b349673cae88aa1575ef38a2492","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/statsvn003.jpg","hash":"c535344b04301c58f63842aef1d173b3d9e0557e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp006.png","hash":"f7e7195f7d31813ba37ceac7867bf59b1db6b498","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/webhook002.vsd","hash":"031f748828bc873b1ea6c8f645da5fd44093fbe5","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/webhook002.jpg","hash":"83566c316ccb1571f728c320011d563f010e1c6e","modified":1566387661000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/hexoSimple1.jpg","hash":"12dc93fd58c5d2c030f2738945cac5701f522133","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/hexoSimple2.jpg","hash":"cd02d8ef037cf01330ccfc267ee3eaae95842f1a","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/hexoSimple3.jpg","hash":"e68de1ff8d35fe369d4b152579888e283f65da9a","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p47006.jpg","hash":"eb56bd0f3eac466eca039885c083cf028732f5d5","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p50001.png","hash":"c7b504a161ca45700f39fe989d74197dcec899a9","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46007.png","hash":"3d44b691fcd4b9536ae8f5b116d4641037b06b0b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p55000.png","hash":"19b52b899f9822d0d432171cb42a949753164c6e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p60003.png","hash":"fb599c20bd2a341eac269ac220a5beeeec14d422","modified":1566540494661},{"_id":"themes/yilia/source/img/xjy/rab001.jpg","hash":"a2965e40573d981ac3a895af976997405289033e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/wxpay.png","hash":"7da6e029c93817bb6422313289b0a9fb32dfb632","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/gitlab1.jpg","hash":"92f7a1ba7b134909744b64633fea8025d0a87e84","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/jenkins config.png","hash":"dd952388221ebbc565cfaf9958d6f76451aa2860","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46002.png","hash":"de29be4a35e528c558b8e05f7bbe9a9773fc705e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p50004.png","hash":"008ca4782e71fa1014711570009545d5355862ce","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p60002.png","hash":"b7e4c037c7a40f535f4c28860350a76bea1161ea","modified":1566540370732},{"_id":"themes/yilia/source/img/xjy/p50003.png","hash":"0f35891c96c4250b959a6c064ded209c3501d72f","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/smp001.png","hash":"986206b653e1e808432e5b57792d0ee137a4ca93","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/webhook001.jpg","hash":"c9e0e81be48317653bdf3d23b34012620da28135","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/dizi001.jpg","hash":"f709e47036cfae3f9f6a91a7bd0217dcb9eb4786","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p44002.png","hash":"36859dca05bbe0ca09aa3281fbe0bd27995b7435","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46003.png","hash":"dd81ffb4f790a45713b11918825b86d815e128da","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p47005.jpg","hash":"a1e8002fc96818e8c5f3e3e8258af2dbb8bc8f99","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46006.png","hash":"2fc616230634da3350905f42e198f89854df2ae1","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p34004s.jpg","hash":"eb0bcccc43c4b774058fff1850db13097ed7f0d8","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p44001.jpg","hash":"81533b1ac8d71415d4619f02788cd9beeddb5e47","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46005.png","hash":"3a06f8b4c8ca447456e7893be4d78c5195f5bc4e","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46004.png","hash":"716f569a8f27eb8bc971c2be4a4be1c07fc9267b","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p46008.png","hash":"4e1e5835c1dff0a772f0c2afbee727033a6c2671","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/优惠券.vsd","hash":"91fba5fd8c23fce7d408c2af7b5b68db1c51f22a","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p34001.jpg","hash":"37bccd58d02346c314f67bc00451c95ab4568689","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p34003.jpg","hash":"5ffcb8d86091365230e4af536d21cc91012e7eae","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p34004.jpg","hash":"fd78dbb7370685943144d43644ed49b0c88d9df7","modified":1566387661000},{"_id":"themes/yilia/source/img/xjy/p34002.jpg","hash":"228af15d63cada5ab0f80fbaeffbff0b62db7a55","modified":1566387661000},{"_id":"themes/yilia/source/music/人生何处不相逢.mp3","hash":"85f701b7c7c489770e8d0b534372efdaa964d763","modified":1566387661000},{"_id":"source/_posts/p61.md","hash":"ca6204bbb070cd79c92e056bdf9ed2edd70129b7","modified":1571542567700},{"_id":"themes/yilia/source/img/xjy/p61001.png","hash":"e33370ab0d512a8a19a79e1b6335c517adc5911a","modified":1569056920925},{"_id":"themes/yilia/source/img/xjy/p61002.png","hash":"5e711d1ec779262b232ea0bcabc85cc9c5e17831","modified":1569057190676},{"_id":"themes/yilia/source/img/xjy/p61003.png","hash":"d7c13e611ecdaf3298451af00bcc2e5e0889d5d7","modified":1569057278620},{"_id":"themes/yilia/source/img/xjy/p61004.png","hash":"cad983336e941aebfb7557910fec9f0ebd0027b9","modified":1569057389269},{"_id":"themes/yilia/source/img/xjy/p61005.png","hash":"dc53cd3ef673864aa9aa880c44e3be51dde58388","modified":1569057494826},{"_id":"themes/yilia/source/img/xjy/p61010.png","hash":"e9f7f43438094e9f54219ad03435abf9c5588169","modified":1569058509306},{"_id":"themes/yilia/source/img/xjy/p61008.png","hash":"d9ec2135c5e5431d37a9e555de57db78cb850f52","modified":1569058181999},{"_id":"themes/yilia/source/img/xjy/p61007.png","hash":"e43a584431931171a8ec2e8ff0c08d61277ad6ee","modified":1569057647398},{"_id":"themes/yilia/source/img/xjy/p61009.png","hash":"421b70f15a564dee23115a36d7f622d93aa427f7","modified":1569058313598},{"_id":"themes/yilia/source/img/xjy/p61014.png","hash":"fb71ea4e2c58a18d27f5a21b5c52e75156243af7","modified":1569059150999},{"_id":"themes/yilia/source/img/xjy/p61012.png","hash":"3b2b35e77a529ce49ecc0432aa13be576d652554","modified":1569058757821},{"_id":"themes/yilia/source/img/xjy/p61015.png","hash":"cd39f6e88b3f66dae927a0cfd8ec25467c0c9b5d","modified":1569059426378},{"_id":"themes/yilia/source/img/xjy/p61016.png","hash":"515364662d9659987d488b72b8f633bd44f4cda8","modified":1569059434060},{"_id":"themes/yilia/source/img/xjy/p61019.png","hash":"8676ca0e67426dd02782dc2e94bf86f94b4c98e9","modified":1569059691683},{"_id":"themes/yilia/source/img/xjy/p61018.png","hash":"adb952dd72e98bb06376756e07b6da3b466b71b5","modified":1569059636818},{"_id":"themes/yilia/source/img/xjy/p61017.png","hash":"f9a46eec84241ca8d4b755e2657d522d2db6a0f2","modified":1569059488191},{"_id":"themes/yilia/source/img/xjy/p61020.png","hash":"0f82cef2a2b183817489c51c5b44ded4067fc608","modified":1569059818062},{"_id":"themes/yilia/source/img/xjy/p61006.png","hash":"d00b6ce21eff6c8e1de4b63ff704341e86900144","modified":1569057567746},{"_id":"themes/yilia/source/img/xjy/p61013.png","hash":"5db5ba57be9a3b272c9bcff51ca752a2cbc59cac","modified":1569058919761},{"_id":"themes/yilia/source/img/xjy/p61011.png","hash":"1c1711ff22d7fae20f955b89b0fdea813e71b334","modified":1569058713135},{"_id":"themes/yilia/source/img/xjy/p61000.png","hash":"5ae13effe933458a16183d0490e4b4801978b1a8","modified":1572942514335},{"_id":"source/_posts/p62.md","hash":"c16003baa4e3b4ee0408a1d6812a20a1ad132eb9","modified":1572944758615},{"_id":"themes/yilia/source/img/xjy/p62000.png","hash":"fb0747ed7b344dab2f09e5d7ec51d576443d1a63","modified":1572944836475}],"Category":[{"name":"未分类","_id":"cjznq3jfl0002u8veua9kt5ya"},{"name":"乐器知识","_id":"cjznq3jfs0007u8vesosy4o6y"},{"name":"rabbitmq","_id":"cjznq3jfz000du8vei50hrcpn"},{"name":"JAVA","_id":"cjznq3jg6000hu8vepvginh6y"},{"name":"树莓派学习","_id":"cjznq3jgc000lu8ve9d1wec49"},{"name":"生活杂记","parent":"cjznq3jfs0007u8vesosy4o6y","_id":"cjznq3jgq000wu8ve6tycku1k"},{"name":"mqtt","parent":"cjznq3jfz000du8vei50hrcpn","_id":"cjznq3jha001gu8ve44i40j0x"},{"name":"WORDPRESS","_id":"cjznq3jhv001yu8veosr5fp2k"},{"name":"编程语言","parent":"cjznq3jg6000hu8vepvginh6y","_id":"cjznq3ji10026u8vevvgafcn0"},{"name":"生活杂记","_id":"cjznq3jig002gu8velpzf1ssl"},{"name":"LINUX","_id":"cjznq3jin002qu8vepx206j1m"},{"name":"技术感悟","_id":"cjznq3jj10032u8ve9htm74p3"},{"name":"DB2","_id":"cjznq3jj70038u8vef6b24rg1"},{"name":"rabbitmq学习","_id":"cjznq3jjl003gu8vewrn44mh4"},{"name":"docker","_id":"cjznq3jk0003ru8ve07uamkk5"},{"name":"centos","_id":"cjznq3jk7003zu8veopj4h6nr"},{"name":"nginx","_id":"cjznq3jkc0047u8ve32iodwjg"},{"name":"linux","_id":"cjznq3jkh004du8vewbuwcuf5"},{"name":"编程语言","parent":"cjznq3jhv001yu8veosr5fp2k","_id":"cjznq3jkq004ru8vesfs5y0qy"},{"name":"闲谈","_id":"cjznq3jks004uu8ve6og62wct"},{"name":"编程语言","_id":"cjznq3jky0057u8vewhfdvbit"},{"name":"编程语言","parent":"cjznq3jin002qu8vepx206j1m","_id":"cjznq3jle005ru8ve7p0fb9fy"},{"name":"生活杂记","parent":"cjznq3jj10032u8ve9htm74p3","_id":"cjznq3jm1006fu8vecxv79fv2"},{"name":"数据库","parent":"cjznq3jj70038u8vef6b24rg1","_id":"cjznq3jm6006pu8vesukbv196"},{"name":"DOCKER","_id":"cjznq3jmi0075u8veoq2z5qrf"},{"name":"编程语言","parent":"cjznq3jk0003ru8ve07uamkk5","_id":"cjznq3jml007du8vefuisvn2k"},{"name":"shadowsocks","parent":"cjznq3jk7003zu8veopj4h6nr","_id":"cjznq3jmo007ju8vef3sg4edi"},{"name":"编程语言","parent":"cjznq3jks004uu8ve6og62wct","_id":"cjznq3jmw007xu8veeigx6hlj"},{"name":"运维技术","_id":"ck1yfrbm10001h0vex3e5f3ey"}],"Data":[],"Page":[],"Post":[{"title":"该文章用于记录树莓派custshell的配置","id":"252","date":"2018-01-07T07:52:24.000Z","declare":true,"toc":true,"_content":"\n1.开启ssh功能\n\n\t在内存卡根目录新建一个ssh文件\n\n2.打开i2c和camera功能\n\n\tsudo raspi-config nonint do_i2c 0 \n    sudo raspi-config nonint do_camera 0\n\n3.复制custshell文件到指定目录\n\n4.开启crontab任务","source":"_posts/p10.md","raw":"---\ntitle: 该文章用于记录树莓派custshell的配置\nid: 252\ncategories:\n  - 未分类\ndate: 2018-01-07 15:52:24\ntags: [树莓派]\ndeclare: true\ntoc: true\n---\n\n1.开启ssh功能\n\n\t在内存卡根目录新建一个ssh文件\n\n2.打开i2c和camera功能\n\n\tsudo raspi-config nonint do_i2c 0 \n    sudo raspi-config nonint do_camera 0\n\n3.复制custshell文件到指定目录\n\n4.开启crontab任务","slug":"p10","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfb0000u8ve5xtxlr1f","content":"<p>1.开启ssh功能</p>\n<pre><code>在内存卡根目录新建一个ssh文件\n</code></pre><p>2.打开i2c和camera功能</p>\n<pre><code>sudo raspi-config nonint do_i2c 0 \nsudo raspi-config nonint do_camera 0\n</code></pre><p>3.复制custshell文件到指定目录</p>\n<p>4.开启crontab任务</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.开启ssh功能</p>\n<pre><code>在内存卡根目录新建一个ssh文件\n</code></pre><p>2.打开i2c和camera功能</p>\n<pre><code>sudo raspi-config nonint do_i2c 0 \nsudo raspi-config nonint do_camera 0\n</code></pre><p>3.复制custshell文件到指定目录</p>\n<p>4.开启crontab任务</p>\n"},{"title":"笛子指法全表","id":"326","date":"2018-01-14T08:11:50.000Z","declare":true,"toc":true,"_content":"\n转载至：[新浪博客](http://blog.sina.com.cn/s/blog_5f3df34701015slp.html) \n\n![](/img/xjy/dizi001.jpg) \n","source":"_posts/p11.md","raw":"---\ntitle: 笛子指法全表\nid: 326\ncategories:\n  - 乐器知识\n  - 生活杂记\ndate: 2018-01-14 16:11:50\ntags: [闲谈, 音乐, 乐器, 笛子]\ndeclare: true\ntoc: true\n---\n\n转载至：[新浪博客](http://blog.sina.com.cn/s/blog_5f3df34701015slp.html) \n\n![](/img/xjy/dizi001.jpg) \n","slug":"p11","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfj0001u8vepm69entf","content":"<p>转载至：<a href=\"http://blog.sina.com.cn/s/blog_5f3df34701015slp.html\" target=\"_blank\" rel=\"noopener\">新浪博客</a> </p>\n<p><img src=\"/img/xjy/dizi001.jpg\" alt=\"\"> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载至：<a href=\"http://blog.sina.com.cn/s/blog_5f3df34701015slp.html\" target=\"_blank\" rel=\"noopener\">新浪博客</a> </p>\n<p><img src=\"/img/xjy/dizi001.jpg\" alt=\"\"> </p>\n"},{"title":"测试mqtt与rabbitmq的消息交互","id":"306","date":"2018-01-09T00:35:04.000Z","declare":true,"toc":true,"_content":"\n**原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）** \n\n<!--more-->\n\n1.开启rabbitmq中的mqtt插件\n\n``` shell \nrabbitmq-plugins enable rabbitmq_mqtt\n```\n\n\n2.python安装mqtt库文件\n\n``` shell \npip install paho-mqtt\n```\n\n3.生产者端代码\n\n``` py \nimport datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()\n```\n\n4.消费者端代码\n\n``` py \nimport pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming() \n```\n\n5.结果如下：\n\n![](/img/xjy/rab001.jpg) \n\n6.rabbitmq管理页面显示情况\n\n（1）交换信息\n\n![](/img/xjy/rab002.jpg) \n\n（2）连接信息\n\n![](/img/xjy/rab003.jpg)\n","source":"_posts/p13.md","raw":"---\ntitle: 测试mqtt与rabbitmq的消息交互\nid: 306\ncategories:\n  - rabbitmq\n  - mqtt\ndate: 2018-01-09 08:35:04\ntags:\n  - rabbitmq\n  - mqtt\ndeclare: true\ntoc: true\n---\n\n**原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）** \n\n<!--more-->\n\n1.开启rabbitmq中的mqtt插件\n\n``` shell \nrabbitmq-plugins enable rabbitmq_mqtt\n```\n\n\n2.python安装mqtt库文件\n\n``` shell \npip install paho-mqtt\n```\n\n3.生产者端代码\n\n``` py \nimport datetime\nimport json\nimport paho.mqtt.client\n#import sense_hat\nimport time\nsleepTime = 1\n# MQTT details\nmqttDeviceId = \"Raspberry-Pi:Prototype\"\nmqttBrokerHost = \"127.0.0.1\"\nmqttBrokerPort = 1883\nmqttUser = \"guest\"\nmqttPassword = \"guest\"\nmqttTelemetryTopic = \"RPi.Data\"\n#sense = sense_hat.SenseHat()\n# Callback methods\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n          print(\"Connected to MQTT broker (RC: %s)\" % rc)\n    else:\n          print(\"Connection to MQTT broker failed (RC: %s)\" % rc)\ndef on_log(client, userdata, level, buf):\n    print(buf)\ndef on_publish(client, userdata, mid):\n    print(\"Data published (Mid: %s)\" % mid)\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n          print(\"Unexpected disconnect\")\n    print(\"Disconnected from MQTT broker\")\nmqttClient = paho.mqtt.client.Client()\nmqttClient.username_pw_set(mqttUser, mqttPassword)\n# Register callbacks\nmqttClient.on_connect = on_connect\nmqttClient.on_log = on_log\nmqttClient.on_publish = on_publish\nmqttClient.on_disconnnect = on_disconnect\n# Connect to MQTT broker\nmqttClient.connect(mqttBrokerHost, mqttBrokerPort, 60)\nmqttClient.loop_start()\n# Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format\nwhile True:\n    telemetryData = {}\n    telemetryData[\"DeviceId\"] = mqttDeviceId\n    telemetryData[\"Timestamp\"] = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n    #telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))\n    #telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))\n    #telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))\n    telemetryData[\"Temperature\"] = '1111'\n    telemetryData[\"Humidity\"] = '2222'\n    telemetryData[\"Pressure\"] = '3333'\n    telemetryDataJson = json.dumps(telemetryData)\n    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, 1)\n    time.sleep(sleepTime)\nmqttClient.loop_stop()\nmqttClient.disconnect()\n```\n\n4.消费者端代码\n\n``` py \nimport pika\nimport sys\n\n#指定远程rabbitmq的用户名密码\nusername = 'guest'\npwd = 'guest'\nuser_pwd = pika.PlainCredentials(username, pwd)\n\n#创建连接\ns_conn = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=user_pwd))\n\n#在连接上创建一个频道\nchannel = s_conn.channel()\n\n# 声明exchange的类型为模糊匹配，这里设置交换为持久化的\nchannel.exchange_declare(exchange='amq.topic',exchange_type='topic', durable=True)  \n\n# 创建随机一个队列当消费者退出的时候，该队列被删除。\nresult = channel.queue_declare(exclusive=True)\n\n# 创建一个随机队列名字。  \nqueue_name = result.method.queue\n\n#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到\nbinding_keys = ['RPi.Data']\n\n#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息\nfor binding_key in binding_keys:\n    channel.queue_bind(exchange='amq.topic',\n                       queue= queue_name,\n                       routing_key=binding_key)\n\n#设置callback等，其中不给rabbitmq发送确认\ndef callback(ch, method, properties, body):\n    print(\" [x] %r:%r\" % (method.routing_key, body))\nchannel.basic_consume(callback,queue= queue_name,no_ack=True)\n\n#开始循环接收消息\nprint(' [*] Waiting for logs. To exit press CTRL+C')\nchannel.start_consuming() \n```\n\n5.结果如下：\n\n![](/img/xjy/rab001.jpg) \n\n6.rabbitmq管理页面显示情况\n\n（1）交换信息\n\n![](/img/xjy/rab002.jpg) \n\n（2）连接信息\n\n![](/img/xjy/rab003.jpg)\n","slug":"p13","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfo0004u8vekuwtixxs","content":"<p><strong>原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）</strong> </p>\n<a id=\"more\"></a>\n<p>1.开启rabbitmq中的mqtt插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_mqtt</span><br></pre></td></tr></table></figure>\n<p>2.python安装mqtt库文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install paho-mqtt</span><br></pre></td></tr></table></figure>\n<p>3.生产者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> paho.mqtt.client</span><br><span class=\"line\"><span class=\"comment\">#import sense_hat</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">sleepTime = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># MQTT details</span></span><br><span class=\"line\">mqttDeviceId = <span class=\"string\">\"Raspberry-Pi:Prototype\"</span></span><br><span class=\"line\">mqttBrokerHost = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">mqttBrokerPort = <span class=\"number\">1883</span></span><br><span class=\"line\">mqttUser = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttPassword = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttTelemetryTopic = <span class=\"string\">\"RPi.Data\"</span></span><br><span class=\"line\"><span class=\"comment\">#sense = sense_hat.SenseHat()</span></span><br><span class=\"line\"><span class=\"comment\"># Callback methods</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_connect</span><span class=\"params\">(client, userdata, flags, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc == <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connected to MQTT broker (RC: %s)\"</span> % rc)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connection to MQTT broker failed (RC: %s)\"</span> % rc)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_log</span><span class=\"params\">(client, userdata, level, buf)</span>:</span></span><br><span class=\"line\">    print(buf)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_publish</span><span class=\"params\">(client, userdata, mid)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Data published (Mid: %s)\"</span> % mid)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_disconnect</span><span class=\"params\">(client, userdata, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc != <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Unexpected disconnect\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Disconnected from MQTT broker\"</span>)</span><br><span class=\"line\">mqttClient = paho.mqtt.client.Client()</span><br><span class=\"line\">mqttClient.username_pw_set(mqttUser, mqttPassword)</span><br><span class=\"line\"><span class=\"comment\"># Register callbacks</span></span><br><span class=\"line\">mqttClient.on_connect = on_connect</span><br><span class=\"line\">mqttClient.on_log = on_log</span><br><span class=\"line\">mqttClient.on_publish = on_publish</span><br><span class=\"line\">mqttClient.on_disconnnect = on_disconnect</span><br><span class=\"line\"><span class=\"comment\"># Connect to MQTT broker</span></span><br><span class=\"line\">mqttClient.connect(mqttBrokerHost, mqttBrokerPort, <span class=\"number\">60</span>)</span><br><span class=\"line\">mqttClient.loop_start()</span><br><span class=\"line\"><span class=\"comment\"># Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    telemetryData = &#123;&#125;</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"DeviceId\"</span>] = mqttDeviceId</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Timestamp\"</span>] = datetime.datetime.utcnow().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S.%f'</span>)[:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Temperature\"</span>] = <span class=\"string\">'1111'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Humidity\"</span>] = <span class=\"string\">'2222'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Pressure\"</span>] = <span class=\"string\">'3333'</span></span><br><span class=\"line\">    telemetryDataJson = json.dumps(telemetryData)</span><br><span class=\"line\">    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, <span class=\"number\">1</span>)</span><br><span class=\"line\">    time.sleep(sleepTime)</span><br><span class=\"line\">mqttClient.loop_stop()</span><br><span class=\"line\">mqttClient.disconnect()</span><br></pre></td></tr></table></figure>\n<p>4.消费者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定远程rabbitmq的用户名密码</span></span><br><span class=\"line\">username = <span class=\"string\">'guest'</span></span><br><span class=\"line\">pwd = <span class=\"string\">'guest'</span></span><br><span class=\"line\">user_pwd = pika.PlainCredentials(username, pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建连接</span></span><br><span class=\"line\">s_conn = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, credentials=user_pwd))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在连接上创建一个频道</span></span><br><span class=\"line\">channel = s_conn.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明exchange的类型为模糊匹配，这里设置交换为持久化的</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'amq.topic'</span>,exchange_type=<span class=\"string\">'topic'</span>, durable=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建随机一个队列当消费者退出的时候，该队列被删除。</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个随机队列名字。  </span></span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到</span></span><br><span class=\"line\">binding_keys = [<span class=\"string\">'RPi.Data'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'amq.topic'</span>,</span><br><span class=\"line\">                       queue= queue_name,</span><br><span class=\"line\">                       routing_key=binding_key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置callback等，其中不给rabbitmq发送确认</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] %r:%r\"</span> % (method.routing_key, body))</span><br><span class=\"line\">channel.basic_consume(callback,queue= queue_name,no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开始循环接收消息</span></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>5.结果如下：</p>\n<p><img src=\"/img/xjy/rab001.jpg\" alt=\"\"> </p>\n<p>6.rabbitmq管理页面显示情况</p>\n<p>（1）交换信息</p>\n<p><img src=\"/img/xjy/rab002.jpg\" alt=\"\"> </p>\n<p>（2）连接信息</p>\n<p><img src=\"/img/xjy/rab003.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>原理：mqtt客户端发送消息，rabbitmq端通过mqtt集成插件的功能接收到消息，并发送到相应交换（其中该topic类型交换的名字在rabbitmq配置文件中配置，默认为amq.topic）</strong> </p>","more":"<p>1.开启rabbitmq中的mqtt插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_mqtt</span><br></pre></td></tr></table></figure>\n<p>2.python安装mqtt库文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install paho-mqtt</span><br></pre></td></tr></table></figure>\n<p>3.生产者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> paho.mqtt.client</span><br><span class=\"line\"><span class=\"comment\">#import sense_hat</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">sleepTime = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># MQTT details</span></span><br><span class=\"line\">mqttDeviceId = <span class=\"string\">\"Raspberry-Pi:Prototype\"</span></span><br><span class=\"line\">mqttBrokerHost = <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">mqttBrokerPort = <span class=\"number\">1883</span></span><br><span class=\"line\">mqttUser = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttPassword = <span class=\"string\">\"guest\"</span></span><br><span class=\"line\">mqttTelemetryTopic = <span class=\"string\">\"RPi.Data\"</span></span><br><span class=\"line\"><span class=\"comment\">#sense = sense_hat.SenseHat()</span></span><br><span class=\"line\"><span class=\"comment\"># Callback methods</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_connect</span><span class=\"params\">(client, userdata, flags, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc == <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connected to MQTT broker (RC: %s)\"</span> % rc)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Connection to MQTT broker failed (RC: %s)\"</span> % rc)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_log</span><span class=\"params\">(client, userdata, level, buf)</span>:</span></span><br><span class=\"line\">    print(buf)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_publish</span><span class=\"params\">(client, userdata, mid)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Data published (Mid: %s)\"</span> % mid)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_disconnect</span><span class=\"params\">(client, userdata, rc)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> rc != <span class=\"number\">0</span>:</span><br><span class=\"line\">          print(<span class=\"string\">\"Unexpected disconnect\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Disconnected from MQTT broker\"</span>)</span><br><span class=\"line\">mqttClient = paho.mqtt.client.Client()</span><br><span class=\"line\">mqttClient.username_pw_set(mqttUser, mqttPassword)</span><br><span class=\"line\"><span class=\"comment\"># Register callbacks</span></span><br><span class=\"line\">mqttClient.on_connect = on_connect</span><br><span class=\"line\">mqttClient.on_log = on_log</span><br><span class=\"line\">mqttClient.on_publish = on_publish</span><br><span class=\"line\">mqttClient.on_disconnnect = on_disconnect</span><br><span class=\"line\"><span class=\"comment\"># Connect to MQTT broker</span></span><br><span class=\"line\">mqttClient.connect(mqttBrokerHost, mqttBrokerPort, <span class=\"number\">60</span>)</span><br><span class=\"line\">mqttClient.loop_start()</span><br><span class=\"line\"><span class=\"comment\"># Collect telemetry information from Sense HAT and publish to MQTT broker in JSON format</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    telemetryData = &#123;&#125;</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"DeviceId\"</span>] = mqttDeviceId</span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Timestamp\"</span>] = datetime.datetime.utcnow().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S.%f'</span>)[:<span class=\"number\">-3</span>]</span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Temperature\"] = str(round(sense.get_temperature(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Humidity\"] = str(round(sense.get_humidity(), 2))</span></span><br><span class=\"line\">    <span class=\"comment\">#telemetryData[\"Pressure\"] = str(round(sense.get_pressure(), 2))</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Temperature\"</span>] = <span class=\"string\">'1111'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Humidity\"</span>] = <span class=\"string\">'2222'</span></span><br><span class=\"line\">    telemetryData[<span class=\"string\">\"Pressure\"</span>] = <span class=\"string\">'3333'</span></span><br><span class=\"line\">    telemetryDataJson = json.dumps(telemetryData)</span><br><span class=\"line\">    mqttClient.publish(mqttTelemetryTopic, telemetryDataJson, <span class=\"number\">1</span>)</span><br><span class=\"line\">    time.sleep(sleepTime)</span><br><span class=\"line\">mqttClient.loop_stop()</span><br><span class=\"line\">mqttClient.disconnect()</span><br></pre></td></tr></table></figure>\n<p>4.消费者端代码</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定远程rabbitmq的用户名密码</span></span><br><span class=\"line\">username = <span class=\"string\">'guest'</span></span><br><span class=\"line\">pwd = <span class=\"string\">'guest'</span></span><br><span class=\"line\">user_pwd = pika.PlainCredentials(username, pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建连接</span></span><br><span class=\"line\">s_conn = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'127.0.0.1'</span>, credentials=user_pwd))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在连接上创建一个频道</span></span><br><span class=\"line\">channel = s_conn.channel()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明exchange的类型为模糊匹配，这里设置交换为持久化的</span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'amq.topic'</span>,exchange_type=<span class=\"string\">'topic'</span>, durable=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建随机一个队列当消费者退出的时候，该队列被删除。</span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个随机队列名字。  </span></span><br><span class=\"line\">queue_name = result.method.queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#绑定键。‘#’匹配所有字符，‘*’匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到</span></span><br><span class=\"line\">binding_keys = [<span class=\"string\">'RPi.Data'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过循环绑定多个“交换机-队列-关键字”，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> binding_key <span class=\"keyword\">in</span> binding_keys:</span><br><span class=\"line\">    channel.queue_bind(exchange=<span class=\"string\">'amq.topic'</span>,</span><br><span class=\"line\">                       queue= queue_name,</span><br><span class=\"line\">                       routing_key=binding_key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置callback等，其中不给rabbitmq发送确认</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\" [x] %r:%r\"</span> % (method.routing_key, body))</span><br><span class=\"line\">channel.basic_consume(callback,queue= queue_name,no_ack=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开始循环接收消息</span></span><br><span class=\"line\">print(<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure>\n<p>5.结果如下：</p>\n<p><img src=\"/img/xjy/rab001.jpg\" alt=\"\"> </p>\n<p>6.rabbitmq管理页面显示情况</p>\n<p>（1）交换信息</p>\n<p><img src=\"/img/xjy/rab002.jpg\" alt=\"\"> </p>\n<p>（2）连接信息</p>\n<p><img src=\"/img/xjy/rab003.jpg\" alt=\"\"></p>"},{"title":"用StatSVN统计SVN库中各作者的提交情况和排行","id":"421","date":"2018-02-09T07:36:46.000Z","declare":true,"toc":true,"_content":"\n# 想法\n\n我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 \n\n# **实践**\n\n又说了一大堆废话，下面是我的安装和使用过程：\n\n<!--more-->\n\n1.下载StatSVN，其实是一个jar包\n\n[http://sourceforge.net/projects/statsvn/](http://sourceforge.net/projects/statsvn/)\n\n2.解压后把jar包拷贝到指定目录\n\n例如我的：D:\\Code\\statsvn-0.7.0\n\n3.进入到上面的目录后checkout出需要的SVN库中的代码\n``` shell \n<svn co http://repo/svn/xxx/branches/1.10.0-dev\n```\n4.导出log文件，需要一段时间\n``` shell \nsvn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log\n```\n5.生成分析网页和图片，需要一段时间\n``` \n#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js \n```\n\n6.待上一步完成后，打开生成的index.html，即可查看统计的结果（**出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径**）\n\n（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）\n\n![](/img/xjy/statsvn001.jpg)\n\n![](/img/xjy/statsvn002.jpg)\n \n![](/img/xjy/statsvn003.jpg)","source":"_posts/p12.md","raw":"---\ntitle: 用StatSVN统计SVN库中各作者的提交情况和排行\ntags:\n  - 运维\n  - StatSVN\n  - SVN\n  - 技术\nid: 421\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-02-09 15:36:46\ndeclare: true\ntoc: true\n---\n\n# 想法\n\n我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 \n\n# **实践**\n\n又说了一大堆废话，下面是我的安装和使用过程：\n\n<!--more-->\n\n1.下载StatSVN，其实是一个jar包\n\n[http://sourceforge.net/projects/statsvn/](http://sourceforge.net/projects/statsvn/)\n\n2.解压后把jar包拷贝到指定目录\n\n例如我的：D:\\Code\\statsvn-0.7.0\n\n3.进入到上面的目录后checkout出需要的SVN库中的代码\n``` shell \n<svn co http://repo/svn/xxx/branches/1.10.0-dev\n```\n4.导出log文件，需要一段时间\n``` shell \nsvn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log\n```\n5.生成分析网页和图片，需要一段时间\n``` \n#如果是常用统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev\n#如果是复杂统计，执行该句\njava -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js \n```\n\n6.待上一步完成后，打开生成的index.html，即可查看统计的结果（**出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径**）\n\n（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）\n\n![](/img/xjy/statsvn001.jpg)\n\n![](/img/xjy/statsvn002.jpg)\n \n![](/img/xjy/statsvn003.jpg)","slug":"p12","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfp0005u8veoepovrzc","content":"<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 </p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a><strong>实践</strong></h1><p>又说了一大堆废话，下面是我的安装和使用过程：</p>\n<a id=\"more\"></a>\n<p>1.下载StatSVN，其实是一个jar包</p>\n<p><a href=\"http://sourceforge.net/projects/statsvn/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/statsvn/</a></p>\n<p>2.解压后把jar包拷贝到指定目录</p>\n<p>例如我的：D:\\Code\\statsvn-0.7.0</p>\n<p>3.进入到上面的目录后checkout出需要的SVN库中的代码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svn co http://repo/svn/xxx/branches/1.10.0-dev</span><br></pre></td></tr></table></figure></p>\n<p>4.导出log文件，需要一段时间<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &amp;gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</span><br></pre></td></tr></table></figure></p>\n<p>5.生成分析网页和图片，需要一段时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果是常用统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev</span><br><span class=\"line\">#如果是复杂统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</span><br></pre></td></tr></table></figure></p>\n<p>6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<strong>出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径</strong>）</p>\n<p>（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）</p>\n<p><img src=\"/img/xjy/statsvn001.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn002.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn003.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h1><p>我在现在项目组呆了快两年了，最近想了解一下自己一共提交了多少代码，以及在团队中提交代码的排名，在谷歌和百度上都搜索了一下，发现没有太流行和正式的统计软件，大家口碑稍微好一点的有一款叫“StatSVN”的软件，目前最新的版本是0.7版。我理解的是该软件还没有正式的发布版本。看评论说，虽然“StatSVN”对些许代码的改动统计可能不是太理想，但它总体上还是能反应出90%的最真实情况。 </p>\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a><strong>实践</strong></h1><p>又说了一大堆废话，下面是我的安装和使用过程：</p>","more":"<p>1.下载StatSVN，其实是一个jar包</p>\n<p><a href=\"http://sourceforge.net/projects/statsvn/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/statsvn/</a></p>\n<p>2.解压后把jar包拷贝到指定目录</p>\n<p>例如我的：D:\\Code\\statsvn-0.7.0</p>\n<p>3.进入到上面的目录后checkout出需要的SVN库中的代码<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svn co http://repo/svn/xxx/branches/1.10.0-dev</span><br></pre></td></tr></table></figure></p>\n<p>4.导出log文件，需要一段时间<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn log  -v --xml D:\\Code\\statsvn-0.7.0\\1.10.0-dev &amp;gt; D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log</span><br></pre></td></tr></table></figure></p>\n<p>5.生成分析网页和图片，需要一段时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#如果是常用统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev</span><br><span class=\"line\">#如果是复杂统计，执行该句</span><br><span class=\"line\">java -jar statsvn.jar D:\\Code\\statsvn-0.7.0\\1.10.0-dev\\svn.log D:\\Code\\statsvn-0.7.0\\1.10.0-dev -include **/*.java:**/*.jsp:**/*.js:**/*.css:**/*.xml -exclude **/js/jquery-1.6.2.min.js</span><br></pre></td></tr></table></figure></p>\n<p>6.待上一步完成后，打开生成的index.html，即可查看统计的结果（<strong>出于保密考虑，截图中我遮盖了真实的开发者名称和SVN路径</strong>）</p>\n<p>（ps:下面截图只是总体的排名和部分情况，后面还有很多各种按人按月按周等等统计和链接数据，我就不一一展示了，感兴趣就赶紧动手吧！）</p>\n<p><img src=\"/img/xjy/statsvn001.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn002.jpg\" alt=\"\"></p>\n<p><img src=\"/img/xjy/statsvn003.jpg\" alt=\"\"></p>"},{"title":"树莓派学习-python实现用socket传输json数据","id":"186","date":"2017-12-11T14:56:16.000Z","declare":true,"toc":true,"_content":"\n今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。\n\n1.服务端代码\n``` py \nimport socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()\n```\n\n2.客户端代码\n``` py \nimport socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()\n```\n3.实现效果\n\n![](/img/xjy/socket001.png)","source":"_posts/p15.md","raw":"---\ntitle: 树莓派学习-python实现用socket传输json数据\nid: 186\ncategories:\n  - 树莓派学习\ndate: 2017-12-11 22:56:16\ntags: [树莓派, python, socket, json]\ndeclare: true\ntoc: true\n---\n\n今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。\n\n1.服务端代码\n``` py \nimport socket\nip_port = ('127.0.0.1',8088) \nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM) \ns.bind(ip_port) \ns.listen(5)\n\nwhile True: \nconn,addr=s.accept() \nprint('接到来自%s的连接' %addr[0])\nwhile True: \nmsg=conn.recv(BUFSIZE) \nif len(msg) == 0:break #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生\nprint(msg,type(msg))\nconn.send(msg.upper()) \nconn.close() \ns.close()\n```\n\n2.客户端代码\n``` py \nimport socket\nimport smbus\nimport time\nimport json\n\n#建立初始连接\nip_port=('127.0.0.1',8088)\nBUFSIZE=1024\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect_ex(ip_port)           \n\nwhile True:                          \n    # 获取I2C bus\n    bus = smbus.SMBus(1)\n\n    # SHT31 地址, 0x44(68)\n    bus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\n    time.sleep(0.5)\n\n    # SHT31 地址, 0x44(68)\n    # 从 0x00(00)读数据, 6 bytes\n    # Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\n    data = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n    # 转换成温湿度及获取当前的时间\n    temp = data[0] * 256 + data[1]\n    cTemp = -45 + (175 * temp / 65535.0)\n    fTemp = -49 + (315 * temp / 65535.0)\n    humidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n    timer=time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))\n\n    # 输出到屏幕\n    print (\"Temperature in Celsius is : %.2f C\" %cTemp)\n    print (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\n    print (\"Relative Humidity is : %.2f %%RH\" %humidity)\n\n    #组装json数据并发送 \n    msg1={'time':timer,'Celsius':str(cTemp),'Humidity':str(humidity)}\n    jmsg1=json.dumps(msg1)\n    if len(jmsg1) == 0:continue\n    s.sendall(jmsg1.encode('utf-8'))         \n\n#确认返回\n    feedback=s.recv(BUFSIZE)                         \n    print(feedback.decode('utf-8'))\n\n#连接关闭\ns.close()\n```\n3.实现效果\n\n![](/img/xjy/socket001.png)","slug":"p15","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfr0006u8vedjjcxvkq","content":"<p>今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。</p>\n<p>1.服务端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">ip_port = (<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>) </span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) </span><br><span class=\"line\">s.bind(ip_port) </span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">conn,addr=s.accept() </span><br><span class=\"line\">print(<span class=\"string\">'接到来自%s的连接'</span> %addr[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">msg=conn.recv(BUFSIZE) </span><br><span class=\"line\"><span class=\"keyword\">if</span> len(msg) == <span class=\"number\">0</span>:<span class=\"keyword\">break</span> <span class=\"comment\">#如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生</span></span><br><span class=\"line\">print(msg,type(msg))</span><br><span class=\"line\">conn.send(msg.upper()) </span><br><span class=\"line\">conn.close() </span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>2.客户端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立初始连接</span></span><br><span class=\"line\">ip_port=(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>)</span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect_ex(ip_port)           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:                          </span><br><span class=\"line\">    <span class=\"comment\"># 获取I2C bus</span></span><br><span class=\"line\">    bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 0x00(00)读数据, 6 bytes</span></span><br><span class=\"line\">    <span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">    data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 转换成温湿度及获取当前的时间</span></span><br><span class=\"line\">    temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">    cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\">    timer=time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出到屏幕</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#组装json数据并发送 </span></span><br><span class=\"line\">    msg1=&#123;<span class=\"string\">'time'</span>:timer,<span class=\"string\">'Celsius'</span>:str(cTemp),<span class=\"string\">'Humidity'</span>:str(humidity)&#125;</span><br><span class=\"line\">    jmsg1=json.dumps(msg1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(jmsg1) == <span class=\"number\">0</span>:<span class=\"keyword\">continue</span></span><br><span class=\"line\">    s.sendall(jmsg1.encode(<span class=\"string\">'utf-8'</span>))         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确认返回</span></span><br><span class=\"line\">    feedback=s.recv(BUFSIZE)                         </span><br><span class=\"line\">    print(feedback.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#连接关闭</span></span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>3.实现效果</p>\n<p><img src=\"/img/xjy/socket001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今晚完成了用socket传输温湿度数据的小案例，在这里记录一下。</p>\n<p>1.服务端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">ip_port = (<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>) </span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) </span><br><span class=\"line\">s.bind(ip_port) </span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">conn,addr=s.accept() </span><br><span class=\"line\">print(<span class=\"string\">'接到来自%s的连接'</span> %addr[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>: </span><br><span class=\"line\">msg=conn.recv(BUFSIZE) </span><br><span class=\"line\"><span class=\"keyword\">if</span> len(msg) == <span class=\"number\">0</span>:<span class=\"keyword\">break</span> <span class=\"comment\">#如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生</span></span><br><span class=\"line\">print(msg,type(msg))</span><br><span class=\"line\">conn.send(msg.upper()) </span><br><span class=\"line\">conn.close() </span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>2.客户端代码<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建立初始连接</span></span><br><span class=\"line\">ip_port=(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">8088</span>)</span><br><span class=\"line\">BUFSIZE=<span class=\"number\">1024</span></span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect_ex(ip_port)           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:                          </span><br><span class=\"line\">    <span class=\"comment\"># 获取I2C bus</span></span><br><span class=\"line\">    bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 0x00(00)读数据, 6 bytes</span></span><br><span class=\"line\">    <span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">    data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 转换成温湿度及获取当前的时间</span></span><br><span class=\"line\">    temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">    cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">    humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\">    timer=time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出到屏幕</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#组装json数据并发送 </span></span><br><span class=\"line\">    msg1=&#123;<span class=\"string\">'time'</span>:timer,<span class=\"string\">'Celsius'</span>:str(cTemp),<span class=\"string\">'Humidity'</span>:str(humidity)&#125;</span><br><span class=\"line\">    jmsg1=json.dumps(msg1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(jmsg1) == <span class=\"number\">0</span>:<span class=\"keyword\">continue</span></span><br><span class=\"line\">    s.sendall(jmsg1.encode(<span class=\"string\">'utf-8'</span>))         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确认返回</span></span><br><span class=\"line\">    feedback=s.recv(BUFSIZE)                         </span><br><span class=\"line\">    print(feedback.decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#连接关闭</span></span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>3.实现效果</p>\n<p><img src=\"/img/xjy/socket001.png\" alt=\"\"></p>\n"},{"title":"树莓派学习-ngrok实现开机自启及手机远程SSH访问","id":"195","date":"2017-12-16T07:36:27.000Z","declare":true,"toc":true,"_content":"\n在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化\n\n+ 开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。\n\n+ 实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 \n\n<!--more-->\n\n好了，废话太多，直接来步骤吧：\n\n### VPS端\n``` shell \n#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp; \n```\n\n### 树莓派端\n``` shell \n#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www\n```\n\n看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！![](/img/xjy/smp001.png)","source":"_posts/p16.md","raw":"---\ntitle: 树莓派学习-ngrok实现开机自启及手机远程SSH访问\nid: 195\ncategories:\n  - 树莓派学习\ndate: 2017-12-16 15:36:27\ntags: [树莓派, ngrok, ssh]\ndeclare: true\ntoc: true\n---\n\n在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化\n\n+ 开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。\n\n+ 实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 \n\n<!--more-->\n\n好了，废话太多，直接来步骤吧：\n\n### VPS端\n``` shell \n#设置centOS开机启动ngrokd\nvi /etc/rc.d/rc.local\n#加入下面内容\ncd /root/ngrok &amp;&amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;&amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - \ntunnelAddr=\":8333\" &amp; \n```\n\n### 树莓派端\n``` shell \n#指定多端口协议启动方式的配置\nvi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg\n#加入下面内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false\ntunnels:\n  ssh:\n    remote_port: 3322\n    proto:\n      tcp: 22\n  www:\n    subdomain: pi\n    proto:\n      http: 80</pre>\n<pre class=\"theme:github lang:default decode:true\">#设置树莓派开机启动ngrok\nvi /etc/rc.local\n#加入下面内容\ncd /home/pi/ngrox-cust/bin/linux_arm &amp;&amp; ./ngrok -config=ngrok.cfg start ssh www\n```\n\n看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！![](/img/xjy/smp001.png)","slug":"p16","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfu000au8veczae9q8t","content":"<p>在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化</p>\n<ul>\n<li><p>开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。</p>\n</li>\n<li><p>实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>好了，废话太多，直接来步骤吧：</p>\n<h3 id=\"VPS端\"><a href=\"#VPS端\" class=\"headerlink\" title=\"VPS端\"></a>VPS端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>设置centOS开机启动ngrokd</span><br><span class=\"line\">vi /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /root/ngrok &amp;amp;&amp;amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;amp;&amp;amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - </span><br><span class=\"line\">tunnelAddr=\":8333\" &amp;amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"树莓派端\"><a href=\"#树莓派端\" class=\"headerlink\" title=\"树莓派端\"></a>树莓派端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>指定多端口协议启动方式的配置</span><br><span class=\"line\">vi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  ssh:</span><br><span class=\"line\">    remote_port: 3322</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      tcp: 22</span><br><span class=\"line\">  www:</span><br><span class=\"line\">    subdomain: pi</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: 80&lt;/pre&gt;</span><br><span class=\"line\">&lt;pre class=\"theme:github lang:default decode:true\"&gt;#设置树莓派开机启动ngrok</span><br><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm &amp;amp;&amp;amp; ./ngrok -config=ngrok.cfg start ssh www</span><br></pre></td></tr></table></figure>\n<p>看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！<img src=\"/img/xjy/smp001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在上一篇的配置中实现了ngrok对http协议的内网穿透，在此基础上我做了两个优化</p>\n<ul>\n<li><p>开机自动启动ngrok客户端，摆脱了手动启动一次需要敲很长的命令的尴尬。</p>\n</li>\n<li><p>实现了指定固定端口远程ssh连接到树莓派，不用每次先登进树莓派获得现在随机分配的tcp端口了。 </p>\n</li>\n</ul>","more":"<p>好了，废话太多，直接来步骤吧：</p>\n<h3 id=\"VPS端\"><a href=\"#VPS端\" class=\"headerlink\" title=\"VPS端\"></a>VPS端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>设置centOS开机启动ngrokd</span><br><span class=\"line\">vi /etc/rc.d/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /root/ngrok &amp;amp;&amp;amp; NGROK_DOMAIN=\"www.xiajunyi.com\" &amp;amp;&amp;amp; bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" - </span><br><span class=\"line\">tunnelAddr=\":8333\" &amp;amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"树莓派端\"><a href=\"#树莓派端\" class=\"headerlink\" title=\"树莓派端\"></a>树莓派端</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>指定多端口协议启动方式的配置</span><br><span class=\"line\">vi /home/pi/ngrox-cust/bin/linux_arm/ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  ssh:</span><br><span class=\"line\">    remote_port: 3322</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      tcp: 22</span><br><span class=\"line\">  www:</span><br><span class=\"line\">    subdomain: pi</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: 80&lt;/pre&gt;</span><br><span class=\"line\">&lt;pre class=\"theme:github lang:default decode:true\"&gt;#设置树莓派开机启动ngrok</span><br><span class=\"line\">vi /etc/rc.local</span><br><span class=\"line\"><span class=\"meta\">#</span>加入下面内容</span><br><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm &amp;amp;&amp;amp; ./ngrok -config=ngrok.cfg start ssh www</span><br></pre></td></tr></table></figure>\n<p>看效果图，下面是我用android手机中的juicessh软件成功连接到树莓派中，以后可以随时随地操作树莓派喽！<img src=\"/img/xjy/smp001.png\" alt=\"\"></p>"},{"title":"树莓派学习-SHT31温湿度读取（I2C接口）","id":"149","date":"2017-12-10T11:13:38.000Z","_content":"declare: true\ntoc: true\n**1.开启树莓派的I2C功能**\n\n执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。\n``` shell \nsudo raspi-config\n```\n\n![](/img/xjy/sht31001.png) \n\n<!--more-->\n\n**2.连接SHT31与树莓派**\n\n参考及实物图如下：\n\n![](/img/xjy/sht31001.png)\n\n![](/img/xjy/sht31001.jpg)\n\n**3.python代码**\n\nsht31.py：\n``` py \nimport smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)\n```\n\n**4.结果如图：**\n\n![](/img/xjy/sht31004.png)\n\n结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！","source":"_posts/p14.md","raw":"---\ntitle: 树莓派学习-SHT31温湿度读取（I2C接口）\nid: 149\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 19:13:38\ntags: [树莓派, sht31, i2c]\n---\ndeclare: true\ntoc: true\n**1.开启树莓派的I2C功能**\n\n执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。\n``` shell \nsudo raspi-config\n```\n\n![](/img/xjy/sht31001.png) \n\n<!--more-->\n\n**2.连接SHT31与树莓派**\n\n参考及实物图如下：\n\n![](/img/xjy/sht31001.png)\n\n![](/img/xjy/sht31001.jpg)\n\n**3.python代码**\n\nsht31.py：\n``` py \nimport smbus\nimport time\nwhile(1):\n# 获取 I2C bus\nbus = smbus.SMBus(1)\n\n# SHT31 地址, 0x44(68)\nbus.write_i2c_block_data(0x44, 0x2C, [0x06])\n\ntime.sleep(0.5)\n\n# SHT31 地址, 0x44(68)\n# 从 0x00(00)读取数据, 6 bytes\n# Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC\ndata = bus.read_i2c_block_data(0x44, 0x00, 6)\n\n# 转换数据\ntemp = data[0] * 256 + data[1]\ncTemp = -45 + (175 * temp / 65535.0)\nfTemp = -49 + (315 * temp / 65535.0)\nhumidity = 100 * (data[3] * 256 + data[4]) / 65535.0\n\n# 输出数据\nprint (\"Temperature in Celsius is : %.2f C\" %cTemp)\nprint (\"Temperature in Fahrenheit is : %.2f F\" %fTemp)\nprint (\"Relative Humidity is : %.2f %%RH\" %humidity)\ntime.sleep(1)\n```\n\n**4.结果如图：**\n\n![](/img/xjy/sht31004.png)\n\n结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！","slug":"p14","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jfw000bu8vesnfgdd6e","content":"<p>declare: true<br>toc: true<br><strong>1.开启树莓派的I2C功能</strong></p>\n<p>执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"> </p>\n<a id=\"more\"></a>\n<p><strong>2.连接SHT31与树莓派</strong></p>\n<p>参考及实物图如下：</p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/sht31001.jpg\" alt=\"\"></p>\n<p><strong>3.python代码</strong></p>\n<p>sht31.py：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\"><span class=\"comment\"># 获取 I2C bus</span></span><br><span class=\"line\">bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\"><span class=\"comment\"># 从 0x00(00)读取数据, 6 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换数据</span></span><br><span class=\"line\">temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出数据</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.结果如图：</strong></p>\n<p><img src=\"/img/xjy/sht31004.png\" alt=\"\"></p>\n<p>结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！</p>\n","site":{"data":{}},"excerpt":"<p>declare: true<br>toc: true<br><strong>1.开启树莓派的I2C功能</strong></p>\n<p>执行下面命令，进入下图中的选项框后，找到I2C配置，打开即可。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"> </p>","more":"<p><strong>2.连接SHT31与树莓派</strong></p>\n<p>参考及实物图如下：</p>\n<p><img src=\"/img/xjy/sht31001.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/sht31001.jpg\" alt=\"\"></p>\n<p><strong>3.python代码</strong></p>\n<p>sht31.py：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\"><span class=\"comment\"># 获取 I2C bus</span></span><br><span class=\"line\">bus = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\">bus.write_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x2C</span>, [<span class=\"number\">0x06</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SHT31 地址, 0x44(68)</span></span><br><span class=\"line\"><span class=\"comment\"># 从 0x00(00)读取数据, 6 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># Temp MSB, Temp LSB, Temp CRC, Humididty MSB, Humidity LSB, Humidity CRC</span></span><br><span class=\"line\">data = bus.read_i2c_block_data(<span class=\"number\">0x44</span>, <span class=\"number\">0x00</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换数据</span></span><br><span class=\"line\">temp = data[<span class=\"number\">0</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">1</span>]</span><br><span class=\"line\">cTemp = <span class=\"number\">-45</span> + (<span class=\"number\">175</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">fTemp = <span class=\"number\">-49</span> + (<span class=\"number\">315</span> * temp / <span class=\"number\">65535.0</span>)</span><br><span class=\"line\">humidity = <span class=\"number\">100</span> * (data[<span class=\"number\">3</span>] * <span class=\"number\">256</span> + data[<span class=\"number\">4</span>]) / <span class=\"number\">65535.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出数据</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Celsius is : %.2f C\"</span> %cTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Temperature in Fahrenheit is : %.2f F\"</span> %fTemp)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"Relative Humidity is : %.2f %%RH\"</span> %humidity)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>4.结果如图：</strong></p>\n<p><img src=\"/img/xjy/sht31004.png\" alt=\"\"></p>\n<p>结果证明，SHT31比DHT11准确的不是一点半点了，中间几乎无偏差，还不用自己做校验，看来还是一分价钱一分货呀！</p>"},{"title":"树莓派学习-搭建外网ngrok穿透内网访问到树莓派","id":"192","date":"2017-12-14T14:57:25.000Z","declare":true,"toc":true,"_content":"\n今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。\n\n**环境：**\n\n搬瓦工VPS端(centOs6)\n\n树莓派3b(基于Arm) \n\n<!--more-->\n\n## 步骤\n\n1.安装git、gcc、go等\n``` shell \nyum install mercurial git gcc golang\n```\n2.安装 supervisor ，这样可以保持服务运行\n``` shell \nyum install supervisor\n```\n3.git下载ngrok\n``` shell \ncd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git \n```\n4.证书生成\n``` shell \ncd /root/ngrok \n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 \n```\n5.证书的复制准备工作\n``` shell \n\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f \n```\n6.生成服务端的ngrokd\n``` shell \ncd /root/ngrok\nmake release-server \n```\n7.服务端配置并启动ngrokd\n``` shell \ncd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\" \n```\n8.编译给客户端pi上用的ngrokd\n``` shell \ncd /root/ngrok\nGOOS=linux GOARCH=arm make release-client \n```\n9.把bin目录下的客户端打包\n``` shell \ncd /root/ngrok\ntar -cvf bin.tar bin/ \n```\n10.用scp工具复制bin.tar到树莓派的如下目录\n``` shell \n#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar\n```\n11.客户端配置\n``` shell \ncd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false \n```\n12.启动客户端\n``` shell \n./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80\n```\n13.记得加入子域名的解析规则\n``` text \nA *.pi 23.83.224.98 \n```\n\n14.测试是否内网穿透成功，可以在树莓派上安装nginx\n``` shell \nsudo apt-get install nginx \n```\n\n15.访问：[http://pi.www.xiajunyi.com:8331/](http://pi.www.xiajunyi.com:8331/)，成功到达树莓派的nginx主页\n\n![](/img/xjy/smp002.png)\n\n\n## 参考文章：\n\n+ [参考文章1](https://xicheng412.github.io/2016/09/27/ngrok-config/)\n\n+ [参考文章2](https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html)","source":"_posts/p17.md","raw":"---\ntitle: 树莓派学习-搭建外网ngrok穿透内网访问到树莓派\nid: 192\ncategories:\n  - 树莓派学习\ndate: 2017-12-14 22:57:25\ntags: [树莓派, ngrok, 内网穿透]\ndeclare: true\ntoc: true\n---\n\n今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。\n\n**环境：**\n\n搬瓦工VPS端(centOs6)\n\n树莓派3b(基于Arm) \n\n<!--more-->\n\n## 步骤\n\n1.安装git、gcc、go等\n``` shell \nyum install mercurial git gcc golang\n```\n2.安装 supervisor ，这样可以保持服务运行\n``` shell \nyum install supervisor\n```\n3.git下载ngrok\n``` shell \ncd /root\n#官方地址，可能会报错，最近应该已经修复\ngit clone https://github.com/inconshreveable/ngrok.git\n#修复地址，不会报错，感谢 tutumcloud\n#git clone https://github.com/tutumcloud/ngrok.git \n```\n4.证书生成\n``` shell \ncd /root/ngrok \n#这里修改为自己的域名\nNGROK_DOMAIN=\"www.xiajunyi.com\"\nopenssl genrsa -out rootCA.key 2048\nopenssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\nopenssl genrsa -out device.key 2048\nopenssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr\nopenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 \n```\n5.证书的复制准备工作\n``` shell \n\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f\n\\cp device.crt assets/server/tls/snakeoil.crt -f\n\\cp device.key assets/server/tls/snakeoil.key -f \n```\n6.生成服务端的ngrokd\n``` shell \ncd /root/ngrok\nmake release-server \n```\n7.服务端配置并启动ngrokd\n``` shell \ncd /root/ngrok\nNGROK_DOMAIN=\"www.xiajunyi.com\"\n#http\nbin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\" \n```\n8.编译给客户端pi上用的ngrokd\n``` shell \ncd /root/ngrok\nGOOS=linux GOARCH=arm make release-client \n```\n9.把bin目录下的客户端打包\n``` shell \ncd /root/ngrok\ntar -cvf bin.tar bin/ \n```\n10.用scp工具复制bin.tar到树莓派的如下目录\n``` shell \n#解压bin,tar至自定义目录\ntar -zxf /home/pi/ngrox-cust/bin.tar\n```\n11.客户端配置\n``` shell \ncd /home/pi/ngrox-cust/bin/linux_arm\nvi ngrok.cfg\n#加入如下内容\nserver_addr: \"www.xiajunyi.com:8333\"\ntrust_host_root_certs: false \n```\n12.启动客户端\n``` shell \n./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80\n```\n13.记得加入子域名的解析规则\n``` text \nA *.pi 23.83.224.98 \n```\n\n14.测试是否内网穿透成功，可以在树莓派上安装nginx\n``` shell \nsudo apt-get install nginx \n```\n\n15.访问：[http://pi.www.xiajunyi.com:8331/](http://pi.www.xiajunyi.com:8331/)，成功到达树莓派的nginx主页\n\n![](/img/xjy/smp002.png)\n\n\n## 参考文章：\n\n+ [参考文章1](https://xicheng412.github.io/2016/09/27/ngrok-config/)\n\n+ [参考文章2](https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html)","slug":"p17","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jg1000fu8vekjs4nxh8","content":"<p>今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。</p>\n<p><strong>环境：</strong></p>\n<p>搬瓦工VPS端(centOs6)</p>\n<p>树莓派3b(基于Arm) </p>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.安装git、gcc、go等<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mercurial git gcc golang</span><br></pre></td></tr></table></figure></p>\n<p>2.安装 supervisor ，这样可以保持服务运行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install supervisor</span><br></pre></td></tr></table></figure></p>\n<p>3.git下载ngrok<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root</span><br><span class=\"line\"><span class=\"meta\">#</span>官方地址，可能会报错，最近应该已经修复</span><br><span class=\"line\">git clone https://github.com/inconshreveable/ngrok.git</span><br><span class=\"line\"><span class=\"meta\">#</span>修复地址，不会报错，感谢 tutumcloud</span><br><span class=\"line\"><span class=\"meta\">#</span>git clone https://github.com/tutumcloud/ngrok.git</span><br></pre></td></tr></table></figure></p>\n<p>4.证书生成<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok </span><br><span class=\"line\"><span class=\"meta\">#</span>这里修改为自己的域名</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\">openssl genrsa -out rootCA.key 2048</span><br><span class=\"line\">openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem</span><br><span class=\"line\">openssl genrsa -out device.key 2048</span><br><span class=\"line\">openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr</span><br><span class=\"line\">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure></p>\n<p>5.证书的复制准备工作<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f</span><br><span class=\"line\">\\cp device.crt assets/server/tls/snakeoil.crt -f</span><br><span class=\"line\">\\cp device.key assets/server/tls/snakeoil.key -f</span><br></pre></td></tr></table></figure></p>\n<p>6.生成服务端的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure></p>\n<p>7.服务端配置并启动ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\"><span class=\"meta\">#</span>http</span><br><span class=\"line\">bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</span><br></pre></td></tr></table></figure></p>\n<p>8.编译给客户端pi上用的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure></p>\n<p>9.把bin目录下的客户端打包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">tar -cvf bin.tar bin/</span><br></pre></td></tr></table></figure></p>\n<p>10.用scp工具复制bin.tar到树莓派的如下目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>解压bin,tar至自定义目录</span><br><span class=\"line\">tar -zxf /home/pi/ngrox-cust/bin.tar</span><br></pre></td></tr></table></figure></p>\n<p>11.客户端配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm</span><br><span class=\"line\">vi ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入如下内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br></pre></td></tr></table></figure></p>\n<p>12.启动客户端<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</span><br></pre></td></tr></table></figure></p>\n<p>13.记得加入子域名的解析规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A *.pi 23.83.224.98</span><br></pre></td></tr></table></figure></p>\n<p>14.测试是否内网穿透成功，可以在树莓派上安装nginx<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p>\n<p>15.访问：<a href=\"http://pi.www.xiajunyi.com:8331/\" target=\"_blank\" rel=\"noopener\">http://pi.www.xiajunyi.com:8331/</a>，成功到达树莓派的nginx主页</p>\n<p><img src=\"/img/xjy/smp002.png\" alt=\"\"></p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><ul>\n<li><p><a href=\"https://xicheng412.github.io/2016/09/27/ngrok-config/\" target=\"_blank\" rel=\"noopener\">参考文章1</a></p>\n</li>\n<li><p><a href=\"https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html\" target=\"_blank\" rel=\"noopener\">参考文章2</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今晚很是激动，经过昨晚和今晚的努力，终于实现了从外网访问到树莓派了，写一篇文章记录一下喽。</p>\n<p><strong>环境：</strong></p>\n<p>搬瓦工VPS端(centOs6)</p>\n<p>树莓派3b(基于Arm) </p>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>1.安装git、gcc、go等<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mercurial git gcc golang</span><br></pre></td></tr></table></figure></p>\n<p>2.安装 supervisor ，这样可以保持服务运行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install supervisor</span><br></pre></td></tr></table></figure></p>\n<p>3.git下载ngrok<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root</span><br><span class=\"line\"><span class=\"meta\">#</span>官方地址，可能会报错，最近应该已经修复</span><br><span class=\"line\">git clone https://github.com/inconshreveable/ngrok.git</span><br><span class=\"line\"><span class=\"meta\">#</span>修复地址，不会报错，感谢 tutumcloud</span><br><span class=\"line\"><span class=\"meta\">#</span>git clone https://github.com/tutumcloud/ngrok.git</span><br></pre></td></tr></table></figure></p>\n<p>4.证书生成<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok </span><br><span class=\"line\"><span class=\"meta\">#</span>这里修改为自己的域名</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\">openssl genrsa -out rootCA.key 2048</span><br><span class=\"line\">openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem</span><br><span class=\"line\">openssl genrsa -out device.key 2048</span><br><span class=\"line\">openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csr</span><br><span class=\"line\">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure></p>\n<p>5.证书的复制准备工作<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\cp rootCA.pem assets/client/tls/ngrokroot.crt -f</span><br><span class=\"line\">\\cp device.crt assets/server/tls/snakeoil.crt -f</span><br><span class=\"line\">\\cp device.key assets/server/tls/snakeoil.key -f</span><br></pre></td></tr></table></figure></p>\n<p>6.生成服务端的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure></p>\n<p>7.服务端配置并启动ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">NGROK_DOMAIN=\"www.xiajunyi.com\"</span><br><span class=\"line\"><span class=\"meta\">#</span>http</span><br><span class=\"line\">bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":8331\" -httpsAddr=\":8332\" -tunnelAddr=\":8333\"</span><br></pre></td></tr></table></figure></p>\n<p>8.编译给客户端pi上用的ngrokd<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure></p>\n<p>9.把bin目录下的客户端打包<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/ngrok</span><br><span class=\"line\">tar -cvf bin.tar bin/</span><br></pre></td></tr></table></figure></p>\n<p>10.用scp工具复制bin.tar到树莓派的如下目录<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>解压bin,tar至自定义目录</span><br><span class=\"line\">tar -zxf /home/pi/ngrox-cust/bin.tar</span><br></pre></td></tr></table></figure></p>\n<p>11.客户端配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/pi/ngrox-cust/bin/linux_arm</span><br><span class=\"line\">vi ngrok.cfg</span><br><span class=\"line\"><span class=\"meta\">#</span>加入如下内容</span><br><span class=\"line\">server_addr: \"www.xiajunyi.com:8333\"</span><br><span class=\"line\">trust_host_root_certs: false</span><br></pre></td></tr></table></figure></p>\n<p>12.启动客户端<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -subdomain pi -proto=http -config=ngrok.cfg 80</span><br></pre></td></tr></table></figure></p>\n<p>13.记得加入子域名的解析规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A *.pi 23.83.224.98</span><br></pre></td></tr></table></figure></p>\n<p>14.测试是否内网穿透成功，可以在树莓派上安装nginx<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p>\n<p>15.访问：<a href=\"http://pi.www.xiajunyi.com:8331/\" target=\"_blank\" rel=\"noopener\">http://pi.www.xiajunyi.com:8331/</a>，成功到达树莓派的nginx主页</p>\n<p><img src=\"/img/xjy/smp002.png\" alt=\"\"></p>\n<h2 id=\"参考文章：\"><a href=\"#参考文章：\" class=\"headerlink\" title=\"参考文章：\"></a>参考文章：</h2><ul>\n<li><p><a href=\"https://xicheng412.github.io/2016/09/27/ngrok-config/\" target=\"_blank\" rel=\"noopener\">参考文章1</a></p>\n</li>\n<li><p><a href=\"https://www.sfantree.com/ngrok-raspberry-cross-nat/index.html\" target=\"_blank\" rel=\"noopener\">参考文章2</a></p>\n</li>\n</ul>"},{"title":"树莓派学习-实现USB摄像头在web端访问","id":"213","date":"2017-12-26T14:43:07.000Z","declare":true,"toc":true,"_content":"\n之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：\n\n1.系统配置中打开摄像头选项\n``` shell \nsudo raspi-config \n```\n2.安装motion\n``` shell \nsudo apt-get install motion \n```\n<!--more-->\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n``` shell \nsudo nano /etc/default/motion \n```\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n``` shell \nsudo nano /etc/motion/motion.conf \n```\n``` text \n# Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on \n```\n\n5.启动motion\n``` shell \nsudo motion \n```\n6.好了，再加上ngrok映射，就可以在外网访问了\n\n![](/img/xjy/smp004.png)\n\n![](/img/xjy/smp005.png)","source":"_posts/p19.md","raw":"---\ntitle: 树莓派学习-实现USB摄像头在web端访问\nid: 213\ncategories:\n  - 树莓派学习\ndate: 2017-12-26 22:43:07\ntags: [树莓派, 摄像头]\ndeclare: true\ntoc: true\n---\n\n之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：\n\n1.系统配置中打开摄像头选项\n``` shell \nsudo raspi-config \n```\n2.安装motion\n``` shell \nsudo apt-get install motion \n```\n<!--more-->\n3.配置motion可以一直在后台运行：`start_motion_daemon=yes`\n``` shell \nsudo nano /etc/default/motion \n```\n4.修改motion配置文件，这个文件比较长，请确保以下参数的配置\n``` shell \nsudo nano /etc/motion/motion.conf \n```\n``` text \n# Start in daemon (background) mode and release terminal (default: off)\ndaemon on\n# The mini-http server listens to this port for requests (default: 0 = disabled)\nstream_port 8081\n# Restrict stream connections to localhost only (default: on)\nstream_localhost off\n# TCP/IP port for the http server to listen on (default: 0 = disabled)\nwebcontrol_port 8080\n# Restrict control connections to localhost only (default: on)\nwebcontrol_localhost off\n# Output for http server, select off to choose raw text plain (default: on)\nwebcontrol_html_output on \n```\n\n5.启动motion\n``` shell \nsudo motion \n```\n6.好了，再加上ngrok映射，就可以在外网访问了\n\n![](/img/xjy/smp004.png)\n\n![](/img/xjy/smp005.png)","slug":"p19","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jg4000gu8veklneqa7f","content":"<p>之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：</p>\n<p>1.系统配置中打开摄像头选项<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>2.安装motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install motion</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>3.配置motion可以一直在后台运行：<code>start_motion_daemon=yes</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/default/motion</span><br></pre></td></tr></table></figure></p>\n<p>4.修改motion配置文件，这个文件比较长，请确保以下参数的配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Start in daemon (background) mode and release terminal (default: off)</span><br><span class=\"line\">daemon on</span><br><span class=\"line\"># The mini-http server listens to this port for requests (default: 0 = disabled)</span><br><span class=\"line\">stream_port 8081</span><br><span class=\"line\"># Restrict stream connections to localhost only (default: on)</span><br><span class=\"line\">stream_localhost off</span><br><span class=\"line\"># TCP/IP port for the http server to listen on (default: 0 = disabled)</span><br><span class=\"line\">webcontrol_port 8080</span><br><span class=\"line\"># Restrict control connections to localhost only (default: on)</span><br><span class=\"line\">webcontrol_localhost off</span><br><span class=\"line\"># Output for http server, select off to choose raw text plain (default: on)</span><br><span class=\"line\">webcontrol_html_output on</span><br></pre></td></tr></table></figure>\n<p>5.启动motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo motion</span><br></pre></td></tr></table></figure></p>\n<p>6.好了，再加上ngrok映射，就可以在外网访问了</p>\n<p><img src=\"/img/xjy/smp004.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp005.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>之前查了很多资料，发现最简便的就是安装motion来管理摄像头，下面是具体实施步骤：</p>\n<p>1.系统配置中打开摄像头选项<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>2.安装motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install motion</span><br></pre></td></tr></table></figure></p>","more":"<p>3.配置motion可以一直在后台运行：<code>start_motion_daemon=yes</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/default/motion</span><br></pre></td></tr></table></figure></p>\n<p>4.修改motion配置文件，这个文件比较长，请确保以下参数的配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Start in daemon (background) mode and release terminal (default: off)</span><br><span class=\"line\">daemon on</span><br><span class=\"line\"># The mini-http server listens to this port for requests (default: 0 = disabled)</span><br><span class=\"line\">stream_port 8081</span><br><span class=\"line\"># Restrict stream connections to localhost only (default: on)</span><br><span class=\"line\">stream_localhost off</span><br><span class=\"line\"># TCP/IP port for the http server to listen on (default: 0 = disabled)</span><br><span class=\"line\">webcontrol_port 8080</span><br><span class=\"line\"># Restrict control connections to localhost only (default: on)</span><br><span class=\"line\">webcontrol_localhost off</span><br><span class=\"line\"># Output for http server, select off to choose raw text plain (default: on)</span><br><span class=\"line\">webcontrol_html_output on</span><br></pre></td></tr></table></figure>\n<p>5.启动motion<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo motion</span><br></pre></td></tr></table></figure></p>\n<p>6.好了，再加上ngrok映射，就可以在外网访问了</p>\n<p><img src=\"/img/xjy/smp004.png\" alt=\"\"></p>\n<p><img src=\"/img/xjy/smp005.png\" alt=\"\"></p>"},{"title":"树莓派学习-创建crontab任务","id":"189","date":"2017-12-12T14:20:44.000Z","declare":true,"toc":true,"_content":"\n今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：\n\n1.编辑要执行的脚本\n``` shell \nvi /home/pi/python-xjy/cust.sh \n```\n<!--more-->\n2.比如我要执行socket客户端程序\n``` shell \n/usr/bin/python3 /home/pi/python-xjy/cust.py\n```\n3.修改脚本权限为可执行\n``` shell \nchmod 755 /home/pi/python-xjy/cust.sh \n```\n4.可以查看目前定义的定时任务，确认是否加过该脚本\n``` shell \ncrontab -l \n```\n5.开始编辑crontab任务\n``` shell \ncrontab -e \n```\n6.加入如下任务（格式为：分 时 日 月 周几 命令）\n``` text \n* * * * * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt  \n```\n7.重启crontab\n``` shell \nsudo /etc/init.d/cron restart \n```\n8.查询crontab各任务的状态\n``` shell \nservice cron status \n```\n\n![](/img/xjy/smp006.jpg)","source":"_posts/p20.md","raw":"---\ntitle: 树莓派学习-创建crontab任务\nid: 189\ncategories:\n  - 树莓派学习\ndate: 2017-12-12 22:20:44\ntags: [树莓派, crontab]\ndeclare: true\ntoc: true\n---\n\n今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：\n\n1.编辑要执行的脚本\n``` shell \nvi /home/pi/python-xjy/cust.sh \n```\n<!--more-->\n2.比如我要执行socket客户端程序\n``` shell \n/usr/bin/python3 /home/pi/python-xjy/cust.py\n```\n3.修改脚本权限为可执行\n``` shell \nchmod 755 /home/pi/python-xjy/cust.sh \n```\n4.可以查看目前定义的定时任务，确认是否加过该脚本\n``` shell \ncrontab -l \n```\n5.开始编辑crontab任务\n``` shell \ncrontab -e \n```\n6.加入如下任务（格式为：分 时 日 月 周几 命令）\n``` text \n* * * * * /home/pi/python-xjy/cust.sh 1&gt;/home/pi/python-xjy/log.txt  \n```\n7.重启crontab\n``` shell \nsudo /etc/init.d/cron restart \n```\n8.查询crontab各任务的状态\n``` shell \nservice cron status \n```\n\n![](/img/xjy/smp006.jpg)","slug":"p20","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jg7000ju8veqrhqxgfk","content":"<p>今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：</p>\n<p>1.编辑要执行的脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.比如我要执行socket客户端程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python3 /home/pi/python-xjy/cust.py</span><br></pre></td></tr></table></figure></p>\n<p>3.修改脚本权限为可执行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>\n<p>4.可以查看目前定义的定时任务，确认是否加过该脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure></p>\n<p>5.开始编辑crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure></p>\n<p>6.加入如下任务（格式为：分 时 日 月 周几 命令）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /home/pi/python-xjy/cust.sh 1&amp;gt;/home/pi/python-xjy/log.txt</span><br></pre></td></tr></table></figure></p>\n<p>7.重启crontab<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/cron restart</span><br></pre></td></tr></table></figure></p>\n<p>8.查询crontab各任务的状态<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service cron status</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/smp006.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>今晚实现了crontab任务的定义及运行，成功把数据每隔一分钟传输到socket服务端，如下是相关命令的记录：</p>\n<p>1.编辑要执行的脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>","more":"<p>2.比如我要执行socket客户端程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python3 /home/pi/python-xjy/cust.py</span><br></pre></td></tr></table></figure></p>\n<p>3.修改脚本权限为可执行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /home/pi/python-xjy/cust.sh</span><br></pre></td></tr></table></figure></p>\n<p>4.可以查看目前定义的定时任务，确认是否加过该脚本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure></p>\n<p>5.开始编辑crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure></p>\n<p>6.加入如下任务（格式为：分 时 日 月 周几 命令）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /home/pi/python-xjy/cust.sh 1&amp;gt;/home/pi/python-xjy/log.txt</span><br></pre></td></tr></table></figure></p>\n<p>7.重启crontab<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/cron restart</span><br></pre></td></tr></table></figure></p>\n<p>8.查询crontab各任务的状态<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service cron status</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/xjy/smp006.jpg\" alt=\"\"></p>"},{"title":"php-fpm占用大量内存的解决方法","id":"351","date":"2018-01-27T14:12:35.000Z","declare":true,"toc":true,"_content":"\n## 背景\n\n由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.\n<!--more-->\n\n## 现状\n\n可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。\n\n## 分析\n\n先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：[https://www.cnblogs.com/smallrookie/p/5634054.html](https://www.cnblogs.com/smallrookie/p/5634054.html)\n\n## 解决\n\n通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：[http://www.jb51.net/article/129528.htm](http://www.jb51.net/article/129528.htm)\n\n我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。\n``` text \n最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M\n```","source":"_posts/p2.md","raw":"---\ntitle: php-fpm占用大量内存的解决方法\nid: 351\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-01-27 22:12:35\ntags: [运维, php, wordpress, php-fpm, 博客]\ndeclare: true\ntoc: true\n---\n\n## 背景\n\n由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.\n<!--more-->\n\n## 现状\n\n可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。\n\n## 分析\n\n先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：[https://www.cnblogs.com/smallrookie/p/5634054.html](https://www.cnblogs.com/smallrookie/p/5634054.html)\n\n## 解决\n\n通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：[http://www.jb51.net/article/129528.htm](http://www.jb51.net/article/129528.htm)\n\n我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。\n``` text \n最大线程数\npm.max_children = 3\n;初始线程数\npm.start_servers = 1\n;最小空余线程数\npm.min_spare_servers = 1\n;最大空余线程数\npm.max_spare_servers = 1\n;php_admin内存最大限制\nphp_admin_value[memory_limit] = 128M\n```","slug":"p2","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jga000ku8vezxjti7ul","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.<br><a id=\"more\"></a></p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：<a href=\"https://www.cnblogs.com/smallrookie/p/5634054.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5634054.html</a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：<a href=\"http://www.jb51.net/article/129528.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/129528.htm</a></p>\n<p>我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最大线程数</span><br><span class=\"line\">pm.max_children = 3</span><br><span class=\"line\">;初始线程数</span><br><span class=\"line\">pm.start_servers = 1</span><br><span class=\"line\">;最小空余线程数</span><br><span class=\"line\">pm.min_spare_servers = 1</span><br><span class=\"line\">;最大空余线程数</span><br><span class=\"line\">pm.max_spare_servers = 1</span><br><span class=\"line\">;php_admin内存最大限制</span><br><span class=\"line\">php_admin_value[memory_limit] = 128M</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于httpd的apache太占内存，于是按照网上的方法，修改成了nginx充当web服务，然而却发现解析php网站用到的php-fpm却更占内存.<br>","more":"</p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>可怜我的VPS内存总共512，基本上都快占满，我只有去想办法进一步做优化。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>先了解什么是php-fpm，以及它与nginx怎么结合使用的，这里可以参考：<a href=\"https://www.cnblogs.com/smallrookie/p/5634054.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/smallrookie/p/5634054.html</a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>通过网上查找资料，发现可用的是修改php-fpm配置，将初始线程数，最小线程数，最大线程数，最大内存限制几个参数修改为自己适当的配置就行，可以参考：<a href=\"http://www.jb51.net/article/129528.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/129528.htm</a></p>\n<p>我的小wordpress博客目前访问量很少，我就把线程数最大调到3，这样基本上就够用了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最大线程数</span><br><span class=\"line\">pm.max_children = 3</span><br><span class=\"line\">;初始线程数</span><br><span class=\"line\">pm.start_servers = 1</span><br><span class=\"line\">;最小空余线程数</span><br><span class=\"line\">pm.min_spare_servers = 1</span><br><span class=\"line\">;最大空余线程数</span><br><span class=\"line\">pm.max_spare_servers = 1</span><br><span class=\"line\">;php_admin内存最大限制</span><br><span class=\"line\">php_admin_value[memory_limit] = 128M</span><br></pre></td></tr></table></figure></p>"},{"title":"树莓派学习-DHT11温湿度读取（GPIO接口）","id":"147","date":"2017-12-10T10:35:30.000Z","declare":true,"toc":true,"_content":"\n#### 1.接线顺序可以参照下图：\n\n![](/img/xjy/smp007.png) \n\n<!--more-->\n\n![](/img/xjy/smp008.jpg)\n\n#### 2.python代码如下所示，DHT11.py：\n``` py \nimport RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n```\n\n#### 3.运行结果如图：\n\n![](/img/xjy/smp009.png)","source":"_posts/p22.md","raw":"---\ntitle: 树莓派学习-DHT11温湿度读取（GPIO接口）\nid: 147\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 18:35:30\ntags: [树莓派, dht11, gpio, python, 传感器]\ndeclare: true\ntoc: true\n---\n\n#### 1.接线顺序可以参照下图：\n\n![](/img/xjy/smp007.png) \n\n<!--more-->\n\n![](/img/xjy/smp008.jpg)\n\n#### 2.python代码如下所示，DHT11.py：\n``` py \nimport RPi.GPIO as GPIO \nimport time \n\ndefaultT=14\ndefaultS=50\n\nwhile(1):\nchannel =4 \nGPIO.setmode(GPIO.BCM)\ndata = [] \nj = 0\ntime.sleep(1) \nGPIO.setup(channel, GPIO.OUT) \nGPIO.output(channel, GPIO.LOW) \ntime.sleep(0.02) \nGPIO.output(channel, GPIO.HIGH) \nGPIO.setup(channel, GPIO.IN)\n\nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \ncontinue\n\nwhile j &lt; 40: \nk = 0 \nwhile GPIO.input(channel) == GPIO.LOW: \ncontinue \nwhile GPIO.input(channel) == GPIO.HIGH: \nk += 1 \nif k &gt; 100: \nbreak \nif k &lt; 8: \ndata.append(0) \nelse: \ndata.append(1)\n\nj += 1\n#print (\"sensor is working.\") \nprint (data)\n\nhumidity_bit = data[0:8] \nhumidity_point_bit = data[8:16] \ntemperature_bit = data[16:24] \ntemperature_point_bit = data[24:32] \ncheck_bit = data[32:40]\n\nhumidity = 0 \nhumidity_point = 0 \ntemperature = 0 \ntemperature_point = 0 \ncheck = 0\n\nfor i in range(8): \nhumidity += humidity_bit[i] * 2 ** (7-i) \nhumidity_point += humidity_point_bit[i] * 2 ** (7-i) \ntemperature += temperature_bit[i] * 2 ** (7-i) \ntemperature_point += temperature_point_bit[i] * 2 ** (7-i) \ncheck += check_bit[i] * 2 ** (7-i)\n\ntmp = humidity + humidity_point + temperature + temperature_point\n\nif check == tmp:\ndefaultT=temperature\ndefaultS=humidity\nprint (\"temperature :\", temperature, \"*C, humidity :\", humidity, \"%\") \nelse: \nprint (\"temperature :\", defaultT, \"*C, humidity :\", defaultS, \"%\") \ntime.sleep(0.5)\nGPIO.cleanup()\n```\n\n#### 3.运行结果如图：\n\n![](/img/xjy/smp009.png)","slug":"p22","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgd000nu8vezw2nqalh","content":"<h4 id=\"1-接线顺序可以参照下图：\"><a href=\"#1-接线顺序可以参照下图：\" class=\"headerlink\" title=\"1.接线顺序可以参照下图：\"></a>1.接线顺序可以参照下图：</h4><p><img src=\"/img/xjy/smp007.png\" alt=\"\"> </p>\n<a id=\"more\"></a>\n<p><img src=\"/img/xjy/smp008.jpg\" alt=\"\"></p>\n<h4 id=\"2-python代码如下所示，DHT11-py：\"><a href=\"#2-python代码如下所示，DHT11-py：\" class=\"headerlink\" title=\"2.python代码如下所示，DHT11.py：\"></a>2.python代码如下所示，DHT11.py：</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO </span><br><span class=\"line\"><span class=\"keyword\">import</span> time </span><br><span class=\"line\"></span><br><span class=\"line\">defaultT=<span class=\"number\">14</span></span><br><span class=\"line\">defaultS=<span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">channel =<span class=\"number\">4</span> </span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">data = [] </span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.OUT) </span><br><span class=\"line\">GPIO.output(channel, GPIO.LOW) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.02</span>) </span><br><span class=\"line\">GPIO.output(channel, GPIO.HIGH) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.IN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &amp;lt; <span class=\"number\">40</span>: </span><br><span class=\"line\">k = <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\">k += <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;gt; <span class=\"number\">100</span>: </span><br><span class=\"line\"><span class=\"keyword\">break</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;lt; <span class=\"number\">8</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">j += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#print (\"sensor is working.\") </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (data)</span><br><span class=\"line\"></span><br><span class=\"line\">humidity_bit = data[<span class=\"number\">0</span>:<span class=\"number\">8</span>] </span><br><span class=\"line\">humidity_point_bit = data[<span class=\"number\">8</span>:<span class=\"number\">16</span>] </span><br><span class=\"line\">temperature_bit = data[<span class=\"number\">16</span>:<span class=\"number\">24</span>] </span><br><span class=\"line\">temperature_point_bit = data[<span class=\"number\">24</span>:<span class=\"number\">32</span>] </span><br><span class=\"line\">check_bit = data[<span class=\"number\">32</span>:<span class=\"number\">40</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">humidity = <span class=\"number\">0</span> </span><br><span class=\"line\">humidity_point = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature_point = <span class=\"number\">0</span> </span><br><span class=\"line\">check = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>): </span><br><span class=\"line\">humidity += humidity_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">humidity_point += humidity_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature += temperature_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature_point += temperature_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">check += check_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = humidity + humidity_point + temperature + temperature_point</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> check == tmp:</span><br><span class=\"line\">defaultT=temperature</span><br><span class=\"line\">defaultS=humidity</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, temperature, <span class=\"string\">\"*C, humidity :\"</span>, humidity, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, defaultT, <span class=\"string\">\"*C, humidity :\"</span>, defaultS, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">GPIO.cleanup()</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-运行结果如图：\"><a href=\"#3-运行结果如图：\" class=\"headerlink\" title=\"3.运行结果如图：\"></a>3.运行结果如图：</h4><p><img src=\"/img/xjy/smp009.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-接线顺序可以参照下图：\"><a href=\"#1-接线顺序可以参照下图：\" class=\"headerlink\" title=\"1.接线顺序可以参照下图：\"></a>1.接线顺序可以参照下图：</h4><p><img src=\"/img/xjy/smp007.png\" alt=\"\"> </p>","more":"<p><img src=\"/img/xjy/smp008.jpg\" alt=\"\"></p>\n<h4 id=\"2-python代码如下所示，DHT11-py：\"><a href=\"#2-python代码如下所示，DHT11-py：\" class=\"headerlink\" title=\"2.python代码如下所示，DHT11.py：\"></a>2.python代码如下所示，DHT11.py：</h4><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO </span><br><span class=\"line\"><span class=\"keyword\">import</span> time </span><br><span class=\"line\"></span><br><span class=\"line\">defaultT=<span class=\"number\">14</span></span><br><span class=\"line\">defaultS=<span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">channel =<span class=\"number\">4</span> </span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">data = [] </span><br><span class=\"line\">j = <span class=\"number\">0</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.OUT) </span><br><span class=\"line\">GPIO.output(channel, GPIO.LOW) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.02</span>) </span><br><span class=\"line\">GPIO.output(channel, GPIO.HIGH) </span><br><span class=\"line\">GPIO.setup(channel, GPIO.IN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> j &amp;lt; <span class=\"number\">40</span>: </span><br><span class=\"line\">k = <span class=\"number\">0</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.LOW: </span><br><span class=\"line\"><span class=\"keyword\">continue</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> GPIO.input(channel) == GPIO.HIGH: </span><br><span class=\"line\">k += <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;gt; <span class=\"number\">100</span>: </span><br><span class=\"line\"><span class=\"keyword\">break</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> k &amp;lt; <span class=\"number\">8</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\">data.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">j += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#print (\"sensor is working.\") </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (data)</span><br><span class=\"line\"></span><br><span class=\"line\">humidity_bit = data[<span class=\"number\">0</span>:<span class=\"number\">8</span>] </span><br><span class=\"line\">humidity_point_bit = data[<span class=\"number\">8</span>:<span class=\"number\">16</span>] </span><br><span class=\"line\">temperature_bit = data[<span class=\"number\">16</span>:<span class=\"number\">24</span>] </span><br><span class=\"line\">temperature_point_bit = data[<span class=\"number\">24</span>:<span class=\"number\">32</span>] </span><br><span class=\"line\">check_bit = data[<span class=\"number\">32</span>:<span class=\"number\">40</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">humidity = <span class=\"number\">0</span> </span><br><span class=\"line\">humidity_point = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature = <span class=\"number\">0</span> </span><br><span class=\"line\">temperature_point = <span class=\"number\">0</span> </span><br><span class=\"line\">check = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">8</span>): </span><br><span class=\"line\">humidity += humidity_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">humidity_point += humidity_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature += temperature_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">temperature_point += temperature_point_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i) </span><br><span class=\"line\">check += check_bit[i] * <span class=\"number\">2</span> ** (<span class=\"number\">7</span>-i)</span><br><span class=\"line\"></span><br><span class=\"line\">tmp = humidity + humidity_point + temperature + temperature_point</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> check == tmp:</span><br><span class=\"line\">defaultT=temperature</span><br><span class=\"line\">defaultS=humidity</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, temperature, <span class=\"string\">\"*C, humidity :\"</span>, humidity, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>: </span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"temperature :\"</span>, defaultT, <span class=\"string\">\"*C, humidity :\"</span>, defaultS, <span class=\"string\">\"%\"</span>) </span><br><span class=\"line\">time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">GPIO.cleanup()</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-运行结果如图：\"><a href=\"#3-运行结果如图：\" class=\"headerlink\" title=\"3.运行结果如图：\"></a>3.运行结果如图：</h4><p><img src=\"/img/xjy/smp009.png\" alt=\"\"></p>"},{"title":"我的文章丢了","id":"126","date":"2017-12-10T09:37:45.000Z","declare":true,"toc":true,"_content":"\n今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-**没有备份数据**\n\n下面是我更换域名执行的sql，这一步还好，没有丢东西 \n<!--more-->\n``` sql \nUPDATE xjywp_options SET option_value = replace(option_value, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_posts SET post_content = replace(post_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_content = replace(comment_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, 'www.zyshops.xyz','www.xiajunyi.com')\n```\n我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误\n``` sql \nUPDATE xjywp_posts SET post_content = replace(guid, 'www.zyshops.xyz','www.xiajunyi.com')\n``` \n原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。\n\n我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。\n\n最后，我很无奈的说一句：数据无价，务必备份！\n\n![](/img/xjy/sjds001.jpg)","source":"_posts/p24.md","raw":"---\ntitle: 我的文章丢了\nid: 126\ncategories:\n  - 生活杂记\ndate: 2017-12-10 17:37:45\ntags: [sql, 数据, 数据库, 备份, wordpress, 闲谈]\ndeclare: true\ntoc: true\n---\n\n今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-**没有备份数据**\n\n下面是我更换域名执行的sql，这一步还好，没有丢东西 \n<!--more-->\n``` sql \nUPDATE xjywp_options SET option_value = replace(option_value, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_posts SET post_content = replace(post_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_content = replace(comment_content, 'www.zyshops.xyz','www.xiajunyi.com') ;\nUPDATE xjywp_comments SET comment_author_url = replace(comment_author_url, 'www.zyshops.xyz','www.xiajunyi.com')\n```\n我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误\n``` sql \nUPDATE xjywp_posts SET post_content = replace(guid, 'www.zyshops.xyz','www.xiajunyi.com')\n``` \n原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。\n\n我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。\n\n最后，我很无奈的说一句：数据无价，务必备份！\n\n![](/img/xjy/sjds001.jpg)","slug":"p24","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jge000ou8vebpbndbpx","content":"<p>今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-<strong>没有备份数据</strong></p>\n<p>下面是我更换域名执行的sql，这一步还好，没有丢东西<br><a id=\"more\"></a><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_options <span class=\"keyword\">SET</span> option_value = <span class=\"keyword\">replace</span>(option_value, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(post_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_content = <span class=\"keyword\">replace</span>(comment_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_author_url = <span class=\"keyword\">replace</span>(comment_author_url, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误</p>\n<pre><code class=\"sql\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(guid, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)\n</code></pre>\n<p>原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。</p>\n<p>我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。</p>\n<p>最后，我很无奈的说一句：数据无价，务必备份！</p>\n<p><img src=\"/img/xjy/sjds001.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>今天发生了一件很可耻的事情，我犯了每一个合格程序员都不会犯的错-<strong>没有备份数据</strong></p>\n<p>下面是我更换域名执行的sql，这一步还好，没有丢东西<br>","more":"<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_options <span class=\"keyword\">SET</span> option_value = <span class=\"keyword\">replace</span>(option_value, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(post_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_content = <span class=\"keyword\">replace</span>(comment_content, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> xjywp_comments <span class=\"keyword\">SET</span> comment_author_url = <span class=\"keyword\">replace</span>(comment_author_url, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>我以为上面这样就行了，发现还是会有找不到地址的情况，于是发现guid字段里还有原来的域名，于是心想“那么就简单，也替换呗”，就在这时，发生了无可挽回的错误</p>\n<pre><code class=\"sql\"><span class=\"keyword\">UPDATE</span> xjywp_posts <span class=\"keyword\">SET</span> post_content = <span class=\"keyword\">replace</span>(guid, <span class=\"string\">'www.zyshops.xyz'</span>,<span class=\"string\">'www.xiajunyi.com'</span>)\n</code></pre>\n<p>原来，我只修改了替换参数里的字段名，没有修改赋值到的字段名，结果把post_content字段的内容全部给覆盖了。。。。。。</p>\n<p>我努力的抱着希望去看看原来有没有保存那些文章的记录，发现并没有，我甚至查到网上说mysql-bin可以恢复，但是默认没有开启。。。。。。</p>\n<p>最后，我很无奈的说一句：数据无价，务必备份！</p>\n<p><img src=\"/img/xjy/sjds001.jpg\" alt=\"\"></p>"},{"title":"常用的apt-get命令","id":"355","date":"2018-01-28T05:07:24.000Z","declare":true,"toc":true,"_content":"\n在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：\n<!--more-->\n``` shell \n#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n```","source":"_posts/p25.md","raw":"---\ntitle: 常用的apt-get命令\nid: 355\ncategories:\n  - LINUX\n  - 编程语言\ndate: 2018-01-28 13:07:24\ntags: [树莓派, 运维, apt, apt-get, linux]\ndeclare: true\ntoc: true\n---\n\n在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：\n<!--more-->\n``` shell \n#列出所有安装过的软件\napt list --installed \n#更新软件源索引\nsudo apt-get update\n#安装xxx软件\nsudo apt-get install xxx\n#将xxx软件升级到最新版本                      \nsudo apt-get upgrade xxx\n＃卸载软件（删除软件包）\nsudo apt-get remove xxx　　　　　\n#自动卸载xxx软件但保留其配置文件\nsudo apt-get autoremove xxx     　　　　　\n#自动卸载xxx软件其删除其配置文件\nsudo apt-get autoremove --purge  xxx　　　　\n#重装同一软件xxx\nsudo apt-get --reinstall install xxx\n```","slug":"p25","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgg000pu8ver07ybier","content":"<p>在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：<br><a id=\"more\"></a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>列出所有安装过的软件</span><br><span class=\"line\">apt list --installed </span><br><span class=\"line\"><span class=\"meta\">#</span>更新软件源索引</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"meta\">#</span>安装xxx软件</span><br><span class=\"line\">sudo apt-get install xxx</span><br><span class=\"line\"><span class=\"meta\">#</span>将xxx软件升级到最新版本                      </span><br><span class=\"line\">sudo apt-get upgrade xxx</span><br><span class=\"line\">＃卸载软件（删除软件包）</span><br><span class=\"line\">sudo apt-get remove xxx　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件但保留其配置文件</span><br><span class=\"line\">sudo apt-get autoremove xxx     　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件其删除其配置文件</span><br><span class=\"line\">sudo apt-get autoremove --purge  xxx　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>重装同一软件xxx</span><br><span class=\"line\">sudo apt-get --reinstall install xxx</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>在树莓派上安装和卸载软件时，离不开apt-get命令，下面整理一些常用的apt-get命令：<br>","more":"<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>列出所有安装过的软件</span><br><span class=\"line\">apt list --installed </span><br><span class=\"line\"><span class=\"meta\">#</span>更新软件源索引</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"><span class=\"meta\">#</span>安装xxx软件</span><br><span class=\"line\">sudo apt-get install xxx</span><br><span class=\"line\"><span class=\"meta\">#</span>将xxx软件升级到最新版本                      </span><br><span class=\"line\">sudo apt-get upgrade xxx</span><br><span class=\"line\">＃卸载软件（删除软件包）</span><br><span class=\"line\">sudo apt-get remove xxx　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件但保留其配置文件</span><br><span class=\"line\">sudo apt-get autoremove xxx     　　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>自动卸载xxx软件其删除其配置文件</span><br><span class=\"line\">sudo apt-get autoremove --purge  xxx　　　　</span><br><span class=\"line\"><span class=\"meta\">#</span>重装同一软件xxx</span><br><span class=\"line\">sudo apt-get --reinstall install xxx</span><br></pre></td></tr></table></figure></p>"},{"title":"搭建之路1-基于redhat","id":"405","date":"2018-02-06T03:25:38.000Z","declare":true,"toc":true,"_content":"在redhat系统下，从jdk->maven->nexus->svn->jenkins，逐步实现从java编译到高级管理环境的搭建。\n\n<!--more-->\n\n# 1 安装jdk #\n\n比较常见,我这里以1.8为例\n\n## 1.1解压复制 ##\n\n``` shell \nsudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm \n```\n\n\n## 1.2执行安装 ##\n``` shell \nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  && sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ && sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ && sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n```\n## 1.3验证版本 ##  \n``` shell \njava -version\n```\n\n## 1.4另外可增加配置 ##\n``` shell \nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n# 2 安装maven #\n\n## 2.1下载安装包 ##\n``` shell \nwget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n```\n\n## 2.2解压 ##\n``` shell \ntar zvxf apache-maven-3.0.5-bin.tar.gz \n```\n## 2.3移到指定目录 ##\n``` shell \nmv apache-maven-3.0.5 /usr/local\n```\n\n## 2.4编辑配置文件/etc/profile，加入 ##\n``` shell \nexport MAVEN_HOME=/usr/local/apache-maven-3.0.5\nexport PATH=$PATH:$MAVEN_HOME/bin\n```\n\n## 2.5始配置生效 ##\n``` shell \n    source /etc/profile\n```\n\n## 2.6确认安装完成 ##\n``` shell \n    mvn -v \n```\n\n# 3 nexus安装 #\n\n## 3.1下载安装包 ## \n``` shell \nwget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n```\n\n## 3.2解压并复制 ##\n``` shell \nsudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n```\n\n## 3.3做链接 ##\n``` shell \nsudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n```\n\n## 3.4赋权限 ##\n``` shell \nchmod 755 /etc/init.d/nexus\n```\n\n## 3.5设置开机启动并运行 ##\n``` shell \ncd /etc/init.d\nchkconfig --add nexus\nchkconfig --levels 345 nexus on\nservice nexus start\ntail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n```\n\n## 3.6配置请查考链接\n\n[配置链接](https://www.xncoding.com/2017/09/02/tool/nexus.html)\n\n\n# 4 svn安装 #\n\n## 4.1yum安装svnversion ##\n\n4.1.1 检查是否安装了低版本的SVN\n``` shell \nrpm -qa subversion\n```\n\n4.1.2 如果存储旧版本，卸载旧版本SVN\n``` shell \nyum remove subversion\n```\n\n4.1.3 安装SVN\n``` shell \nyum install subversion\n```\n\n4.1.4 验证安装版本信息\n``` shell \nsvnserve --version\n```\n\n4.1.5 代码库创建\n``` shell \nmkdir -p /opt/svn/\nsvnadmin create /opt/svn/repo\n```\n## 4.2账户权限及防火墙配置 ##\n\n4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：\n``` text \n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n```\n\n4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：\n``` text \n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n```\n\n4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：\n``` text \n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n```\n\n4.2.4  编辑/etc/sysconfig/iptables，加入如下内容\n``` text \n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n```\n\n## 4.3 启动SVN ##\n\n4.3.1 启动SVN\n``` shell \nsvnserve -d -r /opt/svn/\n```\n\n4.3.2 查看SVN进程\n``` shell \nps -ef|grep svnserve\n```\n\n4.3.3 检测SVN端口\n``` shell \nnetstat -ln |grep 3690 \n```\n\n## 4.4完成上面的步骤即可在客户端正常访问\n\n地址：[svn://ip地址/repo](svn://ip地址/repo)\n\n# 5 jenkins安装 #\n\n## 5.1安装 ##\n``` shell \nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n## 5.2启动并加入开机启动项 ##\n``` shell \nsudo service jenkins start\nsudo chkconfig jenkins on\n```\n\n## 5.3访问jenkins的web管理端 ##\n\n[http://ip:8080](http://ip地址:8080)\n\n\n## 5.4初始进入及安装插件等 ##\n\n- (1).从提示文件中找到输入管理员身份确认码并输入\n\n- (2).安装默认插件\n\n- (3).创建管理员后开始\n\n- (4).安装Maven Integration plugin插件\n\n## 5.5配置一个jenkins任务\n下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：\n![](/img/xjy/jenkins config.png)\n\n# 6 小结\n\n这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。","source":"_posts/p23.md","raw":"---\ntitle: 搭建之路1-基于redhat\nid: 405\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-02-06 11:25:38\ntags: [运维, java, maven, svn, jenkins, nexus, redhat]\ndeclare: true\ntoc: true\n---\n在redhat系统下，从jdk->maven->nexus->svn->jenkins，逐步实现从java编译到高级管理环境的搭建。\n\n<!--more-->\n\n# 1 安装jdk #\n\n比较常见,我这里以1.8为例\n\n## 1.1解压复制 ##\n\n``` shell \nsudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm \n```\n\n\n## 1.2执行安装 ##\n``` shell \nsudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  && sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ && sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ && sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java\n```\n## 1.3验证版本 ##  \n``` shell \njava -version\n```\n\n## 1.4另外可增加配置 ##\n``` shell \nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n# 2 安装maven #\n\n## 2.1下载安装包 ##\n``` shell \nwget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz\n```\n\n## 2.2解压 ##\n``` shell \ntar zvxf apache-maven-3.0.5-bin.tar.gz \n```\n## 2.3移到指定目录 ##\n``` shell \nmv apache-maven-3.0.5 /usr/local\n```\n\n## 2.4编辑配置文件/etc/profile，加入 ##\n``` shell \nexport MAVEN_HOME=/usr/local/apache-maven-3.0.5\nexport PATH=$PATH:$MAVEN_HOME/bin\n```\n\n## 2.5始配置生效 ##\n``` shell \n    source /etc/profile\n```\n\n## 2.6确认安装完成 ##\n``` shell \n    mvn -v \n```\n\n# 3 nexus安装 #\n\n## 3.1下载安装包 ## \n``` shell \nwget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz\n```\n\n## 3.2解压并复制 ##\n``` shell \nsudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy\n```\n\n## 3.3做链接 ##\n``` shell \nsudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus\n```\n\n## 3.4赋权限 ##\n``` shell \nchmod 755 /etc/init.d/nexus\n```\n\n## 3.5设置开机启动并运行 ##\n``` shell \ncd /etc/init.d\nchkconfig --add nexus\nchkconfig --levels 345 nexus on\nservice nexus start\ntail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log\n```\n\n## 3.6配置请查考链接\n\n[配置链接](https://www.xncoding.com/2017/09/02/tool/nexus.html)\n\n\n# 4 svn安装 #\n\n## 4.1yum安装svnversion ##\n\n4.1.1 检查是否安装了低版本的SVN\n``` shell \nrpm -qa subversion\n```\n\n4.1.2 如果存储旧版本，卸载旧版本SVN\n``` shell \nyum remove subversion\n```\n\n4.1.3 安装SVN\n``` shell \nyum install subversion\n```\n\n4.1.4 验证安装版本信息\n``` shell \nsvnserve --version\n```\n\n4.1.5 代码库创建\n``` shell \nmkdir -p /opt/svn/\nsvnadmin create /opt/svn/repo\n```\n## 4.2账户权限及防火墙配置 ##\n\n4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：\n``` text \n[users]\n# harry = harryssecret\n# sally = sallyssecret\nxjy= 123\nwww = 123\n```\n\n4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：\n``` text \n[groups]\n#创建一个admin组，将用户加入到组\nadmin = xjy,www\n[/] #根目录权限设置（就是“svn”这个文件夹）\nxjy = rw            #xjy对svn下的所有版本库有读写权限\nwww = r             #www对svn下的所有版本库有读权限\n[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限\n@admin = rw         #admin组的用户对repo版本库有读写权限\n```\n\n4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：\n``` text \n[general]  \n#匿名访问的权限，可以是read,write,none,默认为read  \nanon-access = none  \n#使授权用户有写权限  \nauth-access = write  \n#密码数据库的路径  \npassword-db = passwd  \n#访问控制文件  \nauthz-db = authz  \n#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  \nrealm = /opt/svn/repo\n```\n\n4.2.4  编辑/etc/sysconfig/iptables，加入如下内容\n``` text \n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT\n```\n\n## 4.3 启动SVN ##\n\n4.3.1 启动SVN\n``` shell \nsvnserve -d -r /opt/svn/\n```\n\n4.3.2 查看SVN进程\n``` shell \nps -ef|grep svnserve\n```\n\n4.3.3 检测SVN端口\n``` shell \nnetstat -ln |grep 3690 \n```\n\n## 4.4完成上面的步骤即可在客户端正常访问\n\n地址：[svn://ip地址/repo](svn://ip地址/repo)\n\n# 5 jenkins安装 #\n\n## 5.1安装 ##\n``` shell \nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n```\n## 5.2启动并加入开机启动项 ##\n``` shell \nsudo service jenkins start\nsudo chkconfig jenkins on\n```\n\n## 5.3访问jenkins的web管理端 ##\n\n[http://ip:8080](http://ip地址:8080)\n\n\n## 5.4初始进入及安装插件等 ##\n\n- (1).从提示文件中找到输入管理员身份确认码并输入\n\n- (2).安装默认插件\n\n- (3).创建管理员后开始\n\n- (4).安装Maven Integration plugin插件\n\n## 5.5配置一个jenkins任务\n下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：\n![](/img/xjy/jenkins config.png)\n\n# 6 小结\n\n这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。","slug":"p23","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgl000tu8vep8fnm3m1","content":"<p>在redhat系统下，从jdk-&gt;maven-&gt;nexus-&gt;svn-&gt;jenkins，逐步实现从java编译到高级管理环境的搭建。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-安装jdk\"><a href=\"#1-安装jdk\" class=\"headerlink\" title=\"1 安装jdk\"></a>1 安装jdk</h1><p>比较常见,我这里以1.8为例</p>\n<h2 id=\"1-1解压复制\"><a href=\"#1-1解压复制\" class=\"headerlink\" title=\"1.1解压复制\"></a>1.1解压复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2执行安装\"><a href=\"#1-2执行安装\" class=\"headerlink\" title=\"1.2执行安装\"></a>1.2执行安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  &amp;&amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;&amp; sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ &amp;&amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3验证版本\"><a href=\"#1-3验证版本\" class=\"headerlink\" title=\"1.3验证版本\"></a>1.3验证版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4另外可增加配置\"><a href=\"#1-4另外可增加配置\" class=\"headerlink\" title=\"1.4另外可增加配置\"></a>1.4另外可增加配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-安装maven\"><a href=\"#2-安装maven\" class=\"headerlink\" title=\"2 安装maven\"></a>2 安装maven</h1><h2 id=\"2-1下载安装包\"><a href=\"#2-1下载安装包\" class=\"headerlink\" title=\"2.1下载安装包\"></a>2.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2解压\"><a href=\"#2-2解压\" class=\"headerlink\" title=\"2.2解压\"></a>2.2解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zvxf apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3移到指定目录\"><a href=\"#2-3移到指定目录\" class=\"headerlink\" title=\"2.3移到指定目录\"></a>2.3移到指定目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-maven-3.0.5 /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4编辑配置文件-etc-profile，加入\"><a href=\"#2-4编辑配置文件-etc-profile，加入\" class=\"headerlink\" title=\"2.4编辑配置文件/etc/profile，加入\"></a>2.4编辑配置文件/etc/profile，加入</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/usr/local/apache-maven-3.0.5</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5始配置生效\"><a href=\"#2-5始配置生效\" class=\"headerlink\" title=\"2.5始配置生效\"></a>2.5始配置生效</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6确认安装完成\"><a href=\"#2-6确认安装完成\" class=\"headerlink\" title=\"2.6确认安装完成\"></a>2.6确认安装完成</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-nexus安装\"><a href=\"#3-nexus安装\" class=\"headerlink\" title=\"3 nexus安装\"></a>3 nexus安装</h1><h2 id=\"3-1下载安装包\"><a href=\"#3-1下载安装包\" class=\"headerlink\" title=\"3.1下载安装包\"></a>3.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2解压并复制\"><a href=\"#3-2解压并复制\" class=\"headerlink\" title=\"3.2解压并复制\"></a>3.2解压并复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3做链接\"><a href=\"#3-3做链接\" class=\"headerlink\" title=\"3.3做链接\"></a>3.3做链接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4赋权限\"><a href=\"#3-4赋权限\" class=\"headerlink\" title=\"3.4赋权限\"></a>3.4赋权限</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5设置开机启动并运行\"><a href=\"#3-5设置开机启动并运行\" class=\"headerlink\" title=\"3.5设置开机启动并运行\"></a>3.5设置开机启动并运行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/init.d</span><br><span class=\"line\">chkconfig --add nexus</span><br><span class=\"line\">chkconfig --levels 345 nexus on</span><br><span class=\"line\">service nexus start</span><br><span class=\"line\">tail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6配置请查考链接\"><a href=\"#3-6配置请查考链接\" class=\"headerlink\" title=\"3.6配置请查考链接\"></a>3.6配置请查考链接</h2><p><a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\">配置链接</a></p>\n<h1 id=\"4-svn安装\"><a href=\"#4-svn安装\" class=\"headerlink\" title=\"4 svn安装\"></a>4 svn安装</h1><h2 id=\"4-1yum安装svnversion\"><a href=\"#4-1yum安装svnversion\" class=\"headerlink\" title=\"4.1yum安装svnversion\"></a>4.1yum安装svnversion</h2><p>4.1.1 检查是否安装了低版本的SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.2 如果存储旧版本，卸载旧版本SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.3 安装SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.4 验证安装版本信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve --version</span><br></pre></td></tr></table></figure></p>\n<p>4.1.5 代码库创建<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/svn/</span><br><span class=\"line\">svnadmin create /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2账户权限及防火墙配置\"><a href=\"#4-2账户权限及防火墙配置\" class=\"headerlink\" title=\"4.2账户权限及防火墙配置\"></a>4.2账户权限及防火墙配置</h2><p>4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\"># harry = harryssecret</span><br><span class=\"line\"># sally = sallyssecret</span><br><span class=\"line\">xjy= 123</span><br><span class=\"line\">www = 123</span><br></pre></td></tr></table></figure></p>\n<p>4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">#创建一个admin组，将用户加入到组</span><br><span class=\"line\">admin = xjy,www</span><br><span class=\"line\">[/] #根目录权限设置（就是“svn”这个文件夹）</span><br><span class=\"line\">xjy = rw            #xjy对svn下的所有版本库有读写权限</span><br><span class=\"line\">www = r             #www对svn下的所有版本库有读权限</span><br><span class=\"line\">[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限</span><br><span class=\"line\">@admin = rw         #admin组的用户对repo版本库有读写权限</span><br></pre></td></tr></table></figure></p>\n<p>4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[general]  </span><br><span class=\"line\">#匿名访问的权限，可以是read,write,none,默认为read  </span><br><span class=\"line\">anon-access = none  </span><br><span class=\"line\">#使授权用户有写权限  </span><br><span class=\"line\">auth-access = write  </span><br><span class=\"line\">#密码数据库的路径  </span><br><span class=\"line\">password-db = passwd  </span><br><span class=\"line\">#访问控制文件  </span><br><span class=\"line\">authz-db = authz  </span><br><span class=\"line\">#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  </span><br><span class=\"line\">realm = /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<p>4.2.4  编辑/etc/sysconfig/iptables，加入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-3-启动SVN\"><a href=\"#4-3-启动SVN\" class=\"headerlink\" title=\"4.3 启动SVN\"></a>4.3 启动SVN</h2><p>4.3.1 启动SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /opt/svn/</span><br></pre></td></tr></table></figure></p>\n<p>4.3.2 查看SVN进程<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep svnserve</span><br></pre></td></tr></table></figure></p>\n<p>4.3.3 检测SVN端口<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ln |grep 3690</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-4完成上面的步骤即可在客户端正常访问\"><a href=\"#4-4完成上面的步骤即可在客户端正常访问\" class=\"headerlink\" title=\"4.4完成上面的步骤即可在客户端正常访问\"></a>4.4完成上面的步骤即可在客户端正常访问</h2><p>地址：<a href=\"svn://ip地址/repo\" target=\"_blank\" rel=\"noopener\">svn://ip地址/repo</a></p>\n<h1 id=\"5-jenkins安装\"><a href=\"#5-jenkins安装\" class=\"headerlink\" title=\"5 jenkins安装\"></a>5 jenkins安装</h1><h2 id=\"5-1安装\"><a href=\"#5-1安装\" class=\"headerlink\" title=\"5.1安装\"></a>5.1安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2启动并加入开机启动项\"><a href=\"#5-2启动并加入开机启动项\" class=\"headerlink\" title=\"5.2启动并加入开机启动项\"></a>5.2启动并加入开机启动项</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service jenkins start</span><br><span class=\"line\">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3访问jenkins的web管理端\"><a href=\"#5-3访问jenkins的web管理端\" class=\"headerlink\" title=\"5.3访问jenkins的web管理端\"></a>5.3访问jenkins的web管理端</h2><p><a href=\"http://ip地址:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n<h2 id=\"5-4初始进入及安装插件等\"><a href=\"#5-4初始进入及安装插件等\" class=\"headerlink\" title=\"5.4初始进入及安装插件等\"></a>5.4初始进入及安装插件等</h2><ul>\n<li><p>(1).从提示文件中找到输入管理员身份确认码并输入</p>\n</li>\n<li><p>(2).安装默认插件</p>\n</li>\n<li><p>(3).创建管理员后开始</p>\n</li>\n<li><p>(4).安装Maven Integration plugin插件</p>\n</li>\n</ul>\n<h2 id=\"5-5配置一个jenkins任务\"><a href=\"#5-5配置一个jenkins任务\" class=\"headerlink\" title=\"5.5配置一个jenkins任务\"></a>5.5配置一个jenkins任务</h2><p>下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：<br><img src=\"/img/xjy/jenkins config.png\" alt=\"\"></p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。</p>\n","site":{"data":{}},"excerpt":"<p>在redhat系统下，从jdk-&gt;maven-&gt;nexus-&gt;svn-&gt;jenkins，逐步实现从java编译到高级管理环境的搭建。</p>","more":"<h1 id=\"1-安装jdk\"><a href=\"#1-安装jdk\" class=\"headerlink\" title=\"1 安装jdk\"></a>1 安装jdk</h1><p>比较常见,我这里以1.8为例</p>\n<h2 id=\"1-1解压复制\"><a href=\"#1-1解压复制\" class=\"headerlink\" title=\"1.1解压复制\"></a>1.1解压复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf /home/xjy/Downloads/jdk-8u144-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2执行安装\"><a href=\"#1-2执行安装\" class=\"headerlink\" title=\"1.2执行安装\"></a>1.2执行安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk1.8.0_144/bin/javac\" 1 \\  &amp;&amp; sudo update-alternatives --set javac /usr/lib/jvm/jdk1.8.0_144/bin/javac \\ &amp;&amp; sudo update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk1.8.0_144/bin/java\" 1 \\ &amp;&amp; sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_144/bin/java</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3验证版本\"><a href=\"#1-3验证版本\" class=\"headerlink\" title=\"1.3验证版本\"></a>1.3验证版本</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4另外可增加配置\"><a href=\"#1-4另外可增加配置\" class=\"headerlink\" title=\"1.4另外可增加配置\"></a>1.4另外可增加配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-安装maven\"><a href=\"#2-安装maven\" class=\"headerlink\" title=\"2 安装maven\"></a>2 安装maven</h1><h2 id=\"2-1下载安装包\"><a href=\"#2-1下载安装包\" class=\"headerlink\" title=\"2.1下载安装包\"></a>2.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.0.5/binaries/apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2解压\"><a href=\"#2-2解压\" class=\"headerlink\" title=\"2.2解压\"></a>2.2解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zvxf apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3移到指定目录\"><a href=\"#2-3移到指定目录\" class=\"headerlink\" title=\"2.3移到指定目录\"></a>2.3移到指定目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-maven-3.0.5 /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4编辑配置文件-etc-profile，加入\"><a href=\"#2-4编辑配置文件-etc-profile，加入\" class=\"headerlink\" title=\"2.4编辑配置文件/etc/profile，加入\"></a>2.4编辑配置文件/etc/profile，加入</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME=/usr/local/apache-maven-3.0.5</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5始配置生效\"><a href=\"#2-5始配置生效\" class=\"headerlink\" title=\"2.5始配置生效\"></a>2.5始配置生效</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6确认安装完成\"><a href=\"#2-6确认安装完成\" class=\"headerlink\" title=\"2.6确认安装完成\"></a>2.6确认安装完成</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-nexus安装\"><a href=\"#3-nexus安装\" class=\"headerlink\" title=\"3 nexus安装\"></a>3 nexus安装</h1><h2 id=\"3-1下载安装包\"><a href=\"#3-1下载安装包\" class=\"headerlink\" title=\"3.1下载安装包\"></a>3.1下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.5.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2解压并复制\"><a href=\"#3-2解压并复制\" class=\"headerlink\" title=\"3.2解压并复制\"></a>3.2解压并复制</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf nexus-3.5.2-01-unix.tar.gz -C /usr/lib/nexus-xjy</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3做链接\"><a href=\"#3-3做链接\" class=\"headerlink\" title=\"3.3做链接\"></a>3.3做链接</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib/nexus-xjy/nexus-3.5.2-01/bin/nexus /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4赋权限\"><a href=\"#3-4赋权限\" class=\"headerlink\" title=\"3.4赋权限\"></a>3.4赋权限</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /etc/init.d/nexus</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5设置开机启动并运行\"><a href=\"#3-5设置开机启动并运行\" class=\"headerlink\" title=\"3.5设置开机启动并运行\"></a>3.5设置开机启动并运行</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/init.d</span><br><span class=\"line\">chkconfig --add nexus</span><br><span class=\"line\">chkconfig --levels 345 nexus on</span><br><span class=\"line\">service nexus start</span><br><span class=\"line\">tail -fn 200 /usr/lib/nexus-xjy/sonatype-work/nexus3/log</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6配置请查考链接\"><a href=\"#3-6配置请查考链接\" class=\"headerlink\" title=\"3.6配置请查考链接\"></a>3.6配置请查考链接</h2><p><a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\">配置链接</a></p>\n<h1 id=\"4-svn安装\"><a href=\"#4-svn安装\" class=\"headerlink\" title=\"4 svn安装\"></a>4 svn安装</h1><h2 id=\"4-1yum安装svnversion\"><a href=\"#4-1yum安装svnversion\" class=\"headerlink\" title=\"4.1yum安装svnversion\"></a>4.1yum安装svnversion</h2><p>4.1.1 检查是否安装了低版本的SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.2 如果存储旧版本，卸载旧版本SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.3 安装SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install subversion</span><br></pre></td></tr></table></figure></p>\n<p>4.1.4 验证安装版本信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve --version</span><br></pre></td></tr></table></figure></p>\n<p>4.1.5 代码库创建<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/svn/</span><br><span class=\"line\">svnadmin create /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2账户权限及防火墙配置\"><a href=\"#4-2账户权限及防火墙配置\" class=\"headerlink\" title=\"4.2账户权限及防火墙配置\"></a>4.2账户权限及防火墙配置</h2><p>4.2.1  编辑/opt/svn/repo/conf/passwd，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\"># harry = harryssecret</span><br><span class=\"line\"># sally = sallyssecret</span><br><span class=\"line\">xjy= 123</span><br><span class=\"line\">www = 123</span><br></pre></td></tr></table></figure></p>\n<p>4.2.2  编辑/opt/svn/repo/conf/authz，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[groups]</span><br><span class=\"line\">#创建一个admin组，将用户加入到组</span><br><span class=\"line\">admin = xjy,www</span><br><span class=\"line\">[/] #根目录权限设置（就是“svn”这个文件夹）</span><br><span class=\"line\">xjy = rw            #xjy对svn下的所有版本库有读写权限</span><br><span class=\"line\">www = r             #www对svn下的所有版本库有读权限</span><br><span class=\"line\">[repo:/]            #repo:/,表示对repo版本库下的所有资源设置权限</span><br><span class=\"line\">@admin = rw         #admin组的用户对repo版本库有读写权限</span><br></pre></td></tr></table></figure></p>\n<p>4.2.3  编辑/opt/svn/repo/conf/svnconfig.conf，加入如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[general]  </span><br><span class=\"line\">#匿名访问的权限，可以是read,write,none,默认为read  </span><br><span class=\"line\">anon-access = none  </span><br><span class=\"line\">#使授权用户有写权限  </span><br><span class=\"line\">auth-access = write  </span><br><span class=\"line\">#密码数据库的路径  </span><br><span class=\"line\">password-db = passwd  </span><br><span class=\"line\">#访问控制文件  </span><br><span class=\"line\">authz-db = authz  </span><br><span class=\"line\">#认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字  </span><br><span class=\"line\">realm = /opt/svn/repo</span><br></pre></td></tr></table></figure></p>\n<p>4.2.4  编辑/etc/sysconfig/iptables，加入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3690 -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-3-启动SVN\"><a href=\"#4-3-启动SVN\" class=\"headerlink\" title=\"4.3 启动SVN\"></a>4.3 启动SVN</h2><p>4.3.1 启动SVN<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /opt/svn/</span><br></pre></td></tr></table></figure></p>\n<p>4.3.2 查看SVN进程<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep svnserve</span><br></pre></td></tr></table></figure></p>\n<p>4.3.3 检测SVN端口<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ln |grep 3690</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-4完成上面的步骤即可在客户端正常访问\"><a href=\"#4-4完成上面的步骤即可在客户端正常访问\" class=\"headerlink\" title=\"4.4完成上面的步骤即可在客户端正常访问\"></a>4.4完成上面的步骤即可在客户端正常访问</h2><p>地址：<a href=\"svn://ip地址/repo\" target=\"_blank\" rel=\"noopener\">svn://ip地址/repo</a></p>\n<h1 id=\"5-jenkins安装\"><a href=\"#5-jenkins安装\" class=\"headerlink\" title=\"5 jenkins安装\"></a>5 jenkins安装</h1><h2 id=\"5-1安装\"><a href=\"#5-1安装\" class=\"headerlink\" title=\"5.1安装\"></a>5.1安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2启动并加入开机启动项\"><a href=\"#5-2启动并加入开机启动项\" class=\"headerlink\" title=\"5.2启动并加入开机启动项\"></a>5.2启动并加入开机启动项</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service jenkins start</span><br><span class=\"line\">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3访问jenkins的web管理端\"><a href=\"#5-3访问jenkins的web管理端\" class=\"headerlink\" title=\"5.3访问jenkins的web管理端\"></a>5.3访问jenkins的web管理端</h2><p><a href=\"http://ip地址:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n<h2 id=\"5-4初始进入及安装插件等\"><a href=\"#5-4初始进入及安装插件等\" class=\"headerlink\" title=\"5.4初始进入及安装插件等\"></a>5.4初始进入及安装插件等</h2><ul>\n<li><p>(1).从提示文件中找到输入管理员身份确认码并输入</p>\n</li>\n<li><p>(2).安装默认插件</p>\n</li>\n<li><p>(3).创建管理员后开始</p>\n</li>\n<li><p>(4).安装Maven Integration plugin插件</p>\n</li>\n</ul>\n<h2 id=\"5-5配置一个jenkins任务\"><a href=\"#5-5配置一个jenkins任务\" class=\"headerlink\" title=\"5.5配置一个jenkins任务\"></a>5.5配置一个jenkins任务</h2><p>下面是我的第一个maven项目传到了svn后，然后在jenkins上做的配置，在jenkins任务执行编译的过程中可以看到会去nexus远程仓库中下载依赖包，过程就不一一截图了，配置就直接粘图吧：<br><img src=\"/img/xjy/jenkins config.png\" alt=\"\"></p>\n<h1 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h1><p>这里主要实现了在redhat系统中安装jdk、maven、svn、Jenkins、nexus,以及实现了配合使用，其中的难点主要集中在svn的权限配置、nexus的远程仓库和maven项目的部署设置，由于pom文件的配置每个项目都不一样，这里就不专门列出了。关于第一期就暂到这里吧，后期准备加上docker部署再更新一篇，，希望自己能尽快顺利完成吧。</p>"},{"title":"从SVN到GITLAB的搭建计划","id":"396","date":"2018-02-06T01:58:29.000Z","declare":true,"toc":true,"_content":"\n## 年度回顾 ##\n今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。\n<!--more-->\n\n## 新年打气 ##\n新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）\n\n\n## 总体预期 ##\n通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。\n\n\n## 详细计划 ##\n下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。\n\n\n\n** SVN相关 **\n\n+ 安装jdk\n+ 安装maven\n+ 安装nexus\n+ 安装jenkins\n+ 安装SVN\n+ 安装 SONAR\n+ 配置jenkins+maven+SVN+SONAR_nexus\n\n** GITLAB相关 **\n\n+ 完成SVN相关的安装\n\n+ 安装gitlab\n\n+ 先配置gitlab+jenkins\n\n+ 目前知识面有限，实现到上面这一步时我再来更新下面的计划。\n\n----------\n\n\n期待自己的实现和后续的更新。。。\n\n![](/img/xjy/git0001.jpg)\n\n","source":"_posts/p27.md","raw":"---\ntitle: 从SVN到GITLAB的搭建计划\nid: 396\ncategories:\n  - 技术感悟\n  - 生活杂记\ndate: 2018-02-06 09:58:29\ntags: [svn, gitlab, 闲谈, 感悟]\ndeclare: true\ntoc: true\n---\n\n## 年度回顾 ##\n今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。\n<!--more-->\n\n## 新年打气 ##\n新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）\n\n\n## 总体预期 ##\n通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。\n\n\n## 详细计划 ##\n下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。\n\n\n\n** SVN相关 **\n\n+ 安装jdk\n+ 安装maven\n+ 安装nexus\n+ 安装jenkins\n+ 安装SVN\n+ 安装 SONAR\n+ 配置jenkins+maven+SVN+SONAR_nexus\n\n** GITLAB相关 **\n\n+ 完成SVN相关的安装\n\n+ 安装gitlab\n\n+ 先配置gitlab+jenkins\n\n+ 目前知识面有限，实现到上面这一步时我再来更新下面的计划。\n\n----------\n\n\n期待自己的实现和后续的更新。。。\n\n![](/img/xjy/git0001.jpg)\n\n","slug":"p27","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgn000vu8ves96g3j0z","content":"<h2 id=\"年度回顾\"><a href=\"#年度回顾\" class=\"headerlink\" title=\"年度回顾\"></a>年度回顾</h2><p>今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。<br><a id=\"more\"></a></p>\n<h2 id=\"新年打气\"><a href=\"#新年打气\" class=\"headerlink\" title=\"新年打气\"></a>新年打气</h2><p>新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）</p>\n<h2 id=\"总体预期\"><a href=\"#总体预期\" class=\"headerlink\" title=\"总体预期\"></a>总体预期</h2><p>通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。</p>\n<h2 id=\"详细计划\"><a href=\"#详细计划\" class=\"headerlink\" title=\"详细计划\"></a>详细计划</h2><p>下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。</p>\n<p><strong> SVN相关 </strong></p>\n<ul>\n<li>安装jdk</li>\n<li>安装maven</li>\n<li>安装nexus</li>\n<li>安装jenkins</li>\n<li>安装SVN</li>\n<li>安装 SONAR</li>\n<li>配置jenkins+maven+SVN+SONAR_nexus</li>\n</ul>\n<p><strong> GITLAB相关 </strong></p>\n<ul>\n<li><p>完成SVN相关的安装</p>\n</li>\n<li><p>安装gitlab</p>\n</li>\n<li><p>先配置gitlab+jenkins</p>\n</li>\n<li><p>目前知识面有限，实现到上面这一步时我再来更新下面的计划。</p>\n</li>\n</ul>\n<hr>\n<p>期待自己的实现和后续的更新。。。</p>\n<p><img src=\"/img/xjy/git0001.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"年度回顾\"><a href=\"#年度回顾\" class=\"headerlink\" title=\"年度回顾\"></a>年度回顾</h2><p>今天是2018年2月6日，离回家过年不到10天了。回顾2017年一整年的工作和学习，觉得自己虽然很累，也有成长，但是成长的还是太慢了。主要原因归咎于自己没有一个良好的开发和技术学习计划，每接触一项新的技术总是停留在表面的皮毛，不能覆盖到全面及深入到最后。<br>","more":"</p>\n<h2 id=\"新年打气\"><a href=\"#新年打气\" class=\"headerlink\" title=\"新年打气\"></a>新年打气</h2><p>新的一年里，我想自己应该要学习些代码管理的搭建技术了，虽然看似复杂，但是我觉得只要计划好，按步骤执行下去，肯定能过实现的。（ps:还是那句话，没有技术解决不了的技术问题，只要肯花时间和用心。）</p>\n<h2 id=\"总体预期\"><a href=\"#总体预期\" class=\"headerlink\" title=\"总体预期\"></a>总体预期</h2><p>通过使用或试用，我感觉到SVN和GITLAB是两项最常用的代码管理程序，至少从我目前接触到的是这样的。当然，仅仅只有代码管理还是不够的，还要有web显示、在线编译等等插件的结合使用，才能使得开发更加高效和便捷。</p>\n<h2 id=\"详细计划\"><a href=\"#详细计划\" class=\"headerlink\" title=\"详细计划\"></a>详细计划</h2><p>下面是为我自己制定的这方面的学习计划，或者可称为实现目标，争取起到指引自己和自我监督的效果。</p>\n<p><strong> SVN相关 </strong></p>\n<ul>\n<li>安装jdk</li>\n<li>安装maven</li>\n<li>安装nexus</li>\n<li>安装jenkins</li>\n<li>安装SVN</li>\n<li>安装 SONAR</li>\n<li>配置jenkins+maven+SVN+SONAR_nexus</li>\n</ul>\n<p><strong> GITLAB相关 </strong></p>\n<ul>\n<li><p>完成SVN相关的安装</p>\n</li>\n<li><p>安装gitlab</p>\n</li>\n<li><p>先配置gitlab+jenkins</p>\n</li>\n<li><p>目前知识面有限，实现到上面这一步时我再来更新下面的计划。</p>\n</li>\n</ul>\n<hr>\n<p>期待自己的实现和后续的更新。。。</p>\n<p><img src=\"/img/xjy/git0001.jpg\" alt=\"\"></p>"},{"title":"db2相关操作知识点积累及WINDOWS环境DB2连接远程数据库实例","id":"209","date":"2017-12-22T08:34:40.000Z","declare":true,"toc":true,"_content":"\n## 知识点积累 ##\n1.登陆\n``` shell \nssh 10.240.40.191\n```\n2.连接数据库\n```shell \ndb2 connect to 数据库名 user 用户名 using 密码\n```\n<!--more-->\n3.断开连接\n``` shell \ndisconnect current\n```\n4.查询\n``` shell \ndb2 \"slect * from 表名\"\n```\n5.导入表数据\n``` shell \ndb2 import from [文件名].ixf of ixf insert into [表名]\n```\n6.导出表数据\n``` shell \ndb2 export to [文件名].ixf of ixf select * from [表名]\n```\n7.导出数据库-暂未验证\n``` text \n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n```\n8.查看数据库配置\n``` shell  \nget db cfg\n``` shell \n9.创建指定编码的数据库\n``` shell \ncreate db SRCDB using codeset GBK territory CN\n```\n10.创建型导入表数据\n``` shell \nimport from d://xxx.ixf of ixf create into ib_customer_product_bak\n```\n11.db2修改表结构\n``` shell \nalter table 表名 alter 字段 set data type 值类型（长度）\n```\n12.增加索引\n``` shell \ncreate index 索引名 on 表名 (字段名1,字段名2...) \n```\n13.增加表字段\n``` shell \nalter table 表名 add column 字段1 类型 add column 字段2 类型\n```\n\n## WINDOWS环境DB2连接远程数据库实例 ## \n\n1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器\n\n2.输入”db2”,进入命令处理状态\n\n3.建立目录关系与连接关系 \n\n``` shell \nCATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin\n\n#注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例\n``` \n4.输入\n``` shell\nCATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone\n\n#注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称\n```\n5.连接数据库 \n``` shell \nconnect    to   testdb   user   myuser using  mypassword\n\n#注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码\n``` \n此时即可像操作本地数据库一样操作远程数据库了！","source":"_posts/p28.md","raw":"---\ntitle: db2相关操作知识点积累及WINDOWS环境DB2连接远程数据库实例\nid: 209\ncategories:\n  - DB2\n  - 数据库\ndate: 2017-12-22 16:34:40\ntags: [db2, 数据库, sql]\ndeclare: true\ntoc: true\n---\n\n## 知识点积累 ##\n1.登陆\n``` shell \nssh 10.240.40.191\n```\n2.连接数据库\n```shell \ndb2 connect to 数据库名 user 用户名 using 密码\n```\n<!--more-->\n3.断开连接\n``` shell \ndisconnect current\n```\n4.查询\n``` shell \ndb2 \"slect * from 表名\"\n```\n5.导入表数据\n``` shell \ndb2 import from [文件名].ixf of ixf insert into [表名]\n```\n6.导出表数据\n``` shell \ndb2 export to [文件名].ixf of ixf select * from [表名]\n```\n7.导出数据库-暂未验证\n``` text \n可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据\n```\n8.查看数据库配置\n``` shell  \nget db cfg\n``` shell \n9.创建指定编码的数据库\n``` shell \ncreate db SRCDB using codeset GBK territory CN\n```\n10.创建型导入表数据\n``` shell \nimport from d://xxx.ixf of ixf create into ib_customer_product_bak\n```\n11.db2修改表结构\n``` shell \nalter table 表名 alter 字段 set data type 值类型（长度）\n```\n12.增加索引\n``` shell \ncreate index 索引名 on 表名 (字段名1,字段名2...) \n```\n13.增加表字段\n``` shell \nalter table 表名 add column 字段1 类型 add column 字段2 类型\n```\n\n## WINDOWS环境DB2连接远程数据库实例 ## \n\n1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器\n\n2.输入”db2”,进入命令处理状态\n\n3.建立目录关系与连接关系 \n\n``` shell \nCATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin\n\n#注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例\n``` \n4.输入\n``` shell\nCATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone\n\n#注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称\n```\n5.连接数据库 \n``` shell \nconnect    to   testdb   user   myuser using  mypassword\n\n#注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码\n``` \n此时即可像操作本地数据库一样操作远程数据库了！","slug":"p28","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgt0010u8ve9srwoy37","content":"<h2 id=\"知识点积累\"><a href=\"#知识点积累\" class=\"headerlink\" title=\"知识点积累\"></a>知识点积累</h2><p>1.登陆<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 10.240.40.191</span><br></pre></td></tr></table></figure></p>\n<p>2.连接数据库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 connect to 数据库名 user 用户名 using 密码</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>3.断开连接<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disconnect current</span><br></pre></td></tr></table></figure></p>\n<p>4.查询<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 \"slect * from 表名\"</span><br></pre></td></tr></table></figure></p>\n<p>5.导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 import from [文件名].ixf of ixf insert into [表名]</span><br></pre></td></tr></table></figure></p>\n<p>6.导出表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 export to [文件名].ixf of ixf select * from [表名]</span><br></pre></td></tr></table></figure></p>\n<p>7.导出数据库-暂未验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据</span><br></pre></td></tr></table></figure></p>\n<p>8.查看数据库配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get db cfg</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">9.创建指定编码的数据库</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">create db SRCDB using codeset GBK territory CN</span><br></pre></td></tr></table></figure></p>\n<p>10.创建型导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</span><br></pre></td></tr></table></figure></p>\n<p>11.db2修改表结构<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 alter 字段 set data type 值类型（长度）</span><br></pre></td></tr></table></figure></p>\n<p>12.增加索引<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create index 索引名 on 表名 (字段名1,字段名2...)</span><br></pre></td></tr></table></figure></p>\n<p>13.增加表字段<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 add column 字段1 类型 add column 字段2 类型</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"WINDOWS环境DB2连接远程数据库实例\"><a href=\"#WINDOWS环境DB2连接远程数据库实例\" class=\"headerlink\" title=\"WINDOWS环境DB2连接远程数据库实例\"></a>WINDOWS环境DB2连接远程数据库实例</h2><p>1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器</p>\n<p>2.输入”db2”,进入命令处理状态</p>\n<p>3.建立目录关系与连接关系 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例</span><br><span class=\"line\">``` </span><br><span class=\"line\">4.输入</span><br><span class=\"line\">``` shell</span><br><span class=\"line\">CATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称</span><br></pre></td></tr></table></figure>\n<p>5.连接数据库 </p>\n<pre><code class=\"shell\">connect    to   testdb   user   myuser using  mypassword\n\n<span class=\"meta\">#</span><span class=\"bash\">注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码</span>\n</code></pre>\n<p>此时即可像操作本地数据库一样操作远程数据库了！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"知识点积累\"><a href=\"#知识点积累\" class=\"headerlink\" title=\"知识点积累\"></a>知识点积累</h2><p>1.登陆<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 10.240.40.191</span><br></pre></td></tr></table></figure></p>\n<p>2.连接数据库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 connect to 数据库名 user 用户名 using 密码</span><br></pre></td></tr></table></figure></p>","more":"<p>3.断开连接<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disconnect current</span><br></pre></td></tr></table></figure></p>\n<p>4.查询<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 \"slect * from 表名\"</span><br></pre></td></tr></table></figure></p>\n<p>5.导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 import from [文件名].ixf of ixf insert into [表名]</span><br></pre></td></tr></table></figure></p>\n<p>6.导出表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db2 export to [文件名].ixf of ixf select * from [表名]</span><br></pre></td></tr></table></figure></p>\n<p>7.导出数据库-暂未验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以远程连接到服务器，windows系统可以通过远程连接，linux/unix系统可以通过ssh/telnet连接，在服务器上用db2 connect to 数据库名连接数据库，然后通过db2look -d 数据库名 -e -a -c -o 导出文件名.sql -i 用户名 -w 密码 导出结构，通过db2move 数据库名 export -u 用户名 -p 密码 导出数据；在本地导入前先connect 数据库，然后db2 -td; -cf 导出文件名.sql 在本地根据该文件sql建立数据结构，之后用db2move 数据库名 load -u 用户名 -p 密码 导入数据</span><br></pre></td></tr></table></figure></p>\n<p>8.查看数据库配置<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get db cfg</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">9.创建指定编码的数据库</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">create db SRCDB using codeset GBK territory CN</span><br></pre></td></tr></table></figure></p>\n<p>10.创建型导入表数据<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import from d://xxx.ixf of ixf create into ib_customer_product_bak</span><br></pre></td></tr></table></figure></p>\n<p>11.db2修改表结构<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 alter 字段 set data type 值类型（长度）</span><br></pre></td></tr></table></figure></p>\n<p>12.增加索引<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create index 索引名 on 表名 (字段名1,字段名2...)</span><br></pre></td></tr></table></figure></p>\n<p>13.增加表字段<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 add column 字段1 类型 add column 字段2 类型</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"WINDOWS环境DB2连接远程数据库实例\"><a href=\"#WINDOWS环境DB2连接远程数据库实例\" class=\"headerlink\" title=\"WINDOWS环境DB2连接远程数据库实例\"></a>WINDOWS环境DB2连接远程数据库实例</h2><p>1.开始菜单——–运行——–输入”db2cmd”,进入DB2命令行处理器</p>\n<p>2.输入”db2”,进入命令处理状态</p>\n<p>3.建立目录关系与连接关系 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CATALOG  TCPIP  NODE  nodeone   REMOTE  192.168.152.129 SERVER 50000 remote_instance  db2admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中nodeone为自己取的节点名称,192.168.152.129为远程数据库的IP地址,db2admin为远程数据库的实例</span><br><span class=\"line\">``` </span><br><span class=\"line\">4.输入</span><br><span class=\"line\">``` shell</span><br><span class=\"line\">CATALOG   DB  RONESERV  AS  testdb   AT  NODE  nodeone</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span>注:其中RONESERV为远程数据库的名称,testdb为该远程数据库在本地机器上的别名,nodeone为步骤三中我们建立的节点名称</span><br></pre></td></tr></table></figure>\n<p>5.连接数据库 </p>\n<pre><code class=\"shell\">connect    to   testdb   user   myuser using  mypassword\n\n<span class=\"meta\">#</span><span class=\"bash\">注:其中testdb为我们在步骤四中为远程数据库指定的别名,myuser 为远程数据库的用户名,mypassword为远程数据库的密码</span>\n</code></pre>\n<p>此时即可像操作本地数据库一样操作远程数据库了！</p>"},{"title":"用python测试连接rabbitmq的简单通讯","id":"303","date":"2018-01-08T07:06:12.000Z","declare":true,"toc":true,"_content":"\n** 环境: ** \n\n+ windows\n+ erlang-otp_win64_17\n+ rabbitmq 3.5.6\n+ Python 3.6.1 \n\n<!--more-->\n\n** 步骤：** \n\n1.erlang和rabbitmq安装，可以参考：\n\n[林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》](https://blog.csdn.net/Anonymous_L/article/details/78205785)\n\n2.安装pika \n``` shell\n#打开命令行，执行：\npip install pika\n```\n\n3.编写消费者receive.py \n``` py\nimport pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()\n``` \n\n4.编写生产者send.py \n``` py\nimport pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n``` \n\n5.执行py脚本，结果如下：\n![](/img/xjy/rab0001.png)","source":"_posts/p30.md","raw":"---\ntitle: 用python测试连接rabbitmq的简单通讯\nid: 303\ncategories:\n  - rabbitmq学习\ndate: 2018-01-08 15:06:12\ntags: [rabbitmq, python]\ndeclare: true\ntoc: true\n---\n\n** 环境: ** \n\n+ windows\n+ erlang-otp_win64_17\n+ rabbitmq 3.5.6\n+ Python 3.6.1 \n\n<!--more-->\n\n** 步骤：** \n\n1.erlang和rabbitmq安装，可以参考：\n\n[林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》](https://blog.csdn.net/Anonymous_L/article/details/78205785)\n\n2.安装pika \n``` shell\n#打开命令行，执行：\npip install pika\n```\n\n3.编写消费者receive.py \n``` py\nimport pika  \nimport random  \nwhile 1 :\n    credentials = pika.PlainCredentials('guest', 'guest')  \n    #这里可以连接远程IP，请记得打开远程端口    \n    parameters = pika.ConnectionParameters('localhost',5672,'/',credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    #channel.queue_declare(queue='hello')    \n    body = input(\"Enter your input,To exit press CTRL+C: \"); \n    channel.basic_publish(exchange='',routing_key='hello',body=body)    \n    print (\" [x] Sent %s\" %body)    \n    connection.close()\n``` \n\n4.编写生产者send.py \n``` py\nimport pika    \ncredentials = pika.PlainCredentials('guest', 'guest')    \nparameters = pika.ConnectionParameters('localhost',5672,'/',credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue='hello')    \nprint (' [*] Waiting for messages. To exit press CTRL+C' )   \ndef callback(ch, method, properties, body):    \n    bodystr=body.decode('utf-8') \n    print (\" [x] Received %r\" % (bodystr,))    \nchannel.basic_consume(callback,queue='hello',no_ack=True)    \nchannel.start_consuming()</pre>\n``` \n\n5.执行py脚本，结果如下：\n![](/img/xjy/rab0001.png)","slug":"p30","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgv0012u8vet5f8elyt","content":"<p><strong> 环境: </strong> </p>\n<ul>\n<li>windows</li>\n<li>erlang-otp_win64_17</li>\n<li>rabbitmq 3.5.6</li>\n<li>Python 3.6.1 </li>\n</ul>\n<a id=\"more\"></a>\n<p><strong> 步骤：</strong> </p>\n<p>1.erlang和rabbitmq安装，可以参考：</p>\n<p><a href=\"https://blog.csdn.net/Anonymous_L/article/details/78205785\" target=\"_blank\" rel=\"noopener\">林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》</a></p>\n<p>2.安装pika<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>打开命令行，执行：</span><br><span class=\"line\">pip install pika</span><br></pre></td></tr></table></figure></p>\n<p>3.编写消费者receive.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika  \n<span class=\"keyword\">import</span> random  \n<span class=\"keyword\">while</span> <span class=\"number\">1</span> :\n    credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)  \n    <span class=\"comment\">#这里可以连接远程IP，请记得打开远程端口    </span>\n    parameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    <span class=\"comment\">#channel.queue_declare(queue='hello')    </span>\n    body = input(<span class=\"string\">\"Enter your input,To exit press CTRL+C: \"</span>); \n    channel.basic_publish(exchange=<span class=\"string\">''</span>,routing_key=<span class=\"string\">'hello'</span>,body=body)    \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Sent %s\"</span> %body)    \n    connection.close()\n</code></pre>\n<p>4.编写生产者send.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika    \ncredentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)    \nparameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue=<span class=\"string\">'hello'</span>)    \n<span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span> )   \n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>    \n    bodystr=body.decode(<span class=\"string\">'utf-8'</span>) \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Received %r\"</span> % (bodystr,))    \nchannel.basic_consume(callback,queue=<span class=\"string\">'hello'</span>,no_ack=<span class=\"keyword\">True</span>)    \nchannel.start_consuming()&lt;/pre&gt;\n</code></pre>\n<p>5.执行py脚本，结果如下：<br><img src=\"/img/xjy/rab0001.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><strong> 环境: </strong> </p>\n<ul>\n<li>windows</li>\n<li>erlang-otp_win64_17</li>\n<li>rabbitmq 3.5.6</li>\n<li>Python 3.6.1 </li>\n</ul>","more":"<p><strong> 步骤：</strong> </p>\n<p>1.erlang和rabbitmq安装，可以参考：</p>\n<p><a href=\"https://blog.csdn.net/Anonymous_L/article/details/78205785\" target=\"_blank\" rel=\"noopener\">林旭的文章：《CentOS下安装JDK、NEXUS、TOMCAT、RABBITMQ集群》</a></p>\n<p>2.安装pika<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>打开命令行，执行：</span><br><span class=\"line\">pip install pika</span><br></pre></td></tr></table></figure></p>\n<p>3.编写消费者receive.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika  \n<span class=\"keyword\">import</span> random  \n<span class=\"keyword\">while</span> <span class=\"number\">1</span> :\n    credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)  \n    <span class=\"comment\">#这里可以连接远程IP，请记得打开远程端口    </span>\n    parameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials)    \n    connection = pika.BlockingConnection(parameters)    \n    channel = connection.channel()    \n    <span class=\"comment\">#channel.queue_declare(queue='hello')    </span>\n    body = input(<span class=\"string\">\"Enter your input,To exit press CTRL+C: \"</span>); \n    channel.basic_publish(exchange=<span class=\"string\">''</span>,routing_key=<span class=\"string\">'hello'</span>,body=body)    \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Sent %s\"</span> %body)    \n    connection.close()\n</code></pre>\n<p>4.编写生产者send.py </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> pika    \ncredentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)    \nparameters = pika.ConnectionParameters(<span class=\"string\">'localhost'</span>,<span class=\"number\">5672</span>,<span class=\"string\">'/'</span>,credentials    )    \nconnection = pika.BlockingConnection(parameters)    \nchannel = connection.channel()    \nchannel.queue_declare(queue=<span class=\"string\">'hello'</span>)    \n<span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for messages. To exit press CTRL+C'</span> )   \n<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>    \n    bodystr=body.decode(<span class=\"string\">'utf-8'</span>) \n    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] Received %r\"</span> % (bodystr,))    \nchannel.basic_consume(callback,queue=<span class=\"string\">'hello'</span>,no_ack=<span class=\"keyword\">True</span>)    \nchannel.start_consuming()&lt;/pre&gt;\n</code></pre>\n<p>5.执行py脚本，结果如下：<br><img src=\"/img/xjy/rab0001.png\" alt=\"\"></p>"},{"title":"树莓派学习-忘记密码后重设","id":"134","date":"2017-12-10T10:08:09.000Z","declare":true,"toc":true,"_content":"\n在网上查到的方法：[原网址点这里](http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html)\n\n## 步骤\n\n下面所有的前提是有键盘。。。\n\n**第1步：取出SD卡**\n\n将树莓派关机，移除sd卡，插入到你的电脑。\n\n#### 第2步：编辑 cmdline.txt\n\n在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后\n``` text \ninit=/bin/sh \n```\n#### 第3步：重设密码\n\n<!--more-->\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n``` shell\nmount -rw -o remount /\npasswd pi\n``` \n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n``` shell \npasswd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully \n```\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n``` shell \nsync\nexec /sbin/init \n```\n树莓派会继续启动，然后关掉树莓派并且断电。\n``` shell \nsudo halt \n```\n\n#### 第4步：编辑cmdline.txt文本\n\n用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。\n现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。\n\n![](/img/xjy/smp003.png)","source":"_posts/p18.md","raw":"---\ntitle: 树莓派学习-忘记密码后重设\nid: 134\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 18:08:09\ntags: [树莓派, 忘记密码]\ndeclare: true\ntoc: true\n---\n\n在网上查到的方法：[原网址点这里](http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html)\n\n## 步骤\n\n下面所有的前提是有键盘。。。\n\n**第1步：取出SD卡**\n\n将树莓派关机，移除sd卡，插入到你的电脑。\n\n#### 第2步：编辑 cmdline.txt\n\n在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后\n``` text \ninit=/bin/sh \n```\n#### 第3步：重设密码\n\n<!--more-->\n\n将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。\n在标识符后，输入以下命令：\n``` shell\nmount -rw -o remount /\npasswd pi\n``` \n你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码\n``` shell \npasswd pi\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully \n```\n这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序\n``` shell \nsync\nexec /sbin/init \n```\n树莓派会继续启动，然后关掉树莓派并且断电。\n``` shell \nsudo halt \n```\n\n#### 第4步：编辑cmdline.txt文本\n\n用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。\n现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。\n\n![](/img/xjy/smp003.png)","slug":"p18","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jgz0016u8vef81r9uh0","content":"<p>在网上查到的方法：<a href=\"http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html\" target=\"_blank\" rel=\"noopener\">原网址点这里</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>下面所有的前提是有键盘。。。</p>\n<p><strong>第1步：取出SD卡</strong></p>\n<p>将树莓派关机，移除sd卡，插入到你的电脑。</p>\n<h4 id=\"第2步：编辑-cmdline-txt\"><a href=\"#第2步：编辑-cmdline-txt\" class=\"headerlink\" title=\"第2步：编辑 cmdline.txt\"></a>第2步：编辑 cmdline.txt</h4><p>在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init=/bin/sh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第3步：重设密码\"><a href=\"#第3步：重设密码\" class=\"headerlink\" title=\"第3步：重设密码\"></a>第3步：重设密码</h4><a id=\"more\"></a>\n<p>将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。<br>在标识符后，输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -rw -o remount /</span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">``` </span><br><span class=\"line\">你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">Enter new UNIX password:</span><br><span class=\"line\">Retype new UNIX password:</span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p>\n<p>这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync</span><br><span class=\"line\">exec /sbin/init</span><br></pre></td></tr></table></figure></p>\n<p>树莓派会继续启动，然后关掉树莓派并且断电。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo halt</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第4步：编辑cmdline-txt文本\"><a href=\"#第4步：编辑cmdline-txt文本\" class=\"headerlink\" title=\"第4步：编辑cmdline.txt文本\"></a>第4步：编辑cmdline.txt文本</h4><p>用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。<br>现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。</p>\n<p><img src=\"/img/xjy/smp003.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在网上查到的方法：<a href=\"http://shumeipai.nxez.com/2017/02/17/how-to-reset-a-forgotten-raspberry-pi-password.html\" target=\"_blank\" rel=\"noopener\">原网址点这里</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>下面所有的前提是有键盘。。。</p>\n<p><strong>第1步：取出SD卡</strong></p>\n<p>将树莓派关机，移除sd卡，插入到你的电脑。</p>\n<h4 id=\"第2步：编辑-cmdline-txt\"><a href=\"#第2步：编辑-cmdline-txt\" class=\"headerlink\" title=\"第2步：编辑 cmdline.txt\"></a>第2步：编辑 cmdline.txt</h4><p>在PC上打开SD卡根目录，启动部分是可见的，并包含一个名为“cmdline.txt”的文件。在编辑器中编辑这个文本，并将下文插入到已有文本的最后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init=/bin/sh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第3步：重设密码\"><a href=\"#第3步：重设密码\" class=\"headerlink\" title=\"第3步：重设密码\"></a>第3步：重设密码</h4>","more":"<p>将sd卡插入树莓派（我们在这里需要连上显示器和键盘）。将树莓派开机，估计在显示闪动的光标前需要等一会。<br>在标识符后，输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -rw -o remount /</span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">``` </span><br><span class=\"line\">你会被提示输入一个新的密码，请仔细输入后并敲下回车键。系统会提示你再次确认输入密码</span><br><span class=\"line\">``` shell </span><br><span class=\"line\">passwd pi</span><br><span class=\"line\">Enter new UNIX password:</span><br><span class=\"line\">Retype new UNIX password:</span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p>\n<p>这样密码就修改完成了，现在输入以下命令去同步并执行初始化程序<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync</span><br><span class=\"line\">exec /sbin/init</span><br></pre></td></tr></table></figure></p>\n<p>树莓派会继续启动，然后关掉树莓派并且断电。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo halt</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第4步：编辑cmdline-txt文本\"><a href=\"#第4步：编辑cmdline-txt文本\" class=\"headerlink\" title=\"第4步：编辑cmdline.txt文本\"></a>第4步：编辑cmdline.txt文本</h4><p>用电脑再次编辑这个文本：把我们在第二步加入的最后数据删除。<br>现在你可以插入sd卡到你的树莓派啦，再次启动就可以使用新的密码啦。</p>\n<p><img src=\"/img/xjy/smp003.png\" alt=\"\"></p>"},{"title":"base64加解密图片（分别用java和python实现）","id":"227","date":"2018-01-04T03:22:48.000Z","declare":true,"toc":true,"_content":"\n今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：\n<!--more-->\n1.java代码 \n\n```java\npackage com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n\t/**\n\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate String GetImageStr(String imgFilePath) {\n\t\tbyte[] data = null;\n\n\t\t// 读取图片字节数组\n\t\ttry {\n\t\t\tInputStream in = new FileInputStream(imgFilePath);\n\t\t\tdata = new byte[in.available()];\n\t\t\tin.read(data);\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// 对字节数组Base64编码\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\treturn encoder.encode(data);// 返回Base64编码过的字节数组字符串\n\t}\n\n\t/**\n\t * 对字符串进行Base64解码并生成图片\n\t * @param imgStr\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate boolean GenerateImage(String imgStr, String imgFilePath) {\n\t\tif (imgStr == null) // 图像数据为空\n\t\t\treturn false;\n\t\ttry {\n\t\t\t// Base64解码\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] bytes = decoder.decodeBuffer(imgStr);\n\t\t\tfor (int i = 0; i &lt; bytes.length; ++i) {\n\t\t\t\tif (bytes[i] &lt; 0) {// 调整异常数据\n\t\t\t\t\tbytes[i] += 256;\n\t\t\t\t}\n\t\t\t}\n\t\t\tOutputStream out = new FileOutputStream(imgFilePath);\n\t\t\tout.write(bytes);\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n```\n\n2.python3代码 \n\n``` py\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n``` \n\n好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n\n","source":"_posts/p29.md","raw":"---\ntitle: base64加解密图片（分别用java和python实现）\nid: 227\ncategories:\n  - JAVA\n  - 编程语言\ndate: 2018-01-04 11:22:48\ntags: [编程, java, python, base64, 图片处理, 加密, 解密]\ndeclare: true\ntoc: true\n---\n\n今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：\n<!--more-->\n1.java代码 \n\n```java\npackage com.mzshop.sensors.service.service.impl;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\npublic class Base64ImageUtil {\n\t/**\n\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate String GetImageStr(String imgFilePath) {\n\t\tbyte[] data = null;\n\n\t\t// 读取图片字节数组\n\t\ttry {\n\t\t\tInputStream in = new FileInputStream(imgFilePath);\n\t\t\tdata = new byte[in.available()];\n\t\t\tin.read(data);\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\t// 对字节数组Base64编码\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\treturn encoder.encode(data);// 返回Base64编码过的字节数组字符串\n\t}\n\n\t/**\n\t * 对字符串进行Base64解码并生成图片\n\t * @param imgStr\n\t * @param imgFilePath\n\t * @return\n\t */\n\tprivate boolean GenerateImage(String imgStr, String imgFilePath) {\n\t\tif (imgStr == null) // 图像数据为空\n\t\t\treturn false;\n\t\ttry {\n\t\t\t// Base64解码\n\t\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\t\tbyte[] bytes = decoder.decodeBuffer(imgStr);\n\t\t\tfor (int i = 0; i &lt; bytes.length; ++i) {\n\t\t\t\tif (bytes[i] &lt; 0) {// 调整异常数据\n\t\t\t\t\tbytes[i] += 256;\n\t\t\t\t}\n\t\t\t}\n\t\t\tOutputStream out = new FileOutputStream(imgFilePath);\n\t\t\tout.write(bytes);\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n```\n\n2.python3代码 \n\n``` py\nimport base64\n\n#读取图片信息\nf=open(r'd:\\1.jpg','rb') #二进制方式打开图文件\nls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码\nimg_info=str(ls_f,'utf-8')\nf.close()\nprint (ls_f)\n\n#还原图片信息\nls_f2=bytes(img_info, encoding = \"utf8\")\nimgdata=base64.b64decode(ls_f2)\nfile=open(r'd:\\2.jpg','wb') \nfile.write(imgdata)\nfile.close()</pre>\n``` \n\n好了，留在这里为了下次方面查找，还是四个字：亲测可用！\n\n","slug":"p29","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jh10018u8ve3win9tgc","content":"<p>今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：<br><a id=\"more\"></a><br>1.java代码 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mzshop.sensors.service.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Decoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Encoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base64ImageUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">GetImageStr</span><span class=\"params\">(String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取图片字节数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tInputStream in = <span class=\"keyword\">new</span> FileInputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tdata = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[in.available()];</span><br><span class=\"line\">\t\t\tin.read(data);</span><br><span class=\"line\">\t\t\tin.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 对字节数组Base64编码</span></span><br><span class=\"line\">\t\tBASE64Encoder encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> encoder.encode(data);<span class=\"comment\">// 返回Base64编码过的字节数组字符串</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 对字符串进行Base64解码并生成图片</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgStr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">GenerateImage</span><span class=\"params\">(String imgStr, String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (imgStr == <span class=\"keyword\">null</span>) <span class=\"comment\">// 图像数据为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Base64解码</span></span><br><span class=\"line\">\t\t\tBASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = decoder.decodeBuffer(imgStr);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (bytes[i] &amp;lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 调整异常数据</span></span><br><span class=\"line\">\t\t\t\t\tbytes[i] += <span class=\"number\">256</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tout.write(bytes);</span><br><span class=\"line\">\t\t\tout.flush();</span><br><span class=\"line\">\t\t\tout.close();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.python3代码 </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> base64\n\n<span class=\"comment\">#读取图片信息</span>\nf=open(<span class=\"string\">r'd:\\1.jpg'</span>,<span class=\"string\">'rb'</span>) <span class=\"comment\">#二进制方式打开图文件</span>\nls_f=base64.b64encode(f.read()) <span class=\"comment\">#读取文件内容，转换为base64编码</span>\nimg_info=str(ls_f,<span class=\"string\">'utf-8'</span>)\nf.close()\n<span class=\"keyword\">print</span> (ls_f)\n\n<span class=\"comment\">#还原图片信息</span>\nls_f2=bytes(img_info, encoding = <span class=\"string\">\"utf8\"</span>)\nimgdata=base64.b64decode(ls_f2)\nfile=open(<span class=\"string\">r'd:\\2.jpg'</span>,<span class=\"string\">'wb'</span>) \nfile.write(imgdata)\nfile.close()&lt;/pre&gt;\n</code></pre>\n<p>好了，留在这里为了下次方面查找，还是四个字：亲测可用！</p>\n","site":{"data":{}},"excerpt":"<p>今天实现了python端加密图片传入Spring boot端后解密，在这里记录一下分别用java和python实现base64加解密图片。废话不对说，上代码：<br>","more":"<br>1.java代码 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mzshop.sensors.service.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Decoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.BASE64Encoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base64ImageUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将图片文件转化为字节数组字符串，并对其进行Base64编码处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">GetImageStr</span><span class=\"params\">(String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取图片字节数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tInputStream in = <span class=\"keyword\">new</span> FileInputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tdata = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[in.available()];</span><br><span class=\"line\">\t\t\tin.read(data);</span><br><span class=\"line\">\t\t\tin.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 对字节数组Base64编码</span></span><br><span class=\"line\">\t\tBASE64Encoder encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> encoder.encode(data);<span class=\"comment\">// 返回Base64编码过的字节数组字符串</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 对字符串进行Base64解码并生成图片</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgStr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> imgFilePath</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">GenerateImage</span><span class=\"params\">(String imgStr, String imgFilePath)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (imgStr == <span class=\"keyword\">null</span>) <span class=\"comment\">// 图像数据为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Base64解码</span></span><br><span class=\"line\">\t\t\tBASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] bytes = decoder.decodeBuffer(imgStr);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (bytes[i] &amp;lt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 调整异常数据</span></span><br><span class=\"line\">\t\t\t\t\tbytes[i] += <span class=\"number\">256</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(imgFilePath);</span><br><span class=\"line\">\t\t\tout.write(bytes);</span><br><span class=\"line\">\t\t\tout.flush();</span><br><span class=\"line\">\t\t\tout.close();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.python3代码 </p>\n<pre><code class=\"py\"><span class=\"keyword\">import</span> base64\n\n<span class=\"comment\">#读取图片信息</span>\nf=open(<span class=\"string\">r'd:\\1.jpg'</span>,<span class=\"string\">'rb'</span>) <span class=\"comment\">#二进制方式打开图文件</span>\nls_f=base64.b64encode(f.read()) <span class=\"comment\">#读取文件内容，转换为base64编码</span>\nimg_info=str(ls_f,<span class=\"string\">'utf-8'</span>)\nf.close()\n<span class=\"keyword\">print</span> (ls_f)\n\n<span class=\"comment\">#还原图片信息</span>\nls_f2=bytes(img_info, encoding = <span class=\"string\">\"utf8\"</span>)\nimgdata=base64.b64decode(ls_f2)\nfile=open(<span class=\"string\">r'd:\\2.jpg'</span>,<span class=\"string\">'wb'</span>) \nfile.write(imgdata)\nfile.close()&lt;/pre&gt;\n</code></pre>\n<p>好了，留在这里为了下次方面查找，还是四个字：亲测可用！</p>"},{"title":"举例说明弱密码摄像头的坏处","date":"2018-05-11T13:32:44.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/p34004s.jpg)<br/><br/>\n该示例仅为证明弱密码的害处，提醒大家防范。\n\n## 工具\n+ 傻蛋网\n+ 各大网络摄像头默认账号密码v3.0\n+ IpCameraViewer \n \n<!--more-->\n\n## 步骤\n\n1. 登陆www.oshadan.com(注册用户搜索结果更多)\n\n![img](/img/xjy/p34001.jpg)\n\n2. 按照产品名称搜索\n\n![img](/img/xjy/p34002.jpg)\n\n3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) \n\n![img](/img/xjy/p34003.jpg)\n\n4. 如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看\n\n![img](/img/xjy/p34004.jpg)\n\n### 资源链接： ### \n\n[点击这里](https://pan.baidu.com/share/link?shareid=2925240709&uk=3811069734 )\n","source":"_posts/p34.md","raw":"---\n\ntitle: 举例说明弱密码摄像头的坏处\ndate: 2018/5/11 21:32:44   \ntags: [运维, 闲谈, 摄像头, 破解]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/p34004s.jpg)<br/><br/>\n该示例仅为证明弱密码的害处，提醒大家防范。\n\n## 工具\n+ 傻蛋网\n+ 各大网络摄像头默认账号密码v3.0\n+ IpCameraViewer \n \n<!--more-->\n\n## 步骤\n\n1. 登陆www.oshadan.com(注册用户搜索结果更多)\n\n![img](/img/xjy/p34001.jpg)\n\n2. 按照产品名称搜索\n\n![img](/img/xjy/p34002.jpg)\n\n3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) \n\n![img](/img/xjy/p34003.jpg)\n\n4. 如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看\n\n![img](/img/xjy/p34004.jpg)\n\n### 资源链接： ### \n\n[点击这里](https://pan.baidu.com/share/link?shareid=2925240709&uk=3811069734 )\n","slug":"p34","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jh7001du8vemmwxjplu","content":"<p><img src=\"/img/xjy/p34004s.jpg\" alt=\"img\"><br><br><br>该示例仅为证明弱密码的害处，提醒大家防范。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>傻蛋网</li>\n<li>各大网络摄像头默认账号密码v3.0</li>\n<li>IpCameraViewer </li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>登陆<a href=\"http://www.oshadan.com(注册用户搜索结果更多)\" target=\"_blank\" rel=\"noopener\">www.oshadan.com(注册用户搜索结果更多)</a></li>\n</ol>\n<p><img src=\"/img/xjy/p34001.jpg\" alt=\"img\"></p>\n<ol>\n<li>按照产品名称搜索</li>\n</ol>\n<p><img src=\"/img/xjy/p34002.jpg\" alt=\"img\"></p>\n<p>3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) </p>\n<p><img src=\"/img/xjy/p34003.jpg\" alt=\"img\"></p>\n<ol>\n<li>如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看</li>\n</ol>\n<p><img src=\"/img/xjy/p34004.jpg\" alt=\"img\"></p>\n<h3 id=\"资源链接：\"><a href=\"#资源链接：\" class=\"headerlink\" title=\"资源链接：\"></a>资源链接：</h3><p><a href=\"https://pan.baidu.com/share/link?shareid=2925240709&amp;uk=3811069734\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p34004s.jpg\" alt=\"img\"><br><br><br>该示例仅为证明弱密码的害处，提醒大家防范。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>傻蛋网</li>\n<li>各大网络摄像头默认账号密码v3.0</li>\n<li>IpCameraViewer </li>\n</ul>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>登陆<a href=\"http://www.oshadan.com(注册用户搜索结果更多)\" target=\"_blank\" rel=\"noopener\">www.oshadan.com(注册用户搜索结果更多)</a></li>\n</ol>\n<p><img src=\"/img/xjy/p34001.jpg\" alt=\"img\"></p>\n<ol>\n<li>按照产品名称搜索</li>\n</ol>\n<p><img src=\"/img/xjy/p34002.jpg\" alt=\"img\"></p>\n<p>3 .结合查看产品初始密码的小工具尝试登陆搜索的结果(例如图中这个正好是admin/admin) </p>\n<p><img src=\"/img/xjy/p34003.jpg\" alt=\"img\"></p>\n<ol>\n<li>如果可以登录，可通过web直接查看，也可加入ipcamera软件进行多家画面共同观看</li>\n</ol>\n<p><img src=\"/img/xjy/p34004.jpg\" alt=\"img\"></p>\n<h3 id=\"资源链接：\"><a href=\"#资源链接：\" class=\"headerlink\" title=\"资源链接：\"></a>资源链接：</h3><p><a href=\"https://pan.baidu.com/share/link?shareid=2925240709&amp;uk=3811069734\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>"},{"title":"Docker初学（一）安装并操作容器","id":"405","date":"2018-05-12T12:58:29.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n初次接触docker，记录了docker的安装启动、容器的运行和常用操作。\n\n<!--more-->\n\n## 1.docker的安装及启动 ## \n```bash\n#docker的安装\nsudo wget -qO- https://get.docker.com/ | sh\n#docker启动\nservice docker start\n#docker设置成开机启动\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n\n## 2.简单运行一个容器 ##\n``` bash\n[root@localhost ~]# docker run ubuntu echo hello docker\nUnable to find image 'ubuntu:latest' locally\nlatest: Pulling from library/ubuntu\na48c500ed24e: Pull complete \n1e1de00ff7e1: Pull complete \n0330ca45a200: Pull complete \n471db38bcfbf: Pull complete \n0b4aba487617: Pull complete \nDigest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e\nStatus: Downloaded newer image for ubuntu:latest\nhello docker\n```\n\n## 3.以交互式运行一个容器 ##\n``` bash \n#-i是持久的标准输入， -t是创建伪tty终端\ndocker run -i -t ubuntu /bin/bash\n#如果要退回宿主机，需要输入exit\n```\n\n## 4.常用操作容器命令 ##\n``` bash\n#指定名称运行容器，用--name\ndocker run --name test -i -t ubuntu /bin/bash\n#查看当前运行中的容器\ndocker ps\n#查看所有容器（包括运行过的）\ndocker ps -a\n#查看最后几个容器（包括运行过的）\ndocker ps -n 5\n#重启某容器，重启某容器时会沿用run命令时指定的参数\ndocker start test\n#停止某容器\ndocker stop test\n#快速停止某容器\ndocker kill test\n#删除某容器，rm后跟容器id或name均可\ndocker rm test\n#删除所有容器\ndocker rm 'docker ps -a -q'\n#连接到正在运行中的容器，attach后跟容器id或name均可\ndocker attach test\n#获取容器日志并返回\ndocker logs test\n#监控容器最新日志，类似tail -f功能\ndocker logs -f test\n#监控容器日志时，还可以使用-t为每条日志加上时间戳\ndocker logs -ft test\n#查看容器内的进程\ndocker top test\n#查看容器内详细信息,配合-f和--format可以有更高级应用\ndocker inspect test\n```\n\n## 未完待续... ## \n\n\n\n\n\n","source":"_posts/p35.md","raw":"---\ntitle: Docker初学（一）安装并操作容器\nid: 405\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/12 20:58:29 \ntags: [运维, 编程, docker, linux]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n初次接触docker，记录了docker的安装启动、容器的运行和常用操作。\n\n<!--more-->\n\n## 1.docker的安装及启动 ## \n```bash\n#docker的安装\nsudo wget -qO- https://get.docker.com/ | sh\n#docker启动\nservice docker start\n#docker设置成开机启动\nsystemctl  start docker.service\nsystemctl  enable docker.service\n```\n\n\n## 2.简单运行一个容器 ##\n``` bash\n[root@localhost ~]# docker run ubuntu echo hello docker\nUnable to find image 'ubuntu:latest' locally\nlatest: Pulling from library/ubuntu\na48c500ed24e: Pull complete \n1e1de00ff7e1: Pull complete \n0330ca45a200: Pull complete \n471db38bcfbf: Pull complete \n0b4aba487617: Pull complete \nDigest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e\nStatus: Downloaded newer image for ubuntu:latest\nhello docker\n```\n\n## 3.以交互式运行一个容器 ##\n``` bash \n#-i是持久的标准输入， -t是创建伪tty终端\ndocker run -i -t ubuntu /bin/bash\n#如果要退回宿主机，需要输入exit\n```\n\n## 4.常用操作容器命令 ##\n``` bash\n#指定名称运行容器，用--name\ndocker run --name test -i -t ubuntu /bin/bash\n#查看当前运行中的容器\ndocker ps\n#查看所有容器（包括运行过的）\ndocker ps -a\n#查看最后几个容器（包括运行过的）\ndocker ps -n 5\n#重启某容器，重启某容器时会沿用run命令时指定的参数\ndocker start test\n#停止某容器\ndocker stop test\n#快速停止某容器\ndocker kill test\n#删除某容器，rm后跟容器id或name均可\ndocker rm test\n#删除所有容器\ndocker rm 'docker ps -a -q'\n#连接到正在运行中的容器，attach后跟容器id或name均可\ndocker attach test\n#获取容器日志并返回\ndocker logs test\n#监控容器最新日志，类似tail -f功能\ndocker logs -f test\n#监控容器日志时，还可以使用-t为每条日志加上时间戳\ndocker logs -ft test\n#查看容器内的进程\ndocker top test\n#查看容器内详细信息,配合-f和--format可以有更高级应用\ndocker inspect test\n```\n\n## 未完待续... ## \n\n\n\n\n\n","slug":"p35","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jh9001fu8ve1t7tg04x","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>初次接触docker，记录了docker的安装启动、容器的运行和常用操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-docker的安装及启动\"><a href=\"#1-docker的安装及启动\" class=\"headerlink\" title=\"1.docker的安装及启动\"></a>1.docker的安装及启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker的安装</span></span><br><span class=\"line\">sudo wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\"><span class=\"comment\">#docker启动</span></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"><span class=\"comment\">#docker设置成开机启动</span></span><br><span class=\"line\">systemctl  start docker.service</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单运行一个容器\"><a href=\"#2-简单运行一个容器\" class=\"headerlink\" title=\"2.简单运行一个容器\"></a>2.简单运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run ubuntu echo hello docker</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">'ubuntu:latest'</span> locally</span><br><span class=\"line\">latest: Pulling from library/ubuntu</span><br><span class=\"line\">a48c500ed24e: Pull complete </span><br><span class=\"line\">1e1de00ff7e1: Pull complete </span><br><span class=\"line\">0330ca45a200: Pull complete </span><br><span class=\"line\">471db38bcfbf: Pull complete </span><br><span class=\"line\">0b4aba487617: Pull complete </span><br><span class=\"line\">Digest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:latest</span><br><span class=\"line\">hello docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-以交互式运行一个容器\"><a href=\"#3-以交互式运行一个容器\" class=\"headerlink\" title=\"3.以交互式运行一个容器\"></a>3.以交互式运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-i是持久的标准输入， -t是创建伪tty终端</span></span><br><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#如果要退回宿主机，需要输入exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-常用操作容器命令\"><a href=\"#4-常用操作容器命令\" class=\"headerlink\" title=\"4.常用操作容器命令\"></a>4.常用操作容器命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定名称运行容器，用--name</span></span><br><span class=\"line\">docker run --name <span class=\"built_in\">test</span> -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#查看当前运行中的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\">#查看所有容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看最后几个容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -n 5</span><br><span class=\"line\"><span class=\"comment\">#重启某容器，重启某容器时会沿用run命令时指定的参数</span></span><br><span class=\"line\">docker start <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#停止某容器</span></span><br><span class=\"line\">docker stop <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#快速停止某容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除某容器，rm后跟容器id或name均可</span></span><br><span class=\"line\">docker rm <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除所有容器</span></span><br><span class=\"line\">docker rm <span class=\"string\">'docker ps -a -q'</span></span><br><span class=\"line\"><span class=\"comment\">#连接到正在运行中的容器，attach后跟容器id或name均可</span></span><br><span class=\"line\">docker attach <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#获取容器日志并返回</span></span><br><span class=\"line\">docker logs <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器最新日志，类似tail -f功能</span></span><br><span class=\"line\">docker logs -f <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器日志时，还可以使用-t为每条日志加上时间戳</span></span><br><span class=\"line\">docker logs -ft <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内的进程</span></span><br><span class=\"line\">docker top <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内详细信息,配合-f和--format可以有更高级应用</span></span><br><span class=\"line\">docker inspect <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>初次接触docker，记录了docker的安装启动、容器的运行和常用操作。</p>","more":"<h2 id=\"1-docker的安装及启动\"><a href=\"#1-docker的安装及启动\" class=\"headerlink\" title=\"1.docker的安装及启动\"></a>1.docker的安装及启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker的安装</span></span><br><span class=\"line\">sudo wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\"><span class=\"comment\">#docker启动</span></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"><span class=\"comment\">#docker设置成开机启动</span></span><br><span class=\"line\">systemctl  start docker.service</span><br><span class=\"line\">systemctl  <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单运行一个容器\"><a href=\"#2-简单运行一个容器\" class=\"headerlink\" title=\"2.简单运行一个容器\"></a>2.简单运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># docker run ubuntu echo hello docker</span></span><br><span class=\"line\">Unable to find image <span class=\"string\">'ubuntu:latest'</span> locally</span><br><span class=\"line\">latest: Pulling from library/ubuntu</span><br><span class=\"line\">a48c500ed24e: Pull complete </span><br><span class=\"line\">1e1de00ff7e1: Pull complete </span><br><span class=\"line\">0330ca45a200: Pull complete </span><br><span class=\"line\">471db38bcfbf: Pull complete </span><br><span class=\"line\">0b4aba487617: Pull complete </span><br><span class=\"line\">Digest: sha256:c8c275751219dadad8fa56b3ac41ca6cb22219ff117ca98fe82b42f24e1ba64e</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:latest</span><br><span class=\"line\">hello docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-以交互式运行一个容器\"><a href=\"#3-以交互式运行一个容器\" class=\"headerlink\" title=\"3.以交互式运行一个容器\"></a>3.以交互式运行一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-i是持久的标准输入， -t是创建伪tty终端</span></span><br><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#如果要退回宿主机，需要输入exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-常用操作容器命令\"><a href=\"#4-常用操作容器命令\" class=\"headerlink\" title=\"4.常用操作容器命令\"></a>4.常用操作容器命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定名称运行容器，用--name</span></span><br><span class=\"line\">docker run --name <span class=\"built_in\">test</span> -i -t ubuntu /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#查看当前运行中的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\">#查看所有容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\">#查看最后几个容器（包括运行过的）</span></span><br><span class=\"line\">docker ps -n 5</span><br><span class=\"line\"><span class=\"comment\">#重启某容器，重启某容器时会沿用run命令时指定的参数</span></span><br><span class=\"line\">docker start <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#停止某容器</span></span><br><span class=\"line\">docker stop <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#快速停止某容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除某容器，rm后跟容器id或name均可</span></span><br><span class=\"line\">docker rm <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#删除所有容器</span></span><br><span class=\"line\">docker rm <span class=\"string\">'docker ps -a -q'</span></span><br><span class=\"line\"><span class=\"comment\">#连接到正在运行中的容器，attach后跟容器id或name均可</span></span><br><span class=\"line\">docker attach <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#获取容器日志并返回</span></span><br><span class=\"line\">docker logs <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器最新日志，类似tail -f功能</span></span><br><span class=\"line\">docker logs -f <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#监控容器日志时，还可以使用-t为每条日志加上时间戳</span></span><br><span class=\"line\">docker logs -ft <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内的进程</span></span><br><span class=\"line\">docker top <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#查看容器内详细信息,配合-f和--format可以有更高级应用</span></span><br><span class=\"line\">docker inspect <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>"},{"title":"CentOS 7 安装并配置Shadowsocks客户端","id":"407","date":"2018-05-19T14:13:45.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者[\"运维前线\"](https://www.jianshu.com/p/824912d9afda)的方法，现在记录详细操作。\n\n<!--more-->\n\n## 1.安装Shadowsocks客户端\n+ 依次安装epel-release、python-pip后再安装shadowsocks\n``` shell \nsudo yum -y install epel-release\nsudo yum -y install python-pip\nsudo pip install shadowsocks\n```\n\n## 2.配置自己的socks信息 \n\n+ 先新建配置文件 \n\n``` shell   \nsudo mkdir /etc/shadowsocks\nsudo vi /etc/shadowsocks/shadowsocks.json\n```\n\n+ 加入如下格式的配置\n``` text  \n{\n    \"server\":\"x.x.x.x\",  # Shadowsocks服务器地址\n    \"server_port\":1035,  # Shadowsocks服务器端口\n    \"local_address\": \"127.0.0.1\", # 本地IP\n    \"local_port\":1080,  # 本地端口\n    \"password\":\"password\", # Shadowsocks连接密码\n    \"timeout\":300,  # 等待超时时间\n    \"method\":\"aes-256-cfb\",  # 加密方式\n    \"fast_open\": false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+\n    \"workers\": 1  #工作线程数 \n}\n```\n\n## 3.配置shadowsocks客户端自启动 \n\n+ 配置自启动脚本/etc/systemd/system/shadowsocks.service \n\n``` text \n[Unit]\nDescription=Shadowsocks\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json\n[Install]\nWantedBy=multi-user.target\n```\n+ 加入自启动 \n\n``` shell \nsystemctl enable shadowsocks.service\nsystemctl start shadowsocks.service\nsystemctl status shadowsocks.service\n```\n+ 验证Shadowsocks客户端服务是否正常运行 \n\n``` shell\ncurl --socks5 127.0.0.1:1080 http://httpbin.org/ip\n```\n\n## 4.安装配置privoxy \n\n+ 安装privoxy\n\n``` shell \nyum install privoxy -y\nsystemctl enable privoxy\nsystemctl start privoxy\nsystemctl status privoxy  \n```\n\n+ 配置/etc/privoxy/config \n\n``` text \nlisten-address 127.0.0.1:8118 # 8118 是默认端口，不用改\nforward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点\n```\n\n+ 设置http、https代理，在/etc/profile末尾添加：\n\n``` text \nPROXY_HOST=127.0.0.1\nexport all_proxy=http://$PROXY_HOST:8118\nexport ftp_proxy=http://$PROXY_HOST:8118\nexport http_proxy=http://$PROXY_HOST:8118\nexport https_proxy=http://$PROXY_HOST:8118\nexport no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16\n```\n\n+ 重载环境变量 \n\n``` shell \nsource /etc/profile\n```\n\n+ 测试代理 \n\n``` shell\ncurl google.com\n```\n\n+ 取消代理 \n\n``` shell\nwhile read var; do unset $var; done < <(env | grep -i proxy | awk -F= '{print $1}')\n```\n\n## *.参考链接 \n+ [https://www.jianshu.com/p/824912d9afda](https://www.jianshu.com/p/824912d9afda)","source":"_posts/p37.md","raw":"---\ntitle: CentOS 7 安装并配置Shadowsocks客户端\nid: 407\ncategories:\n  - centos\n  - shadowsocks\ndate: 2018/5/19 22:13:45   \ntags: [运维, shadowsocks, linux]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者[\"运维前线\"](https://www.jianshu.com/p/824912d9afda)的方法，现在记录详细操作。\n\n<!--more-->\n\n## 1.安装Shadowsocks客户端\n+ 依次安装epel-release、python-pip后再安装shadowsocks\n``` shell \nsudo yum -y install epel-release\nsudo yum -y install python-pip\nsudo pip install shadowsocks\n```\n\n## 2.配置自己的socks信息 \n\n+ 先新建配置文件 \n\n``` shell   \nsudo mkdir /etc/shadowsocks\nsudo vi /etc/shadowsocks/shadowsocks.json\n```\n\n+ 加入如下格式的配置\n``` text  \n{\n    \"server\":\"x.x.x.x\",  # Shadowsocks服务器地址\n    \"server_port\":1035,  # Shadowsocks服务器端口\n    \"local_address\": \"127.0.0.1\", # 本地IP\n    \"local_port\":1080,  # 本地端口\n    \"password\":\"password\", # Shadowsocks连接密码\n    \"timeout\":300,  # 等待超时时间\n    \"method\":\"aes-256-cfb\",  # 加密方式\n    \"fast_open\": false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+\n    \"workers\": 1  #工作线程数 \n}\n```\n\n## 3.配置shadowsocks客户端自启动 \n\n+ 配置自启动脚本/etc/systemd/system/shadowsocks.service \n\n``` text \n[Unit]\nDescription=Shadowsocks\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json\n[Install]\nWantedBy=multi-user.target\n```\n+ 加入自启动 \n\n``` shell \nsystemctl enable shadowsocks.service\nsystemctl start shadowsocks.service\nsystemctl status shadowsocks.service\n```\n+ 验证Shadowsocks客户端服务是否正常运行 \n\n``` shell\ncurl --socks5 127.0.0.1:1080 http://httpbin.org/ip\n```\n\n## 4.安装配置privoxy \n\n+ 安装privoxy\n\n``` shell \nyum install privoxy -y\nsystemctl enable privoxy\nsystemctl start privoxy\nsystemctl status privoxy  \n```\n\n+ 配置/etc/privoxy/config \n\n``` text \nlisten-address 127.0.0.1:8118 # 8118 是默认端口，不用改\nforward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点\n```\n\n+ 设置http、https代理，在/etc/profile末尾添加：\n\n``` text \nPROXY_HOST=127.0.0.1\nexport all_proxy=http://$PROXY_HOST:8118\nexport ftp_proxy=http://$PROXY_HOST:8118\nexport http_proxy=http://$PROXY_HOST:8118\nexport https_proxy=http://$PROXY_HOST:8118\nexport no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16\n```\n\n+ 重载环境变量 \n\n``` shell \nsource /etc/profile\n```\n\n+ 测试代理 \n\n``` shell\ncurl google.com\n```\n\n+ 取消代理 \n\n``` shell\nwhile read var; do unset $var; done < <(env | grep -i proxy | awk -F= '{print $1}')\n```\n\n## *.参考链接 \n+ [https://www.jianshu.com/p/824912d9afda](https://www.jianshu.com/p/824912d9afda)","slug":"p37","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhb001iu8ve0tudba49","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者<a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">“运维前线”</a>的方法，现在记录详细操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-安装Shadowsocks客户端\"><a href=\"#1-安装Shadowsocks客户端\" class=\"headerlink\" title=\"1.安装Shadowsocks客户端\"></a>1.安装Shadowsocks客户端</h2><ul>\n<li>依次安装epel-release、python-pip后再安装shadowsocks<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br><span class=\"line\">sudo yum -y install python-pip</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-配置自己的socks信息\"><a href=\"#2-配置自己的socks信息\" class=\"headerlink\" title=\"2.配置自己的socks信息\"></a>2.配置自己的socks信息</h2><ul>\n<li>先新建配置文件 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/shadowsocks</span><br><span class=\"line\">sudo vi /etc/shadowsocks/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入如下格式的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;x.x.x.x&quot;,  # Shadowsocks服务器地址</span><br><span class=\"line\">    &quot;server_port&quot;:1035,  # Shadowsocks服务器端口</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, # 本地IP</span><br><span class=\"line\">    &quot;local_port&quot;:1080,  # 本地端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;, # Shadowsocks连接密码</span><br><span class=\"line\">    &quot;timeout&quot;:300,  # 等待超时时间</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  # 加密方式</span><br><span class=\"line\">    &quot;fast_open&quot;: false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+</span><br><span class=\"line\">    &quot;workers&quot;: 1  #工作线程数 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-配置shadowsocks客户端自启动\"><a href=\"#3-配置shadowsocks客户端自启动\" class=\"headerlink\" title=\"3.配置shadowsocks客户端自启动\"></a>3.配置shadowsocks客户端自启动</h2><ul>\n<li>配置自启动脚本/etc/systemd/system/shadowsocks.service </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入自启动 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable shadowsocks.service</span><br><span class=\"line\">systemctl start shadowsocks.service</span><br><span class=\"line\">systemctl status shadowsocks.service</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证Shadowsocks客户端服务是否正常运行 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-安装配置privoxy\"><a href=\"#4-安装配置privoxy\" class=\"headerlink\" title=\"4.安装配置privoxy\"></a>4.安装配置privoxy</h2><ul>\n<li>安装privoxy</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install privoxy -y</span><br><span class=\"line\">systemctl enable privoxy</span><br><span class=\"line\">systemctl start privoxy</span><br><span class=\"line\">systemctl status privoxy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置/etc/privoxy/config </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address 127.0.0.1:8118 # 8118 是默认端口，不用改</span><br><span class=\"line\">forward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置http、https代理，在/etc/profile末尾添加：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PROXY_HOST=127.0.0.1</span><br><span class=\"line\">export all_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export ftp_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export http_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export https_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重载环境变量 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl google.com</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取消代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while read var; do unset $var; done &lt; &lt;(env | grep -i proxy | awk -F= '&#123;print $1&#125;')</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/824912d9afda</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在centos上在线安装gitlab时速度太慢，于是想在centso上装个shadowsocks客户端，参照了简书作者<a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">“运维前线”</a>的方法，现在记录详细操作。</p>","more":"<h2 id=\"1-安装Shadowsocks客户端\"><a href=\"#1-安装Shadowsocks客户端\" class=\"headerlink\" title=\"1.安装Shadowsocks客户端\"></a>1.安装Shadowsocks客户端</h2><ul>\n<li>依次安装epel-release、python-pip后再安装shadowsocks<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br><span class=\"line\">sudo yum -y install python-pip</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-配置自己的socks信息\"><a href=\"#2-配置自己的socks信息\" class=\"headerlink\" title=\"2.配置自己的socks信息\"></a>2.配置自己的socks信息</h2><ul>\n<li>先新建配置文件 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /etc/shadowsocks</span><br><span class=\"line\">sudo vi /etc/shadowsocks/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入如下格式的配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;x.x.x.x&quot;,  # Shadowsocks服务器地址</span><br><span class=\"line\">    &quot;server_port&quot;:1035,  # Shadowsocks服务器端口</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;, # 本地IP</span><br><span class=\"line\">    &quot;local_port&quot;:1080,  # 本地端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;password&quot;, # Shadowsocks连接密码</span><br><span class=\"line\">    &quot;timeout&quot;:300,  # 等待超时时间</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  # 加密方式</span><br><span class=\"line\">    &quot;fast_open&quot;: false,  # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+</span><br><span class=\"line\">    &quot;workers&quot;: 1  #工作线程数 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-配置shadowsocks客户端自启动\"><a href=\"#3-配置shadowsocks客户端自启动\" class=\"headerlink\" title=\"3.配置shadowsocks客户端自启动\"></a>3.配置shadowsocks客户端自启动</h2><ul>\n<li>配置自启动脚本/etc/systemd/system/shadowsocks.service </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加入自启动 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable shadowsocks.service</span><br><span class=\"line\">systemctl start shadowsocks.service</span><br><span class=\"line\">systemctl status shadowsocks.service</span><br></pre></td></tr></table></figure>\n<ul>\n<li>验证Shadowsocks客户端服务是否正常运行 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-安装配置privoxy\"><a href=\"#4-安装配置privoxy\" class=\"headerlink\" title=\"4.安装配置privoxy\"></a>4.安装配置privoxy</h2><ul>\n<li>安装privoxy</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install privoxy -y</span><br><span class=\"line\">systemctl enable privoxy</span><br><span class=\"line\">systemctl start privoxy</span><br><span class=\"line\">systemctl status privoxy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置/etc/privoxy/config </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen-address 127.0.0.1:8118 # 8118 是默认端口，不用改</span><br><span class=\"line\">forward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置http、https代理，在/etc/profile末尾添加：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PROXY_HOST=127.0.0.1</span><br><span class=\"line\">export all_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export ftp_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export http_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export https_proxy=http://$PROXY_HOST:8118</span><br><span class=\"line\">export no_proxy=localhost,172.16.0.0/16,192.168.0.0/16.,127.0.0.1,10.10.0.0/16</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重载环境变量 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl google.com</span><br></pre></td></tr></table></figure>\n<ul>\n<li>取消代理 </li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while read var; do unset $var; done &lt; &lt;(env | grep -i proxy | awk -F= '&#123;print $1&#125;')</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/824912d9afda\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/824912d9afda</a></li>\n</ul>"},{"title":"Docker初学（二）自定义构建镜像并发布","id":"406","date":"2018-05-17T09:11:50.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/docker1s.jpg)<br/><br/>\n学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。\n\n<!--more-->\n\n## 1.注册[Docker Hub](https://hub.docker.com/)\n注册很简单，直接点击上面的官网链接进行注册即可。\n\n## 2.在本地登录dockerhub\n为了后续的push到dockerhub，需要首先录入自己的github信息\n```shell\ndocker login \n```\n## 3.运行一个容器\n例如，以交互形式运行ubuntu。\n``` shell \ndocker run -i -t ubuntu /bin/bash\n```\n## 4.对容器做修改\n例如，进入容器后，新建一个文件test。\n``` shell \nmkdir /bin/test   \n```\n\n## 5.查找容器的id\n执行\"exit\"退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。\n```shell \n[root@localhost docker]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES\n0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg\n86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner\n4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport\n6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle\nb498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test\n69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth\ncb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff\n```\n\n## 6.提交新镜像\n提交刚刚修改过的容器为新的镜像。\n``` shell \ndocker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test\n```\n\n## 7.推送到Docker Hub\n在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。\n``` shell \ndocker push xiajunyi/test\n```\n## 8.效果\nDocker Hub端看到的效果\n![img](/img/xjy/docker1.jpg) \n\n## 9.搜索命令\n另外，常用的还有搜索镜像的命令\n```shell\ndocker search\n```\n## 10.如果速度慢，可配置镜像加速\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:\n```text\n{\n\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n}\n#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\n```\n然后重启docker\n```shell\nsystemctl daemon-reload\nservice docker restart\n```\n\n## *.参考资料 \n[reallinxu的docker学习](https://www.reallinxu.com/aticle/Docker-Learning.html#more)\n\n\n\n\n","source":"_posts/p36.md","raw":"---\ntitle: Docker初学（二）自定义构建镜像并发布\nid: 406\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/17 17:11:50  \ntags: [运维, 编程, docker, linux]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/docker1s.jpg)<br/><br/>\n学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。\n\n<!--more-->\n\n## 1.注册[Docker Hub](https://hub.docker.com/)\n注册很简单，直接点击上面的官网链接进行注册即可。\n\n## 2.在本地登录dockerhub\n为了后续的push到dockerhub，需要首先录入自己的github信息\n```shell\ndocker login \n```\n## 3.运行一个容器\n例如，以交互形式运行ubuntu。\n``` shell \ndocker run -i -t ubuntu /bin/bash\n```\n## 4.对容器做修改\n例如，进入容器后，新建一个文件test。\n``` shell \nmkdir /bin/test   \n```\n\n## 5.查找容器的id\n执行\"exit\"退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。\n```shell \n[root@localhost docker]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES\n0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg\n86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner\n4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport\n6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle\nb498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test\n69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth\ncb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff\n```\n\n## 6.提交新镜像\n提交刚刚修改过的容器为新的镜像。\n``` shell \ndocker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test\n```\n\n## 7.推送到Docker Hub\n在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。\n``` shell \ndocker push xiajunyi/test\n```\n## 8.效果\nDocker Hub端看到的效果\n![img](/img/xjy/docker1.jpg) \n\n## 9.搜索命令\n另外，常用的还有搜索镜像的命令\n```shell\ndocker search\n```\n## 10.如果速度慢，可配置镜像加速\ndocker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:\n```text\n{\n\t\"registry-mirrors\": [\"https://almtd3fa.mirror.aliyuncs.com\"]\n}\n#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker\n```\n然后重启docker\n```shell\nsystemctl daemon-reload\nservice docker restart\n```\n\n## *.参考资料 \n[reallinxu的docker学习](https://www.reallinxu.com/aticle/Docker-Learning.html#more)\n\n\n\n\n","slug":"p36","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhe001lu8verc0ua9dy","content":"<p><img src=\"/img/xjy/docker1s.jpg\" alt=\"img\"><br><br><br>学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-注册Docker-Hub\"><a href=\"#1-注册Docker-Hub\" class=\"headerlink\" title=\"1.注册Docker Hub\"></a>1.注册<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></h2><p>注册很简单，直接点击上面的官网链接进行注册即可。</p>\n<h2 id=\"2-在本地登录dockerhub\"><a href=\"#2-在本地登录dockerhub\" class=\"headerlink\" title=\"2.在本地登录dockerhub\"></a>2.在本地登录dockerhub</h2><p>为了后续的push到dockerhub，需要首先录入自己的github信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-运行一个容器\"><a href=\"#3-运行一个容器\" class=\"headerlink\" title=\"3.运行一个容器\"></a>3.运行一个容器</h2><p>例如，以交互形式运行ubuntu。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-对容器做修改\"><a href=\"#4-对容器做修改\" class=\"headerlink\" title=\"4.对容器做修改\"></a>4.对容器做修改</h2><p>例如，进入容器后，新建一个文件test。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /bin/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-查找容器的id\"><a href=\"#5-查找容器的id\" class=\"headerlink\" title=\"5.查找容器的id\"></a>5.查找容器的id</h2><p>执行”exit”退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost docker]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES</span><br><span class=\"line\">0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg</span><br><span class=\"line\">86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner</span><br><span class=\"line\">4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport</span><br><span class=\"line\">6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle</span><br><span class=\"line\">b498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test</span><br><span class=\"line\">69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth</span><br><span class=\"line\">cb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-提交新镜像\"><a href=\"#6-提交新镜像\" class=\"headerlink\" title=\"6.提交新镜像\"></a>6.提交新镜像</h2><p>提交刚刚修改过的容器为新的镜像。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-推送到Docker-Hub\"><a href=\"#7-推送到Docker-Hub\" class=\"headerlink\" title=\"7.推送到Docker Hub\"></a>7.推送到Docker Hub</h2><p>在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-效果\"><a href=\"#8-效果\" class=\"headerlink\" title=\"8.效果\"></a>8.效果</h2><p>Docker Hub端看到的效果<br><img src=\"/img/xjy/docker1.jpg\" alt=\"img\"> </p>\n<h2 id=\"9-搜索命令\"><a href=\"#9-搜索命令\" class=\"headerlink\" title=\"9.搜索命令\"></a>9.搜索命令</h2><p>另外，常用的还有搜索镜像的命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-如果速度慢，可配置镜像加速\"><a href=\"#10-如果速度慢，可配置镜像加速\" class=\"headerlink\" title=\"10.如果速度慢，可配置镜像加速\"></a>10.如果速度慢，可配置镜像加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br></pre></td></tr></table></figure></p>\n<p>然后重启docker<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://www.reallinxu.com/aticle/Docker-Learning.html#more\" target=\"_blank\" rel=\"noopener\">reallinxu的docker学习</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/docker1s.jpg\" alt=\"img\"><br><br><br>学习了docker的基本用法和操作，下面要学的就是怎么自己构建一个镜像，并发布到Docker Hub中去。</p>","more":"<h2 id=\"1-注册Docker-Hub\"><a href=\"#1-注册Docker-Hub\" class=\"headerlink\" title=\"1.注册Docker Hub\"></a>1.注册<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></h2><p>注册很简单，直接点击上面的官网链接进行注册即可。</p>\n<h2 id=\"2-在本地登录dockerhub\"><a href=\"#2-在本地登录dockerhub\" class=\"headerlink\" title=\"2.在本地登录dockerhub\"></a>2.在本地登录dockerhub</h2><p>为了后续的push到dockerhub，需要首先录入自己的github信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-运行一个容器\"><a href=\"#3-运行一个容器\" class=\"headerlink\" title=\"3.运行一个容器\"></a>3.运行一个容器</h2><p>例如，以交互形式运行ubuntu。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-对容器做修改\"><a href=\"#4-对容器做修改\" class=\"headerlink\" title=\"4.对容器做修改\"></a>4.对容器做修改</h2><p>例如，进入容器后，新建一个文件test。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /bin/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-查找容器的id\"><a href=\"#5-查找容器的id\" class=\"headerlink\" title=\"5.查找容器的id\"></a>5.查找容器的id</h2><p>执行”exit”退出容器后，查看运行过的容器，找出刚刚最新的容器id为0456b9b05d2a。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost docker]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND               CREATED             STATUS                        PORTS               NAMES</span><br><span class=\"line\">0456b9b05d2a        ubuntu              \"/bin/bash\"           27 minutes ago      Exited (0) 27 minutes ago                         heuristic_heisenberg</span><br><span class=\"line\">86be731e576b        ubuntu              \"/bin/bash\"           32 minutes ago      Exited (127) 31 minutes ago                       inspiring_meitner</span><br><span class=\"line\">4efcd41d5bce        ubuntu              \"/bin/bash\"           About an hour ago   Exited (100) 44 minutes ago                       eloquent_lamport</span><br><span class=\"line\">6e2a8b056c39        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           angry_hugle</span><br><span class=\"line\">b498b5bceec1        ubuntu              \"/bin/bash\"           7 days ago          Exited (255) 3 hours ago                          test</span><br><span class=\"line\">69add8634973        ubuntu              \"/bin/bash\"           7 days ago          Exited (127) 7 days ago                           eloquent_knuth</span><br><span class=\"line\">cb8641566d51        ubuntu              \"echo hello docker\"   8 days ago          Exited (0) 8 days ago                             clever_wescoff</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-提交新镜像\"><a href=\"#6-提交新镜像\" class=\"headerlink\" title=\"6.提交新镜像\"></a>6.提交新镜像</h2><p>提交刚刚修改过的容器为新的镜像。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m 学习提交 --author xiajunyi 0456b9b05d2a xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-推送到Docker-Hub\"><a href=\"#7-推送到Docker-Hub\" class=\"headerlink\" title=\"7.推送到Docker Hub\"></a>7.推送到Docker Hub</h2><p>在上面commit后应该只是到了本地仓库，要推送到Docker Hub端还要执行下面的命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push xiajunyi/test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-效果\"><a href=\"#8-效果\" class=\"headerlink\" title=\"8.效果\"></a>8.效果</h2><p>Docker Hub端看到的效果<br><img src=\"/img/xjy/docker1.jpg\" alt=\"img\"> </p>\n<h2 id=\"9-搜索命令\"><a href=\"#9-搜索命令\" class=\"headerlink\" title=\"9.搜索命令\"></a>9.搜索命令</h2><p>另外，常用的还有搜索镜像的命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10-如果速度慢，可配置镜像加速\"><a href=\"#10-如果速度慢，可配置镜像加速\" class=\"headerlink\" title=\"10.如果速度慢，可配置镜像加速\"></a>10.如果速度慢，可配置镜像加速</h2><p>docker的镜像仓库在国外，下载会很慢，启用阿里云加速。在/etc/docker目录下创建daemon.json文件，添加如下内容:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;registry-mirrors&quot;: [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#https://almtd3fa.mirror.aliyuncs.com为阿里云的加速地址。修改后，重启docker</span><br></pre></td></tr></table></figure></p>\n<p>然后重启docker<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://www.reallinxu.com/aticle/Docker-Learning.html#more\" target=\"_blank\" rel=\"noopener\">reallinxu的docker学习</a></p>"},{"title":"Nginx配置端口转发遇到no resolver defined错误","id":"409","date":"2018-05-20T05:20:05.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。\n\n<!--more-->\n\n## 1.配置nginx转发规则\n这里面用到了nginx内置的参数，如有需要可以[参考这里](https://www.xiajunyi.com/pages/p39.html)\n```text \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n## 2.然后就报错啦 \n错误信息如下：\n```text \n[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com\n```\n\n## 3.错误原因\n网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至[这里](https://blog.csdn.net/mimei123/article/details/65446732)。\n\n## 4.错误修复\n在配置中加入一句**resolver 8.8.8.8**就ok啦：\n``` text  \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    resolver 8.8.8.8;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n\n## *.参考链接 \n+ [https://blog.csdn.net/mimei123/article/details/65446732](https://blog.csdn.net/mimei123/article/details/65446732)","source":"_posts/p38.md","raw":"---\ntitle: Nginx配置端口转发遇到no resolver defined错误\nid: 409\ncategories:\n  - nginx\ndate: 2018/5/20 13:20:05    \ntags: [运维, nginx, 错误]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。\n\n<!--more-->\n\n## 1.配置nginx转发规则\n这里面用到了nginx内置的参数，如有需要可以[参考这里](https://www.xiajunyi.com/pages/p39.html)\n```text \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n## 2.然后就报错啦 \n错误信息如下：\n```text \n[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com\n```\n\n## 3.错误原因\n网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至[这里](https://blog.csdn.net/mimei123/article/details/65446732)。\n\n## 4.错误修复\n在配置中加入一句**resolver 8.8.8.8**就ok啦：\n``` text  \n#转ngrok\nserver {\n    listen       80;\n    server_name  *.xiajunyi.com;\n    resolver 8.8.8.8;\n    location / {\n             proxy_pass  $scheme://$host:8331;\n             proxy_redirect off;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n\n## *.参考链接 \n+ [https://blog.csdn.net/mimei123/article/details/65446732](https://blog.csdn.net/mimei123/article/details/65446732)","slug":"p38","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhi001ou8veupceyakl","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-配置nginx转发规则\"><a href=\"#1-配置nginx转发规则\" class=\"headerlink\" title=\"1.配置nginx转发规则\"></a>1.配置nginx转发规则</h2><p>这里面用到了nginx内置的参数，如有需要可以<a href=\"https://www.xiajunyi.com/pages/p39.html\">参考这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-然后就报错啦\"><a href=\"#2-然后就报错啦\" class=\"headerlink\" title=\"2.然后就报错啦\"></a>2.然后就报错啦</h2><p>错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-错误原因\"><a href=\"#3-错误原因\" class=\"headerlink\" title=\"3.错误原因\"></a>3.错误原因</h2><p>网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至<a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"4-错误修复\"><a href=\"#4-错误修复\" class=\"headerlink\" title=\"4.错误修复\"></a>4.错误修复</h2><p>在配置中加入一句<strong>resolver 8.8.8.8</strong>就ok啦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    resolver 8.8.8.8;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mimei123/article/details/65446732</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>今天在想把虚拟机上的centos中的gitlab映射出去，于是想用Ngrok实现内网穿透，我这里需要先在我的vps上用nginx做端口映射，在映射的过程中遇到了一个no resolver defined错误,下面记录整个处理过程。</p>","more":"<h2 id=\"1-配置nginx转发规则\"><a href=\"#1-配置nginx转发规则\" class=\"headerlink\" title=\"1.配置nginx转发规则\"></a>1.配置nginx转发规则</h2><p>这里面用到了nginx内置的参数，如有需要可以<a href=\"https://www.xiajunyi.com/pages/p39.html\">参考这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-然后就报错啦\"><a href=\"#2-然后就报错啦\" class=\"headerlink\" title=\"2.然后就报错啦\"></a>2.然后就报错啦</h2><p>错误信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 3040#0: *11 no resolver defined to resolve xxx.xiajunyi.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-错误原因\"><a href=\"#3-错误原因\" class=\"headerlink\" title=\"3.错误原因\"></a>3.错误原因</h2><p>网上说，原因是Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址。引用至<a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h2 id=\"4-错误修复\"><a href=\"#4-错误修复\" class=\"headerlink\" title=\"4.错误修复\"></a>4.错误修复</h2><p>在配置中加入一句<strong>resolver 8.8.8.8</strong>就ok啦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转ngrok</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  *.xiajunyi.com;</span><br><span class=\"line\">    resolver 8.8.8.8;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://$host:8331;</span><br><span class=\"line\">             proxy_redirect off;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/mimei123/article/details/65446732\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mimei123/article/details/65446732</a></li>\n</ul>"},{"title":"Nginx内置变量大全","id":"409","date":"2017-05-20T05:34:34.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了[内置变量](https://www.cnblogs.com/wajika/p/6426270.html)，以便后续查找。\n\n<!--more-->\n\n## nginx内置变量\n变量名 | 简要说明\n---|---\n$args|#请求中的参数值\n$query_string|#同 $args\n$arg_NAME|#GET请求中NAME的值\n$is_args|#如果请求中有参数，值为\"?\"，否则为空字符串\n$uri|#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。\n$document_uri|#同 $uri\n$document_root|#当前请求的文档根目录或别名\n$host|#优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称\n$hostname|#主机名\n$https|#如果开启了SSL安全模式，值为\"on\"，否则为空字符串。\n$binary_remote_addr|#客户端地址的二进制形式，固定长度为4个字节\n$body_bytes_sent|#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容\n$bytes_sent|#传输给客户端的字节数\n$connection|#TCP连接的序列号\n$connection_requests|#TCP连接当前的请求数量\n$content_length|#\"Content-Length\" 请求头字段\n$content_type|#\"Content-Type\" 请求头字段\n$cookie_name|#cookie名称\n$limit_rate|#用于设置响应的速度限制\n$msec|#当前的Unix时间戳\n$nginx_version|#nginx版本\n$pid|#工作进程的PID\n$pipe|#如果请求来自管道通信，值为\"p\"，否则为\".\"\n$proxy_protocol_addr|#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串\n$realpath_root|#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径\n$remote_addr|#客户端地址\n$remote_port|#客户端端口\n$remote_user|#用于HTTP基础认证服务的用户名\n$request|#代表客户端的请求地址\n$request_body|#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器\n$request_body_file|#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off\n$request_completion|#如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空\n$request_filename|#当前连接请求的文件路径，由root或alias指令与URI请求生成\n$request_length|#请求的长度 (包括请求的地址，http请求头和请求主体)\n$request_method|#HTTP请求方法，通常为\"GET\"或\"POST\"\n$request_time|#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n$request_uri|#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"\n$scheme|#请求使用的Web协议，\"http\" 或 \"https\"\n$server_addr|#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中\n$server_name|#服务器名\n$server_port|#服务器端口\n$server_protocol|#服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"\n$status|#HTTP响应代码\n$time_iso8601|#服务器时间的ISO 8610格式\n$time_local|#服务器时间（LOG Format 格式）\n$cookie_NAME|#客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值\n$http_NAME|#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可\n$http_cookie| \n$http_host|#请求地址，即浏览器中你输入的地址（IP或域名）\n$http_referer|#url跳转来源,用来记录从那个页面链接访问过来的\n$http_user_agent|#用户终端浏览器等信息\n$http_x_forwarded_for|\n$sent_http_NAME|#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可\n$sent_http_cache_control| \n$sent_http_connection| \n$sent_http_content_type| \n$sent_http_keep_alive| \n$sent_http_last_modified| \n$sent_http_location| \n$sent_http_transfer_encoding| \n\n\n## *.参考链接 \n+ [https://www.cnblogs.com/wajika/p/6426270.html](https://www.cnblogs.com/wajika/p/6426270.html)","source":"_posts/p39.md","raw":"---\ntitle: Nginx内置变量大全\nid: 409\ncategories:\n  - nginx\ndate: 2017/5/20 13:34:34     \ntags: [运维, nginx]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/tangquanchi.jpg)<br/><br/>\n在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了[内置变量](https://www.cnblogs.com/wajika/p/6426270.html)，以便后续查找。\n\n<!--more-->\n\n## nginx内置变量\n变量名 | 简要说明\n---|---\n$args|#请求中的参数值\n$query_string|#同 $args\n$arg_NAME|#GET请求中NAME的值\n$is_args|#如果请求中有参数，值为\"?\"，否则为空字符串\n$uri|#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\"/foo/bar.html\"。\n$document_uri|#同 $uri\n$document_root|#当前请求的文档根目录或别名\n$host|#优先级：HTTP请求行的主机名>\"HOST\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称\n$hostname|#主机名\n$https|#如果开启了SSL安全模式，值为\"on\"，否则为空字符串。\n$binary_remote_addr|#客户端地址的二进制形式，固定长度为4个字节\n$body_bytes_sent|#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\"%B\"参数保持兼容\n$bytes_sent|#传输给客户端的字节数\n$connection|#TCP连接的序列号\n$connection_requests|#TCP连接当前的请求数量\n$content_length|#\"Content-Length\" 请求头字段\n$content_type|#\"Content-Type\" 请求头字段\n$cookie_name|#cookie名称\n$limit_rate|#用于设置响应的速度限制\n$msec|#当前的Unix时间戳\n$nginx_version|#nginx版本\n$pid|#工作进程的PID\n$pipe|#如果请求来自管道通信，值为\"p\"，否则为\".\"\n$proxy_protocol_addr|#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串\n$realpath_root|#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径\n$remote_addr|#客户端地址\n$remote_port|#客户端端口\n$remote_user|#用于HTTP基础认证服务的用户名\n$request|#代表客户端的请求地址\n$request_body|#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器\n$request_body_file|#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off\n$request_completion|#如果请求成功，值为\"OK\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空\n$request_filename|#当前连接请求的文件路径，由root或alias指令与URI请求生成\n$request_length|#请求的长度 (包括请求的地址，http请求头和请求主体)\n$request_method|#HTTP请求方法，通常为\"GET\"或\"POST\"\n$request_time|#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。\n$request_uri|#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\"/cnphp/test.php?arg=freemouse\"\n$scheme|#请求使用的Web协议，\"http\" 或 \"https\"\n$server_addr|#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中\n$server_name|#服务器名\n$server_port|#服务器端口\n$server_protocol|#服务器的HTTP版本，通常为 \"HTTP/1.0\" 或 \"HTTP/1.1\"\n$status|#HTTP响应代码\n$time_iso8601|#服务器时间的ISO 8610格式\n$time_local|#服务器时间（LOG Format 格式）\n$cookie_NAME|#客户端请求Header头中的cookie变量，前缀\"$cookie_\"加上cookie名称的变量，该变量的值即为cookie名称的值\n$http_NAME|#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\"Accept-Language\"，$http_accept_language即可\n$http_cookie| \n$http_host|#请求地址，即浏览器中你输入的地址（IP或域名）\n$http_referer|#url跳转来源,用来记录从那个页面链接访问过来的\n$http_user_agent|#用户终端浏览器等信息\n$http_x_forwarded_for|\n$sent_http_NAME|#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可\n$sent_http_cache_control| \n$sent_http_connection| \n$sent_http_content_type| \n$sent_http_keep_alive| \n$sent_http_last_modified| \n$sent_http_location| \n$sent_http_transfer_encoding| \n\n\n## *.参考链接 \n+ [https://www.cnblogs.com/wajika/p/6426270.html](https://www.cnblogs.com/wajika/p/6426270.html)","slug":"p39","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhn001qu8veuqumv76n","content":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了<a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">内置变量</a>，以便后续查找。</p>\n<a id=\"more\"></a>\n<h2 id=\"nginx内置变量\"><a href=\"#nginx内置变量\" class=\"headerlink\" title=\"nginx内置变量\"></a>nginx内置变量</h2><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>简要说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args</td>\n<td>#请求中的参数值</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>#同 $args</td>\n</tr>\n<tr>\n<td>$arg_NAME</td>\n<td>#GET请求中NAME的值</td>\n</tr>\n<tr>\n<td>$is_args</td>\n<td>#如果请求中有参数，值为”?”，否则为空字符串</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>#同 $uri</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>#当前请求的文档根目录或别名</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>#优先级：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</td>\n</tr>\n<tr>\n<td>$hostname</td>\n<td>#主机名</td>\n</tr>\n<tr>\n<td>$https</td>\n<td>#如果开启了SSL安全模式，值为”on”，否则为空字符串。</td>\n</tr>\n<tr>\n<td>$binary_remote_addr</td>\n<td>#客户端地址的二进制形式，固定长度为4个字节</td>\n</tr>\n<tr>\n<td>$body_bytes_sent</td>\n<td>#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的”%B”参数保持兼容</td>\n</tr>\n<tr>\n<td>$bytes_sent</td>\n<td>#传输给客户端的字节数</td>\n</tr>\n<tr>\n<td>$connection</td>\n<td>#TCP连接的序列号</td>\n</tr>\n<tr>\n<td>$connection_requests</td>\n<td>#TCP连接当前的请求数量</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>#”Content-Length” 请求头字段</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>#”Content-Type” 请求头字段</td>\n</tr>\n<tr>\n<td>$cookie_name</td>\n<td>#cookie名称</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>#用于设置响应的速度限制</td>\n</tr>\n<tr>\n<td>$msec</td>\n<td>#当前的Unix时间戳</td>\n</tr>\n<tr>\n<td>$nginx_version</td>\n<td>#nginx版本</td>\n</tr>\n<tr>\n<td>$pid</td>\n<td>#工作进程的PID</td>\n</tr>\n<tr>\n<td>$pipe</td>\n<td>#如果请求来自管道通信，值为”p”，否则为”.”</td>\n</tr>\n<tr>\n<td>$proxy_protocol_addr</td>\n<td>#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</td>\n</tr>\n<tr>\n<td>$realpath_root</td>\n<td>#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>#客户端地址</td>\n</tr>\n<tr>\n<td>$remote_port</td>\n<td>#客户端端口</td>\n</tr>\n<tr>\n<td>$remote_user</td>\n<td>#用于HTTP基础认证服务的用户名</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>#代表客户端的请求地址</td>\n</tr>\n<tr>\n<td>$request_body</td>\n<td>#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</td>\n</tr>\n<tr>\n<td>$request_body_file</td>\n<td>#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</td>\n</tr>\n<tr>\n<td>$request_completion</td>\n<td>#如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</td>\n</tr>\n<tr>\n<td>$request_filename</td>\n<td>#当前连接请求的文件路径，由root或alias指令与URI请求生成</td>\n</tr>\n<tr>\n<td>$request_length</td>\n<td>#请求的长度 (包括请求的地址，http请求头和请求主体)</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>#HTTP请求方法，通常为”GET”或”POST”</td>\n</tr>\n<tr>\n<td>$request_time</td>\n<td>#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>#请求使用的Web协议，”http” 或 “https”</td>\n</tr>\n<tr>\n<td>$server_addr</td>\n<td>#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</td>\n</tr>\n<tr>\n<td>$server_name</td>\n<td>#服务器名</td>\n</tr>\n<tr>\n<td>$server_port</td>\n<td>#服务器端口</td>\n</tr>\n<tr>\n<td>$server_protocol</td>\n<td>#服务器的HTTP版本，通常为 “HTTP/1.0” 或 “HTTP/1.1”</td>\n</tr>\n<tr>\n<td>$status</td>\n<td>#HTTP响应代码</td>\n</tr>\n<tr>\n<td>$time_iso8601</td>\n<td>#服务器时间的ISO 8610格式</td>\n</tr>\n<tr>\n<td>$time_local</td>\n<td>#服务器时间（LOG Format 格式）</td>\n</tr>\n<tr>\n<td>$cookie_NAME</td>\n<td>#客户端请求Header头中的cookie变量，前缀”$cookie_”加上cookie名称的变量，该变量的值即为cookie名称的值</td>\n</tr>\n<tr>\n<td>$http_NAME</td>\n<td>#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：”Accept-Language”，$http_accept_language即可</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_host</td>\n<td>#请求地址，即浏览器中你输入的地址（IP或域名）</td>\n</tr>\n<tr>\n<td>$http_referer</td>\n<td>#url跳转来源,用来记录从那个页面链接访问过来的</td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td>#用户终端浏览器等信息</td>\n</tr>\n<tr>\n<td>$http_x_forwarded_for</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_NAME</td>\n<td>#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</td>\n</tr>\n<tr>\n<td>$sent_http_cache_control</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_connection</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_content_type</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_keep_alive</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_last_modified</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_location</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_transfer_encoding</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wajika/p/6426270.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/tangquanchi.jpg\" alt=\"img\"><br><br><br>在配置nginx的时候，经常需要引用nginx的内置变量，这里转载了<a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">内置变量</a>，以便后续查找。</p>","more":"<h2 id=\"nginx内置变量\"><a href=\"#nginx内置变量\" class=\"headerlink\" title=\"nginx内置变量\"></a>nginx内置变量</h2><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>简要说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$args</td>\n<td>#请求中的参数值</td>\n</tr>\n<tr>\n<td>$query_string</td>\n<td>#同 $args</td>\n</tr>\n<tr>\n<td>$arg_NAME</td>\n<td>#GET请求中NAME的值</td>\n</tr>\n<tr>\n<td>$is_args</td>\n<td>#如果请求中有参数，值为”?”，否则为空字符串</td>\n</tr>\n<tr>\n<td>$uri</td>\n<td>#请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td>\n</tr>\n<tr>\n<td>$document_uri</td>\n<td>#同 $uri</td>\n</tr>\n<tr>\n<td>$document_root</td>\n<td>#当前请求的文档根目录或别名</td>\n</tr>\n<tr>\n<td>$host</td>\n<td>#优先级：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</td>\n</tr>\n<tr>\n<td>$hostname</td>\n<td>#主机名</td>\n</tr>\n<tr>\n<td>$https</td>\n<td>#如果开启了SSL安全模式，值为”on”，否则为空字符串。</td>\n</tr>\n<tr>\n<td>$binary_remote_addr</td>\n<td>#客户端地址的二进制形式，固定长度为4个字节</td>\n</tr>\n<tr>\n<td>$body_bytes_sent</td>\n<td>#传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的”%B”参数保持兼容</td>\n</tr>\n<tr>\n<td>$bytes_sent</td>\n<td>#传输给客户端的字节数</td>\n</tr>\n<tr>\n<td>$connection</td>\n<td>#TCP连接的序列号</td>\n</tr>\n<tr>\n<td>$connection_requests</td>\n<td>#TCP连接当前的请求数量</td>\n</tr>\n<tr>\n<td>$content_length</td>\n<td>#”Content-Length” 请求头字段</td>\n</tr>\n<tr>\n<td>$content_type</td>\n<td>#”Content-Type” 请求头字段</td>\n</tr>\n<tr>\n<td>$cookie_name</td>\n<td>#cookie名称</td>\n</tr>\n<tr>\n<td>$limit_rate</td>\n<td>#用于设置响应的速度限制</td>\n</tr>\n<tr>\n<td>$msec</td>\n<td>#当前的Unix时间戳</td>\n</tr>\n<tr>\n<td>$nginx_version</td>\n<td>#nginx版本</td>\n</tr>\n<tr>\n<td>$pid</td>\n<td>#工作进程的PID</td>\n</tr>\n<tr>\n<td>$pipe</td>\n<td>#如果请求来自管道通信，值为”p”，否则为”.”</td>\n</tr>\n<tr>\n<td>$proxy_protocol_addr</td>\n<td>#获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</td>\n</tr>\n<tr>\n<td>$realpath_root</td>\n<td>#当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</td>\n</tr>\n<tr>\n<td>$remote_addr</td>\n<td>#客户端地址</td>\n</tr>\n<tr>\n<td>$remote_port</td>\n<td>#客户端端口</td>\n</tr>\n<tr>\n<td>$remote_user</td>\n<td>#用于HTTP基础认证服务的用户名</td>\n</tr>\n<tr>\n<td>$request</td>\n<td>#代表客户端的请求地址</td>\n</tr>\n<tr>\n<td>$request_body</td>\n<td>#客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</td>\n</tr>\n<tr>\n<td>$request_body_file</td>\n<td>#将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</td>\n</tr>\n<tr>\n<td>$request_completion</td>\n<td>#如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</td>\n</tr>\n<tr>\n<td>$request_filename</td>\n<td>#当前连接请求的文件路径，由root或alias指令与URI请求生成</td>\n</tr>\n<tr>\n<td>$request_length</td>\n<td>#请求的长度 (包括请求的地址，http请求头和请求主体)</td>\n</tr>\n<tr>\n<td>$request_method</td>\n<td>#HTTP请求方法，通常为”GET”或”POST”</td>\n</tr>\n<tr>\n<td>$request_time</td>\n<td>#处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</td>\n</tr>\n<tr>\n<td>$request_uri</td>\n<td>#这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”</td>\n</tr>\n<tr>\n<td>$scheme</td>\n<td>#请求使用的Web协议，”http” 或 “https”</td>\n</tr>\n<tr>\n<td>$server_addr</td>\n<td>#服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</td>\n</tr>\n<tr>\n<td>$server_name</td>\n<td>#服务器名</td>\n</tr>\n<tr>\n<td>$server_port</td>\n<td>#服务器端口</td>\n</tr>\n<tr>\n<td>$server_protocol</td>\n<td>#服务器的HTTP版本，通常为 “HTTP/1.0” 或 “HTTP/1.1”</td>\n</tr>\n<tr>\n<td>$status</td>\n<td>#HTTP响应代码</td>\n</tr>\n<tr>\n<td>$time_iso8601</td>\n<td>#服务器时间的ISO 8610格式</td>\n</tr>\n<tr>\n<td>$time_local</td>\n<td>#服务器时间（LOG Format 格式）</td>\n</tr>\n<tr>\n<td>$cookie_NAME</td>\n<td>#客户端请求Header头中的cookie变量，前缀”$cookie_”加上cookie名称的变量，该变量的值即为cookie名称的值</td>\n</tr>\n<tr>\n<td>$http_NAME</td>\n<td>#匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：”Accept-Language”，$http_accept_language即可</td>\n</tr>\n<tr>\n<td>$http_cookie</td>\n<td></td>\n</tr>\n<tr>\n<td>$http_host</td>\n<td>#请求地址，即浏览器中你输入的地址（IP或域名）</td>\n</tr>\n<tr>\n<td>$http_referer</td>\n<td>#url跳转来源,用来记录从那个页面链接访问过来的</td>\n</tr>\n<tr>\n<td>$http_user_agent</td>\n<td>#用户终端浏览器等信息</td>\n</tr>\n<tr>\n<td>$http_x_forwarded_for</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_NAME</td>\n<td>#可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</td>\n</tr>\n<tr>\n<td>$sent_http_cache_control</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_connection</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_content_type</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_keep_alive</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_last_modified</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_location</td>\n<td></td>\n</tr>\n<tr>\n<td>$sent_http_transfer_encoding</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://www.cnblogs.com/wajika/p/6426270.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wajika/p/6426270.html</a></li>\n</ul>"},{"title":"TypeError: exchange_declare() got an unexpected keyword argument 'type'的解决办法","id":"300","date":"2018-01-08T06:59:25.000Z","declare":true,"toc":true,"_content":"\n在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。\n\n*   **原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：** \n<!--more-->\n\n源代码：\n``` py \n#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming() \n```\n\n报错如下：\n\n``` text \nFile \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'\n```\n\n修改如下：\n\n``` py \nchannel.exchange_declare(exchange='logs', exchange_type='fanout') \n```","source":"_posts/p4.md","raw":"---\ntitle: 'TypeError: exchange_declare() got an unexpected keyword argument ''type''的解决办法'\nid: 300\ncategories:\n  - rabbitmq学习\ndate: 2018-01-08 14:59:25\ntags: [rabbitmq, 错误解决]\ndeclare: true\ntoc: true\n---\n\n在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。\n\n*   **原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：** \n<!--more-->\n\n源代码：\n``` py \n#encoding:utf8  \nimport pika  \n\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))  \nchannel = connection.channel()  \n\n#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  \nchannel.exchange_declare(exchange='logs', exchange_type='fanout')  \n#在不同的producer和consumer间共享queue时指明queue的name是重要的  \n#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  \n#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  \n#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  \n#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  \nresult = channel.queue_declare(exclusive=True)  \n\n#用于获取临时queue的name  \nqueue_name = result.method.queue  \n\n#exchange与queue之间的关系成为binding  \n#binding告诉exchange将message发送该哪些queue  \nchannel.queue_bind(exchange='logs',queue=queue_name)  \n\nprint (' [*] Waiting for logs. To exit press CTRL+C')  \n\ndef callback(ch, method, properties, body):  \n    print (\" [x] %r\" % (body,))  \n\n#从指定地queue中consume message且不确认  \nchannel.basic_consume(callback,queue=queue_name,no_ack=True)  \nchannel.start_consuming() \n```\n\n报错如下：\n\n``` text \nFile \"receive_logs.py\", line 9, in &lt;module&gt;                                    channel.exchange_declare(exchange='logs',type='fanout')\nTypeError: exchange_declare() got an unexpected keyword argument 'type'\n```\n\n修改如下：\n\n``` py \nchannel.exchange_declare(exchange='logs', exchange_type='fanout') \n```","slug":"p4","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhp001tu8vec1sv8mpd","content":"<p>在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。</p>\n<ul>\n<li><strong>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：</strong> <a id=\"more\"></a>\n</li>\n</ul>\n<p>源代码：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding:utf8  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika  </span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'localhost'</span>))  </span><br><span class=\"line\">channel = connection.channel()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  </span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)  </span><br><span class=\"line\"><span class=\"comment\">#在不同的producer和consumer间共享queue时指明queue的name是重要的  </span></span><br><span class=\"line\"><span class=\"comment\">#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  </span></span><br><span class=\"line\"><span class=\"comment\">#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  </span></span><br><span class=\"line\"><span class=\"comment\">#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  </span></span><br><span class=\"line\"><span class=\"comment\">#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  </span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用于获取临时queue的name  </span></span><br><span class=\"line\">queue_name = result.method.queue  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#exchange与queue之间的关系成为binding  </span></span><br><span class=\"line\"><span class=\"comment\">#binding告诉exchange将message发送该哪些queue  </span></span><br><span class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'logs'</span>,queue=queue_name)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] %r\"</span> % (body,))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从指定地queue中consume message且不确认  </span></span><br><span class=\"line\">channel.basic_consume(callback,queue=queue_name,no_ack=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure></p>\n<p>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File &quot;receive_logs.py&quot;, line 9, in &amp;lt;module&amp;gt;                                    channel.exchange_declare(exchange=&apos;logs&apos;,type=&apos;fanout&apos;)</span><br><span class=\"line\">TypeError: exchange_declare() got an unexpected keyword argument &apos;type&apos;</span><br></pre></td></tr></table></figure>\n<p>修改如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在用网上的python代码执行rabbitmq案例的时候遇到了一个错误，困惑了好久发现解决办法。</p>\n<ul>\n<li><strong>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type，具体过程如下：</strong>","more":"</li>\n</ul>\n<p>源代码：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding:utf8  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika  </span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'localhost'</span>))  </span><br><span class=\"line\">channel = connection.channel()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#作为好的习惯，在producer和consumer中分别声明一次以保证所要使用的exchange存在  </span></span><br><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)  </span><br><span class=\"line\"><span class=\"comment\">#在不同的producer和consumer间共享queue时指明queue的name是重要的  </span></span><br><span class=\"line\"><span class=\"comment\">#但某些时候，比如日志系统，需要接收所有的log message而非一个子集  </span></span><br><span class=\"line\"><span class=\"comment\">#而且仅对当前的message 流感兴趣，对于过时的message不感兴趣，那么  </span></span><br><span class=\"line\"><span class=\"comment\">#可以申请一个临时队列这样，每次连接到RabbitMQ时会以一个随机的名字生成  </span></span><br><span class=\"line\"><span class=\"comment\">#一个新的空的queue，将exclusive置为True，这样在consumer从RabbitMQ断开后会删除该queue  </span></span><br><span class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用于获取临时queue的name  </span></span><br><span class=\"line\">queue_name = result.method.queue  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#exchange与queue之间的关系成为binding  </span></span><br><span class=\"line\"><span class=\"comment\">#binding告诉exchange将message发送该哪些queue  </span></span><br><span class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'logs'</span>,queue=queue_name)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">' [*] Waiting for logs. To exit press CTRL+C'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span>  </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\" [x] %r\"</span> % (body,))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从指定地queue中consume message且不确认  </span></span><br><span class=\"line\">channel.basic_consume(callback,queue=queue_name,no_ack=<span class=\"keyword\">True</span>)  </span><br><span class=\"line\">channel.start_consuming()</span><br></pre></td></tr></table></figure></p>\n<p>报错如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File &quot;receive_logs.py&quot;, line 9, in &amp;lt;module&amp;gt;                                    channel.exchange_declare(exchange=&apos;logs&apos;,type=&apos;fanout&apos;)</span><br><span class=\"line\">TypeError: exchange_declare() got an unexpected keyword argument &apos;type&apos;</span><br></pre></td></tr></table></figure>\n<p>修改如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'logs'</span>, exchange_type=<span class=\"string\">'fanout'</span>)</span><br></pre></td></tr></table></figure>"},{"title":"Github的webhook触发vps上的脚本","id":"411","date":"2018-05-23T09:04:15.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/webhook001s.jpg)<br/><br/>\n一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。\n\n<!--more-->\n\n## 环境\n+ VPS端(CENTOS6):NodeJs、Git\n+ WINDOWS端：Git\n+ GitHub\n+ Travis_Ci\n\n\n## 原理\n原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br/>\n![img](/img/xjy/webhook001.jpg)\n\n## webhook配置\ngithub端webhook主要配置的就是推送的地址，下面是我的配置:  <br/>\n![img](/img/xjy/webhook002.jpg)\n\n## vps端代码及配置\n+ **nodejs代码:**下面是vps端nodejs的代码hexoHook.js。\n\n``` py\nvar http = require('http');\n\nhttp.createServer(function (request, response) {\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n');\n\t//开始准备调用脚本\n\tvar callfile = require('child_process');\n\tcallfile.execFile('/opt/gitCode/hexoHook.sh',null,null,function (err, stdout, stderr) {\n     if (stderr) {\n       console.log(stderr);\n     }\n     console.log(stdout);\n });\n}).listen(8888);\n```\n\n+ **sh脚本:**下面是vps端被nodejs调用的sh脚本。\n\n``` shell\ncd /opt/gitCode/xiajunyi.github.io\ngit fetch --all\ngit reset --hard origin/master\ngit pull origin master\n```\n\n+ **执行监听程序：**真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。\n\n``` shell\n[root@zyshops nodeTest]# node hexoHook.js \nServer running at http://127.0.0.1:8888/\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n + 641d46e...b41a89d master     -> origin/master  (forced update)\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n * branch            master     -> FETCH_HEAD\n\nFetching origin\nHEAD is now at b41a89d docs:update articles\nAlready up-to-date.\n```\n\n## 效果\n当访问[http://hexo.xiajunyi.com/pages/p41.html#more](http://hexo.xiajunyi.com/pages/p41.html#more)看到这篇文章时,说明vps端已经同步到了最新的资源。\n\n## 补充(开机启动nodejs)\n在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：\n\n+ 安装forever，该程序保证nodeJs程序万一停止后能被重复启动\n\n```shell\nnpm install forever -g\n```\n\n+ 在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：\n\n```text\n\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n\"nodeserver\" [readonly] 62L, 1342C\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                start\n        else\n                export NODE_ENV=production\n                start\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production\"\n        fi\n        ;;\nstop)\n        stop\n        ;;\nrestart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                stop\n                start\n        else\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        fi\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        echo 0;\nesac\n\nexit 0\n```\n\n+ 用chkconfig加入到开机启动项\n\n```shell\nchkconfig --add nodeserver\n```\n\n+ 重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。\n\n``` shell\n[root@zyshops init.d]# ps -ef | grep node\nroot       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js\nroot       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js\n```","source":"_posts/p41.md","raw":"---\ntitle: Github的webhook触发vps上的脚本\nid: 411\ncategories:\n  - linux\ndate: 2018/5/23 17:04:15     \ntags: [运维, github, webhook]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/webhook001s.jpg)<br/><br/>\n一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。\n\n<!--more-->\n\n## 环境\n+ VPS端(CENTOS6):NodeJs、Git\n+ WINDOWS端：Git\n+ GitHub\n+ Travis_Ci\n\n\n## 原理\n原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br/>\n![img](/img/xjy/webhook001.jpg)\n\n## webhook配置\ngithub端webhook主要配置的就是推送的地址，下面是我的配置:  <br/>\n![img](/img/xjy/webhook002.jpg)\n\n## vps端代码及配置\n+ **nodejs代码:**下面是vps端nodejs的代码hexoHook.js。\n\n``` py\nvar http = require('http');\n\nhttp.createServer(function (request, response) {\n    response.writeHead(200, {'Content-Type': 'text/plain'});\n    response.end('Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n');\n\t//开始准备调用脚本\n\tvar callfile = require('child_process');\n\tcallfile.execFile('/opt/gitCode/hexoHook.sh',null,null,function (err, stdout, stderr) {\n     if (stderr) {\n       console.log(stderr);\n     }\n     console.log(stdout);\n });\n}).listen(8888);\n```\n\n+ **sh脚本:**下面是vps端被nodejs调用的sh脚本。\n\n``` shell\ncd /opt/gitCode/xiajunyi.github.io\ngit fetch --all\ngit reset --hard origin/master\ngit pull origin master\n```\n\n+ **执行监听程序：**真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。\n\n``` shell\n[root@zyshops nodeTest]# node hexoHook.js \nServer running at http://127.0.0.1:8888/\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n + 641d46e...b41a89d master     -> origin/master  (forced update)\nFrom https://github.com/xiajunyi/xiajunyi.github.io\n * branch            master     -> FETCH_HEAD\n\nFetching origin\nHEAD is now at b41a89d docs:update articles\nAlready up-to-date.\n```\n\n## 效果\n当访问[http://hexo.xiajunyi.com/pages/p41.html#more](http://hexo.xiajunyi.com/pages/p41.html#more)看到这篇文章时,说明vps端已经同步到了最新的资源。\n\n## 补充(开机启动nodejs)\n在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：\n\n+ 安装forever，该程序保证nodeJs程序万一停止后能被重复启动\n\n```shell\nnpm install forever -g\n```\n\n+ 在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：\n\n```text\n\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n\"nodeserver\" [readonly] 62L, 1342C\n#!/bin/bash\n#\n# chkconfig: 345 99 90\n# description: this is a node server start script\n#\n# processname: node server\n#\n# Source function library.\n. /etc/rc.d/init.d/functions\nprog=\"node server\"\nRETVAL=0\n\nlog_file=/var/log/nodeserver.log\nsource /etc/profile\n\nstart() {\n        cd /root/nodeTest/\n        forever start hexoHook.js >> $log_file &\n        action \"Strating $prog\" /bin/true\n        return 0\n}\n\nstop() {\n        echo -n \"Stop $prog\"\n        killproc $prog\n        RETVAL=$?\n        echo\n}\n\ncase \"$1\" in\nstart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                start\n        else\n                export NODE_ENV=production\n                start\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production\"\n        fi\n        ;;\nstop)\n        stop\n        ;;\nrestart)\n        if [ $# -eq 2 ];then\n                export NODE_ENV=$2\n                stop\n                start\n        else\n                echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        fi\n        ;;\nstatus)\n        status $prog\n        RETVAL=$?\n        ;;\n*)\n        echo \"usage:$0 start [production|development|test]|stop|restart [production|development|test]|status\"\n        echo 0;\nesac\n\nexit 0\n```\n\n+ 用chkconfig加入到开机启动项\n\n```shell\nchkconfig --add nodeserver\n```\n\n+ 重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。\n\n``` shell\n[root@zyshops init.d]# ps -ef | grep node\nroot       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js\nroot       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js\n```","slug":"p41","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhs001wu8ve5i6qld1r","content":"<p><img src=\"/img/xjy/webhook001s.jpg\" alt=\"img\"><br><br><br>一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>VPS端(CENTOS6):NodeJs、Git</li>\n<li>WINDOWS端：Git</li>\n<li>GitHub</li>\n<li>Travis_Ci</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br><br><img src=\"/img/xjy/webhook001.jpg\" alt=\"img\"></p>\n<h2 id=\"webhook配置\"><a href=\"#webhook配置\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h2><p>github端webhook主要配置的就是推送的地址，下面是我的配置:  <br><br><img src=\"/img/xjy/webhook002.jpg\" alt=\"img\"></p>\n<h2 id=\"vps端代码及配置\"><a href=\"#vps端代码及配置\" class=\"headerlink\" title=\"vps端代码及配置\"></a>vps端代码及配置</h2><ul>\n<li><strong>nodejs代码:</strong>下面是vps端nodejs的代码hexoHook.js。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</span><br><span class=\"line\">    response.end(<span class=\"string\">'Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n'</span>);</span><br><span class=\"line\">\t//开始准备调用脚本</span><br><span class=\"line\">\tvar callfile = require(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\">\tcallfile.execFile(<span class=\"string\">'/opt/gitCode/hexoHook.sh'</span>,null,null,function (err, stdout, stderr) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (stderr) &#123;</span><br><span class=\"line\">       console.log(stderr);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     console.log(stdout);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>sh脚本:</strong>下面是vps端被nodejs调用的sh脚本。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/gitCode/xiajunyi.github.io</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>执行监听程序：</strong>真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops nodeTest]# node hexoHook.js </span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> + 641d46e...b41a89d master     -&gt; origin/master  (forced update)</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">Fetching origin</span><br><span class=\"line\">HEAD is now at b41a89d docs:update articles</span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>当访问<a href=\"http://hexo.xiajunyi.com/pages/p41.html#more\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/pages/p41.html#more</a>看到这篇文章时,说明vps端已经同步到了最新的资源。</p>\n<h2 id=\"补充-开机启动nodejs\"><a href=\"#补充-开机启动nodejs\" class=\"headerlink\" title=\"补充(开机启动nodejs)\"></a>补充(开机启动nodejs)</h2><p>在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：</p>\n<ul>\n<li>安装forever，该程序保证nodeJs程序万一停止后能被重复启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">&quot;nodeserver&quot; [readonly] 62L, 1342C</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                export NODE_ENV=production</span><br><span class=\"line\">                start</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                stop</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        echo 0;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用chkconfig加入到开机启动项</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add nodeserver</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops init.d]# ps -ef | grep node</span><br><span class=\"line\">root       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js</span><br><span class=\"line\">root       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/webhook001s.jpg\" alt=\"img\"><br><br><br>一直想测试一下github上的webhook的用法，今天利用webhook实现将部署在github上的hexo网站资源同步到vps上。之所以这么做，还有一部分原因是github会拒绝百度爬虫收录，如果网站只部署到github上，那么文章在百度上被搜索到的可能性就很小了。关于nginx、hexo、travis_ci配置及git的基础配置这里就不累述了，下面讲一下原理及webhook相关的主要代码和配置。</p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>VPS端(CENTOS6):NodeJs、Git</li>\n<li>WINDOWS端：Git</li>\n<li>GitHub</li>\n<li>Travis_Ci</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理主要是利用webhook推送http消息到vps端，然后vps端利用nodejs程序监听http消息，最后调用脚本执行git pull相关操作。具体流程如图所示：<br><br><img src=\"/img/xjy/webhook001.jpg\" alt=\"img\"></p>\n<h2 id=\"webhook配置\"><a href=\"#webhook配置\" class=\"headerlink\" title=\"webhook配置\"></a>webhook配置</h2><p>github端webhook主要配置的就是推送的地址，下面是我的配置:  <br><br><img src=\"/img/xjy/webhook002.jpg\" alt=\"img\"></p>\n<h2 id=\"vps端代码及配置\"><a href=\"#vps端代码及配置\" class=\"headerlink\" title=\"vps端代码及配置\"></a>vps端代码及配置</h2><ul>\n<li><strong>nodejs代码:</strong>下面是vps端nodejs的代码hexoHook.js。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function (request, response) &#123;</span><br><span class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</span><br><span class=\"line\">    response.end(<span class=\"string\">'Hi! xiajunyi\\'s nodeJs Sever is Ok!\\n'</span>);</span><br><span class=\"line\">\t//开始准备调用脚本</span><br><span class=\"line\">\tvar callfile = require(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\">\tcallfile.execFile(<span class=\"string\">'/opt/gitCode/hexoHook.sh'</span>,null,null,function (err, stdout, stderr) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (stderr) &#123;</span><br><span class=\"line\">       console.log(stderr);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     console.log(stdout);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>sh脚本:</strong>下面是vps端被nodejs调用的sh脚本。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/gitCode/xiajunyi.github.io</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin/master</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>执行监听程序：</strong>真实服务的时候记得把该程序hexoHook.js加入开机启动项，下面是监听到的变动。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops nodeTest]# node hexoHook.js </span><br><span class=\"line\">Server running at http://127.0.0.1:8888/</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> + 641d46e...b41a89d master     -&gt; origin/master  (forced update)</span><br><span class=\"line\">From https://github.com/xiajunyi/xiajunyi.github.io</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"></span><br><span class=\"line\">Fetching origin</span><br><span class=\"line\">HEAD is now at b41a89d docs:update articles</span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>当访问<a href=\"http://hexo.xiajunyi.com/pages/p41.html#more\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/pages/p41.html#more</a>看到这篇文章时,说明vps端已经同步到了最新的资源。</p>\n<h2 id=\"补充-开机启动nodejs\"><a href=\"#补充-开机启动nodejs\" class=\"headerlink\" title=\"补充(开机启动nodejs)\"></a>补充(开机启动nodejs)</h2><p>在linux里开启启动nodejs程序还不是太简单，直接在/etc/rc.d/rc.local里配置貌似不能生效，具体原因暂不详。在找了网上的一些方法以后，发现下面这种方法是可行的：</p>\n<ul>\n<li>安装forever，该程序保证nodeJs程序万一停止后能被重复启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install forever -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在/etc/rc.d/init.d中加入nodeserver文件，记得把该文件以及需要调用的文件赋755权限，用的时候只需要修改start方法中的内容就行，我的内容如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">&quot;nodeserver&quot; [readonly] 62L, 1342C</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: 345 99 90</span><br><span class=\"line\"># description: this is a node server start script</span><br><span class=\"line\">#</span><br><span class=\"line\"># processname: node server</span><br><span class=\"line\">#</span><br><span class=\"line\"># Source function library.</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\">prog=&quot;node server&quot;</span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"></span><br><span class=\"line\">log_file=/var/log/nodeserver.log</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">        cd /root/nodeTest/</span><br><span class=\"line\">        forever start hexoHook.js &gt;&gt; $log_file &amp;</span><br><span class=\"line\">        action &quot;Strating $prog&quot; /bin/true</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        echo -n &quot;Stop $prog&quot;</span><br><span class=\"line\">        killproc $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                export NODE_ENV=production</span><br><span class=\"line\">                start</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status default production&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">        if [ $# -eq 2 ];then</span><br><span class=\"line\">                export NODE_ENV=$2</span><br><span class=\"line\">                stop</span><br><span class=\"line\">                start</span><br><span class=\"line\">        else</span><br><span class=\"line\">                echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">status)</span><br><span class=\"line\">        status $prog</span><br><span class=\"line\">        RETVAL=$?</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo &quot;usage:$0 start [production|development|test]|stop|restart [production|development|test]|status&quot;</span><br><span class=\"line\">        echo 0;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用chkconfig加入到开机启动项</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add nodeserver</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启后查看一下node进程，发现有两个相关进程在启动，像下面这样一个是forever进程870，另一个是forever的子进程876，说明已经开机启动成功。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zyshops init.d]# ps -ef | grep node</span><br><span class=\"line\">root       870     1  0 09:35 ?        00:00:00 /usr/local/node/bin/node /usr/local/node/lib/node_modules/forever/bin/monitor hexoHook.js</span><br><span class=\"line\">root       876   870  0 09:35 ?        00:00:00 /usr/local/node/bin/node /root/nodeTest/hexoHook.js</span><br></pre></td></tr></table></figure>"},{"title":"Gitlab的第一个Runners配置(shared类型)","id":"412","date":"2018-05-23T09:04:15.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/p42001s.jpg)<br/><br/>\n在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。\n\n<!--more-->\n\n## 管理员相关操作\n该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。\n\n+ 开启自动部署的功能\n![img](/img/xjy/p42002.jpg)\n\n+ 查看当前shared类型runner的token值\n![img](/img/xjy/p42003.jpg)\n\n## gitlab-runner的安装\n该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。\n\n+ 获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件\n```shell\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n```\n+ 安装gitlab-ci-multi-runner\n```shell\nyum install gitlab-ci-multi-runner\n```\n\n+ 注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token\n\n```shell\n[root@localhost ~]# gitlab-ci-multi-runner register\nRunning in system-mode.                            \n                                                   \nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xiajunyi.com\nPlease enter the gitlab-ci token for this runner:\nnN-V4oyoSjdiuiC_ehpZ\nPlease enter the gitlab-ci description for this runner:\n[localhost.localdomain]: my-runner\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]:    \nRegistering runner... succeeded                     runner=nN-V4oyo\nPlease enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n```\n+ 刷新admin用户的页面，发现runner已经被关联\n\n![img](/img/xjy/p42001.jpg)\n\n## 普通用户的使用\n普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。\n![img](/img/xjy/p42004.jpg)\n","source":"_posts/p42.md","raw":"---\ntitle: Gitlab的第一个Runners配置(shared类型)\nid: 412\ncategories:\n  - linux\ndate: 2018/5/23 17:04:15     \ntags: [运维, gitlab]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/p42001s.jpg)<br/><br/>\n在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。\n\n<!--more-->\n\n## 管理员相关操作\n该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。\n\n+ 开启自动部署的功能\n![img](/img/xjy/p42002.jpg)\n\n+ 查看当前shared类型runner的token值\n![img](/img/xjy/p42003.jpg)\n\n## gitlab-runner的安装\n该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。\n\n+ 获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件\n```shell\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash\n```\n+ 安装gitlab-ci-multi-runner\n```shell\nyum install gitlab-ci-multi-runner\n```\n\n+ 注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token\n\n```shell\n[root@localhost ~]# gitlab-ci-multi-runner register\nRunning in system-mode.                            \n                                                   \nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.xiajunyi.com\nPlease enter the gitlab-ci token for this runner:\nnN-V4oyoSjdiuiC_ehpZ\nPlease enter the gitlab-ci description for this runner:\n[localhost.localdomain]: my-runner\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag\nWhether to run untagged builds [true/false]:\n[false]: true\nWhether to lock Runner to current project [true/false]:\n[false]:    \nRegistering runner... succeeded                     runner=nN-V4oyo\nPlease enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:\nshell\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n```\n+ 刷新admin用户的页面，发现runner已经被关联\n\n![img](/img/xjy/p42001.jpg)\n\n## 普通用户的使用\n普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。\n![img](/img/xjy/p42004.jpg)\n","slug":"p42","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhw0020u8ve98s039pk","content":"<p><img src=\"/img/xjy/p42001s.jpg\" alt=\"img\"><br><br><br>在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。</p>\n<a id=\"more\"></a>\n<h2 id=\"管理员相关操作\"><a href=\"#管理员相关操作\" class=\"headerlink\" title=\"管理员相关操作\"></a>管理员相关操作</h2><p>该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。</p>\n<ul>\n<li><p>开启自动部署的功能<br><img src=\"/img/xjy/p42002.jpg\" alt=\"img\"></p>\n</li>\n<li><p>查看当前shared类型runner的token值<br><img src=\"/img/xjy/p42003.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"gitlab-runner的安装\"><a href=\"#gitlab-runner的安装\" class=\"headerlink\" title=\"gitlab-runner的安装\"></a>gitlab-runner的安装</h2><p>该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。</p>\n<ul>\n<li><p>获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装gitlab-ci-multi-runner</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ci-multi-runner register</span><br><span class=\"line\">Running in system-mode.                            </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class=\"line\">http://gitlab.xiajunyi.com</span><br><span class=\"line\">Please enter the gitlab-ci token for this runner:</span><br><span class=\"line\">nN-V4oyoSjdiuiC_ehpZ</span><br><span class=\"line\">Please enter the gitlab-ci description for this runner:</span><br><span class=\"line\">[localhost.localdomain]: my-runner</span><br><span class=\"line\">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class=\"line\">my-tag</span><br><span class=\"line\">Whether to run untagged builds [true/false]:</span><br><span class=\"line\">[false]: true</span><br><span class=\"line\">Whether to lock Runner to current project [true/false]:</span><br><span class=\"line\">[false]:    </span><br><span class=\"line\">Registering runner... succeeded                     runner=nN-V4oyo</span><br><span class=\"line\">Please enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:</span><br><span class=\"line\">shell</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>\n<ul>\n<li>刷新admin用户的页面，发现runner已经被关联</li>\n</ul>\n<p><img src=\"/img/xjy/p42001.jpg\" alt=\"img\"></p>\n<h2 id=\"普通用户的使用\"><a href=\"#普通用户的使用\" class=\"headerlink\" title=\"普通用户的使用\"></a>普通用户的使用</h2><p>普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。<br><img src=\"/img/xjy/p42004.jpg\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p42001s.jpg\" alt=\"img\"><br><br><br>在安装和配置完gitlab后，普通的代码管理功能都能正常使用了，现在配置一下gitlab runner用于代码的自动编译和部署。我下面的实例中定义的是shared类型的runner，所有用户可以共享。</p>","more":"<h2 id=\"管理员相关操作\"><a href=\"#管理员相关操作\" class=\"headerlink\" title=\"管理员相关操作\"></a>管理员相关操作</h2><p>该步骤不影响gitlab-runner的安装，只是为后续gitlab-runner的配置提供信息，先在浏览器以管理员登录进行相关操作。</p>\n<ul>\n<li><p>开启自动部署的功能<br><img src=\"/img/xjy/p42002.jpg\" alt=\"img\"></p>\n</li>\n<li><p>查看当前shared类型runner的token值<br><img src=\"/img/xjy/p42003.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"gitlab-runner的安装\"><a href=\"#gitlab-runner的安装\" class=\"headerlink\" title=\"gitlab-runner的安装\"></a>gitlab-runner的安装</h2><p>该步骤是在负责runner的机器上安装gitlab-runner，因经济水平有限，本人没有购买自己的服务器，gitlab所有学习都是在vm虚拟机里操作的。为了方面操作，我的gitlab-runner直接安装在了与gitlab同一个虚拟服务器上，但原理相同，与在其他机器上的操作不会有什么区别。</p>\n<ul>\n<li><p>获取gitlab-ci-multi-runner包库，否则直接yum不一定找到软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装gitlab-ci-multi-runner</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册该runner关联到gitlab,注册时要用到之前登录管理员用户查看到的token</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ci-multi-runner register</span><br><span class=\"line\">Running in system-mode.                            </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class=\"line\">http://gitlab.xiajunyi.com</span><br><span class=\"line\">Please enter the gitlab-ci token for this runner:</span><br><span class=\"line\">nN-V4oyoSjdiuiC_ehpZ</span><br><span class=\"line\">Please enter the gitlab-ci description for this runner:</span><br><span class=\"line\">[localhost.localdomain]: my-runner</span><br><span class=\"line\">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class=\"line\">my-tag</span><br><span class=\"line\">Whether to run untagged builds [true/false]:</span><br><span class=\"line\">[false]: true</span><br><span class=\"line\">Whether to lock Runner to current project [true/false]:</span><br><span class=\"line\">[false]:    </span><br><span class=\"line\">Registering runner... succeeded                     runner=nN-V4oyo</span><br><span class=\"line\">Please enter the executor: ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, shell, docker-ssh:</span><br><span class=\"line\">shell</span><br><span class=\"line\">Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure>\n<ul>\n<li>刷新admin用户的页面，发现runner已经被关联</li>\n</ul>\n<p><img src=\"/img/xjy/p42001.jpg\" alt=\"img\"></p>\n<h2 id=\"普通用户的使用\"><a href=\"#普通用户的使用\" class=\"headerlink\" title=\"普通用户的使用\"></a>普通用户的使用</h2><p>普通用户现在可以共享该runner进行项目的编译和部署了，编译和部署过程在自己项目的根目录.gitlab-ci.yml文件中配置即可。编译部署完成后的页面如下图，想了解具体失败原因可以层层点击进入各个阶段进行具体日志的查看。<br><img src=\"/img/xjy/p42004.jpg\" alt=\"img\"></p>"},{"title":"Docker初学（三）docker-compose的使用","id":"407","date":"2018-05-31T02:17:36.000Z","toc":true,"declare":true,"_content":"![img](/img/xjy/p43001s.jpg)<br/><br/>\n前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。\n\n<!--more-->\n\n## docker-compose是什么 ##\ndocker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。\n\n## docker-compose运行方式\ndocker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:\n1. dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用\n2. 在docker-compose.yml中定义你的服务\n3. 最后运行docker-compose up命令，将会启动和运行你的整个应用程序\n\n## docker-compose安装\n最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至[原地址](https://github.com/docker/compose/releases)查看最新的curl命令。\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n如果启动时报如下错误,说明curl安装方式下载的包不完整。\n```text\n[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg\n```\n解决步骤：\n1. 进入[原地址](https://github.com/docker/compose/releases)手动下载最新的docker-compose-Linux-x86_64\n2. 找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose\n3. 赋权限\n```shell\nchmod +x /usr/local/bin/docker-compose\n```\n## docker-compose配置\n截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解[最新的配置规则](https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md)，下面是摘出供参考的version3的配置例子:\n\n```text\nversion: \"3\"\nservices:\nredis:\nimage: redis:alpine\nports:\n- \"6379\"\nnetworks:\n- frontend\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\ndb:\nimage: postgres:9.4\nvolumes:\n- db-data:/var/lib/postgresql/data\nnetworks:\n- backend\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nvote:\nimage: dockersamples/examplevotingapp_vote:before\nports:\n- \"5000:80\"\nnetworks:\n- frontend\ndepends_on:\n- redis\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\nrestart_policy:\ncondition: on-failure\n\n\nresult:\nimage: dockersamples/examplevotingapp_result:before\nports:\n- \"5001:80\"\nnetworks:\n- backend\ndepends_on:\n- db\ndeploy:\nreplicas: 1\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\nworker:\nimage: dockersamples/examplevotingapp_worker\nnetworks:\n- frontend\n- backend\ndeploy:\nmode: replicated\nreplicas: 1\nlabels: [APP=VOTING]\nrestart_policy:\ncondition: on-failure\ndelay: 10s\nmax_attempts: 3\nwindow: 120s\nplacement:\nconstraints: [node.role == manager]\n\n\nvisualizer:\nimage: dockersamples/visualizer:stable\nports:\n- \"8080:8080\"\nstop_grace_period: 1m30s\nvolumes:\n- \"/var/run/docker.sock:/var/run/docker.sock\"\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nnetworks:\nfrontend:\nbackend:\n\n\nvolumes:\ndb-data:\n```\n## docker-compose使用\n启动容器：\n```shell\ndocker-compose up -d\n```\n停止容器：\n```shell\ndocker-compose stop\n```\n## *.参考资料 \n[https://github.com/docker/compose](https://github.com/docker/compose)\n\n\n\n\n","source":"_posts/p43.md","raw":"---\ntitle: Docker初学（三）docker-compose的使用\nid: 407\ncategories:\n  - docker\n  - 编程语言\ndate: 2018/5/31 10:17:36  \ntags: [运维, 编程, docker, linux]\ntoc: true\ndeclare: true\n---\n![img](/img/xjy/p43001s.jpg)<br/><br/>\n前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。\n\n<!--more-->\n\n## docker-compose是什么 ##\ndocker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。\n\n## docker-compose运行方式\ndocker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:\n1. dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用\n2. 在docker-compose.yml中定义你的服务\n3. 最后运行docker-compose up命令，将会启动和运行你的整个应用程序\n\n## docker-compose安装\n最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至[原地址](https://github.com/docker/compose/releases)查看最新的curl命令。\n```shell\ncurl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n如果启动时报如下错误,说明curl安装方式下载的包不完整。\n```text\n[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg\n```\n解决步骤：\n1. 进入[原地址](https://github.com/docker/compose/releases)手动下载最新的docker-compose-Linux-x86_64\n2. 找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose\n3. 赋权限\n```shell\nchmod +x /usr/local/bin/docker-compose\n```\n## docker-compose配置\n截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解[最新的配置规则](https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md)，下面是摘出供参考的version3的配置例子:\n\n```text\nversion: \"3\"\nservices:\nredis:\nimage: redis:alpine\nports:\n- \"6379\"\nnetworks:\n- frontend\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\ndb:\nimage: postgres:9.4\nvolumes:\n- db-data:/var/lib/postgresql/data\nnetworks:\n- backend\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nvote:\nimage: dockersamples/examplevotingapp_vote:before\nports:\n- \"5000:80\"\nnetworks:\n- frontend\ndepends_on:\n- redis\ndeploy:\nreplicas: 2\nupdate_config:\nparallelism: 2\nrestart_policy:\ncondition: on-failure\n\n\nresult:\nimage: dockersamples/examplevotingapp_result:before\nports:\n- \"5001:80\"\nnetworks:\n- backend\ndepends_on:\n- db\ndeploy:\nreplicas: 1\nupdate_config:\nparallelism: 2\ndelay: 10s\nrestart_policy:\ncondition: on-failure\n\n\nworker:\nimage: dockersamples/examplevotingapp_worker\nnetworks:\n- frontend\n- backend\ndeploy:\nmode: replicated\nreplicas: 1\nlabels: [APP=VOTING]\nrestart_policy:\ncondition: on-failure\ndelay: 10s\nmax_attempts: 3\nwindow: 120s\nplacement:\nconstraints: [node.role == manager]\n\n\nvisualizer:\nimage: dockersamples/visualizer:stable\nports:\n- \"8080:8080\"\nstop_grace_period: 1m30s\nvolumes:\n- \"/var/run/docker.sock:/var/run/docker.sock\"\ndeploy:\nplacement:\nconstraints: [node.role == manager]\n\n\nnetworks:\nfrontend:\nbackend:\n\n\nvolumes:\ndb-data:\n```\n## docker-compose使用\n启动容器：\n```shell\ndocker-compose up -d\n```\n停止容器：\n```shell\ndocker-compose stop\n```\n## *.参考资料 \n[https://github.com/docker/compose](https://github.com/docker/compose)\n\n\n\n\n","slug":"p43","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jhz0023u8ve0o5ufpj9","content":"<p><img src=\"/img/xjy/p43001s.jpg\" alt=\"img\"><br><br><br>前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。</p>\n<a id=\"more\"></a>\n<h2 id=\"docker-compose是什么\"><a href=\"#docker-compose是什么\" class=\"headerlink\" title=\"docker-compose是什么\"></a>docker-compose是什么</h2><p>docker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。</p>\n<h2 id=\"docker-compose运行方式\"><a href=\"#docker-compose运行方式\" class=\"headerlink\" title=\"docker-compose运行方式\"></a>docker-compose运行方式</h2><p>docker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:</p>\n<ol>\n<li>dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用</li>\n<li>在docker-compose.yml中定义你的服务</li>\n<li>最后运行docker-compose up命令，将会启动和运行你的整个应用程序</li>\n</ol>\n<h2 id=\"docker-compose安装\"><a href=\"#docker-compose安装\" class=\"headerlink\" title=\"docker-compose安装\"></a>docker-compose安装</h2><p>最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>查看最新的curl命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时报如下错误,说明curl安装方式下载的包不完整。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg</span><br></pre></td></tr></table></figure></p>\n<p>解决步骤：</p>\n<ol>\n<li>进入<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>手动下载最新的docker-compose-Linux-x86_64</li>\n<li>找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose</li>\n<li>赋权限<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"docker-compose配置\"><a href=\"#docker-compose配置\" class=\"headerlink\" title=\"docker-compose配置\"></a>docker-compose配置</h2><p>截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解<a href=\"https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md\" target=\"_blank\" rel=\"noopener\">最新的配置规则</a>，下面是摘出供参考的version3的配置例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">redis:</span><br><span class=\"line\">image: redis:alpine</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;6379&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db:</span><br><span class=\"line\">image: postgres:9.4</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- db-data:/var/lib/postgresql/data</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vote:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_vote:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5000:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- redis</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_result:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5001:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- db</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">worker:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_worker</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">mode: replicated</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">labels: [APP=VOTING]</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">max_attempts: 3</span><br><span class=\"line\">window: 120s</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">visualizer:</span><br><span class=\"line\">image: dockersamples/visualizer:stable</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;8080:8080&quot;</span><br><span class=\"line\">stop_grace_period: 1m30s</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">frontend:</span><br><span class=\"line\">backend:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">db-data:</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose使用\"><a href=\"#docker-compose使用\" class=\"headerlink\" title=\"docker-compose使用\"></a>docker-compose使用</h2><p>启动容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>停止容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://github.com/docker/compose\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p43001s.jpg\" alt=\"img\"><br><br><br>前面学习了docker启动容器的操作，下面学习一下如何使用docker-compose编排多个容器的启动规则。</p>","more":"<h2 id=\"docker-compose是什么\"><a href=\"#docker-compose是什么\" class=\"headerlink\" title=\"docker-compose是什么\"></a>docker-compose是什么</h2><p>docker-compose是定义和运行多容器docker应用程序的工具。通过编写，你可以使用yml文件来配置应用程序的服务。然后，使用单个命令，你就可以从配置中创建并启动所有服务。</p>\n<h2 id=\"docker-compose运行方式\"><a href=\"#docker-compose运行方式\" class=\"headerlink\" title=\"docker-compose运行方式\"></a>docker-compose运行方式</h2><p>docker-compose对于开发、测试和分级环境以及CI工作流非常有用，它的运行可分为如下三大步:</p>\n<ol>\n<li>dockerfile定义应用程序的环境，方面应用程序再任何地方都可以重用</li>\n<li>在docker-compose.yml中定义你的服务</li>\n<li>最后运行docker-compose up命令，将会启动和运行你的整个应用程序</li>\n</ol>\n<h2 id=\"docker-compose安装\"><a href=\"#docker-compose安装\" class=\"headerlink\" title=\"docker-compose安装\"></a>docker-compose安装</h2><p>最简便的方式是用官方提供的curl方式安装，如需最新的版本，可至<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>查看最新的curl命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时报如下错误,说明curl安装方式下载的包不完整。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[60791] Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg</span><br></pre></td></tr></table></figure></p>\n<p>解决步骤：</p>\n<ol>\n<li>进入<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">原地址</a>手动下载最新的docker-compose-Linux-x86_64</li>\n<li>找到/usr/local/bin/docker-compose，用上面的文件替换，记得仍重命名为docker-compose</li>\n<li>赋权限<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"docker-compose配置\"><a href=\"#docker-compose配置\" class=\"headerlink\" title=\"docker-compose配置\"></a>docker-compose配置</h2><p>截至目前，docker-compose的yml文件配置已经更新到version3了，可去原地址了解<a href=\"https://github.com/docker/docker.github.io/blob/master/compose/compose-file/index.md\" target=\"_blank\" rel=\"noopener\">最新的配置规则</a>，下面是摘出供参考的version3的配置例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">redis:</span><br><span class=\"line\">image: redis:alpine</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;6379&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db:</span><br><span class=\"line\">image: postgres:9.4</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- db-data:/var/lib/postgresql/data</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vote:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_vote:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5000:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- redis</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 2</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_result:before</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;5001:80&quot;</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- backend</span><br><span class=\"line\">depends_on:</span><br><span class=\"line\">- db</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">update_config:</span><br><span class=\"line\">parallelism: 2</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">worker:</span><br><span class=\"line\">image: dockersamples/examplevotingapp_worker</span><br><span class=\"line\">networks:</span><br><span class=\"line\">- frontend</span><br><span class=\"line\">- backend</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">mode: replicated</span><br><span class=\"line\">replicas: 1</span><br><span class=\"line\">labels: [APP=VOTING]</span><br><span class=\"line\">restart_policy:</span><br><span class=\"line\">condition: on-failure</span><br><span class=\"line\">delay: 10s</span><br><span class=\"line\">max_attempts: 3</span><br><span class=\"line\">window: 120s</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">visualizer:</span><br><span class=\"line\">image: dockersamples/visualizer:stable</span><br><span class=\"line\">ports:</span><br><span class=\"line\">- &quot;8080:8080&quot;</span><br><span class=\"line\">stop_grace_period: 1m30s</span><br><span class=\"line\">volumes:</span><br><span class=\"line\">- &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">placement:</span><br><span class=\"line\">constraints: [node.role == manager]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">frontend:</span><br><span class=\"line\">backend:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">db-data:</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker-compose使用\"><a href=\"#docker-compose使用\" class=\"headerlink\" title=\"docker-compose使用\"></a>docker-compose使用</h2><p>启动容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>停止容器：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"*.参考资料\"></a>*.参考资料</h2><p><a href=\"https://github.com/docker/compose\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose</a></p>"},{"title":"几张思维导图","id":"409","date":"2017-06-29T06:55:05.000Z","toc":true,"declare":true,"_content":"![img](/img/xjy/p46000s.jpg)<br/>\n\n\n+ 收集自[github](https://github.com/csy512889371/learnDoc/tree/master/思维导图)\n\n学习一种技术，需要对该技术有个整体的认识，还需要有清晰的学习思路，这样有助于更快更系统的提升技术能力。本人搜集了一些思维导图，主要为了以后方便查找，感兴趣同学的可以保存了放大来看哈！\n\n<!--more-->\n\n## 设计模式 ##\n\n![img](/img/xjy/p46001.png)\n\n## Java虚拟机 ##\n\n![img](/img/xjy/p46002.png)\n\n## Java并发 ##\n\n![img](/img/xjy/p46003.png)\n\n## Sring ##\n\n![img](/img/xjy/p46004.png)\n\n## Sring Boot ##\n\n![img](/img/xjy/p46005.png)\n\n## Sring Cloud ##\n\n![img](/img/xjy/p46006.png)\n\n## Docker ##\n\n![img](/img/xjy/p46007.png)\n\n## Linux ##\n\n![img](/img/xjy/p46008.png)\n\n\n先到这里吧，后续有搜集再继续更新。\n\n## * 参考链接 \n[https://github.com/csy512889371/learnDoc/tree/master/思维导图](https://github.com/csy512889371/learnDoc/tree/master/思维导图)\n\n\n\n\n","source":"_posts/p46.md","raw":"---\ntitle: 几张思维导图\nid: 409\ncategories:\n  - 闲谈\n  - 编程语言\ndate: 2017/6/29 14:55:05   \ntags: [闲谈, 编程]\ntoc: true\ndeclare: true\n---\n![img](/img/xjy/p46000s.jpg)<br/>\n\n\n+ 收集自[github](https://github.com/csy512889371/learnDoc/tree/master/思维导图)\n\n学习一种技术，需要对该技术有个整体的认识，还需要有清晰的学习思路，这样有助于更快更系统的提升技术能力。本人搜集了一些思维导图，主要为了以后方便查找，感兴趣同学的可以保存了放大来看哈！\n\n<!--more-->\n\n## 设计模式 ##\n\n![img](/img/xjy/p46001.png)\n\n## Java虚拟机 ##\n\n![img](/img/xjy/p46002.png)\n\n## Java并发 ##\n\n![img](/img/xjy/p46003.png)\n\n## Sring ##\n\n![img](/img/xjy/p46004.png)\n\n## Sring Boot ##\n\n![img](/img/xjy/p46005.png)\n\n## Sring Cloud ##\n\n![img](/img/xjy/p46006.png)\n\n## Docker ##\n\n![img](/img/xjy/p46007.png)\n\n## Linux ##\n\n![img](/img/xjy/p46008.png)\n\n\n先到这里吧，后续有搜集再继续更新。\n\n## * 参考链接 \n[https://github.com/csy512889371/learnDoc/tree/master/思维导图](https://github.com/csy512889371/learnDoc/tree/master/思维导图)\n\n\n\n\n","slug":"p46","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3ji20027u8veax62sinc","content":"<p><img src=\"/img/xjy/p46000s.jpg\" alt=\"img\"><br></p>\n<ul>\n<li>收集自<a href=\"https://github.com/csy512889371/learnDoc/tree/master/思维导图\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n<p>学习一种技术，需要对该技术有个整体的认识，还需要有清晰的学习思路，这样有助于更快更系统的提升技术能力。本人搜集了一些思维导图，主要为了以后方便查找，感兴趣同学的可以保存了放大来看哈！</p>\n<a id=\"more\"></a>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p><img src=\"/img/xjy/p46001.png\" alt=\"img\"></p>\n<h2 id=\"Java虚拟机\"><a href=\"#Java虚拟机\" class=\"headerlink\" title=\"Java虚拟机\"></a>Java虚拟机</h2><p><img src=\"/img/xjy/p46002.png\" alt=\"img\"></p>\n<h2 id=\"Java并发\"><a href=\"#Java并发\" class=\"headerlink\" title=\"Java并发\"></a>Java并发</h2><p><img src=\"/img/xjy/p46003.png\" alt=\"img\"></p>\n<h2 id=\"Sring\"><a href=\"#Sring\" class=\"headerlink\" title=\"Sring\"></a>Sring</h2><p><img src=\"/img/xjy/p46004.png\" alt=\"img\"></p>\n<h2 id=\"Sring-Boot\"><a href=\"#Sring-Boot\" class=\"headerlink\" title=\"Sring Boot\"></a>Sring Boot</h2><p><img src=\"/img/xjy/p46005.png\" alt=\"img\"></p>\n<h2 id=\"Sring-Cloud\"><a href=\"#Sring-Cloud\" class=\"headerlink\" title=\"Sring Cloud\"></a>Sring Cloud</h2><p><img src=\"/img/xjy/p46006.png\" alt=\"img\"></p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p><img src=\"/img/xjy/p46007.png\" alt=\"img\"></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p><img src=\"/img/xjy/p46008.png\" alt=\"img\"></p>\n<p>先到这里吧，后续有搜集再继续更新。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"* 参考链接\"></a>* 参考链接</h2><p><a href=\"https://github.com/csy512889371/learnDoc/tree/master/思维导图\" target=\"_blank\" rel=\"noopener\">https://github.com/csy512889371/learnDoc/tree/master/思维导图</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p46000s.jpg\" alt=\"img\"><br></p>\n<ul>\n<li>收集自<a href=\"https://github.com/csy512889371/learnDoc/tree/master/思维导图\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n<p>学习一种技术，需要对该技术有个整体的认识，还需要有清晰的学习思路，这样有助于更快更系统的提升技术能力。本人搜集了一些思维导图，主要为了以后方便查找，感兴趣同学的可以保存了放大来看哈！</p>","more":"<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p><img src=\"/img/xjy/p46001.png\" alt=\"img\"></p>\n<h2 id=\"Java虚拟机\"><a href=\"#Java虚拟机\" class=\"headerlink\" title=\"Java虚拟机\"></a>Java虚拟机</h2><p><img src=\"/img/xjy/p46002.png\" alt=\"img\"></p>\n<h2 id=\"Java并发\"><a href=\"#Java并发\" class=\"headerlink\" title=\"Java并发\"></a>Java并发</h2><p><img src=\"/img/xjy/p46003.png\" alt=\"img\"></p>\n<h2 id=\"Sring\"><a href=\"#Sring\" class=\"headerlink\" title=\"Sring\"></a>Sring</h2><p><img src=\"/img/xjy/p46004.png\" alt=\"img\"></p>\n<h2 id=\"Sring-Boot\"><a href=\"#Sring-Boot\" class=\"headerlink\" title=\"Sring Boot\"></a>Sring Boot</h2><p><img src=\"/img/xjy/p46005.png\" alt=\"img\"></p>\n<h2 id=\"Sring-Cloud\"><a href=\"#Sring-Cloud\" class=\"headerlink\" title=\"Sring Cloud\"></a>Sring Cloud</h2><p><img src=\"/img/xjy/p46006.png\" alt=\"img\"></p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p><img src=\"/img/xjy/p46007.png\" alt=\"img\"></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p><img src=\"/img/xjy/p46008.png\" alt=\"img\"></p>\n<p>先到这里吧，后续有搜集再继续更新。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"* 参考链接\"></a>* 参考链接</h2><p><a href=\"https://github.com/csy512889371/learnDoc/tree/master/思维导图\" target=\"_blank\" rel=\"noopener\">https://github.com/csy512889371/learnDoc/tree/master/思维导图</a></p>"},{"title":"Gitlab安装及配置","id":"410","date":"2018-05-20T05:34:34.000Z","declare":true,"toc":true,"_content":"![img](/img/xjy/gitlab1s.jpg)<br/><br/>\n一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照[官网](https://about.gitlab.com/installation/#centos-7)的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。\n\n<!--more-->\n\n## 安装\n允许http和ssh通过防火墙\n``` shell\nsudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld \n```\n\n安装 Postfix用于后面的gitlab发送邮件\n```shell\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n增加gitlab包的库\n```shell\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n```\n\n可以执行安装了\n``` shell\nsudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee\n```\n\n## 运行及维护\n执行启动：\n```shell\ngitlab-ctl start\n```\n想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：\n```text\n[root@localhost ~]# gitlab-ctl status\nrun: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s\nrun: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s\nrun: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s\nrun: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s\nrun: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s\nrun: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s\nrun: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s\nrun: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s\nrun: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s\nrun: redis: (pid 672) 28346s; run: log: (pid 670) 28346s\nrun: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s\nrun: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s\nrun: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s\n```\n有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：\n```shell\n#查看相关运行日志\ngitlab-ctl tail\n#查看网络访问日志\ngitlab-ctl tail nginx\n```\n\n## 界面及配置\n第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。\n**后续随着学习的深入，我会再更新这一部分。。。**\n![img](/img/xjy/gitlab1.jpg)\n\n<font color=\"red\">**已更新的配置部分:**</font>\n+ [Gitlab的第一个Runners配置(shared类型)](http://localhost:4000/pages/p42.html)\n## 问题记录\n在安装的过程中遇到了两个问题，也在这里记录一下吧:\n+ 状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。\n+ 能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。\n\n\n## *.参考链接 \n+ [https://blog.devzeng.com/blog/simple-usage-of-gitlab.html](\nhttps://blog.devzeng.com/blog/simple-usage-of-gitlab.html)","source":"_posts/p40.md","raw":"---\ntitle: Gitlab安装及配置\nid: 410\ncategories:\n  - linux\ndate: 2018/5/20 13:34:34     \ntags: [运维, gitlab, linux]\ndeclare: true\ntoc: true\n---\n![img](/img/xjy/gitlab1s.jpg)<br/><br/>\n一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照[官网](https://about.gitlab.com/installation/#centos-7)的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。\n\n<!--more-->\n\n## 安装\n允许http和ssh通过防火墙\n``` shell\nsudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld \n```\n\n安装 Postfix用于后面的gitlab发送邮件\n```shell\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n```\n\n增加gitlab包的库\n```shell\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n```\n\n可以执行安装了\n``` shell\nsudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee\n```\n\n## 运行及维护\n执行启动：\n```shell\ngitlab-ctl start\n```\n想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：\n```text\n[root@localhost ~]# gitlab-ctl status\nrun: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s\nrun: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s\nrun: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s\nrun: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s\nrun: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s\nrun: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s\nrun: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s\nrun: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s\nrun: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s\nrun: redis: (pid 672) 28346s; run: log: (pid 670) 28346s\nrun: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s\nrun: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s\nrun: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s\n```\n有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：\n```shell\n#查看相关运行日志\ngitlab-ctl tail\n#查看网络访问日志\ngitlab-ctl tail nginx\n```\n\n## 界面及配置\n第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。\n**后续随着学习的深入，我会再更新这一部分。。。**\n![img](/img/xjy/gitlab1.jpg)\n\n<font color=\"red\">**已更新的配置部分:**</font>\n+ [Gitlab的第一个Runners配置(shared类型)](http://localhost:4000/pages/p42.html)\n## 问题记录\n在安装的过程中遇到了两个问题，也在这里记录一下吧:\n+ 状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。\n+ 能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。\n\n\n## *.参考链接 \n+ [https://blog.devzeng.com/blog/simple-usage-of-gitlab.html](\nhttps://blog.devzeng.com/blog/simple-usage-of-gitlab.html)","slug":"p40","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3ji60029u8vel60xlb3z","content":"<p><img src=\"/img/xjy/gitlab1s.jpg\" alt=\"img\"><br><br><br>一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照<a href=\"https://about.gitlab.com/installation/#centos-7\" target=\"_blank\" rel=\"noopener\">官网</a>的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>允许http和ssh通过防火墙<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></p>\n<p>安装 Postfix用于后面的gitlab发送邮件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure></p>\n<p>增加gitlab包的库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>\n<p>可以执行安装了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行及维护\"><a href=\"#运行及维护\" class=\"headerlink\" title=\"运行及维护\"></a>运行及维护</h2><p>执行启动：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl start</span><br></pre></td></tr></table></figure></p>\n<p>想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ctl status</span><br><span class=\"line\">run: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s</span><br><span class=\"line\">run: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s</span><br><span class=\"line\">run: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s</span><br><span class=\"line\">run: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s</span><br><span class=\"line\">run: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s</span><br><span class=\"line\">run: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s</span><br><span class=\"line\">run: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s</span><br><span class=\"line\">run: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s</span><br><span class=\"line\">run: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s</span><br><span class=\"line\">run: redis: (pid 672) 28346s; run: log: (pid 670) 28346s</span><br><span class=\"line\">run: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s</span><br><span class=\"line\">run: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s</span><br><span class=\"line\">run: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s</span><br></pre></td></tr></table></figure></p>\n<p>有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看相关运行日志</span></span><br><span class=\"line\">gitlab-ctl tail</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看网络访问日志</span></span><br><span class=\"line\">gitlab-ctl tail nginx</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"界面及配置\"><a href=\"#界面及配置\" class=\"headerlink\" title=\"界面及配置\"></a>界面及配置</h2><p>第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。<br><strong>后续随着学习的深入，我会再更新这一部分。。。</strong><br><img src=\"/img/xjy/gitlab1.jpg\" alt=\"img\"></p>\n<p><font color=\"red\"><strong>已更新的配置部分:</strong></font></p>\n<ul>\n<li><a href=\"http://localhost:4000/pages/p42.html\" target=\"_blank\" rel=\"noopener\">Gitlab的第一个Runners配置(shared类型)</a><h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2>在安装的过程中遇到了两个问题，也在这里记录一下吧:</li>\n<li>状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。</li>\n<li>能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.devzeng.com/blog/simple-usage-of-gitlab.html\" target=\"_blank\" rel=\"noopener\">https://blog.devzeng.com/blog/simple-usage-of-gitlab.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/gitlab1s.jpg\" alt=\"img\"><br><br><br>一直想安装gitlab，但试了几次网上的方法在redhat上总是失败，可能跟自己理解的能力有关，最后直接按照<a href=\"https://about.gitlab.com/installation/#centos-7\" target=\"_blank\" rel=\"noopener\">官网</a>的步骤在centos7上来安装，还好成功了。这里记录一下整个过程。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>允许http和ssh通过防火墙<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y curl policycoreutils-python openssh-server sudo systemctl enable sshd sudo systemctl start sshd sudo firewall-cmd --permanent --add-service=http sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></p>\n<p>安装 Postfix用于后面的gitlab发送邮件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br><span class=\"line\">sudo systemctl enable postfix</span><br><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure></p>\n<p>增加gitlab包的库<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></p>\n<p>可以执行安装了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo EXTERNAL_URL=\"http://gitlab.xiajunyi.com\" yum install -y gitlab-ee</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行及维护\"><a href=\"#运行及维护\" class=\"headerlink\" title=\"运行及维护\"></a>运行及维护</h2><p>执行启动：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl start</span><br></pre></td></tr></table></figure></p>\n<p>想知道各项有没有正常启动，可执行status命令，正常都启动应该是下面这种情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gitlab-ctl status</span><br><span class=\"line\">run: gitaly: (pid 681) 28346s; run: log: (pid 674) 28346s</span><br><span class=\"line\">run: gitlab-monitor: (pid 667) 28346s; run: log: (pid 666) 28346s</span><br><span class=\"line\">run: gitlab-workhorse: (pid 689) 28346s; run: log: (pid 679) 28346s</span><br><span class=\"line\">run: logrotate: (pid 46329) 3142s; run: log: (pid 678) 28346s</span><br><span class=\"line\">run: nginx: (pid 688) 28346s; run: log: (pid 680) 28346s</span><br><span class=\"line\">run: node-exporter: (pid 669) 28346s; run: log: (pid 668) 28346s</span><br><span class=\"line\">run: postgres-exporter: (pid 690) 28346s; run: log: (pid 684) 28346s</span><br><span class=\"line\">run: postgresql: (pid 673) 28346s; run: log: (pid 671) 28346s</span><br><span class=\"line\">run: prometheus: (pid 687) 28346s; run: log: (pid 686) 28346s</span><br><span class=\"line\">run: redis: (pid 672) 28346s; run: log: (pid 670) 28346s</span><br><span class=\"line\">run: redis-exporter: (pid 677) 28346s; run: log: (pid 676) 28346s</span><br><span class=\"line\">run: sidekiq: (pid 665) 28346s; run: log: (pid 664) 28346s</span><br><span class=\"line\">run: unicorn: (pid 683) 28346s; run: log: (pid 682) 28346s</span><br></pre></td></tr></table></figure></p>\n<p>有时候在状态正常的情况下没法访问，也不好查找错误，这个时候就需要查看日志来分析了，常用的有看所有日志和看nginx日志：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看相关运行日志</span></span><br><span class=\"line\">gitlab-ctl tail</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看网络访问日志</span></span><br><span class=\"line\">gitlab-ctl tail nginx</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"界面及配置\"><a href=\"#界面及配置\" class=\"headerlink\" title=\"界面及配置\"></a>界面及配置</h2><p>第一次进入界面会让设置管理员密码，进入后就可以进行高级设置和创建新项目了。<br><strong>后续随着学习的深入，我会再更新这一部分。。。</strong><br><img src=\"/img/xjy/gitlab1.jpg\" alt=\"img\"></p>\n<p><font color=\"red\"><strong>已更新的配置部分:</strong></font></p>\n<ul>\n<li><a href=\"http://localhost:4000/pages/p42.html\" target=\"_blank\" rel=\"noopener\">Gitlab的第一个Runners配置(shared类型)</a><h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2>在安装的过程中遇到了两个问题，也在这里记录一下吧:</li>\n<li>状态正常，却无法访问网页。最后通过gitlab-ctl tail命令查看是8080端口被占用了，修改配置中的端口后执行gitlab-ctl reconfigure修复。</li>\n<li>能显示网页，却报502错误。在网上查询了很久才发现是运行内存分配太小造成的，因为我安装的是最新版的gitlab,我把虚拟机的内存调到4G，果然没问题了。</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"*.参考链接\"></a>*.参考链接</h2><ul>\n<li><a href=\"https://blog.devzeng.com/blog/simple-usage-of-gitlab.html\" target=\"_blank\" rel=\"noopener\">https://blog.devzeng.com/blog/simple-usage-of-gitlab.html</a></li>\n</ul>"},{"title":"【转】2018程序员不能错过的编程挑战网站 Top10","id":"408","date":"2017-06-22T10:58:22.000Z","toc":true,"declare":true,"_content":"![img](/img/xjy/p45000s.jpg)<br/>\n\n\n+ 转载自[搜狐新闻](http://www.sohu.com/a/235628704_704222)\n\n导语：这些编程挑战网站可以用来磨练技巧、准备面试以及发展职业生涯。给自己立个 flag，千万不要再收藏却不看了~\n\n<!--more-->\n\n> 文/ iTrey Huffine\n\n> 译/ 之肴\n\n> 来源/ levelup.gitconnected.com\n\n\n要想成为一名开发人员，刷代码题很重要。无论你是想为面试做准备还是学习一门新的编程语言，这些网站都能帮你获得成长为优秀工程师所需的技能。无论是Python, Ruby, Java, Golang, Type或者其他任何语言，你都可以找到符合你需求的网站。以下是我们精选出的8大编程学习网站。\n\n## 1 [Codewars](http://codewars.com)  ##\n\n![img](/img/xjy/p45001.jpg)\n\nCodewars让学习编程变得非常有趣，参照游戏设计理念，他们提供积分和排名系统以及公会。他们为20多种不同语言设置了各种挑战，如果你实在做不出来，还有讨论板块可以参照其他用户的解法。\n\n你也可以查看关于每项挑战的讨论，以及用户的解法。你还能从解决挑战当中赚到分数，从而提高自己在排行榜上的排位。\n\n## 2 [HackerRank](http://hackerrank.com) ##\n\n![img](/img/xjy/p45002.jpg)\n\nHackerRank题目更难一点，也有除了基础编程之外的功能。 你可以学习好几个领域的知识，包括算法，数学，SQL，函数式编程，AI等等。 此外，它还为用户提供了行业公司里所面临的编程问题，促使用户提交实际应用，将所学诉诸工作。每道题都有独立的排行榜，并提供答案来解释如何解决问题。\n\n还有一篇编辑评论，可以解释本项挑战的更多内容，并且提供解决方案的思考路径([http://www.hackerrank.com/challenges/simple-array-sum](http://www.hackerrank.com/challenges/simple-array-sum))。\n\n## 3 [Coderbyte](http://CodeFights.com) ##\n\n![img](/img/xjy/p45003.jpg)\n\nCoderbyte非常适合用来准备面试。它总共有两百多道题，每题都有10个不同的语言可供选择。你可以查看官方解答或者其他用户提交的答案。 除了编程题之外，他们还有计算机基础知识和web开发课程。\n\nCoderbyte 曾因其丰富的面试题准备库而得到顶级编程训练营（传送门：[http://coderbyte.com/organizations](http://coderbyte.com/organizations)）的推荐。\n\n## 4 [CodinGame](http://codingame.com) ##\n\n![img](/img/xjy/p45004.jpg)\n\nCodinGame整个以游戏挑战为设计基础，让你边学代码边玩。你写出的代码可以直接推动游戏的进度。它提供了大量的语言选项，而且没有什么压力，学起来会很开心。每个游戏附带一个问题描述和测试案例指引你前进。这种新的学习方式还不快来尝试一波？\n\n## 5 [LeetCode](http://leetcode.com) ##\n\n![img](/img/xjy/p45005.jpg)\n\nLeetCode在你找工作的时候很有用，里面的问题能让你学会面试所需的技能。 实际上LeetCode只关心找工作。他们有OJ来判定你的回答正确与否，你还有机会参加模拟面试。对于那些迫切找工作的人来说，一切都能从LeetCode开始。\n\n优达菌也有制作过几期 leetcode 精华答题攻略，你想学习的话，请关注我们订阅号，回复“leetcode”即可。\n\n## 6 [TopCoder](http://topcoder.com) ##\n\n![img](/img/xjy/p45006.jpg)\n\nTopcoder可能更适合高级用户，这和它非常特别的用户体验有关。 它是第一批引入排名概念的编程挑战网站之一。 他们的挑战是让开发人员在特定时间里进行一项称为“单轮比赛”的一对一比赛，胜者可以获取现金奖励。\n\n## 7 [Project Euler](http://projecteuler.net) ##\n\n![img](/img/xjy/p45007.jpg)\n\nProject Euler已经在编程挑战领域里久经沙场。 虽然它的UI可能不是最优雅的，但它用许多编程语言提供了大量的挑战，且更聚焦于解决数学问题。该网站设计简洁，你会快速沉浸于刷题的快乐中。\n\n## 8 [CodeFights](http://codefights.com) ##\n\n![img](/img/xjy/p45008.jpg)\n\nCodeFights在提供代码题的同时还搭建了工程师找工作的平台。此外，他们还拥有一个名为“公司机器人”的独特功能，开发者可以和一些科技界大牌公司旗下的编程机器人同台竞技。\n\n## 9 [GeeksforGeeks](http://geeksforgeeks.com) ##\n\n![img](/img/xjy/p45009.jpg)\n\n在算法和数据结构领域，GeeksforGeeks 有最好的文章、解释和代码解决方案资源。你可以参考这个示例（传送门：[http://www.geeksforgeeks.org/shortest-common-supersequence/](http://www.geeksforgeeks.org/shortest-common-supersequence/)），看到他们是怎样把一个复杂问题分成比较简单的部分，如何解释其解法以及提供代码解决方案的。\n\n他们还有一个在线编辑器，你可以在看答案之前先用它练练手。如果你在准备软件工程师的面试，真心得用用这个网站来做点儿准备，以及复习一下那些困难的算法问题。\n\n## 10 [Codeforces](http://codeforces.com) ##\n\n![img](/img/xjy/p45010.jpg)\n\nCodeforce是一个位于俄罗斯的编程比赛网站，它会定期举办竞赛，会有全球顶尖的程序员们参赛。如果你是个新手程序员，他们的挑战可能会太难（示例：[http://codeforces.com/problemset/problem/908/C](http://codeforces.com/problemset/problem/908/C)）。他们的挑战通常要求高深的数学和算法知识。\n\n本文就介绍这么多啦，作为过来人的你，肯定还有很多经常光顾的编程挑战网站，不妨借这个机会在评论中和大家分享吧。\n\n— 完 —\n## * 参考链接 \n[http://www.sohu.com/a/235628704_704222](http://www.sohu.com/a/235628704_704222)\n\n\n\n\n","source":"_posts/p45.md","raw":"---\ntitle: 【转】2018程序员不能错过的编程挑战网站 Top10\nid: 408\ncategories:\n  - 闲谈\n  - 编程语言\ndate: 2017/6/22 18:58:22  \ntags: [闲谈, 编程]\ntoc: true\ndeclare: true\n---\n![img](/img/xjy/p45000s.jpg)<br/>\n\n\n+ 转载自[搜狐新闻](http://www.sohu.com/a/235628704_704222)\n\n导语：这些编程挑战网站可以用来磨练技巧、准备面试以及发展职业生涯。给自己立个 flag，千万不要再收藏却不看了~\n\n<!--more-->\n\n> 文/ iTrey Huffine\n\n> 译/ 之肴\n\n> 来源/ levelup.gitconnected.com\n\n\n要想成为一名开发人员，刷代码题很重要。无论你是想为面试做准备还是学习一门新的编程语言，这些网站都能帮你获得成长为优秀工程师所需的技能。无论是Python, Ruby, Java, Golang, Type或者其他任何语言，你都可以找到符合你需求的网站。以下是我们精选出的8大编程学习网站。\n\n## 1 [Codewars](http://codewars.com)  ##\n\n![img](/img/xjy/p45001.jpg)\n\nCodewars让学习编程变得非常有趣，参照游戏设计理念，他们提供积分和排名系统以及公会。他们为20多种不同语言设置了各种挑战，如果你实在做不出来，还有讨论板块可以参照其他用户的解法。\n\n你也可以查看关于每项挑战的讨论，以及用户的解法。你还能从解决挑战当中赚到分数，从而提高自己在排行榜上的排位。\n\n## 2 [HackerRank](http://hackerrank.com) ##\n\n![img](/img/xjy/p45002.jpg)\n\nHackerRank题目更难一点，也有除了基础编程之外的功能。 你可以学习好几个领域的知识，包括算法，数学，SQL，函数式编程，AI等等。 此外，它还为用户提供了行业公司里所面临的编程问题，促使用户提交实际应用，将所学诉诸工作。每道题都有独立的排行榜，并提供答案来解释如何解决问题。\n\n还有一篇编辑评论，可以解释本项挑战的更多内容，并且提供解决方案的思考路径([http://www.hackerrank.com/challenges/simple-array-sum](http://www.hackerrank.com/challenges/simple-array-sum))。\n\n## 3 [Coderbyte](http://CodeFights.com) ##\n\n![img](/img/xjy/p45003.jpg)\n\nCoderbyte非常适合用来准备面试。它总共有两百多道题，每题都有10个不同的语言可供选择。你可以查看官方解答或者其他用户提交的答案。 除了编程题之外，他们还有计算机基础知识和web开发课程。\n\nCoderbyte 曾因其丰富的面试题准备库而得到顶级编程训练营（传送门：[http://coderbyte.com/organizations](http://coderbyte.com/organizations)）的推荐。\n\n## 4 [CodinGame](http://codingame.com) ##\n\n![img](/img/xjy/p45004.jpg)\n\nCodinGame整个以游戏挑战为设计基础，让你边学代码边玩。你写出的代码可以直接推动游戏的进度。它提供了大量的语言选项，而且没有什么压力，学起来会很开心。每个游戏附带一个问题描述和测试案例指引你前进。这种新的学习方式还不快来尝试一波？\n\n## 5 [LeetCode](http://leetcode.com) ##\n\n![img](/img/xjy/p45005.jpg)\n\nLeetCode在你找工作的时候很有用，里面的问题能让你学会面试所需的技能。 实际上LeetCode只关心找工作。他们有OJ来判定你的回答正确与否，你还有机会参加模拟面试。对于那些迫切找工作的人来说，一切都能从LeetCode开始。\n\n优达菌也有制作过几期 leetcode 精华答题攻略，你想学习的话，请关注我们订阅号，回复“leetcode”即可。\n\n## 6 [TopCoder](http://topcoder.com) ##\n\n![img](/img/xjy/p45006.jpg)\n\nTopcoder可能更适合高级用户，这和它非常特别的用户体验有关。 它是第一批引入排名概念的编程挑战网站之一。 他们的挑战是让开发人员在特定时间里进行一项称为“单轮比赛”的一对一比赛，胜者可以获取现金奖励。\n\n## 7 [Project Euler](http://projecteuler.net) ##\n\n![img](/img/xjy/p45007.jpg)\n\nProject Euler已经在编程挑战领域里久经沙场。 虽然它的UI可能不是最优雅的，但它用许多编程语言提供了大量的挑战，且更聚焦于解决数学问题。该网站设计简洁，你会快速沉浸于刷题的快乐中。\n\n## 8 [CodeFights](http://codefights.com) ##\n\n![img](/img/xjy/p45008.jpg)\n\nCodeFights在提供代码题的同时还搭建了工程师找工作的平台。此外，他们还拥有一个名为“公司机器人”的独特功能，开发者可以和一些科技界大牌公司旗下的编程机器人同台竞技。\n\n## 9 [GeeksforGeeks](http://geeksforgeeks.com) ##\n\n![img](/img/xjy/p45009.jpg)\n\n在算法和数据结构领域，GeeksforGeeks 有最好的文章、解释和代码解决方案资源。你可以参考这个示例（传送门：[http://www.geeksforgeeks.org/shortest-common-supersequence/](http://www.geeksforgeeks.org/shortest-common-supersequence/)），看到他们是怎样把一个复杂问题分成比较简单的部分，如何解释其解法以及提供代码解决方案的。\n\n他们还有一个在线编辑器，你可以在看答案之前先用它练练手。如果你在准备软件工程师的面试，真心得用用这个网站来做点儿准备，以及复习一下那些困难的算法问题。\n\n## 10 [Codeforces](http://codeforces.com) ##\n\n![img](/img/xjy/p45010.jpg)\n\nCodeforce是一个位于俄罗斯的编程比赛网站，它会定期举办竞赛，会有全球顶尖的程序员们参赛。如果你是个新手程序员，他们的挑战可能会太难（示例：[http://codeforces.com/problemset/problem/908/C](http://codeforces.com/problemset/problem/908/C)）。他们的挑战通常要求高深的数学和算法知识。\n\n本文就介绍这么多啦，作为过来人的你，肯定还有很多经常光顾的编程挑战网站，不妨借这个机会在评论中和大家分享吧。\n\n— 完 —\n## * 参考链接 \n[http://www.sohu.com/a/235628704_704222](http://www.sohu.com/a/235628704_704222)\n\n\n\n\n","slug":"p45","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3ji8002bu8ve79vnqkoi","content":"<p><img src=\"/img/xjy/p45000s.jpg\" alt=\"img\"><br></p>\n<ul>\n<li>转载自<a href=\"http://www.sohu.com/a/235628704_704222\" target=\"_blank\" rel=\"noopener\">搜狐新闻</a></li>\n</ul>\n<p>导语：这些编程挑战网站可以用来磨练技巧、准备面试以及发展职业生涯。给自己立个 flag，千万不要再收藏却不看了~</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>文/ iTrey Huffine</p>\n</blockquote>\n<blockquote>\n<p>译/ 之肴</p>\n</blockquote>\n<blockquote>\n<p>来源/ levelup.gitconnected.com</p>\n</blockquote>\n<p>要想成为一名开发人员，刷代码题很重要。无论你是想为面试做准备还是学习一门新的编程语言，这些网站都能帮你获得成长为优秀工程师所需的技能。无论是Python, Ruby, Java, Golang, Type或者其他任何语言，你都可以找到符合你需求的网站。以下是我们精选出的8大编程学习网站。</p>\n<h2 id=\"1-Codewars\"><a href=\"#1-Codewars\" class=\"headerlink\" title=\"1 Codewars\"></a>1 <a href=\"http://codewars.com\" target=\"_blank\" rel=\"noopener\">Codewars</a></h2><p><img src=\"/img/xjy/p45001.jpg\" alt=\"img\"></p>\n<p>Codewars让学习编程变得非常有趣，参照游戏设计理念，他们提供积分和排名系统以及公会。他们为20多种不同语言设置了各种挑战，如果你实在做不出来，还有讨论板块可以参照其他用户的解法。</p>\n<p>你也可以查看关于每项挑战的讨论，以及用户的解法。你还能从解决挑战当中赚到分数，从而提高自己在排行榜上的排位。</p>\n<h2 id=\"2-HackerRank\"><a href=\"#2-HackerRank\" class=\"headerlink\" title=\"2 HackerRank\"></a>2 <a href=\"http://hackerrank.com\" target=\"_blank\" rel=\"noopener\">HackerRank</a></h2><p><img src=\"/img/xjy/p45002.jpg\" alt=\"img\"></p>\n<p>HackerRank题目更难一点，也有除了基础编程之外的功能。 你可以学习好几个领域的知识，包括算法，数学，SQL，函数式编程，AI等等。 此外，它还为用户提供了行业公司里所面临的编程问题，促使用户提交实际应用，将所学诉诸工作。每道题都有独立的排行榜，并提供答案来解释如何解决问题。</p>\n<p>还有一篇编辑评论，可以解释本项挑战的更多内容，并且提供解决方案的思考路径(<a href=\"http://www.hackerrank.com/challenges/simple-array-sum\" target=\"_blank\" rel=\"noopener\">http://www.hackerrank.com/challenges/simple-array-sum</a>)。</p>\n<h2 id=\"3-Coderbyte\"><a href=\"#3-Coderbyte\" class=\"headerlink\" title=\"3 Coderbyte\"></a>3 <a href=\"http://CodeFights.com\" target=\"_blank\" rel=\"noopener\">Coderbyte</a></h2><p><img src=\"/img/xjy/p45003.jpg\" alt=\"img\"></p>\n<p>Coderbyte非常适合用来准备面试。它总共有两百多道题，每题都有10个不同的语言可供选择。你可以查看官方解答或者其他用户提交的答案。 除了编程题之外，他们还有计算机基础知识和web开发课程。</p>\n<p>Coderbyte 曾因其丰富的面试题准备库而得到顶级编程训练营（传送门：<a href=\"http://coderbyte.com/organizations\" target=\"_blank\" rel=\"noopener\">http://coderbyte.com/organizations</a>）的推荐。</p>\n<h2 id=\"4-CodinGame\"><a href=\"#4-CodinGame\" class=\"headerlink\" title=\"4 CodinGame\"></a>4 <a href=\"http://codingame.com\" target=\"_blank\" rel=\"noopener\">CodinGame</a></h2><p><img src=\"/img/xjy/p45004.jpg\" alt=\"img\"></p>\n<p>CodinGame整个以游戏挑战为设计基础，让你边学代码边玩。你写出的代码可以直接推动游戏的进度。它提供了大量的语言选项，而且没有什么压力，学起来会很开心。每个游戏附带一个问题描述和测试案例指引你前进。这种新的学习方式还不快来尝试一波？</p>\n<h2 id=\"5-LeetCode\"><a href=\"#5-LeetCode\" class=\"headerlink\" title=\"5 LeetCode\"></a>5 <a href=\"http://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a></h2><p><img src=\"/img/xjy/p45005.jpg\" alt=\"img\"></p>\n<p>LeetCode在你找工作的时候很有用，里面的问题能让你学会面试所需的技能。 实际上LeetCode只关心找工作。他们有OJ来判定你的回答正确与否，你还有机会参加模拟面试。对于那些迫切找工作的人来说，一切都能从LeetCode开始。</p>\n<p>优达菌也有制作过几期 leetcode 精华答题攻略，你想学习的话，请关注我们订阅号，回复“leetcode”即可。</p>\n<h2 id=\"6-TopCoder\"><a href=\"#6-TopCoder\" class=\"headerlink\" title=\"6 TopCoder\"></a>6 <a href=\"http://topcoder.com\" target=\"_blank\" rel=\"noopener\">TopCoder</a></h2><p><img src=\"/img/xjy/p45006.jpg\" alt=\"img\"></p>\n<p>Topcoder可能更适合高级用户，这和它非常特别的用户体验有关。 它是第一批引入排名概念的编程挑战网站之一。 他们的挑战是让开发人员在特定时间里进行一项称为“单轮比赛”的一对一比赛，胜者可以获取现金奖励。</p>\n<h2 id=\"7-Project-Euler\"><a href=\"#7-Project-Euler\" class=\"headerlink\" title=\"7 Project Euler\"></a>7 <a href=\"http://projecteuler.net\" target=\"_blank\" rel=\"noopener\">Project Euler</a></h2><p><img src=\"/img/xjy/p45007.jpg\" alt=\"img\"></p>\n<p>Project Euler已经在编程挑战领域里久经沙场。 虽然它的UI可能不是最优雅的，但它用许多编程语言提供了大量的挑战，且更聚焦于解决数学问题。该网站设计简洁，你会快速沉浸于刷题的快乐中。</p>\n<h2 id=\"8-CodeFights\"><a href=\"#8-CodeFights\" class=\"headerlink\" title=\"8 CodeFights\"></a>8 <a href=\"http://codefights.com\" target=\"_blank\" rel=\"noopener\">CodeFights</a></h2><p><img src=\"/img/xjy/p45008.jpg\" alt=\"img\"></p>\n<p>CodeFights在提供代码题的同时还搭建了工程师找工作的平台。此外，他们还拥有一个名为“公司机器人”的独特功能，开发者可以和一些科技界大牌公司旗下的编程机器人同台竞技。</p>\n<h2 id=\"9-GeeksforGeeks\"><a href=\"#9-GeeksforGeeks\" class=\"headerlink\" title=\"9 GeeksforGeeks\"></a>9 <a href=\"http://geeksforgeeks.com\" target=\"_blank\" rel=\"noopener\">GeeksforGeeks</a></h2><p><img src=\"/img/xjy/p45009.jpg\" alt=\"img\"></p>\n<p>在算法和数据结构领域，GeeksforGeeks 有最好的文章、解释和代码解决方案资源。你可以参考这个示例（传送门：<a href=\"http://www.geeksforgeeks.org/shortest-common-supersequence/\" target=\"_blank\" rel=\"noopener\">http://www.geeksforgeeks.org/shortest-common-supersequence/</a>），看到他们是怎样把一个复杂问题分成比较简单的部分，如何解释其解法以及提供代码解决方案的。</p>\n<p>他们还有一个在线编辑器，你可以在看答案之前先用它练练手。如果你在准备软件工程师的面试，真心得用用这个网站来做点儿准备，以及复习一下那些困难的算法问题。</p>\n<h2 id=\"10-Codeforces\"><a href=\"#10-Codeforces\" class=\"headerlink\" title=\"10 Codeforces\"></a>10 <a href=\"http://codeforces.com\" target=\"_blank\" rel=\"noopener\">Codeforces</a></h2><p><img src=\"/img/xjy/p45010.jpg\" alt=\"img\"></p>\n<p>Codeforce是一个位于俄罗斯的编程比赛网站，它会定期举办竞赛，会有全球顶尖的程序员们参赛。如果你是个新手程序员，他们的挑战可能会太难（示例：<a href=\"http://codeforces.com/problemset/problem/908/C\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/908/C</a>）。他们的挑战通常要求高深的数学和算法知识。</p>\n<p>本文就介绍这么多啦，作为过来人的你，肯定还有很多经常光顾的编程挑战网站，不妨借这个机会在评论中和大家分享吧。</p>\n<p>— 完 —</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"* 参考链接\"></a>* 参考链接</h2><p><a href=\"http://www.sohu.com/a/235628704_704222\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/235628704_704222</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p45000s.jpg\" alt=\"img\"><br></p>\n<ul>\n<li>转载自<a href=\"http://www.sohu.com/a/235628704_704222\" target=\"_blank\" rel=\"noopener\">搜狐新闻</a></li>\n</ul>\n<p>导语：这些编程挑战网站可以用来磨练技巧、准备面试以及发展职业生涯。给自己立个 flag，千万不要再收藏却不看了~</p>","more":"<blockquote>\n<p>文/ iTrey Huffine</p>\n</blockquote>\n<blockquote>\n<p>译/ 之肴</p>\n</blockquote>\n<blockquote>\n<p>来源/ levelup.gitconnected.com</p>\n</blockquote>\n<p>要想成为一名开发人员，刷代码题很重要。无论你是想为面试做准备还是学习一门新的编程语言，这些网站都能帮你获得成长为优秀工程师所需的技能。无论是Python, Ruby, Java, Golang, Type或者其他任何语言，你都可以找到符合你需求的网站。以下是我们精选出的8大编程学习网站。</p>\n<h2 id=\"1-Codewars\"><a href=\"#1-Codewars\" class=\"headerlink\" title=\"1 Codewars\"></a>1 <a href=\"http://codewars.com\" target=\"_blank\" rel=\"noopener\">Codewars</a></h2><p><img src=\"/img/xjy/p45001.jpg\" alt=\"img\"></p>\n<p>Codewars让学习编程变得非常有趣，参照游戏设计理念，他们提供积分和排名系统以及公会。他们为20多种不同语言设置了各种挑战，如果你实在做不出来，还有讨论板块可以参照其他用户的解法。</p>\n<p>你也可以查看关于每项挑战的讨论，以及用户的解法。你还能从解决挑战当中赚到分数，从而提高自己在排行榜上的排位。</p>\n<h2 id=\"2-HackerRank\"><a href=\"#2-HackerRank\" class=\"headerlink\" title=\"2 HackerRank\"></a>2 <a href=\"http://hackerrank.com\" target=\"_blank\" rel=\"noopener\">HackerRank</a></h2><p><img src=\"/img/xjy/p45002.jpg\" alt=\"img\"></p>\n<p>HackerRank题目更难一点，也有除了基础编程之外的功能。 你可以学习好几个领域的知识，包括算法，数学，SQL，函数式编程，AI等等。 此外，它还为用户提供了行业公司里所面临的编程问题，促使用户提交实际应用，将所学诉诸工作。每道题都有独立的排行榜，并提供答案来解释如何解决问题。</p>\n<p>还有一篇编辑评论，可以解释本项挑战的更多内容，并且提供解决方案的思考路径(<a href=\"http://www.hackerrank.com/challenges/simple-array-sum\" target=\"_blank\" rel=\"noopener\">http://www.hackerrank.com/challenges/simple-array-sum</a>)。</p>\n<h2 id=\"3-Coderbyte\"><a href=\"#3-Coderbyte\" class=\"headerlink\" title=\"3 Coderbyte\"></a>3 <a href=\"http://CodeFights.com\" target=\"_blank\" rel=\"noopener\">Coderbyte</a></h2><p><img src=\"/img/xjy/p45003.jpg\" alt=\"img\"></p>\n<p>Coderbyte非常适合用来准备面试。它总共有两百多道题，每题都有10个不同的语言可供选择。你可以查看官方解答或者其他用户提交的答案。 除了编程题之外，他们还有计算机基础知识和web开发课程。</p>\n<p>Coderbyte 曾因其丰富的面试题准备库而得到顶级编程训练营（传送门：<a href=\"http://coderbyte.com/organizations\" target=\"_blank\" rel=\"noopener\">http://coderbyte.com/organizations</a>）的推荐。</p>\n<h2 id=\"4-CodinGame\"><a href=\"#4-CodinGame\" class=\"headerlink\" title=\"4 CodinGame\"></a>4 <a href=\"http://codingame.com\" target=\"_blank\" rel=\"noopener\">CodinGame</a></h2><p><img src=\"/img/xjy/p45004.jpg\" alt=\"img\"></p>\n<p>CodinGame整个以游戏挑战为设计基础，让你边学代码边玩。你写出的代码可以直接推动游戏的进度。它提供了大量的语言选项，而且没有什么压力，学起来会很开心。每个游戏附带一个问题描述和测试案例指引你前进。这种新的学习方式还不快来尝试一波？</p>\n<h2 id=\"5-LeetCode\"><a href=\"#5-LeetCode\" class=\"headerlink\" title=\"5 LeetCode\"></a>5 <a href=\"http://leetcode.com\" target=\"_blank\" rel=\"noopener\">LeetCode</a></h2><p><img src=\"/img/xjy/p45005.jpg\" alt=\"img\"></p>\n<p>LeetCode在你找工作的时候很有用，里面的问题能让你学会面试所需的技能。 实际上LeetCode只关心找工作。他们有OJ来判定你的回答正确与否，你还有机会参加模拟面试。对于那些迫切找工作的人来说，一切都能从LeetCode开始。</p>\n<p>优达菌也有制作过几期 leetcode 精华答题攻略，你想学习的话，请关注我们订阅号，回复“leetcode”即可。</p>\n<h2 id=\"6-TopCoder\"><a href=\"#6-TopCoder\" class=\"headerlink\" title=\"6 TopCoder\"></a>6 <a href=\"http://topcoder.com\" target=\"_blank\" rel=\"noopener\">TopCoder</a></h2><p><img src=\"/img/xjy/p45006.jpg\" alt=\"img\"></p>\n<p>Topcoder可能更适合高级用户，这和它非常特别的用户体验有关。 它是第一批引入排名概念的编程挑战网站之一。 他们的挑战是让开发人员在特定时间里进行一项称为“单轮比赛”的一对一比赛，胜者可以获取现金奖励。</p>\n<h2 id=\"7-Project-Euler\"><a href=\"#7-Project-Euler\" class=\"headerlink\" title=\"7 Project Euler\"></a>7 <a href=\"http://projecteuler.net\" target=\"_blank\" rel=\"noopener\">Project Euler</a></h2><p><img src=\"/img/xjy/p45007.jpg\" alt=\"img\"></p>\n<p>Project Euler已经在编程挑战领域里久经沙场。 虽然它的UI可能不是最优雅的，但它用许多编程语言提供了大量的挑战，且更聚焦于解决数学问题。该网站设计简洁，你会快速沉浸于刷题的快乐中。</p>\n<h2 id=\"8-CodeFights\"><a href=\"#8-CodeFights\" class=\"headerlink\" title=\"8 CodeFights\"></a>8 <a href=\"http://codefights.com\" target=\"_blank\" rel=\"noopener\">CodeFights</a></h2><p><img src=\"/img/xjy/p45008.jpg\" alt=\"img\"></p>\n<p>CodeFights在提供代码题的同时还搭建了工程师找工作的平台。此外，他们还拥有一个名为“公司机器人”的独特功能，开发者可以和一些科技界大牌公司旗下的编程机器人同台竞技。</p>\n<h2 id=\"9-GeeksforGeeks\"><a href=\"#9-GeeksforGeeks\" class=\"headerlink\" title=\"9 GeeksforGeeks\"></a>9 <a href=\"http://geeksforgeeks.com\" target=\"_blank\" rel=\"noopener\">GeeksforGeeks</a></h2><p><img src=\"/img/xjy/p45009.jpg\" alt=\"img\"></p>\n<p>在算法和数据结构领域，GeeksforGeeks 有最好的文章、解释和代码解决方案资源。你可以参考这个示例（传送门：<a href=\"http://www.geeksforgeeks.org/shortest-common-supersequence/\" target=\"_blank\" rel=\"noopener\">http://www.geeksforgeeks.org/shortest-common-supersequence/</a>），看到他们是怎样把一个复杂问题分成比较简单的部分，如何解释其解法以及提供代码解决方案的。</p>\n<p>他们还有一个在线编辑器，你可以在看答案之前先用它练练手。如果你在准备软件工程师的面试，真心得用用这个网站来做点儿准备，以及复习一下那些困难的算法问题。</p>\n<h2 id=\"10-Codeforces\"><a href=\"#10-Codeforces\" class=\"headerlink\" title=\"10 Codeforces\"></a>10 <a href=\"http://codeforces.com\" target=\"_blank\" rel=\"noopener\">Codeforces</a></h2><p><img src=\"/img/xjy/p45010.jpg\" alt=\"img\"></p>\n<p>Codeforce是一个位于俄罗斯的编程比赛网站，它会定期举办竞赛，会有全球顶尖的程序员们参赛。如果你是个新手程序员，他们的挑战可能会太难（示例：<a href=\"http://codeforces.com/problemset/problem/908/C\" target=\"_blank\" rel=\"noopener\">http://codeforces.com/problemset/problem/908/C</a>）。他们的挑战通常要求高深的数学和算法知识。</p>\n<p>本文就介绍这么多啦，作为过来人的你，肯定还有很多经常光顾的编程挑战网站，不妨借这个机会在评论中和大家分享吧。</p>\n<p>— 完 —</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"* 参考链接\"></a>* 参考链接</h2><p><a href=\"http://www.sohu.com/a/235628704_704222\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/235628704_704222</a></p>"},{"title":"【转】Linux内核OOM机制的详细分析","id":"411","date":"2018-08-06T08:07:19.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p48000.jpg)<br/>\n\n+ 转载自[酷喃的文章](http://coolnull.com/3577.html)\n\n> 转载原因：<br/>其他部分都是我转载的，只有这部分是我写的：我们遇到了在linux里启动两个java程序的时候其中一个起不起来或者被杀掉的问题，最后被我们的架构师解决了（原因为OOM killer作祟），这是其中的一篇参考文章，我觉得挺不错的，所以转载到这里！\n\n<!--more-->\n\n## 前面\n\n使用某云数据库时碰到mysql挂掉。技术人员说是因为内存耗尽触发OOM，导致系统干掉了mysql进程。具体查了下oom，以下为原文。\n\n\n## 说明\n\nLinux 内核有个机制叫OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。典型的情况是：某天一台机器突然ssh远程登录不了，但能ping通，说明不是网络的故障，原因是sshd进程被OOM killer杀掉了（多次遇到这样的假死状况）。重启机器后查看系统日志/var/log/messages会发现Out of Memory: Kill process 1865（sshd）类似的错误信息。\n\n防止重要的系统进程触发(OOM)机制而被杀死：可以设置参数/proc/PID/oom_adj为-17，可临时关闭linux内核的OOM机制。内核会通过特定的算法给每个进程计算一个分数来决定杀哪个进程，每个进程的oom分数可以/proc/PID/oom_score中找到。我们运维过程中保护的一般是sshd和一些管理agent。\n\n保护某个进程不被内核杀掉可以这样操作：\n\n``` shell\n# echo -17 > /proc/$PID/oom_adj\n```\n\n如何防止sshd被杀，可以这样操作：\n\n``` shell\n# pgrep -f \"/usr/sbin/sshd\" | while read PID;do echo -17 > /proc/$PID/oom_adj;done\n\n可以在计划任务里加入这样一条定时任务，就更安全了：\n#/etc/cron.d/oom_disable\n*/1**** root pgrep -f \"/usr/sbin/sshd\" | while read PID;do echo -17 > /proc/$PID/oom_adj;done\n\n为了避免重启失效，可以写入/etc/rc.d/rc.local\necho -17 > /proc/$(pidof sshd)/oom_adj\n```\n至于为什么用-17而不用其他数值（默认值为0），这个是由linux内核定义的，查看内核源码可知：\n以linux-3.3.6版本的kernel源码为例，路径为linux-3.6.6/include/linux/oom.h，阅读内核源码可知oom_adj的可调值为15到-16，其中15最大-16最小，-17为禁止使用OOM。oom_score为2的n次方计算出来的，其中n就是进程的oom_adj值，所以oom_score的分数越高就越会被内核优先杀掉。\n\n![img](/img/xjy/p48001.jpg)<br/>\n\n当然还可以通过修改内核参数禁止OOM机制\n\n``` shell\n# sysctl -w vm.panic_on_oom=1\nvm.panic_on_oom = 1 //1表示关闭，默认为0表示开启OOM\n\n# sysctl -p\n```\n\n\n## 实验\n\n为了验证OOM机制的效果，我们不妨做个测试。\n首先看看我系统现有内存大小，没错96G多，物理上还要比查看的值大一些。\n\n![img](/img/xjy/p48002.jpg)<br/>\n\n再看看目前进程最大的有哪些，top查看，我目前只跑了两个java程序的进程，分别4.6G，再往后redis进程吃了21m，iscsi服务占了32m，gdm占了25m，其它的进程都是几M而已。\n\n![img](/img/xjy/p48003.jpg)<br/>\n\n现在我自己用C写一个叫bigmem程序，我指定该程序分配内存85G，呵呵，效果明显，然后执行后再用top查看，排在第一位的是我的bigmem，RES是物理内存，已经吃满了85G。\n\n![img](/img/xjy/p48004.jpg)<br/>\n\n继续观察，当bigmem稳定保持在85G一会后，内核会自动将其进程kill掉，增长的过程中没有被杀，如果不希望被杀可以执行\n点击(此处)折叠或打开\npgrep -f “bigmem” | while read PID; do echo -17 > /proc/$PID/oom_adj;done\n执行以上命令前后，明显会对比出效果，就可以体会到内核OOM机制的实际作用了。\n\n## 注意\n\n1. Kernel-2.6.26之前版本的oomkiller算法不够精确，RHEL 6.x版本的2.6.32可以解决这个问题。\n2. 子进程会继承父进程的oom_adj。\n3. OOM不适合于解决内存泄漏(Memory leak)的问题。\n4. 有时free查看还有充足的内存，但还是会触发OOM，是因为该进程可能占用了特殊的内存地址空间。\n\n## 参考链接\n\n[http://coolnull.com/3577.html](http://coolnull.com/3577.html)\n\n","source":"_posts/p48.md","raw":"---\ntitle: 【转】Linux内核OOM机制的详细分析\nid: 411\ncategories:\n  - 编程语言\ndate: 2018/8/6 16:07:19     \ntags: [编程，Linux]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p48000.jpg)<br/>\n\n+ 转载自[酷喃的文章](http://coolnull.com/3577.html)\n\n> 转载原因：<br/>其他部分都是我转载的，只有这部分是我写的：我们遇到了在linux里启动两个java程序的时候其中一个起不起来或者被杀掉的问题，最后被我们的架构师解决了（原因为OOM killer作祟），这是其中的一篇参考文章，我觉得挺不错的，所以转载到这里！\n\n<!--more-->\n\n## 前面\n\n使用某云数据库时碰到mysql挂掉。技术人员说是因为内存耗尽触发OOM，导致系统干掉了mysql进程。具体查了下oom，以下为原文。\n\n\n## 说明\n\nLinux 内核有个机制叫OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。典型的情况是：某天一台机器突然ssh远程登录不了，但能ping通，说明不是网络的故障，原因是sshd进程被OOM killer杀掉了（多次遇到这样的假死状况）。重启机器后查看系统日志/var/log/messages会发现Out of Memory: Kill process 1865（sshd）类似的错误信息。\n\n防止重要的系统进程触发(OOM)机制而被杀死：可以设置参数/proc/PID/oom_adj为-17，可临时关闭linux内核的OOM机制。内核会通过特定的算法给每个进程计算一个分数来决定杀哪个进程，每个进程的oom分数可以/proc/PID/oom_score中找到。我们运维过程中保护的一般是sshd和一些管理agent。\n\n保护某个进程不被内核杀掉可以这样操作：\n\n``` shell\n# echo -17 > /proc/$PID/oom_adj\n```\n\n如何防止sshd被杀，可以这样操作：\n\n``` shell\n# pgrep -f \"/usr/sbin/sshd\" | while read PID;do echo -17 > /proc/$PID/oom_adj;done\n\n可以在计划任务里加入这样一条定时任务，就更安全了：\n#/etc/cron.d/oom_disable\n*/1**** root pgrep -f \"/usr/sbin/sshd\" | while read PID;do echo -17 > /proc/$PID/oom_adj;done\n\n为了避免重启失效，可以写入/etc/rc.d/rc.local\necho -17 > /proc/$(pidof sshd)/oom_adj\n```\n至于为什么用-17而不用其他数值（默认值为0），这个是由linux内核定义的，查看内核源码可知：\n以linux-3.3.6版本的kernel源码为例，路径为linux-3.6.6/include/linux/oom.h，阅读内核源码可知oom_adj的可调值为15到-16，其中15最大-16最小，-17为禁止使用OOM。oom_score为2的n次方计算出来的，其中n就是进程的oom_adj值，所以oom_score的分数越高就越会被内核优先杀掉。\n\n![img](/img/xjy/p48001.jpg)<br/>\n\n当然还可以通过修改内核参数禁止OOM机制\n\n``` shell\n# sysctl -w vm.panic_on_oom=1\nvm.panic_on_oom = 1 //1表示关闭，默认为0表示开启OOM\n\n# sysctl -p\n```\n\n\n## 实验\n\n为了验证OOM机制的效果，我们不妨做个测试。\n首先看看我系统现有内存大小，没错96G多，物理上还要比查看的值大一些。\n\n![img](/img/xjy/p48002.jpg)<br/>\n\n再看看目前进程最大的有哪些，top查看，我目前只跑了两个java程序的进程，分别4.6G，再往后redis进程吃了21m，iscsi服务占了32m，gdm占了25m，其它的进程都是几M而已。\n\n![img](/img/xjy/p48003.jpg)<br/>\n\n现在我自己用C写一个叫bigmem程序，我指定该程序分配内存85G，呵呵，效果明显，然后执行后再用top查看，排在第一位的是我的bigmem，RES是物理内存，已经吃满了85G。\n\n![img](/img/xjy/p48004.jpg)<br/>\n\n继续观察，当bigmem稳定保持在85G一会后，内核会自动将其进程kill掉，增长的过程中没有被杀，如果不希望被杀可以执行\n点击(此处)折叠或打开\npgrep -f “bigmem” | while read PID; do echo -17 > /proc/$PID/oom_adj;done\n执行以上命令前后，明显会对比出效果，就可以体会到内核OOM机制的实际作用了。\n\n## 注意\n\n1. Kernel-2.6.26之前版本的oomkiller算法不够精确，RHEL 6.x版本的2.6.32可以解决这个问题。\n2. 子进程会继承父进程的oom_adj。\n3. OOM不适合于解决内存泄漏(Memory leak)的问题。\n4. 有时free查看还有充足的内存，但还是会触发OOM，是因为该进程可能占用了特殊的内存地址空间。\n\n## 参考链接\n\n[http://coolnull.com/3577.html](http://coolnull.com/3577.html)\n\n","slug":"p48","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jib002du8veeu6vawm4","content":"<p><img src=\"/img/xjy/p48000.jpg\" alt=\"img\"><br></p>\n<ul>\n<li>转载自<a href=\"http://coolnull.com/3577.html\" target=\"_blank\" rel=\"noopener\">酷喃的文章</a></li>\n</ul>\n<blockquote>\n<p>转载原因：<br>其他部分都是我转载的，只有这部分是我写的：我们遇到了在linux里启动两个java程序的时候其中一个起不起来或者被杀掉的问题，最后被我们的架构师解决了（原因为OOM killer作祟），这是其中的一篇参考文章，我觉得挺不错的，所以转载到这里！</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"前面\"><a href=\"#前面\" class=\"headerlink\" title=\"前面\"></a>前面</h2><p>使用某云数据库时碰到mysql挂掉。技术人员说是因为内存耗尽触发OOM，导致系统干掉了mysql进程。具体查了下oom，以下为原文。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>Linux 内核有个机制叫OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。典型的情况是：某天一台机器突然ssh远程登录不了，但能ping通，说明不是网络的故障，原因是sshd进程被OOM killer杀掉了（多次遇到这样的假死状况）。重启机器后查看系统日志/var/log/messages会发现Out of Memory: Kill process 1865（sshd）类似的错误信息。</p>\n<p>防止重要的系统进程触发(OOM)机制而被杀死：可以设置参数/proc/PID/oom_adj为-17，可临时关闭linux内核的OOM机制。内核会通过特定的算法给每个进程计算一个分数来决定杀哪个进程，每个进程的oom分数可以/proc/PID/oom_score中找到。我们运维过程中保护的一般是sshd和一些管理agent。</p>\n<p>保护某个进程不被内核杀掉可以这样操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -17 &gt; /proc/<span class=\"variable\">$PID</span>/oom_adj</span></span><br></pre></td></tr></table></figure>\n<p>如何防止sshd被杀，可以这样操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pgrep -f <span class=\"string\">\"/usr/sbin/sshd\"</span> | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> PID;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> -17 &gt; /proc/<span class=\"variable\">$PID</span>/oom_adj;<span class=\"keyword\">done</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">可以在计划任务里加入这样一条定时任务，就更安全了：</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">/etc/cron.d/oom_disable</span></span><br><span class=\"line\">*/1**** root pgrep -f \"/usr/sbin/sshd\" | while read PID;do echo -17 &gt; /proc/$PID/oom_adj;done</span><br><span class=\"line\"></span><br><span class=\"line\">为了避免重启失效，可以写入/etc/rc.d/rc.local</span><br><span class=\"line\">echo -17 &gt; /proc/$(pidof sshd)/oom_adj</span><br></pre></td></tr></table></figure>\n<p>至于为什么用-17而不用其他数值（默认值为0），这个是由linux内核定义的，查看内核源码可知：<br>以linux-3.3.6版本的kernel源码为例，路径为linux-3.6.6/include/linux/oom.h，阅读内核源码可知oom_adj的可调值为15到-16，其中15最大-16最小，-17为禁止使用OOM。oom_score为2的n次方计算出来的，其中n就是进程的oom_adj值，所以oom_score的分数越高就越会被内核优先杀掉。</p>\n<p><img src=\"/img/xjy/p48001.jpg\" alt=\"img\"><br></p>\n<p>当然还可以通过修改内核参数禁止OOM机制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sysctl -w vm.panic_on_oom=1</span></span><br><span class=\"line\">vm.panic_on_oom = 1 //1表示关闭，默认为0表示开启OOM</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sysctl -p</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><p>为了验证OOM机制的效果，我们不妨做个测试。<br>首先看看我系统现有内存大小，没错96G多，物理上还要比查看的值大一些。</p>\n<p><img src=\"/img/xjy/p48002.jpg\" alt=\"img\"><br></p>\n<p>再看看目前进程最大的有哪些，top查看，我目前只跑了两个java程序的进程，分别4.6G，再往后redis进程吃了21m，iscsi服务占了32m，gdm占了25m，其它的进程都是几M而已。</p>\n<p><img src=\"/img/xjy/p48003.jpg\" alt=\"img\"><br></p>\n<p>现在我自己用C写一个叫bigmem程序，我指定该程序分配内存85G，呵呵，效果明显，然后执行后再用top查看，排在第一位的是我的bigmem，RES是物理内存，已经吃满了85G。</p>\n<p><img src=\"/img/xjy/p48004.jpg\" alt=\"img\"><br></p>\n<p>继续观察，当bigmem稳定保持在85G一会后，内核会自动将其进程kill掉，增长的过程中没有被杀，如果不希望被杀可以执行<br>点击(此处)折叠或打开<br>pgrep -f “bigmem” | while read PID; do echo -17 &gt; /proc/$PID/oom_adj;done<br>执行以上命令前后，明显会对比出效果，就可以体会到内核OOM机制的实际作用了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>Kernel-2.6.26之前版本的oomkiller算法不够精确，RHEL 6.x版本的2.6.32可以解决这个问题。</li>\n<li>子进程会继承父进程的oom_adj。</li>\n<li>OOM不适合于解决内存泄漏(Memory leak)的问题。</li>\n<li>有时free查看还有充足的内存，但还是会触发OOM，是因为该进程可能占用了特殊的内存地址空间。</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://coolnull.com/3577.html\" target=\"_blank\" rel=\"noopener\">http://coolnull.com/3577.html</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p48000.jpg\" alt=\"img\"><br></p>\n<ul>\n<li>转载自<a href=\"http://coolnull.com/3577.html\" target=\"_blank\" rel=\"noopener\">酷喃的文章</a></li>\n</ul>\n<blockquote>\n<p>转载原因：<br>其他部分都是我转载的，只有这部分是我写的：我们遇到了在linux里启动两个java程序的时候其中一个起不起来或者被杀掉的问题，最后被我们的架构师解决了（原因为OOM killer作祟），这是其中的一篇参考文章，我觉得挺不错的，所以转载到这里！</p>\n</blockquote>","more":"<h2 id=\"前面\"><a href=\"#前面\" class=\"headerlink\" title=\"前面\"></a>前面</h2><p>使用某云数据库时碰到mysql挂掉。技术人员说是因为内存耗尽触发OOM，导致系统干掉了mysql进程。具体查了下oom，以下为原文。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>Linux 内核有个机制叫OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。典型的情况是：某天一台机器突然ssh远程登录不了，但能ping通，说明不是网络的故障，原因是sshd进程被OOM killer杀掉了（多次遇到这样的假死状况）。重启机器后查看系统日志/var/log/messages会发现Out of Memory: Kill process 1865（sshd）类似的错误信息。</p>\n<p>防止重要的系统进程触发(OOM)机制而被杀死：可以设置参数/proc/PID/oom_adj为-17，可临时关闭linux内核的OOM机制。内核会通过特定的算法给每个进程计算一个分数来决定杀哪个进程，每个进程的oom分数可以/proc/PID/oom_score中找到。我们运维过程中保护的一般是sshd和一些管理agent。</p>\n<p>保护某个进程不被内核杀掉可以这样操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -17 &gt; /proc/<span class=\"variable\">$PID</span>/oom_adj</span></span><br></pre></td></tr></table></figure>\n<p>如何防止sshd被杀，可以这样操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> pgrep -f <span class=\"string\">\"/usr/sbin/sshd\"</span> | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> PID;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> -17 &gt; /proc/<span class=\"variable\">$PID</span>/oom_adj;<span class=\"keyword\">done</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">可以在计划任务里加入这样一条定时任务，就更安全了：</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">/etc/cron.d/oom_disable</span></span><br><span class=\"line\">*/1**** root pgrep -f \"/usr/sbin/sshd\" | while read PID;do echo -17 &gt; /proc/$PID/oom_adj;done</span><br><span class=\"line\"></span><br><span class=\"line\">为了避免重启失效，可以写入/etc/rc.d/rc.local</span><br><span class=\"line\">echo -17 &gt; /proc/$(pidof sshd)/oom_adj</span><br></pre></td></tr></table></figure>\n<p>至于为什么用-17而不用其他数值（默认值为0），这个是由linux内核定义的，查看内核源码可知：<br>以linux-3.3.6版本的kernel源码为例，路径为linux-3.6.6/include/linux/oom.h，阅读内核源码可知oom_adj的可调值为15到-16，其中15最大-16最小，-17为禁止使用OOM。oom_score为2的n次方计算出来的，其中n就是进程的oom_adj值，所以oom_score的分数越高就越会被内核优先杀掉。</p>\n<p><img src=\"/img/xjy/p48001.jpg\" alt=\"img\"><br></p>\n<p>当然还可以通过修改内核参数禁止OOM机制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sysctl -w vm.panic_on_oom=1</span></span><br><span class=\"line\">vm.panic_on_oom = 1 //1表示关闭，默认为0表示开启OOM</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sysctl -p</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><p>为了验证OOM机制的效果，我们不妨做个测试。<br>首先看看我系统现有内存大小，没错96G多，物理上还要比查看的值大一些。</p>\n<p><img src=\"/img/xjy/p48002.jpg\" alt=\"img\"><br></p>\n<p>再看看目前进程最大的有哪些，top查看，我目前只跑了两个java程序的进程，分别4.6G，再往后redis进程吃了21m，iscsi服务占了32m，gdm占了25m，其它的进程都是几M而已。</p>\n<p><img src=\"/img/xjy/p48003.jpg\" alt=\"img\"><br></p>\n<p>现在我自己用C写一个叫bigmem程序，我指定该程序分配内存85G，呵呵，效果明显，然后执行后再用top查看，排在第一位的是我的bigmem，RES是物理内存，已经吃满了85G。</p>\n<p><img src=\"/img/xjy/p48004.jpg\" alt=\"img\"><br></p>\n<p>继续观察，当bigmem稳定保持在85G一会后，内核会自动将其进程kill掉，增长的过程中没有被杀，如果不希望被杀可以执行<br>点击(此处)折叠或打开<br>pgrep -f “bigmem” | while read PID; do echo -17 &gt; /proc/$PID/oom_adj;done<br>执行以上命令前后，明显会对比出效果，就可以体会到内核OOM机制的实际作用了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>Kernel-2.6.26之前版本的oomkiller算法不够精确，RHEL 6.x版本的2.6.32可以解决这个问题。</li>\n<li>子进程会继承父进程的oom_adj。</li>\n<li>OOM不适合于解决内存泄漏(Memory leak)的问题。</li>\n<li>有时free查看还有充足的内存，但还是会触发OOM，是因为该进程可能占用了特殊的内存地址空间。</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://coolnull.com/3577.html\" target=\"_blank\" rel=\"noopener\">http://coolnull.com/3577.html</a></p>"},{"title":"vps+github上安装hexo next个人博客网站","id":"463","date":"2018-03-18T07:41:42.000Z","declare":true,"toc":true,"_content":"\n本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。\n\n## 环境\n\n+ 安装centos系统的搬瓦工VPS\n\n+ 在github.com中登录的账号\n\n+ 软件：nodeJs、git、nginx、hexo \n\n<!--more-->\n\n## 步骤\n\n### 1.安装nodejs\n我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。\n``` shell\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n```\n\n### 2.v安装git和nginx\n这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。\n``` shell \nyum -y update yum install -y git nginx\n```\n\n### 3.安装hexo\n具体命令如下：\n``` shell \n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n```\n\n### 4.生成ssh秘钥\nvps上生成ssh秘钥，后面会在github上使用\n``` shell\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n```\n\n### 5.新建远程github项目\n\n+ 在[github.com](http://github.com)登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）\n\n+ 将第4步生成的公钥复制并配置到你的github中，[配置地址](https://github.com/settings/ssh) (界面里选择Add An SSH Key进入)\n\n+ 将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：git@github.com:账户名/账户名.github.io.git）\n\n### 6.配置hexo\n\n``` text \n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n```\n\n### 7.配置git\n进入配置命令行，输入下面命令：\n```shell \n#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n```\n\n### 8.配置nginx\n找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:\n``` text \n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}\n```\n\n### 9.编译hexo资源\n上面一切就绪，可以编译生成网站文件并上传github了\n``` shell \n#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d\n```\n\n### 10.通过github结尾的网址访问\n账户名.github.io，例如我的[https://xiajunyi.github.io/](https://xiajunyi.github.io/)，第一次进入后的界面还是很清爽的。\n\n![](/img/xjy/hexoSimple1.jpg)\n\n### 11.自定义域名访问\n当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，[http://hexo.xiajunyi.com/](http://hexo.xiajunyi.com/)，别忘了启动nginx哦！\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n### 12.后续安排\n下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。\n\n## 参考链接\n+ [参考链接1](https://www.jianshu.com/p/0823e387c019)\n\n+ [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n\n+ [参考链接3](https://segmentfault.com/a/1190000010680022)","source":"_posts/p5.md","raw":"---\ntitle: vps+github上安装hexo next个人博客网站\nid: 463\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-03-18 15:41:42\ntags: [建站, hexo, github, 博客]\ndeclare: true\ntoc: true\n---\n\n本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。\n\n## 环境\n\n+ 安装centos系统的搬瓦工VPS\n\n+ 在github.com中登录的账号\n\n+ 软件：nodeJs、git、nginx、hexo \n\n<!--more-->\n\n## 步骤\n\n### 1.安装nodejs\n我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。\n``` shell\n#获取文件并解压到指定目录\nwget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz\ntar -xvf  node-v8.0.0-linux-x64.tar.xz\nmv node-v8.0.0-linux-x64 /usr/local/node\n#添加/etc/profile配置-加入如下两句\nexport NODE_HOME=/usr/local/node\nexport PATH=$NODE_HOME/bin:$PATH\n#使设置生效\nsource /etc/profile\n#验证版本\nnode -v\nnpm -v\n```\n\n### 2.v安装git和nginx\n这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。\n``` shell \nyum -y update yum install -y git nginx\n```\n\n### 3.安装hexo\n具体命令如下：\n``` shell \n#新建用于存放hexo博客站点的目录，并赋予权限\nmkdir -p /data/www/hexo\nchown -R $USER:$USER /data/www/hexo\nchmod -R 755 /data/www/hexo\n#进入目录\ncd /data/www/hexo\n#安装hexo\nnpm install -g hexo-cli\n#初始化hexo\nhexo init\n#安装插件\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-generator-feed --save\nnpm install hexo-generator-sitemap --save\n#可先查看默认配置文件（待github项目建成后方可配置）\nview /data/www/hexo/_config.yml\n```\n\n### 4.生成ssh秘钥\nvps上生成ssh秘钥，后面会在github上使用\n``` shell\n#注意-C后面跟的是你在github上注册时的邮箱\nssh-keygen -t rsa -C example@163.com\n#接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可\n#然后会让你输入和确认密码\n#查看生成好的公钥\nless ~/.ssh/id_rsa.pub\n```\n\n### 5.新建远程github项目\n\n+ 在[github.com](http://github.com)登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）\n\n+ 将第4步生成的公钥复制并配置到你的github中，[配置地址](https://github.com/settings/ssh) (界面里选择Add An SSH Key进入)\n\n+ 将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：git@github.com:账户名/账户名.github.io.git）\n\n### 6.配置hexo\n\n``` text \n#还记得第3步最后的这句吗\nview /data/www/hexo/_config.yml\n#修改末尾的deploy部分，改成下面这个样子，注意替换账户名\ndeploy:\n  type: git\n  repo: git@github.com:账户名/账户名.github.io.git\n  branch: master\n```\n\n### 7.配置git\n进入配置命令行，输入下面命令：\n```shell \n#配置git用户名，即为github上的用户名\ngit config --global user.name \"github用户名\"\n#配置git邮箱，即为github上的邮箱\ngit config --global user.email \"github邮箱\"\n#如果想测试连接是否正常，可执行下面这句\nssh -T git@github.com\n#待输入密码后看到successful字段，即表示连接配置正常\n```\n\n### 8.配置nginx\n找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:\n``` text \n#将转发给hexo，特别注意hexo的网页文件在public目录中\nserver {\n      listen       80 ;\n      server_name  www.example.com; # 填写个人域名\n       location / {\n             root /data/www/hexo/public;\n             index  index.html index.htm;\n       }      \n}\n```\n\n### 9.编译hexo资源\n上面一切就绪，可以编译生成网站文件并上传github了\n``` shell \n#打开网站目录\ncd /data/www/hexo\n#编译hexo\nhexo generate\n#上传并更新到github上\nhexo d\n```\n\n### 10.通过github结尾的网址访问\n账户名.github.io，例如我的[https://xiajunyi.github.io/](https://xiajunyi.github.io/)，第一次进入后的界面还是很清爽的。\n\n![](/img/xjy/hexoSimple1.jpg)\n\n### 11.自定义域名访问\n当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，[http://hexo.xiajunyi.com/](http://hexo.xiajunyi.com/)，别忘了启动nginx哦！\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n### 12.后续安排\n下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。\n\n## 参考链接\n+ [参考链接1](https://www.jianshu.com/p/0823e387c019)\n\n+ [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n\n+ [参考链接3](https://segmentfault.com/a/1190000010680022)","slug":"p5","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jif002fu8vengbbiz6m","content":"<p>本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>安装centos系统的搬瓦工VPS</p>\n</li>\n<li><p>在github.com中登录的账号</p>\n</li>\n<li><p>软件：nodeJs、git、nginx、hexo </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-安装nodejs\"><a href=\"#1-安装nodejs\" class=\"headerlink\" title=\"1.安装nodejs\"></a>1.安装nodejs</h3><p>我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取文件并解压到指定目录</span></span><br><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">tar -xvf  node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.0.0-linux-x64 /usr/local/node</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加/etc/profile配置-加入如下两句</span></span><br><span class=\"line\">export NODE_HOME=/usr/local/node</span><br><span class=\"line\">export PATH=$NODE_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使设置生效</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">验证版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-v安装git和nginx\"><a href=\"#2-v安装git和nginx\" class=\"headerlink\" title=\"2.v安装git和nginx\"></a>2.v安装git和nginx</h3><p>这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update yum install -y git nginx</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><p>具体命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建用于存放hexo博客站点的目录，并赋予权限</span></span><br><span class=\"line\">mkdir -p /data/www/hexo</span><br><span class=\"line\">chown -R $USER:$USER /data/www/hexo</span><br><span class=\"line\">chmod -R 755 /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装hexo</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">初始化hexo</span></span><br><span class=\"line\">hexo init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装插件</span></span><br><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可先查看默认配置文件（待github项目建成后方可配置）</span></span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-生成ssh秘钥\"><a href=\"#4-生成ssh秘钥\" class=\"headerlink\" title=\"4.生成ssh秘钥\"></a>4.生成ssh秘钥</h3><p>vps上生成ssh秘钥，后面会在github上使用<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意-C后面跟的是你在github上注册时的邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa -C example@163.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后会让你输入和确认密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看生成好的公钥</span></span><br><span class=\"line\">less ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-新建远程github项目\"><a href=\"#5-新建远程github项目\" class=\"headerlink\" title=\"5.新建远程github项目\"></a>5.新建远程github项目</h3><ul>\n<li><p>在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）</p>\n</li>\n<li><p>将第4步生成的公钥复制并配置到你的github中，<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">配置地址</a> (界面里选择Add An SSH Key进入)</p>\n</li>\n<li><p>将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:账户名/账户名.github.io.git）</span></p>\n</li>\n</ul>\n<h3 id=\"6-配置hexo\"><a href=\"#6-配置hexo\" class=\"headerlink\" title=\"6.配置hexo\"></a>6.配置hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#还记得第3步最后的这句吗</span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br><span class=\"line\">#修改末尾的deploy部分，改成下面这个样子，注意替换账户名</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:账户名/账户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-配置git\"><a href=\"#7-配置git\" class=\"headerlink\" title=\"7.配置git\"></a>7.配置git</h3><p>进入配置命令行，输入下面命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git用户名，即为github上的用户名</span></span><br><span class=\"line\">git config --global user.name \"github用户名\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git邮箱，即为github上的邮箱</span></span><br><span class=\"line\">git config --global user.email \"github邮箱\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果想测试连接是否正常，可执行下面这句</span></span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">待输入密码后看到successful字段，即表示连接配置正常</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-配置nginx\"><a href=\"#8-配置nginx\" class=\"headerlink\" title=\"8.配置nginx\"></a>8.配置nginx</h3><p>找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将转发给hexo，特别注意hexo的网页文件在public目录中</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">      listen       80 ;</span><br><span class=\"line\">      server_name  www.example.com; # 填写个人域名</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">             root /data/www/hexo/public;</span><br><span class=\"line\">             index  index.html index.htm;</span><br><span class=\"line\">       &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-编译hexo资源\"><a href=\"#9-编译hexo资源\" class=\"headerlink\" title=\"9.编译hexo资源\"></a>9.编译hexo资源</h3><p>上面一切就绪，可以编译生成网站文件并上传github了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开网站目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译hexo</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传并更新到github上</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-通过github结尾的网址访问\"><a href=\"#10-通过github结尾的网址访问\" class=\"headerlink\" title=\"10.通过github结尾的网址访问\"></a>10.通过github结尾的网址访问</h3><p>账户名.github.io，例如我的<a href=\"https://xiajunyi.github.io/\" target=\"_blank\" rel=\"noopener\">https://xiajunyi.github.io/</a>，第一次进入后的界面还是很清爽的。</p>\n<p><img src=\"/img/xjy/hexoSimple1.jpg\" alt=\"\"></p>\n<h3 id=\"11-自定义域名访问\"><a href=\"#11-自定义域名访问\" class=\"headerlink\" title=\"11.自定义域名访问\"></a>11.自定义域名访问</h3><p>当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，<a href=\"http://hexo.xiajunyi.com/\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/</a>，别忘了启动nginx哦！</p>\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n<h3 id=\"12-后续安排\"><a href=\"#12-后续安排\" class=\"headerlink\" title=\"12.后续安排\"></a>12.后续安排</h3><p>下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><p><a href=\"https://www.jianshu.com/p/0823e387c019\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/31eb5c754c01\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000010680022\" target=\"_blank\" rel=\"noopener\">参考链接3</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本篇文章是在参考并综合了网上的一些方法，结合实际操作后完成，希望能够给大家提供帮助。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>安装centos系统的搬瓦工VPS</p>\n</li>\n<li><p>在github.com中登录的账号</p>\n</li>\n<li><p>软件：nodeJs、git、nginx、hexo </p>\n</li>\n</ul>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"1-安装nodejs\"><a href=\"#1-安装nodejs\" class=\"headerlink\" title=\"1.安装nodejs\"></a>1.安装nodejs</h3><p>我这里安装的是v8版本，因为hexo next建议安装node v6以上,以免出现其他不支持的错误。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">获取文件并解压到指定目录</span></span><br><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">tar -xvf  node-v8.0.0-linux-x64.tar.xz</span><br><span class=\"line\">mv node-v8.0.0-linux-x64 /usr/local/node</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加/etc/profile配置-加入如下两句</span></span><br><span class=\"line\">export NODE_HOME=/usr/local/node</span><br><span class=\"line\">export PATH=$NODE_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使设置生效</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">验证版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-v安装git和nginx\"><a href=\"#2-v安装git和nginx\" class=\"headerlink\" title=\"2.v安装git和nginx\"></a>2.v安装git和nginx</h3><p>这里网上很多，我也是安装其他程序的时候已经好了，下面给出的方法可以自行尝试。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update yum install -y git nginx</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装hexo\"><a href=\"#3-安装hexo\" class=\"headerlink\" title=\"3.安装hexo\"></a>3.安装hexo</h3><p>具体命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">新建用于存放hexo博客站点的目录，并赋予权限</span></span><br><span class=\"line\">mkdir -p /data/www/hexo</span><br><span class=\"line\">chown -R $USER:$USER /data/www/hexo</span><br><span class=\"line\">chmod -R 755 /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装hexo</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">初始化hexo</span></span><br><span class=\"line\">hexo init</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装插件</span></span><br><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-stylus --save</span><br><span class=\"line\">npm install hexo-generator-feed --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可先查看默认配置文件（待github项目建成后方可配置）</span></span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-生成ssh秘钥\"><a href=\"#4-生成ssh秘钥\" class=\"headerlink\" title=\"4.生成ssh秘钥\"></a>4.生成ssh秘钥</h3><p>vps上生成ssh秘钥，后面会在github上使用<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">注意-C后面跟的是你在github上注册时的邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa -C example@163.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">接下来会让你选择存储地址，我选择的是默认的,直接按ENTER键即可</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后会让你输入和确认密码</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看生成好的公钥</span></span><br><span class=\"line\">less ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-新建远程github项目\"><a href=\"#5-新建远程github项目\" class=\"headerlink\" title=\"5.新建远程github项目\"></a>5.新建远程github项目</h3><ul>\n<li><p>在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>登录你的账户，新建一个github项目,项目名一定要设成：_账户名.github.io（其中用户名为你github的账户名）</p>\n</li>\n<li><p>将第4步生成的公钥复制并配置到你的github中，<a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">配置地址</a> (界面里选择Add An SSH Key进入)</p>\n</li>\n<li><p>将新建项目的ssh地址复制出来，注意clone地址时选择的是ssh样式的 <span style=\"color: #ff0000;\">_（例如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:账户名/账户名.github.io.git）</span></p>\n</li>\n</ul>\n<h3 id=\"6-配置hexo\"><a href=\"#6-配置hexo\" class=\"headerlink\" title=\"6.配置hexo\"></a>6.配置hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#还记得第3步最后的这句吗</span><br><span class=\"line\">view /data/www/hexo/_config.yml</span><br><span class=\"line\">#修改末尾的deploy部分，改成下面这个样子，注意替换账户名</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:账户名/账户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-配置git\"><a href=\"#7-配置git\" class=\"headerlink\" title=\"7.配置git\"></a>7.配置git</h3><p>进入配置命令行，输入下面命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git用户名，即为github上的用户名</span></span><br><span class=\"line\">git config --global user.name \"github用户名\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置git邮箱，即为github上的邮箱</span></span><br><span class=\"line\">git config --global user.email \"github邮箱\"</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果想测试连接是否正常，可执行下面这句</span></span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">待输入密码后看到successful字段，即表示连接配置正常</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-配置nginx\"><a href=\"#8-配置nginx\" class=\"headerlink\" title=\"8.配置nginx\"></a>8.配置nginx</h3><p>找到nginx的配置文件，我的在/etc/nginx/conf.d/virtual.conf，加入如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将转发给hexo，特别注意hexo的网页文件在public目录中</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">      listen       80 ;</span><br><span class=\"line\">      server_name  www.example.com; # 填写个人域名</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">             root /data/www/hexo/public;</span><br><span class=\"line\">             index  index.html index.htm;</span><br><span class=\"line\">       &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-编译hexo资源\"><a href=\"#9-编译hexo资源\" class=\"headerlink\" title=\"9.编译hexo资源\"></a>9.编译hexo资源</h3><p>上面一切就绪，可以编译生成网站文件并上传github了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开网站目录</span></span><br><span class=\"line\">cd /data/www/hexo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译hexo</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传并更新到github上</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-通过github结尾的网址访问\"><a href=\"#10-通过github结尾的网址访问\" class=\"headerlink\" title=\"10.通过github结尾的网址访问\"></a>10.通过github结尾的网址访问</h3><p>账户名.github.io，例如我的<a href=\"https://xiajunyi.github.io/\" target=\"_blank\" rel=\"noopener\">https://xiajunyi.github.io/</a>，第一次进入后的界面还是很清爽的。</p>\n<p><img src=\"/img/xjy/hexoSimple1.jpg\" alt=\"\"></p>\n<h3 id=\"11-自定义域名访问\"><a href=\"#11-自定义域名访问\" class=\"headerlink\" title=\"11.自定义域名访问\"></a>11.自定义域名访问</h3><p>当然大部分人也想通过自己的域名访问(那就是第8步在nginx中配置好的域名了)，比如我现在配置的，<a href=\"http://hexo.xiajunyi.com/\" target=\"_blank\" rel=\"noopener\">http://hexo.xiajunyi.com/</a>，别忘了启动nginx哦！</p>\n<pre class=\"lang:sh decode:true\">service nginx start</pre>\n\n<h3 id=\"12-后续安排\"><a href=\"#12-后续安排\" class=\"headerlink\" title=\"12.后续安排\"></a>12.后续安排</h3><p>下一步我要考虑把wordpress网站的文章迁移过来了，这篇文章就先到这里吧，后面再更新迁移的方法。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><p><a href=\"https://www.jianshu.com/p/0823e387c019\" target=\"_blank\" rel=\"noopener\">参考链接1</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/31eb5c754c01\" target=\"_blank\" rel=\"noopener\">参考链接2</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000010680022\" target=\"_blank\" rel=\"noopener\">参考链接3</a></p>\n</li>\n</ul>"},{"title":"Git命令的积累","id":"412","date":"2017-09-12T01:35:09.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p51000.png)<br/>\n## 简介\n本篇文章记录自己在使用git时积累的命令，后续会不断更新。学习过程中我推荐一篇图解Git的文章和官网推荐书籍的中文版，详情在[https://github.com/xiajunyi/git-learning](https://github.com/xiajunyi/git-learning)。\n\n<!--more-->\n\n\n## git stash（暂存）\n+ 暂存当前工作区和缓存区的内容\n``` shell\ngit stash\n```\n\n+ 取回某个暂存编号的内容，恢复到工作空间和缓存区\n``` shell\ngit stash pop\n```\n\n## git reset（重置）\n+ 只重置本地仓库的内容\n``` shell\ngit reset --soft [<commitId>]\n```\n\n+ 默认是这种情况，重置本地仓库和缓存区的内容\n``` shell\ngit rest --mixed [<commitId>]\n```\n\n+ 重置本地仓库、缓存区以及工作空间的内容\n``` shell\ngit rest --hard [<commitId>]\n```\n\n## git checkout（检出：功能较杂）\n+ 切换分支\n``` shell\ngit checkout <branchName>\n```\n\n+ 新建分支\n``` shell\ngit checkout -b <branchName>\n##等价如下两条命令\n##1. git branch newBranch \n##2. git checkout newBranch\n```\n+ 新建关联到某远程分支的分支\n``` shell\ngit checkout -b <branchName> <remoteBranchName> \n```\n\n+ 强制新建分支\n``` shell\ngit checkout -B <branchName>\n```\n\n+ 选择一个提交记录为起点去创建新分支\n``` shell\ngit checkout -b <new_branch> [<start_point>]\n```\n## git diff（比较差异）\n+ 比较工作区和暂存区\n``` shell\ngit diff\n```\n+ 比较暂存区与最新本地版本库（本地库中最近一次commit的内容）\n``` shell\ngit diff --cached  [<path>...] \n```\n\n+ 比较工作区与最新本地版本库\n``` shell\ngit diff HEAD [<path>...] \n##如果HEAD指向的是master分支，那么HEAD还可以换成master\n```\n+ 比较工作区与指定commit-id的差异\n``` shell\ngit diff commit-id  [<path>...] \n```\n+ 比较暂存区与指定commit-id的差异\n``` shell\n　　　　　　git diff --cached [<commit-id>] [<path>...] \n```\n+ 比较两个commit-id之间的差异\n``` shell\ngit diff [<commit-id>] [<commit-id>]\n```\n\n## git cherry-pick/rebase(自定义合并)\n+ 只挑选某几条提交记录合并到该分支\n``` shell\ngit cherry-pick <commitId1> [<commitId12>] ...\n```\n+ 将A分支所有新提交的内容以B分支为基准合并\n``` shell\ngit rebase B\n##前提是当前在A分支上\n```\n\n+ 仅将A分支某个提交号以后的内容以B分支为基准合并\n``` shell\ngit rebase --onto B <commitId>\n##前提是当前在A分支上\n```\n\n## git rm（git常用的删除）\n+ 删除暂存区或分支上的文件,同时工作区也不需要这个文件了\n``` shell\ngit rm file_path\ngit commit -m 'delete somefile'\n```\n\n+ 删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制\n``` shell\ngit rm --cached file_path\ngit commit -m 'delete remote somefile'\n```\n\n## 强制操作\n+ 强制将分支指向某一提交记录）\n``` shell\ngit branch -f <branchName> <commitId>\n```\n\n+ 更改某一次提交的内容\n``` shell\ngit commit --amend [<commitId>]\n```\n\n+ 强制推送本地的版本覆盖远程分支的内容\n``` shell\ngit push -f \n```\n\n## 常用查看技巧\n+ 更为紧凑的git status\n``` shell\ngit status -s\n```\n\n+ 带差异的显示最近两条提交记录\n``` shell\ngit log -p -2\n```\n\n+ 将每个提交放在一行显示\n``` shell\ngit log --pretty=oneline \n```\n+ git log --pretty=format 常用的选项：\n``` shell\ngit log --pretty=format:\"%h - %an, %ar : %s\n```\n```\n选项|说明\n-|-|-\n%H|提交对象（commit）的完整哈希字串 \n%h|提交对象的简短哈希字串 \n%T|树对象（tree）的完整哈希字串 \n%t|树对象的简短哈希字串 \n%P|父对象（parent）的完整哈希字串 \n%p|父对象的简短哈希字串 \n%an|作者（author）的名字 \n%ae|作者的电子邮件地址 \n%ad|作者修订日期（可以用 --date= 选项定制格式） \n%ar|作者修订日期，按多久以前的方式显示 \n%cn|提交者(committer)的名字 \n%ce|提交者的电子邮件地址 \n%cd|提交日期 \n%cr|提交日期，按多久以前的方式显示 \n%s|提交说明 \n```\n\n## 参考资料\n+ [图解Git](https://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n+ [progit2中文版](https://git-scm.com/book/zh/v2)\n+ [玩游戏学git的网站](https://learngitbranching.js.org/)","source":"_posts/p51.md","raw":"---\ntitle: Git命令的积累\nid: 412\ncategories:\n  - 编程语言\ndate: 2017/9/12 9:35:09     \ntags: [编程, 运维, git]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p51000.png)<br/>\n## 简介\n本篇文章记录自己在使用git时积累的命令，后续会不断更新。学习过程中我推荐一篇图解Git的文章和官网推荐书籍的中文版，详情在[https://github.com/xiajunyi/git-learning](https://github.com/xiajunyi/git-learning)。\n\n<!--more-->\n\n\n## git stash（暂存）\n+ 暂存当前工作区和缓存区的内容\n``` shell\ngit stash\n```\n\n+ 取回某个暂存编号的内容，恢复到工作空间和缓存区\n``` shell\ngit stash pop\n```\n\n## git reset（重置）\n+ 只重置本地仓库的内容\n``` shell\ngit reset --soft [<commitId>]\n```\n\n+ 默认是这种情况，重置本地仓库和缓存区的内容\n``` shell\ngit rest --mixed [<commitId>]\n```\n\n+ 重置本地仓库、缓存区以及工作空间的内容\n``` shell\ngit rest --hard [<commitId>]\n```\n\n## git checkout（检出：功能较杂）\n+ 切换分支\n``` shell\ngit checkout <branchName>\n```\n\n+ 新建分支\n``` shell\ngit checkout -b <branchName>\n##等价如下两条命令\n##1. git branch newBranch \n##2. git checkout newBranch\n```\n+ 新建关联到某远程分支的分支\n``` shell\ngit checkout -b <branchName> <remoteBranchName> \n```\n\n+ 强制新建分支\n``` shell\ngit checkout -B <branchName>\n```\n\n+ 选择一个提交记录为起点去创建新分支\n``` shell\ngit checkout -b <new_branch> [<start_point>]\n```\n## git diff（比较差异）\n+ 比较工作区和暂存区\n``` shell\ngit diff\n```\n+ 比较暂存区与最新本地版本库（本地库中最近一次commit的内容）\n``` shell\ngit diff --cached  [<path>...] \n```\n\n+ 比较工作区与最新本地版本库\n``` shell\ngit diff HEAD [<path>...] \n##如果HEAD指向的是master分支，那么HEAD还可以换成master\n```\n+ 比较工作区与指定commit-id的差异\n``` shell\ngit diff commit-id  [<path>...] \n```\n+ 比较暂存区与指定commit-id的差异\n``` shell\n　　　　　　git diff --cached [<commit-id>] [<path>...] \n```\n+ 比较两个commit-id之间的差异\n``` shell\ngit diff [<commit-id>] [<commit-id>]\n```\n\n## git cherry-pick/rebase(自定义合并)\n+ 只挑选某几条提交记录合并到该分支\n``` shell\ngit cherry-pick <commitId1> [<commitId12>] ...\n```\n+ 将A分支所有新提交的内容以B分支为基准合并\n``` shell\ngit rebase B\n##前提是当前在A分支上\n```\n\n+ 仅将A分支某个提交号以后的内容以B分支为基准合并\n``` shell\ngit rebase --onto B <commitId>\n##前提是当前在A分支上\n```\n\n## git rm（git常用的删除）\n+ 删除暂存区或分支上的文件,同时工作区也不需要这个文件了\n``` shell\ngit rm file_path\ngit commit -m 'delete somefile'\n```\n\n+ 删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制\n``` shell\ngit rm --cached file_path\ngit commit -m 'delete remote somefile'\n```\n\n## 强制操作\n+ 强制将分支指向某一提交记录）\n``` shell\ngit branch -f <branchName> <commitId>\n```\n\n+ 更改某一次提交的内容\n``` shell\ngit commit --amend [<commitId>]\n```\n\n+ 强制推送本地的版本覆盖远程分支的内容\n``` shell\ngit push -f \n```\n\n## 常用查看技巧\n+ 更为紧凑的git status\n``` shell\ngit status -s\n```\n\n+ 带差异的显示最近两条提交记录\n``` shell\ngit log -p -2\n```\n\n+ 将每个提交放在一行显示\n``` shell\ngit log --pretty=oneline \n```\n+ git log --pretty=format 常用的选项：\n``` shell\ngit log --pretty=format:\"%h - %an, %ar : %s\n```\n```\n选项|说明\n-|-|-\n%H|提交对象（commit）的完整哈希字串 \n%h|提交对象的简短哈希字串 \n%T|树对象（tree）的完整哈希字串 \n%t|树对象的简短哈希字串 \n%P|父对象（parent）的完整哈希字串 \n%p|父对象的简短哈希字串 \n%an|作者（author）的名字 \n%ae|作者的电子邮件地址 \n%ad|作者修订日期（可以用 --date= 选项定制格式） \n%ar|作者修订日期，按多久以前的方式显示 \n%cn|提交者(committer)的名字 \n%ce|提交者的电子邮件地址 \n%cd|提交日期 \n%cr|提交日期，按多久以前的方式显示 \n%s|提交说明 \n```\n\n## 参考资料\n+ [图解Git](https://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n+ [progit2中文版](https://git-scm.com/book/zh/v2)\n+ [玩游戏学git的网站](https://learngitbranching.js.org/)","slug":"p51","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jii002ju8ve4uekzmgq","content":"<p><img src=\"/img/xjy/p51000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本篇文章记录自己在使用git时积累的命令，后续会不断更新。学习过程中我推荐一篇图解Git的文章和官网推荐书籍的中文版，详情在<a href=\"https://github.com/xiajunyi/git-learning\" target=\"_blank\" rel=\"noopener\">https://github.com/xiajunyi/git-learning</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"git-stash（暂存）\"><a href=\"#git-stash（暂存）\" class=\"headerlink\" title=\"git stash（暂存）\"></a>git stash（暂存）</h2><ul>\n<li><p>暂存当前工作区和缓存区的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取回某个暂存编号的内容，恢复到工作空间和缓存区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-reset（重置）\"><a href=\"#git-reset（重置）\" class=\"headerlink\" title=\"git reset（重置）\"></a>git reset（重置）</h2><ul>\n<li><p>只重置本地仓库的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认是这种情况，重置本地仓库和缓存区的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rest --mixed [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置本地仓库、缓存区以及工作空间的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rest --hard [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-checkout（检出：功能较杂）\"><a href=\"#git-checkout（检出：功能较杂）\" class=\"headerlink\" title=\"git checkout（检出：功能较杂）\"></a>git checkout（检出：功能较杂）</h2><ul>\n<li><p>切换分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branchName&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#等价如下两条命令</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#1. git branch newBranch </span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#2. git checkout newBranch</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建关联到某远程分支的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branchName&gt; &lt;remoteBranchName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>强制新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -B &lt;branchName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择一个提交记录为起点去创建新分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;new_branch&gt; [&lt;start_point&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-diff（比较差异）\"><a href=\"#git-diff（比较差异）\" class=\"headerlink\" title=\"git diff（比较差异）\"></a>git diff（比较差异）</h2><ul>\n<li><p>比较工作区和暂存区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较暂存区与最新本地版本库（本地库中最近一次commit的内容）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached  [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较工作区与最新本地版本库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD [&lt;path&gt;...] </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#如果HEAD指向的是master分支，那么HEAD还可以换成master</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较工作区与指定commit-id的差异</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff commit-id  [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较暂存区与指定commit-id的差异</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　　　　　git diff --cached [&lt;commit-id&gt;] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较两个commit-id之间的差异</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff [&lt;commit-id&gt;] [&lt;commit-id&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-cherry-pick-rebase-自定义合并\"><a href=\"#git-cherry-pick-rebase-自定义合并\" class=\"headerlink\" title=\"git cherry-pick/rebase(自定义合并)\"></a>git cherry-pick/rebase(自定义合并)</h2><ul>\n<li><p>只挑选某几条提交记录合并到该分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick &lt;commitId1&gt; [&lt;commitId12&gt;] ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将A分支所有新提交的内容以B分支为基准合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase B</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#前提是当前在A分支上</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仅将A分支某个提交号以后的内容以B分支为基准合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --onto B &lt;commitId&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#前提是当前在A分支上</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-rm（git常用的删除）\"><a href=\"#git-rm（git常用的删除）\" class=\"headerlink\" title=\"git rm（git常用的删除）\"></a>git rm（git常用的删除）</h2><ul>\n<li><p>删除暂存区或分支上的文件,同时工作区也不需要这个文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm file_path</span><br><span class=\"line\">git commit -m 'delete somefile'</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached file_path</span><br><span class=\"line\">git commit -m 'delete remote somefile'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"强制操作\"><a href=\"#强制操作\" class=\"headerlink\" title=\"强制操作\"></a>强制操作</h2><ul>\n<li><p>强制将分支指向某一提交记录）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -f &lt;branchName&gt; &lt;commitId&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改某一次提交的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>强制推送本地的版本覆盖远程分支的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"常用查看技巧\"><a href=\"#常用查看技巧\" class=\"headerlink\" title=\"常用查看技巧\"></a>常用查看技巧</h2><ul>\n<li><p>更为紧凑的git status</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带差异的显示最近两条提交记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p -2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将每个提交放在一行显示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git log –pretty=format 常用的选项：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=format:\"%h - %an, %ar : %s</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选项|说明</span><br><span class=\"line\">-|-|-</span><br><span class=\"line\">%H|提交对象（commit）的完整哈希字串 </span><br><span class=\"line\">%h|提交对象的简短哈希字串 </span><br><span class=\"line\">%T|树对象（tree）的完整哈希字串 </span><br><span class=\"line\">%t|树对象的简短哈希字串 </span><br><span class=\"line\">%P|父对象（parent）的完整哈希字串 </span><br><span class=\"line\">%p|父对象的简短哈希字串 </span><br><span class=\"line\">%an|作者（author）的名字 </span><br><span class=\"line\">%ae|作者的电子邮件地址 </span><br><span class=\"line\">%ad|作者修订日期（可以用 --date= 选项定制格式） </span><br><span class=\"line\">%ar|作者修订日期，按多久以前的方式显示 </span><br><span class=\"line\">%cn|提交者(committer)的名字 </span><br><span class=\"line\">%ce|提交者的电子邮件地址 </span><br><span class=\"line\">%cd|提交日期 </span><br><span class=\"line\">%cr|提交日期，按多久以前的方式显示 </span><br><span class=\"line\">%s|提交说明</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">progit2中文版</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">玩游戏学git的网站</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p51000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本篇文章记录自己在使用git时积累的命令，后续会不断更新。学习过程中我推荐一篇图解Git的文章和官网推荐书籍的中文版，详情在<a href=\"https://github.com/xiajunyi/git-learning\" target=\"_blank\" rel=\"noopener\">https://github.com/xiajunyi/git-learning</a>。</p>","more":"<h2 id=\"git-stash（暂存）\"><a href=\"#git-stash（暂存）\" class=\"headerlink\" title=\"git stash（暂存）\"></a>git stash（暂存）</h2><ul>\n<li><p>暂存当前工作区和缓存区的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取回某个暂存编号的内容，恢复到工作空间和缓存区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-reset（重置）\"><a href=\"#git-reset（重置）\" class=\"headerlink\" title=\"git reset（重置）\"></a>git reset（重置）</h2><ul>\n<li><p>只重置本地仓库的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认是这种情况，重置本地仓库和缓存区的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rest --mixed [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重置本地仓库、缓存区以及工作空间的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rest --hard [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-checkout（检出：功能较杂）\"><a href=\"#git-checkout（检出：功能较杂）\" class=\"headerlink\" title=\"git checkout（检出：功能较杂）\"></a>git checkout（检出：功能较杂）</h2><ul>\n<li><p>切换分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;branchName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branchName&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#等价如下两条命令</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#1. git branch newBranch </span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#2. git checkout newBranch</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建关联到某远程分支的分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branchName&gt; &lt;remoteBranchName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>强制新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -B &lt;branchName&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择一个提交记录为起点去创建新分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;new_branch&gt; [&lt;start_point&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-diff（比较差异）\"><a href=\"#git-diff（比较差异）\" class=\"headerlink\" title=\"git diff（比较差异）\"></a>git diff（比较差异）</h2><ul>\n<li><p>比较工作区和暂存区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较暂存区与最新本地版本库（本地库中最近一次commit的内容）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached  [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较工作区与最新本地版本库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD [&lt;path&gt;...] </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#如果HEAD指向的是master分支，那么HEAD还可以换成master</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较工作区与指定commit-id的差异</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff commit-id  [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较暂存区与指定commit-id的差异</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　　　　　git diff --cached [&lt;commit-id&gt;] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较两个commit-id之间的差异</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff [&lt;commit-id&gt;] [&lt;commit-id&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-cherry-pick-rebase-自定义合并\"><a href=\"#git-cherry-pick-rebase-自定义合并\" class=\"headerlink\" title=\"git cherry-pick/rebase(自定义合并)\"></a>git cherry-pick/rebase(自定义合并)</h2><ul>\n<li><p>只挑选某几条提交记录合并到该分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick &lt;commitId1&gt; [&lt;commitId12&gt;] ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将A分支所有新提交的内容以B分支为基准合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase B</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#前提是当前在A分支上</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仅将A分支某个提交号以后的内容以B分支为基准合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --onto B &lt;commitId&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#前提是当前在A分支上</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"git-rm（git常用的删除）\"><a href=\"#git-rm（git常用的删除）\" class=\"headerlink\" title=\"git rm（git常用的删除）\"></a>git rm（git常用的删除）</h2><ul>\n<li><p>删除暂存区或分支上的文件,同时工作区也不需要这个文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm file_path</span><br><span class=\"line\">git commit -m 'delete somefile'</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached file_path</span><br><span class=\"line\">git commit -m 'delete remote somefile'</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"强制操作\"><a href=\"#强制操作\" class=\"headerlink\" title=\"强制操作\"></a>强制操作</h2><ul>\n<li><p>强制将分支指向某一提交记录）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -f &lt;branchName&gt; &lt;commitId&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改某一次提交的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend [&lt;commitId&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>强制推送本地的版本覆盖远程分支的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"常用查看技巧\"><a href=\"#常用查看技巧\" class=\"headerlink\" title=\"常用查看技巧\"></a>常用查看技巧</h2><ul>\n<li><p>更为紧凑的git status</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带差异的显示最近两条提交记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p -2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将每个提交放在一行显示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git log –pretty=format 常用的选项：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=format:\"%h - %an, %ar : %s</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选项|说明</span><br><span class=\"line\">-|-|-</span><br><span class=\"line\">%H|提交对象（commit）的完整哈希字串 </span><br><span class=\"line\">%h|提交对象的简短哈希字串 </span><br><span class=\"line\">%T|树对象（tree）的完整哈希字串 </span><br><span class=\"line\">%t|树对象的简短哈希字串 </span><br><span class=\"line\">%P|父对象（parent）的完整哈希字串 </span><br><span class=\"line\">%p|父对象的简短哈希字串 </span><br><span class=\"line\">%an|作者（author）的名字 </span><br><span class=\"line\">%ae|作者的电子邮件地址 </span><br><span class=\"line\">%ad|作者修订日期（可以用 --date= 选项定制格式） </span><br><span class=\"line\">%ar|作者修订日期，按多久以前的方式显示 </span><br><span class=\"line\">%cn|提交者(committer)的名字 </span><br><span class=\"line\">%ce|提交者的电子邮件地址 </span><br><span class=\"line\">%cd|提交日期 </span><br><span class=\"line\">%cr|提交日期，按多久以前的方式显示 </span><br><span class=\"line\">%s|提交说明</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">图解Git</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">progit2中文版</a></li>\n<li><a href=\"https://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener\">玩游戏学git的网站</a></li>\n</ul>"},{"title":"【转】git 使用简易指南","id":"412","date":"2017-08-14T06:13:48.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p49000.png)<br/>\n\n+ 转载自[Permalink to git 使用简易指南](http://www.bootcss.com/p/git-guide/)\n\n> 转载原因：<br/>该篇文章比较简洁易懂、注重流程，包含git常用入门操作，转到这里方便温习和查用。\n\n<!--more-->\n\n# git - 简易指南\n\n助你开始使用 git 的简易指南，木有高深内容，;)。\n\n[Tweet][1]\n\n作者：[罗杰·杜德勒][2]   \n感谢：[@tfnico][3], [@fhd][4] and [Namics][5] \n\n## 安装\n\n[下载 git OSX 版][20]\n\n[下载 git Windows 版][21]\n\n[下载 git Linux 版][22]\n\n## 创建新仓库\n\n创建新文件夹，打开，然后执行   \n`git init`  \n以创建新的 git 仓库。 \n\n## 检出仓库\n\n执行如下命令以创建一个本地仓库的克隆版本：  \n`git clone /path/to/repository`   \n如果是远端服务器上的仓库，你的命令会是这个样子：  \n`git clone username@host:/path/to/repository`\n\n## 工作流\n\n你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的 `工作目录`，它持有实际文件；第二个是 `缓存区（Index）`，它像个缓存区域，临时保存你的改动；最后是 `HEAD`，指向你最近一次提交后的结果。 \n\n![img](/img/xjy/p49001.png)\n\n## 添加与提交\n\n你可以计划改动（把它们添加到缓存区），使用如下命令：  \n`git add `  \n`git add *`  \n这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：  \n`git commit -m \"代码提交信息\"`  \n现在，你的改动已经提交到了 **HEAD**，但是还没到你的远端仓库。 \n\n## 推送改动\n\n你的改动现在已经在本地仓库的 **HEAD** 中了。执行如下命令以将这些改动提交到远端仓库：  \n`git push origin master`  \n可以把 _master_ 换成你想要推送的任何分支。   \n  \n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：  \n`git remote add origin `  \n如此你就能够将你的改动推送到所添加的服务器上去了。  \n\n## 分支\n\n分支是用来将特性开发绝缘开来的。在你创建仓库的时候，_master_ 是\"默认的\"。在其他分支上进行开发，完成后再将它们合并到主分支上。 \n\n![img](/img/xjy/p49002.png)\n\n创建一个叫做\"feature_x\"的分支，并切换过去：  \n`git checkout -b feature_x`  \n切换回主分支：  \n`git checkout master`  \n再把新建的分支删掉：  \n`git branch -d feature_x`  \n除非你将分支推送到远端仓库，不然该分支就是 _不为他人所见的_：  \n`git push origin `\n\n## 更新与合并\n\n要更新你的本地仓库至最新改动，执行：  \n`git pull`  \n以在你的工作目录中 _获取（fetch）_ 并 _合并（merge）_ 远端的改动。  \n要合并其他分支到你的当前分支（例如 master），执行：  \n`git merge `  \n两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 _冲突（conflicts）_。 这时候就需要你修改这些文件来人肉合并这些 _冲突（conflicts）_ 了。改完之后，你需要执行如下命令以将它们标记为合并成功：  \n`git add `  \n在合并改动之前，也可以使用如下命令查看：  \n`git diff  `\n\n## 标签\n\n在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 _1.0.0_ 的标签：  \n`git tag 1.0.0 1b2e1d63ff`  \n_1b2e1d63ff_ 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：  \n`git log`  \n你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 \n\n## 替换本地改动\n\n假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：  \n`git checkout -- `  \n此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 \n\n假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：  \n`git fetch origin`  \n`git reset --hard origin/master`\n\n## 有用的贴士\n\n内建的图形化 git：  \n`gitk`  \n彩色的 git 输出：  \n`git config color.ui true`  \n显示历史记录时，只显示一行注释信息：  \n`git config format.pretty oneline`  \n交互地添加文件至缓存区：  \n`git add -i`\n\n## 链接与资源\n\n### 图形化界面\n\n* [GitX (L) (OSX, open source)][25]\n* [Tower (OSX)][26]\n* [Source Tree (OSX, free)][27]\n* [GitHub for Mac (OSX, free)][28]\n* [GitBox (OSX)][29]\n\n### 指南与手册\n\n* [Git 社区参考书][30]\n* [专业 Git][31]\n* [如 git 思考][32]\n* [GitHub 帮助][33]\n* [图形化的 Git 指南一则][34]\n\n[1]: https://twitter.com/share\n[2]: http://www.twitter.com/rogerdudler\n[3]: http://www.twitter.com/tfnico\n[4]: http://www.twitter.com/fhd\n[5]: http://www.namics.com\n[20]: http://code.google.com/p/git-osx-installer/downloads/list?can=3\n[21]: http://code.google.com/p/msysgit/downloads/list?can=3\n[22]: http://book.git-scm.com/2_installing_git.html\n[25]: http://gitx.laullon.com/\n[26]: http://www.git-tower.com/\n[27]: http://www.sourcetreeapp.com/\n[28]: http://mac.github.com/\n[29]: https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12\n[30]: http://book.git-scm.com/\n[31]: http://progit.org/book/\n[32]: http://think-like-a-git.net/\n[33]: http://help.github.com/\n[34]: http://marklodato.github.com/visual-git-guide/index-en.html","source":"_posts/p49.md","raw":"---\ntitle: 【转】git 使用简易指南\nid: 412\ncategories:\n  - 编程语言\ndate: 2017/8/14 14:13:48     \ntags: [编程, 运维, git]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p49000.png)<br/>\n\n+ 转载自[Permalink to git 使用简易指南](http://www.bootcss.com/p/git-guide/)\n\n> 转载原因：<br/>该篇文章比较简洁易懂、注重流程，包含git常用入门操作，转到这里方便温习和查用。\n\n<!--more-->\n\n# git - 简易指南\n\n助你开始使用 git 的简易指南，木有高深内容，;)。\n\n[Tweet][1]\n\n作者：[罗杰·杜德勒][2]   \n感谢：[@tfnico][3], [@fhd][4] and [Namics][5] \n\n## 安装\n\n[下载 git OSX 版][20]\n\n[下载 git Windows 版][21]\n\n[下载 git Linux 版][22]\n\n## 创建新仓库\n\n创建新文件夹，打开，然后执行   \n`git init`  \n以创建新的 git 仓库。 \n\n## 检出仓库\n\n执行如下命令以创建一个本地仓库的克隆版本：  \n`git clone /path/to/repository`   \n如果是远端服务器上的仓库，你的命令会是这个样子：  \n`git clone username@host:/path/to/repository`\n\n## 工作流\n\n你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的 `工作目录`，它持有实际文件；第二个是 `缓存区（Index）`，它像个缓存区域，临时保存你的改动；最后是 `HEAD`，指向你最近一次提交后的结果。 \n\n![img](/img/xjy/p49001.png)\n\n## 添加与提交\n\n你可以计划改动（把它们添加到缓存区），使用如下命令：  \n`git add `  \n`git add *`  \n这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：  \n`git commit -m \"代码提交信息\"`  \n现在，你的改动已经提交到了 **HEAD**，但是还没到你的远端仓库。 \n\n## 推送改动\n\n你的改动现在已经在本地仓库的 **HEAD** 中了。执行如下命令以将这些改动提交到远端仓库：  \n`git push origin master`  \n可以把 _master_ 换成你想要推送的任何分支。   \n  \n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：  \n`git remote add origin `  \n如此你就能够将你的改动推送到所添加的服务器上去了。  \n\n## 分支\n\n分支是用来将特性开发绝缘开来的。在你创建仓库的时候，_master_ 是\"默认的\"。在其他分支上进行开发，完成后再将它们合并到主分支上。 \n\n![img](/img/xjy/p49002.png)\n\n创建一个叫做\"feature_x\"的分支，并切换过去：  \n`git checkout -b feature_x`  \n切换回主分支：  \n`git checkout master`  \n再把新建的分支删掉：  \n`git branch -d feature_x`  \n除非你将分支推送到远端仓库，不然该分支就是 _不为他人所见的_：  \n`git push origin `\n\n## 更新与合并\n\n要更新你的本地仓库至最新改动，执行：  \n`git pull`  \n以在你的工作目录中 _获取（fetch）_ 并 _合并（merge）_ 远端的改动。  \n要合并其他分支到你的当前分支（例如 master），执行：  \n`git merge `  \n两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 _冲突（conflicts）_。 这时候就需要你修改这些文件来人肉合并这些 _冲突（conflicts）_ 了。改完之后，你需要执行如下命令以将它们标记为合并成功：  \n`git add `  \n在合并改动之前，也可以使用如下命令查看：  \n`git diff  `\n\n## 标签\n\n在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 _1.0.0_ 的标签：  \n`git tag 1.0.0 1b2e1d63ff`  \n_1b2e1d63ff_ 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：  \n`git log`  \n你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 \n\n## 替换本地改动\n\n假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：  \n`git checkout -- `  \n此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 \n\n假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：  \n`git fetch origin`  \n`git reset --hard origin/master`\n\n## 有用的贴士\n\n内建的图形化 git：  \n`gitk`  \n彩色的 git 输出：  \n`git config color.ui true`  \n显示历史记录时，只显示一行注释信息：  \n`git config format.pretty oneline`  \n交互地添加文件至缓存区：  \n`git add -i`\n\n## 链接与资源\n\n### 图形化界面\n\n* [GitX (L) (OSX, open source)][25]\n* [Tower (OSX)][26]\n* [Source Tree (OSX, free)][27]\n* [GitHub for Mac (OSX, free)][28]\n* [GitBox (OSX)][29]\n\n### 指南与手册\n\n* [Git 社区参考书][30]\n* [专业 Git][31]\n* [如 git 思考][32]\n* [GitHub 帮助][33]\n* [图形化的 Git 指南一则][34]\n\n[1]: https://twitter.com/share\n[2]: http://www.twitter.com/rogerdudler\n[3]: http://www.twitter.com/tfnico\n[4]: http://www.twitter.com/fhd\n[5]: http://www.namics.com\n[20]: http://code.google.com/p/git-osx-installer/downloads/list?can=3\n[21]: http://code.google.com/p/msysgit/downloads/list?can=3\n[22]: http://book.git-scm.com/2_installing_git.html\n[25]: http://gitx.laullon.com/\n[26]: http://www.git-tower.com/\n[27]: http://www.sourcetreeapp.com/\n[28]: http://mac.github.com/\n[29]: https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12\n[30]: http://book.git-scm.com/\n[31]: http://progit.org/book/\n[32]: http://think-like-a-git.net/\n[33]: http://help.github.com/\n[34]: http://marklodato.github.com/visual-git-guide/index-en.html","slug":"p49","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jil002nu8vefawbde2k","content":"<p><img src=\"/img/xjy/p49000.png\" alt=\"img\"><br></p>\n<ul>\n<li>转载自<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">Permalink to git 使用简易指南</a></li>\n</ul>\n<blockquote>\n<p>转载原因：<br>该篇文章比较简洁易懂、注重流程，包含git常用入门操作，转到这里方便温习和查用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"git-简易指南\"><a href=\"#git-简易指南\" class=\"headerlink\" title=\"git - 简易指南\"></a>git - 简易指南</h1><p>助你开始使用 git 的简易指南，木有高深内容，;)。</p>\n<p><a href=\"https://twitter.com/share\" target=\"_blank\" rel=\"noopener\">Tweet</a></p>\n<p>作者：<a href=\"http://www.twitter.com/rogerdudler\" target=\"_blank\" rel=\"noopener\">罗杰·杜德勒</a><br>感谢：<a href=\"http://www.twitter.com/tfnico\" target=\"_blank\" rel=\"noopener\">@tfnico</a>, <a href=\"http://www.twitter.com/fhd\" target=\"_blank\" rel=\"noopener\">@fhd</a> and <a href=\"http://www.namics.com\" target=\"_blank\" rel=\"noopener\">Namics</a> </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"http://code.google.com/p/git-osx-installer/downloads/list?can=3\" target=\"_blank\" rel=\"noopener\">下载 git OSX 版</a></p>\n<p><a href=\"http://code.google.com/p/msysgit/downloads/list?can=3\" target=\"_blank\" rel=\"noopener\">下载 git Windows 版</a></p>\n<p><a href=\"http://book.git-scm.com/2_installing_git.html\" target=\"_blank\" rel=\"noopener\">下载 git Linux 版</a></p>\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行<br><code>git init</code><br>以创建新的 git 仓库。 </p>\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，你的命令会是这个样子：<br><code>git clone username@host:/path/to/repository</code></p>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。 </p>\n<p><img src=\"/img/xjy/p49001.png\" alt=\"img\"></p>\n<h2 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：<br><code>git add</code><br><code>git add *</code><br>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：<br><code>git commit -m &quot;代码提交信息&quot;</code><br>现在，你的改动已经提交到了 <strong>HEAD</strong>，但是还没到你的远端仓库。 </p>\n<h2 id=\"推送改动\"><a href=\"#推送改动\" class=\"headerlink\" title=\"推送改动\"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把 <em>master</em> 换成你想要推送的任何分支。   </p>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br><code>git remote add origin</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。  </p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是”默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。 </p>\n<p><img src=\"/img/xjy/p49002.png\" alt=\"img\"></p>\n<p>创建一个叫做”feature_x”的分支，并切换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉：<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是 <em>不为他人所见的</em>：<br><code>git push origin</code></p>\n<h2 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中 <em>获取（fetch）</em> 并 <em>合并（merge）</em> 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：<br><code>git merge</code><br>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 <em>冲突（conflicts）</em>。 这时候就需要你修改这些文件来人肉合并这些 <em>冲突（conflicts）</em> 了。改完之后，你需要执行如下命令以将它们标记为合并成功：<br><code>git add</code><br>在合并改动之前，也可以使用如下命令查看：<br><code>git diff</code></p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 <em>1.0.0</em> 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br><em>1b2e1d63ff</em> 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：<br><code>git log</code><br>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 </p>\n<h2 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h2><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：<br><code>git checkout --</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 </p>\n<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：<br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<h2 id=\"有用的贴士\"><a href=\"#有用的贴士\" class=\"headerlink\" title=\"有用的贴士\"></a>有用的贴士</h2><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，只显示一行注释信息：<br><code>git config format.pretty oneline</code><br>交互地添加文件至缓存区：<br><code>git add -i</code></p>\n<h2 id=\"链接与资源\"><a href=\"#链接与资源\" class=\"headerlink\" title=\"链接与资源\"></a>链接与资源</h2><h3 id=\"图形化界面\"><a href=\"#图形化界面\" class=\"headerlink\" title=\"图形化界面\"></a>图形化界面</h3><ul>\n<li><a href=\"http://gitx.laullon.com/\" target=\"_blank\" rel=\"noopener\">GitX (L) (OSX, open source)</a></li>\n<li><a href=\"http://www.git-tower.com/\" target=\"_blank\" rel=\"noopener\">Tower (OSX)</a></li>\n<li><a href=\"http://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">Source Tree (OSX, free)</a></li>\n<li><a href=\"http://mac.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub for Mac (OSX, free)</a></li>\n<li><a href=\"https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12\" target=\"_blank\" rel=\"noopener\">GitBox (OSX)</a></li>\n</ul>\n<h3 id=\"指南与手册\"><a href=\"#指南与手册\" class=\"headerlink\" title=\"指南与手册\"></a>指南与手册</h3><ul>\n<li><a href=\"http://book.git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git 社区参考书</a></li>\n<li><a href=\"http://progit.org/book/\" target=\"_blank\" rel=\"noopener\">专业 Git</a></li>\n<li><a href=\"http://think-like-a-git.net/\" target=\"_blank\" rel=\"noopener\">如 git 思考</a></li>\n<li><a href=\"http://help.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub 帮助</a></li>\n<li><a href=\"http://marklodato.github.com/visual-git-guide/index-en.html\" target=\"_blank\" rel=\"noopener\">图形化的 Git 指南一则</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p49000.png\" alt=\"img\"><br></p>\n<ul>\n<li>转载自<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">Permalink to git 使用简易指南</a></li>\n</ul>\n<blockquote>\n<p>转载原因：<br>该篇文章比较简洁易懂、注重流程，包含git常用入门操作，转到这里方便温习和查用。</p>\n</blockquote>","more":"<h1 id=\"git-简易指南\"><a href=\"#git-简易指南\" class=\"headerlink\" title=\"git - 简易指南\"></a>git - 简易指南</h1><p>助你开始使用 git 的简易指南，木有高深内容，;)。</p>\n<p><a href=\"https://twitter.com/share\" target=\"_blank\" rel=\"noopener\">Tweet</a></p>\n<p>作者：<a href=\"http://www.twitter.com/rogerdudler\" target=\"_blank\" rel=\"noopener\">罗杰·杜德勒</a><br>感谢：<a href=\"http://www.twitter.com/tfnico\" target=\"_blank\" rel=\"noopener\">@tfnico</a>, <a href=\"http://www.twitter.com/fhd\" target=\"_blank\" rel=\"noopener\">@fhd</a> and <a href=\"http://www.namics.com\" target=\"_blank\" rel=\"noopener\">Namics</a> </p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"http://code.google.com/p/git-osx-installer/downloads/list?can=3\" target=\"_blank\" rel=\"noopener\">下载 git OSX 版</a></p>\n<p><a href=\"http://code.google.com/p/msysgit/downloads/list?can=3\" target=\"_blank\" rel=\"noopener\">下载 git Windows 版</a></p>\n<p><a href=\"http://book.git-scm.com/2_installing_git.html\" target=\"_blank\" rel=\"noopener\">下载 git Linux 版</a></p>\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行<br><code>git init</code><br>以创建新的 git 仓库。 </p>\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：<br><code>git clone /path/to/repository</code><br>如果是远端服务器上的仓库，你的命令会是这个样子：<br><code>git clone username@host:/path/to/repository</code></p>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 <code>工作目录</code>，它持有实际文件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。 </p>\n<p><img src=\"/img/xjy/p49001.png\" alt=\"img\"></p>\n<h2 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：<br><code>git add</code><br><code>git add *</code><br>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：<br><code>git commit -m &quot;代码提交信息&quot;</code><br>现在，你的改动已经提交到了 <strong>HEAD</strong>，但是还没到你的远端仓库。 </p>\n<h2 id=\"推送改动\"><a href=\"#推送改动\" class=\"headerlink\" title=\"推送改动\"></a>推送改动</h2><p>你的改动现在已经在本地仓库的 <strong>HEAD</strong> 中了。执行如下命令以将这些改动提交到远端仓库：<br><code>git push origin master</code><br>可以把 <em>master</em> 换成你想要推送的任何分支。   </p>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br><code>git remote add origin</code><br>如此你就能够将你的改动推送到所添加的服务器上去了。  </p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是”默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。 </p>\n<p><img src=\"/img/xjy/p49002.png\" alt=\"img\"></p>\n<p>创建一个叫做”feature_x”的分支，并切换过去：<br><code>git checkout -b feature_x</code><br>切换回主分支：<br><code>git checkout master</code><br>再把新建的分支删掉：<br><code>git branch -d feature_x</code><br>除非你将分支推送到远端仓库，不然该分支就是 <em>不为他人所见的</em>：<br><code>git push origin</code></p>\n<h2 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：<br><code>git pull</code><br>以在你的工作目录中 <em>获取（fetch）</em> 并 <em>合并（merge）</em> 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：<br><code>git merge</code><br>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 <em>冲突（conflicts）</em>。 这时候就需要你修改这些文件来人肉合并这些 <em>冲突（conflicts）</em> 了。改完之后，你需要执行如下命令以将它们标记为合并成功：<br><code>git add</code><br>在合并改动之前，也可以使用如下命令查看：<br><code>git diff</code></p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 <em>1.0.0</em> 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br><em>1b2e1d63ff</em> 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：<br><code>git log</code><br>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。 </p>\n<h2 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h2><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：<br><code>git checkout --</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 </p>\n<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：<br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<h2 id=\"有用的贴士\"><a href=\"#有用的贴士\" class=\"headerlink\" title=\"有用的贴士\"></a>有用的贴士</h2><p>内建的图形化 git：<br><code>gitk</code><br>彩色的 git 输出：<br><code>git config color.ui true</code><br>显示历史记录时，只显示一行注释信息：<br><code>git config format.pretty oneline</code><br>交互地添加文件至缓存区：<br><code>git add -i</code></p>\n<h2 id=\"链接与资源\"><a href=\"#链接与资源\" class=\"headerlink\" title=\"链接与资源\"></a>链接与资源</h2><h3 id=\"图形化界面\"><a href=\"#图形化界面\" class=\"headerlink\" title=\"图形化界面\"></a>图形化界面</h3><ul>\n<li><a href=\"http://gitx.laullon.com/\" target=\"_blank\" rel=\"noopener\">GitX (L) (OSX, open source)</a></li>\n<li><a href=\"http://www.git-tower.com/\" target=\"_blank\" rel=\"noopener\">Tower (OSX)</a></li>\n<li><a href=\"http://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">Source Tree (OSX, free)</a></li>\n<li><a href=\"http://mac.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub for Mac (OSX, free)</a></li>\n<li><a href=\"https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12\" target=\"_blank\" rel=\"noopener\">GitBox (OSX)</a></li>\n</ul>\n<h3 id=\"指南与手册\"><a href=\"#指南与手册\" class=\"headerlink\" title=\"指南与手册\"></a>指南与手册</h3><ul>\n<li><a href=\"http://book.git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git 社区参考书</a></li>\n<li><a href=\"http://progit.org/book/\" target=\"_blank\" rel=\"noopener\">专业 Git</a></li>\n<li><a href=\"http://think-like-a-git.net/\" target=\"_blank\" rel=\"noopener\">如 git 思考</a></li>\n<li><a href=\"http://help.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub 帮助</a></li>\n<li><a href=\"http://marklodato.github.com/visual-git-guide/index-en.html\" target=\"_blank\" rel=\"noopener\">图形化的 Git 指南一则</a></li>\n</ul>"},{"title":"Hadoop伪分布式安装及配置-HDFS","id":"417","date":"2018-11-09T13:07:24.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p54000.jpg)<br/>\n\n## 前言\n正所谓完事开头难，我想接触大数据，却没有相应的分布式环境，那么就用单机伪分布式开始学习吧，这篇主要记录Hadoop伪分布式初始环境的搭建及HDFS的配置。\n\n<!--more-->\n\n## 环境：\n+ centos7\n+ jdk1.7.0_79\n+ hadoop-2.6.0-cdh5.7.0\n\n## 步骤：\n### 设置主机名及新用户\n\n+ 修改主机名  \n`$ hostnamectl set-hostname hadoop000`\n\n+  新增hadoop用户并指定根目录  \n`$ useradd -d /home/hadoop -m hadoop`\n\n+ 修改密码  \n`$ passwd hadoop`\n\n### 安装jdk\n+ 解压  \n`$ tar -zxvf jdk-7u79-linux-x64.tar.gz -C ~/app/` \n\n+ 添加环境变量~/.bash_profile:  \n`export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79`  \n`export PATH=$JAVA_HOME/bin:$PATH`  \n\n+ 配置生效  \n`$ source ~/.bash_profile`\n\n### 配置ssh免密登录\n+ 安装ssh  \n`$ yum install ssh`\n\n+ 生成密钥  \n`$ ssh-keygen -t rsa`\n\n+ 存储公钥  \n`$ cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys`\n\n### 配置hadoop\n>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下\n\n+ 解压    \n`$ tar -zxvf hadoop-2.6.0-cdh5.7.0.tar.gz.tar -C ~/app/`\n\n+ 配置etc/hadoop/hadoop-env.sh:  \n`export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79`\n\n+ 配置etc/hadoop/core-site.xml:\n``` xml  \n<configuration>\n    <property>\n        <name>fs.defaultFS</name>\n        <value>hdfs://hadoop000:8020</value>\n    </property>\n    <property>\n        <name>hadoop.tmp.dir</name>\n        <value>/home/hadoop/app/tmp</value>\n    </property>\n</configuration>\n```\n\n+ 配置etc/hadoop/hdfs-site.xml:\n``` xml\n<configuration>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n```\n\n+ 格式化文件系统（仅第一次执行时）  \n`$ bin/hdfs namenode -format`\n\n+ 启动hdfs  \n`$ sbin/start-dfs.sh`  \n\n## 浏览效果\n下面是启动后http://hadoop000:50070的浏览效果：\n\n![img](/img/xjy/p54001.png)<br/>\n\n## 参考资料\n+ [Apache Hadoop参考文档](http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html)\n","source":"_posts/p54.md","raw":"---\ntitle: Hadoop伪分布式安装及配置-HDFS\nid: 417\ncategories:\n  - 编程语言\ndate: 2018/11/9 21:07:24       \ntags: [编程, 大数据]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p54000.jpg)<br/>\n\n## 前言\n正所谓完事开头难，我想接触大数据，却没有相应的分布式环境，那么就用单机伪分布式开始学习吧，这篇主要记录Hadoop伪分布式初始环境的搭建及HDFS的配置。\n\n<!--more-->\n\n## 环境：\n+ centos7\n+ jdk1.7.0_79\n+ hadoop-2.6.0-cdh5.7.0\n\n## 步骤：\n### 设置主机名及新用户\n\n+ 修改主机名  \n`$ hostnamectl set-hostname hadoop000`\n\n+  新增hadoop用户并指定根目录  \n`$ useradd -d /home/hadoop -m hadoop`\n\n+ 修改密码  \n`$ passwd hadoop`\n\n### 安装jdk\n+ 解压  \n`$ tar -zxvf jdk-7u79-linux-x64.tar.gz -C ~/app/` \n\n+ 添加环境变量~/.bash_profile:  \n`export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79`  \n`export PATH=$JAVA_HOME/bin:$PATH`  \n\n+ 配置生效  \n`$ source ~/.bash_profile`\n\n### 配置ssh免密登录\n+ 安装ssh  \n`$ yum install ssh`\n\n+ 生成密钥  \n`$ ssh-keygen -t rsa`\n\n+ 存储公钥  \n`$ cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys`\n\n### 配置hadoop\n>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下\n\n+ 解压    \n`$ tar -zxvf hadoop-2.6.0-cdh5.7.0.tar.gz.tar -C ~/app/`\n\n+ 配置etc/hadoop/hadoop-env.sh:  \n`export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79`\n\n+ 配置etc/hadoop/core-site.xml:\n``` xml  \n<configuration>\n    <property>\n        <name>fs.defaultFS</name>\n        <value>hdfs://hadoop000:8020</value>\n    </property>\n    <property>\n        <name>hadoop.tmp.dir</name>\n        <value>/home/hadoop/app/tmp</value>\n    </property>\n</configuration>\n```\n\n+ 配置etc/hadoop/hdfs-site.xml:\n``` xml\n<configuration>\n    <property>\n        <name>dfs.replication</name>\n        <value>1</value>\n    </property>\n</configuration>\n```\n\n+ 格式化文件系统（仅第一次执行时）  \n`$ bin/hdfs namenode -format`\n\n+ 启动hdfs  \n`$ sbin/start-dfs.sh`  \n\n## 浏览效果\n下面是启动后http://hadoop000:50070的浏览效果：\n\n![img](/img/xjy/p54001.png)<br/>\n\n## 参考资料\n+ [Apache Hadoop参考文档](http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html)\n","slug":"p54","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jin002ru8veq2rj92zd","content":"<p><img src=\"/img/xjy/p54000.jpg\" alt=\"img\"><br></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>正所谓完事开头难，我想接触大数据，却没有相应的分布式环境，那么就用单机伪分布式开始学习吧，这篇主要记录Hadoop伪分布式初始环境的搭建及HDFS的配置。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><ul>\n<li>centos7</li>\n<li>jdk1.7.0_79</li>\n<li>hadoop-2.6.0-cdh5.7.0</li>\n</ul>\n<h2 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h2><h3 id=\"设置主机名及新用户\"><a href=\"#设置主机名及新用户\" class=\"headerlink\" title=\"设置主机名及新用户\"></a>设置主机名及新用户</h3><ul>\n<li><p>修改主机名<br><code>$ hostnamectl set-hostname hadoop000</code></p>\n</li>\n<li><p>新增hadoop用户并指定根目录<br><code>$ useradd -d /home/hadoop -m hadoop</code></p>\n</li>\n<li><p>修改密码<br><code>$ passwd hadoop</code></p>\n</li>\n</ul>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><ul>\n<li><p>解压<br><code>$ tar -zxvf jdk-7u79-linux-x64.tar.gz -C ~/app/</code> </p>\n</li>\n<li><p>添加环境变量~/.bash_profile:<br><code>export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79</code><br><code>export PATH=$JAVA_HOME/bin:$PATH</code>  </p>\n</li>\n<li><p>配置生效<br><code>$ source ~/.bash_profile</code></p>\n</li>\n</ul>\n<h3 id=\"配置ssh免密登录\"><a href=\"#配置ssh免密登录\" class=\"headerlink\" title=\"配置ssh免密登录\"></a>配置ssh免密登录</h3><ul>\n<li><p>安装ssh<br><code>$ yum install ssh</code></p>\n</li>\n<li><p>生成密钥<br><code>$ ssh-keygen -t rsa</code></p>\n</li>\n<li><p>存储公钥<br><code>$ cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys</code></p>\n</li>\n</ul>\n<h3 id=\"配置hadoop\"><a href=\"#配置hadoop\" class=\"headerlink\" title=\"配置hadoop\"></a>配置hadoop</h3><blockquote>\n<p>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下</p>\n</blockquote>\n<ul>\n<li><p>解压<br><code>$ tar -zxvf hadoop-2.6.0-cdh5.7.0.tar.gz.tar -C ~/app/</code></p>\n</li>\n<li><p>配置etc/hadoop/hadoop-env.sh:<br><code>export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79</code></p>\n</li>\n<li><p>配置etc/hadoop/core-site.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://hadoop000:8020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/home/hadoop/app/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置etc/hadoop/hdfs-site.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式化文件系统（仅第一次执行时）<br><code>$ bin/hdfs namenode -format</code></p>\n</li>\n<li><p>启动hdfs<br><code>$ sbin/start-dfs.sh</code>  </p>\n</li>\n</ul>\n<h2 id=\"浏览效果\"><a href=\"#浏览效果\" class=\"headerlink\" title=\"浏览效果\"></a>浏览效果</h2><p>下面是启动后<a href=\"http://hadoop000:50070的浏览效果：\" target=\"_blank\" rel=\"noopener\">http://hadoop000:50070的浏览效果：</a></p>\n<p><img src=\"/img/xjy/p54001.png\" alt=\"img\"><br></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"noopener\">Apache Hadoop参考文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p54000.jpg\" alt=\"img\"><br></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>正所谓完事开头难，我想接触大数据，却没有相应的分布式环境，那么就用单机伪分布式开始学习吧，这篇主要记录Hadoop伪分布式初始环境的搭建及HDFS的配置。</p>","more":"<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><ul>\n<li>centos7</li>\n<li>jdk1.7.0_79</li>\n<li>hadoop-2.6.0-cdh5.7.0</li>\n</ul>\n<h2 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h2><h3 id=\"设置主机名及新用户\"><a href=\"#设置主机名及新用户\" class=\"headerlink\" title=\"设置主机名及新用户\"></a>设置主机名及新用户</h3><ul>\n<li><p>修改主机名<br><code>$ hostnamectl set-hostname hadoop000</code></p>\n</li>\n<li><p>新增hadoop用户并指定根目录<br><code>$ useradd -d /home/hadoop -m hadoop</code></p>\n</li>\n<li><p>修改密码<br><code>$ passwd hadoop</code></p>\n</li>\n</ul>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><ul>\n<li><p>解压<br><code>$ tar -zxvf jdk-7u79-linux-x64.tar.gz -C ~/app/</code> </p>\n</li>\n<li><p>添加环境变量~/.bash_profile:<br><code>export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79</code><br><code>export PATH=$JAVA_HOME/bin:$PATH</code>  </p>\n</li>\n<li><p>配置生效<br><code>$ source ~/.bash_profile</code></p>\n</li>\n</ul>\n<h3 id=\"配置ssh免密登录\"><a href=\"#配置ssh免密登录\" class=\"headerlink\" title=\"配置ssh免密登录\"></a>配置ssh免密登录</h3><ul>\n<li><p>安装ssh<br><code>$ yum install ssh</code></p>\n</li>\n<li><p>生成密钥<br><code>$ ssh-keygen -t rsa</code></p>\n</li>\n<li><p>存储公钥<br><code>$ cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys</code></p>\n</li>\n</ul>\n<h3 id=\"配置hadoop\"><a href=\"#配置hadoop\" class=\"headerlink\" title=\"配置hadoop\"></a>配置hadoop</h3><blockquote>\n<p>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下</p>\n</blockquote>\n<ul>\n<li><p>解压<br><code>$ tar -zxvf hadoop-2.6.0-cdh5.7.0.tar.gz.tar -C ~/app/</code></p>\n</li>\n<li><p>配置etc/hadoop/hadoop-env.sh:<br><code>export JAVA_HOME=/home/hadoop/app/jdk1.7.0_79</code></p>\n</li>\n<li><p>配置etc/hadoop/core-site.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://hadoop000:8020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/home/hadoop/app/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置etc/hadoop/hdfs-site.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式化文件系统（仅第一次执行时）<br><code>$ bin/hdfs namenode -format</code></p>\n</li>\n<li><p>启动hdfs<br><code>$ sbin/start-dfs.sh</code>  </p>\n</li>\n</ul>\n<h2 id=\"浏览效果\"><a href=\"#浏览效果\" class=\"headerlink\" title=\"浏览效果\"></a>浏览效果</h2><p>下面是启动后<a href=\"http://hadoop000:50070的浏览效果：\" target=\"_blank\" rel=\"noopener\">http://hadoop000:50070的浏览效果：</a></p>\n<p><img src=\"/img/xjy/p54001.png\" alt=\"img\"><br></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"noopener\">Apache Hadoop参考文档</a></li>\n</ul>"},{"title":"Hadoop伪分布式安装及配置-YARN","id":"418","date":"2018-11-16T03:16:33.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p55000.png)<br/>\n\n## 前言\nHadoop单机伪分布式环境配置完HDFS后，接下来要配置的就是YARN了。\n\n<!--more-->\n\n## 环境：\n+ centos7\n+ jdk1.7.0_79\n+ hadoop-2.6.0-cdh5.7.0\n\n## 步骤：\n\n### 配置YARN\n>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下\n\n\n+ 配置etc/hadoop/mapred-site.xml:  \n``` xml\n<property>\n\t<name>mapreduce.framework.name</name>\n\t<value>yarn</value>\n</property>\n```\n\n+ 配置etc/hadoop/yarn-site.xml:\n``` xml  \n<property>\n\t<name>yarn.nodemanager.aux-services</name>\n\t<value>mapreduce_shuffle</value>\n</property>\n```\n\n+ 配置etc/hadoop/slaves:  \n`$ hadoop000`  \n\n### yarn启动方式一：一次启动所有进程  \n+ 启动所有  \n`$ sbin/start-yarn.sh`  \n\n### yarn启动方式二：单独启动每个进程\n+ 启动resourcemanager   \n`$ yarn-daemon.sh start resourcemanager`  \n\n+ 启动nodemanager   \n`$ yarn-daemon.sh start nodemanager`  \n\n## 浏览效果\n下面是启动后http://hadoop000:8088的浏览效果：\n\n![img](/img/xjy/p55001.png)<br/>\n\n## 参考资料\n+ [Apache Hadoop参考文档](http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html)\n","source":"_posts/p55.md","raw":"---\ntitle: Hadoop伪分布式安装及配置-YARN\nid: 418\ncategories:\n  - 编程语言\ndate: 2018/11/16 11:16:33        \ntags: [编程, 大数据]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p55000.png)<br/>\n\n## 前言\nHadoop单机伪分布式环境配置完HDFS后，接下来要配置的就是YARN了。\n\n<!--more-->\n\n## 环境：\n+ centos7\n+ jdk1.7.0_79\n+ hadoop-2.6.0-cdh5.7.0\n\n## 步骤：\n\n### 配置YARN\n>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下\n\n\n+ 配置etc/hadoop/mapred-site.xml:  \n``` xml\n<property>\n\t<name>mapreduce.framework.name</name>\n\t<value>yarn</value>\n</property>\n```\n\n+ 配置etc/hadoop/yarn-site.xml:\n``` xml  \n<property>\n\t<name>yarn.nodemanager.aux-services</name>\n\t<value>mapreduce_shuffle</value>\n</property>\n```\n\n+ 配置etc/hadoop/slaves:  \n`$ hadoop000`  \n\n### yarn启动方式一：一次启动所有进程  \n+ 启动所有  \n`$ sbin/start-yarn.sh`  \n\n### yarn启动方式二：单独启动每个进程\n+ 启动resourcemanager   \n`$ yarn-daemon.sh start resourcemanager`  \n\n+ 启动nodemanager   \n`$ yarn-daemon.sh start nodemanager`  \n\n## 浏览效果\n下面是启动后http://hadoop000:8088的浏览效果：\n\n![img](/img/xjy/p55001.png)<br/>\n\n## 参考资料\n+ [Apache Hadoop参考文档](http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html)\n","slug":"p55","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jiq002uu8veem2tl89x","content":"<p><img src=\"/img/xjy/p55000.png\" alt=\"img\"><br></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hadoop单机伪分布式环境配置完HDFS后，接下来要配置的就是YARN了。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><ul>\n<li>centos7</li>\n<li>jdk1.7.0_79</li>\n<li>hadoop-2.6.0-cdh5.7.0</li>\n</ul>\n<h2 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h2><h3 id=\"配置YARN\"><a href=\"#配置YARN\" class=\"headerlink\" title=\"配置YARN\"></a>配置YARN</h3><blockquote>\n<p>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下</p>\n</blockquote>\n<ul>\n<li><p>配置etc/hadoop/mapred-site.xml:  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置etc/hadoop/yarn-site.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置etc/hadoop/slaves:<br><code>$ hadoop000</code>  </p>\n</li>\n</ul>\n<h3 id=\"yarn启动方式一：一次启动所有进程\"><a href=\"#yarn启动方式一：一次启动所有进程\" class=\"headerlink\" title=\"yarn启动方式一：一次启动所有进程\"></a>yarn启动方式一：一次启动所有进程</h3><ul>\n<li>启动所有<br><code>$ sbin/start-yarn.sh</code>  </li>\n</ul>\n<h3 id=\"yarn启动方式二：单独启动每个进程\"><a href=\"#yarn启动方式二：单独启动每个进程\" class=\"headerlink\" title=\"yarn启动方式二：单独启动每个进程\"></a>yarn启动方式二：单独启动每个进程</h3><ul>\n<li><p>启动resourcemanager<br><code>$ yarn-daemon.sh start resourcemanager</code>  </p>\n</li>\n<li><p>启动nodemanager<br><code>$ yarn-daemon.sh start nodemanager</code>  </p>\n</li>\n</ul>\n<h2 id=\"浏览效果\"><a href=\"#浏览效果\" class=\"headerlink\" title=\"浏览效果\"></a>浏览效果</h2><p>下面是启动后<a href=\"http://hadoop000:8088的浏览效果：\" target=\"_blank\" rel=\"noopener\">http://hadoop000:8088的浏览效果：</a></p>\n<p><img src=\"/img/xjy/p55001.png\" alt=\"img\"><br></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"noopener\">Apache Hadoop参考文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p55000.png\" alt=\"img\"><br></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Hadoop单机伪分布式环境配置完HDFS后，接下来要配置的就是YARN了。</p>","more":"<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><ul>\n<li>centos7</li>\n<li>jdk1.7.0_79</li>\n<li>hadoop-2.6.0-cdh5.7.0</li>\n</ul>\n<h2 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h2><h3 id=\"配置YARN\"><a href=\"#配置YARN\" class=\"headerlink\" title=\"配置YARN\"></a>配置YARN</h3><blockquote>\n<p>下面的配置均在~/app/hadoop-2.6.0-cdh5.7.0/目录下</p>\n</blockquote>\n<ul>\n<li><p>配置etc/hadoop/mapred-site.xml:  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置etc/hadoop/yarn-site.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置etc/hadoop/slaves:<br><code>$ hadoop000</code>  </p>\n</li>\n</ul>\n<h3 id=\"yarn启动方式一：一次启动所有进程\"><a href=\"#yarn启动方式一：一次启动所有进程\" class=\"headerlink\" title=\"yarn启动方式一：一次启动所有进程\"></a>yarn启动方式一：一次启动所有进程</h3><ul>\n<li>启动所有<br><code>$ sbin/start-yarn.sh</code>  </li>\n</ul>\n<h3 id=\"yarn启动方式二：单独启动每个进程\"><a href=\"#yarn启动方式二：单独启动每个进程\" class=\"headerlink\" title=\"yarn启动方式二：单独启动每个进程\"></a>yarn启动方式二：单独启动每个进程</h3><ul>\n<li><p>启动resourcemanager<br><code>$ yarn-daemon.sh start resourcemanager</code>  </p>\n</li>\n<li><p>启动nodemanager<br><code>$ yarn-daemon.sh start nodemanager</code>  </p>\n</li>\n</ul>\n<h2 id=\"浏览效果\"><a href=\"#浏览效果\" class=\"headerlink\" title=\"浏览效果\"></a>浏览效果</h2><p>下面是启动后<a href=\"http://hadoop000:8088的浏览效果：\" target=\"_blank\" rel=\"noopener\">http://hadoop000:8088的浏览效果：</a></p>\n<p><img src=\"/img/xjy/p55001.png\" alt=\"img\"><br></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://archive-primary.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"noopener\">Apache Hadoop参考文档</a></li>\n</ul>"},{"title":"IDEA跑JUNIT测试案例时TCP模式连接H2数据库超时问题","id":"416","date":"2018-09-29T08:20:46.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p52000.jpg)<br/>\n\n## 问题\n同一个测试案例，分别在STS和IDEA下正常跑起来，并成功断点到同一位置。结果，STS跑案例时，外部能够正常连接到H2数据库；而IDEA跑案例时跑到断点时，则无法连接上H2数据（奇怪的是端口能够PING通），然后一直显示**\"Connecting Wait...\"**。\n\n<!--more-->\n\n## 背景\n由于项目组技术的升级和管理的需要，我们的代码版本控制工具由SVN改成了GIT,整个代码包的服务端都迁移了过去。本人觉得在STS（由ECLIPES包装而来）开发工具上使用GIT插件提交和发布代码非常不方面，与此同时看到网上很多人推崇更强大、更便捷的intelliJ IDEA上来开发java应用程序，于是我决定切换过去试试。需要说明的是，我们项目的本地测试数据源配置为H2，在Debug模式下跑JUNIT单元测试案例的时候会利用DbVisualizer等外部工具用TCP模式连接到H2数据库。\n\n## 解决过程\n1. 在IDEA中重配H2为不同端口不行\n2. 使用IDEA内置数据库连接器TCP模式也不行\n3. 更换IDEA内置数据库连接器中连接的驱动版本和模式还不行\n4. 网上查资料，因为别人大多使用H2的In-memory和Embedded模式，而我的是TCP模式，谷歌和百度上基本没有类似的问题，仍然不行。\n5. 最后恰巧碰到了[《IDEA 和 Eclipse 调试多线程应用》](https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/)这篇文章（虽然问题起点不一样，但是分析原因是相同的）得以解决，否则我可能就放弃了IDEA\n\n## 根本原因\nIDEA默认在进行多线程调试的时候，会阻塞其他所有线程，所以应该就是断点的时候阻塞了H2连接的线程导致。文章中的说明是IDEA和Eclipse的调试策略默认情况下配置不同：\n+ IDEA默认是ALL级别\n+ Eclipse默认是Thread级别\n\n## 解决办法\n重新设置IDEA中的调试级别保持与STS中的一致就OK了！\n![img](/img/xjy/p52002.png)<br/>\n\n\n## 参考资料\n+ [IDEA 和 Eclipse 调试多线程应用](https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/)\n","source":"_posts/p52.md","raw":"---\ntitle: IDEA跑JUNIT测试案例时TCP模式连接H2数据库超时问题\nid: 416\ncategories:\n  - 编程语言\ndate: 2018/9/29 16:20:46      \ntags: [编程, 运维, 数据库]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p52000.jpg)<br/>\n\n## 问题\n同一个测试案例，分别在STS和IDEA下正常跑起来，并成功断点到同一位置。结果，STS跑案例时，外部能够正常连接到H2数据库；而IDEA跑案例时跑到断点时，则无法连接上H2数据（奇怪的是端口能够PING通），然后一直显示**\"Connecting Wait...\"**。\n\n<!--more-->\n\n## 背景\n由于项目组技术的升级和管理的需要，我们的代码版本控制工具由SVN改成了GIT,整个代码包的服务端都迁移了过去。本人觉得在STS（由ECLIPES包装而来）开发工具上使用GIT插件提交和发布代码非常不方面，与此同时看到网上很多人推崇更强大、更便捷的intelliJ IDEA上来开发java应用程序，于是我决定切换过去试试。需要说明的是，我们项目的本地测试数据源配置为H2，在Debug模式下跑JUNIT单元测试案例的时候会利用DbVisualizer等外部工具用TCP模式连接到H2数据库。\n\n## 解决过程\n1. 在IDEA中重配H2为不同端口不行\n2. 使用IDEA内置数据库连接器TCP模式也不行\n3. 更换IDEA内置数据库连接器中连接的驱动版本和模式还不行\n4. 网上查资料，因为别人大多使用H2的In-memory和Embedded模式，而我的是TCP模式，谷歌和百度上基本没有类似的问题，仍然不行。\n5. 最后恰巧碰到了[《IDEA 和 Eclipse 调试多线程应用》](https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/)这篇文章（虽然问题起点不一样，但是分析原因是相同的）得以解决，否则我可能就放弃了IDEA\n\n## 根本原因\nIDEA默认在进行多线程调试的时候，会阻塞其他所有线程，所以应该就是断点的时候阻塞了H2连接的线程导致。文章中的说明是IDEA和Eclipse的调试策略默认情况下配置不同：\n+ IDEA默认是ALL级别\n+ Eclipse默认是Thread级别\n\n## 解决办法\n重新设置IDEA中的调试级别保持与STS中的一致就OK了！\n![img](/img/xjy/p52002.png)<br/>\n\n\n## 参考资料\n+ [IDEA 和 Eclipse 调试多线程应用](https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/)\n","slug":"p52","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jiv002yu8ve8p5xoywj","content":"<p><img src=\"/img/xjy/p52000.jpg\" alt=\"img\"><br></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>同一个测试案例，分别在STS和IDEA下正常跑起来，并成功断点到同一位置。结果，STS跑案例时，外部能够正常连接到H2数据库；而IDEA跑案例时跑到断点时，则无法连接上H2数据（奇怪的是端口能够PING通），然后一直显示<strong>“Connecting Wait…”</strong>。</p>\n<a id=\"more\"></a>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于项目组技术的升级和管理的需要，我们的代码版本控制工具由SVN改成了GIT,整个代码包的服务端都迁移了过去。本人觉得在STS（由ECLIPES包装而来）开发工具上使用GIT插件提交和发布代码非常不方面，与此同时看到网上很多人推崇更强大、更便捷的intelliJ IDEA上来开发java应用程序，于是我决定切换过去试试。需要说明的是，我们项目的本地测试数据源配置为H2，在Debug模式下跑JUNIT单元测试案例的时候会利用DbVisualizer等外部工具用TCP模式连接到H2数据库。</p>\n<h2 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><ol>\n<li>在IDEA中重配H2为不同端口不行</li>\n<li>使用IDEA内置数据库连接器TCP模式也不行</li>\n<li>更换IDEA内置数据库连接器中连接的驱动版本和模式还不行</li>\n<li>网上查资料，因为别人大多使用H2的In-memory和Embedded模式，而我的是TCP模式，谷歌和百度上基本没有类似的问题，仍然不行。</li>\n<li>最后恰巧碰到了<a href=\"https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">《IDEA 和 Eclipse 调试多线程应用》</a>这篇文章（虽然问题起点不一样，但是分析原因是相同的）得以解决，否则我可能就放弃了IDEA</li>\n</ol>\n<h2 id=\"根本原因\"><a href=\"#根本原因\" class=\"headerlink\" title=\"根本原因\"></a>根本原因</h2><p>IDEA默认在进行多线程调试的时候，会阻塞其他所有线程，所以应该就是断点的时候阻塞了H2连接的线程导致。文章中的说明是IDEA和Eclipse的调试策略默认情况下配置不同：</p>\n<ul>\n<li>IDEA默认是ALL级别</li>\n<li>Eclipse默认是Thread级别</li>\n</ul>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>重新设置IDEA中的调试级别保持与STS中的一致就OK了！<br><img src=\"/img/xjy/p52002.png\" alt=\"img\"><br></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">IDEA 和 Eclipse 调试多线程应用</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p52000.jpg\" alt=\"img\"><br></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>同一个测试案例，分别在STS和IDEA下正常跑起来，并成功断点到同一位置。结果，STS跑案例时，外部能够正常连接到H2数据库；而IDEA跑案例时跑到断点时，则无法连接上H2数据（奇怪的是端口能够PING通），然后一直显示<strong>“Connecting Wait…”</strong>。</p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于项目组技术的升级和管理的需要，我们的代码版本控制工具由SVN改成了GIT,整个代码包的服务端都迁移了过去。本人觉得在STS（由ECLIPES包装而来）开发工具上使用GIT插件提交和发布代码非常不方面，与此同时看到网上很多人推崇更强大、更便捷的intelliJ IDEA上来开发java应用程序，于是我决定切换过去试试。需要说明的是，我们项目的本地测试数据源配置为H2，在Debug模式下跑JUNIT单元测试案例的时候会利用DbVisualizer等外部工具用TCP模式连接到H2数据库。</p>\n<h2 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><ol>\n<li>在IDEA中重配H2为不同端口不行</li>\n<li>使用IDEA内置数据库连接器TCP模式也不行</li>\n<li>更换IDEA内置数据库连接器中连接的驱动版本和模式还不行</li>\n<li>网上查资料，因为别人大多使用H2的In-memory和Embedded模式，而我的是TCP模式，谷歌和百度上基本没有类似的问题，仍然不行。</li>\n<li>最后恰巧碰到了<a href=\"https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">《IDEA 和 Eclipse 调试多线程应用》</a>这篇文章（虽然问题起点不一样，但是分析原因是相同的）得以解决，否则我可能就放弃了IDEA</li>\n</ol>\n<h2 id=\"根本原因\"><a href=\"#根本原因\" class=\"headerlink\" title=\"根本原因\"></a>根本原因</h2><p>IDEA默认在进行多线程调试的时候，会阻塞其他所有线程，所以应该就是断点的时候阻塞了H2连接的线程导致。文章中的说明是IDEA和Eclipse的调试策略默认情况下配置不同：</p>\n<ul>\n<li>IDEA默认是ALL级别</li>\n<li>Eclipse默认是Thread级别</li>\n</ul>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>重新设置IDEA中的调试级别保持与STS中的一致就OK了！<br><img src=\"/img/xjy/p52002.png\" alt=\"img\"><br></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://emacsist.github.io/2015/12/03/idea-%E5%92%8C-eclipse-%E8%B0%83%E8%AF%95%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">IDEA 和 Eclipse 调试多线程应用</a></li>\n</ul>"},{"title":"OCR学习记录之Tesseract OCR","id":"419","date":"2018-12-29T10:58:33.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p56000.png)<br/>\n\n## 前言\n好久没有更新东西了，这里都快长草了，这次把最近学习ocr识别的学习记录写一下吧，方便以后查看。\n\n<!--more-->\n\n## OCR了解\n\n### OCR介绍\nOCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。\n\n### OCR软件对比\n各项对比值可见[维基百科较权威统计](https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software)\n\n### OCR开源引擎分类\n+ Tesseract-开源OCR引擎，也有命令行工具。HP开发Google接手。3.0之后支持训练支持中文。Golang绑定，最新的3.x版本是3.05.02，最新的4.0版本是基于LSTM的。源码见[Tesseract 的github地址](https://github.com/tesseract-ocr/tesseract)。  \n+ Cuneiform for Linux —— 本来是个Windows软件，这是Linux的移植，2011年4月已经停止维护。 \n+ GNU Ocrad —— 命令行工具。有JS移植，可用于前端。 \n+ GOCR —— 命令行工具。有JS移植，可用于前端。 \n+ OCRopy —— 基于训练的OCR引擎，训练后可以达到比Tesseract更高的准确度，项目比Tesseract更年轻。包含一个叫做OCRopus的布局分析器。in Python。 \n+ Microsoft OCR Library —— Windows8.1之后的版本内置OCR引擎，可用于桌面和WindowsPhone。 \n\n### OCR国内外收费/增量收费API\n\n+ 腾讯优图- [试用链接](https://open.youtu.qq.com/#/open/experience/general)。\n+ 百度OCR- [试用链接](http://ai.baidu.com/tech/ocr/general)。\n+ 有道云文字识别-[试用链接](http://aidemo.youdao.com/ocrdemo)。\n+ 阿里云图文识别-[试用链接](https://www.aliyun.com/product/cdi/)。\n+ 微软Azure图像识别-[试用链接](https://azure.microsoft.com/zh-cn/services/cognitive-services/computer-vision/)。\n+ Abbyy-收费软件，有SDK，有Cloud版本。\n\n## 入门Tesseract-OCR\n\n### 学习Tess4J\n  \n#### Tess4J简介\nTess4J是对Tesseract-OCR API的Java JNA封装,使java能够通过调用Tess4J的API来使用Tesseract-OCR,支持式:TIFF,JPEG,GIF,PNG,BMP,JPEG,PDF的格式，源码见[Tess4J的GitHub地址](https://github.com/nguyenq/tess4j)。\n>**值得一提的是，2018.10.29号Tess4J更新了4.3.0版本，支持Tesseract4.0.0（LSTM版），开发可参考[docs-tess4j4.3接口文档](http://tess4j.sourceforge.net/docs/)** 。\n\n#### Tess4J API 提供的功能\n+ 直接识别支持的文件\n+ 识别图片流\n+ 识别图片的某块区域\n+ 将识别结果保存为 TEXT/ HOCR/ PDF/ UNLV/ BOX\n+ 通过设置取词的等级，提取识别出来的文字\n+ 获得每一个识别区域的具体坐标范围\n+ 调整倾斜的图片\n+ 裁剪图片\n+ 调整图片分辨率\n+ 从粘贴板获得图像\n+ 克隆一个图像（目的：创建一份一模一样的图片，与原图在操作修改上，不相互影响）\n+ 图片转换为二进制、黑白图像、灰度图像\n+ 反转图片颜色\n\n#### Tess4J与Tesseract各版本对应关系\n+ 0.4 (Tesseract 2.04)\n+ 1.0 (Tesseract 3.02)\n+ 1.1 (Tesseract 3.02)\n+ 1.2 (Tesseract 3.02)\n+ 1.4 (Tesseract 3.02)\n+ 1.5 (Tesseract 3.02)\n+ 2.0 (Tesseract 3.03RC)\n+ 3.0 (Tesseract 3.04)\n+ 3.3 (Tesseract 3.05)\n+ 3.4 (Tesseract 3.05.01)\n+ 4.0 (Tesseract 4.0.0-beta.1)\n+ 4.1 (Tesseract 4.0.0-beta.3)\n+ 4.3 (Tesseract 4.0.0)\n\n### 训练Tesseract-OCR字库\n\n#### 说明\nTesseract官方提供了针对不同版本的[Tesseract字库](https://github.com/tesseract-ocr/tessdata)，我个人喜欢[wiki地址](https://github.com/tesseract-ocr/tesseract/wiki/Data-Files)里下载，因为分类更全更详细（注意选择对应的版本）。官方提供的字库能够解决一些清晰、常规的识别，然而，如果我们想要实现非常规、高精度的识别，就需要自己训练字库了。\n> 注意，库文件一定要选择对应的版本，否则后面无法识别  \n> 注意，Tesseract-OCR 4.0版后出现了LSTM方式的训练，但目前JTessBoxEditor还不支持，可以了解的是LSTM方式的训练有如下不同：\n+ box只在文本行这一级需要，因此当从已经存在的图片数据进行训练时，它更加容易\n+ .tr文件已经被.lstmf文件代替\n+  字体可以，也应该被自由地混合，而不需要分开\n+  原来的多步（mf训练，cn训练，形状簇），现在改成一个单一的lstm训练\n\n#### 训练工具\n\n+ Tesseract-OCR 3.02版\n+ JTessBoxEditor 2.2.0版（需要安装jre）\n\n#### 训练过程记录\n\n+ 1 .将需要训练的图片都转换成tiff格式\n\n+ 2 .JTessBoxEditor界面中选择tools->merge,合并的名称格式为：[自定义语言].[自定义字体].exp[编号].tif，例如xjy.font.exp0.tif\n\n+ 3 .命令行生成box文件\n``` shell\ntesseract xjy.font.exp0.tif xjy.font.exp0 -l chi_sim batch.nochop makebox\n```\n+ 4 .JTessBoxEditor界面中点击Box Editor->open，然后选上一步的tif文件，它会自动打开绑定的box文件，然后手动修正识别错误的文字或位置，然后保存\n\n+ 5 .新建字体特征文件font_properties\n``` text\nfont 0 0 0 0 0\n```\n\n+ 6 .用JTessBoxEditor处理之后就可以用如下脚本生成自己的字库文件了\n``` shell\n@echo off\ncd ./\necho. & echo.步骤1：生成.tr文件\necho ************************************************************\ntesseract.exe xjy.font.exp0.tif xjy.font.exp0 nobatch box.train\necho. & echo.步骤2：生成unicharset文件\necho ************************************************************\nunicharset_extractor.exe xjy.font.exp0.box \necho. & echo.步骤3：生成inttemp和pffmtable文件\necho ************************************************************\nmftraining -F font_properties -U unicharset -O xjy.unicharset xjy.font.exp0.tr \necho. & echo.步骤4：生成normproto文件\necho ************************************************************\ncntraining.exe xjy.font.exp0.tr\necho. & echo.步骤5：重命名相关文件\necho ************************************************************\nrename normproto xjy.normproto \nrename inttemp xjy.inttemp \nrename pffmtable xjy.pffmtable \nrename shapetable xjy.shapetable  \necho. & echo.步骤6：输出.traineddata结果文件\necho ************************************************************\ncombine_tessdata.exe xjy. \necho. & echo.训练完成！！！\necho. & pause\n```\n\n### 测试识别效果\n\n+ 原生Tesseract-OCR命令的效果\n``` shell  \n@echo off\necho %time% \ntesseract D:\\ocr\\33.jpg D:\\ocr\\1 -l eng\necho %time%\npause\n```\n\n+ Tess4J写DEMO的效果  \n``` java\npublic static void main(String[] args) {\n    \tITesseract instance =  new Tesseract();\n    \tlong start = System.currentTimeMillis();\n        File imageFile = new File(\"src/test/resources/test-data\", \"33.jpg\");\n        //设置图片源和语言\n        instance.setDatapath(\"src/test/resources/tessdata\");\n        instance.setLanguage(\"eng\");\n        String result=\"\";\n\t\ttry {\n\t\t\tresult = instance.doOCR(imageFile);\n\t\t} catch (TesseractException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n        System.out.println(\"输出结果如下：\");\n        System.out.println(result);\n        System.out.println(\"花费时间：\"+ (System.currentTimeMillis()-start) +\"毫秒\");\n\t}\n```\n\n### 主要参考链接\n+ [https://github.com/nguyenq/tess4j](https://github.com/nguyenq/tess4j)\n+ [https://github.com/tesseract-ocr/tesseract](https://github.com/tesseract-ocr/tesseract)\n+ [https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/](https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/)\n+ [https://blog.csdn.net/luojun2007/article/details/51614133](https://blog.csdn.net/luojun2007/article/details/51614133)\n+ [https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software](https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software)\n","source":"_posts/p56.md","raw":"---\ntitle: OCR学习记录之Tesseract OCR\nid: 419\ncategories:\n  - 编程语言\ndate: 2018/12/29 18:58:33        \ntags: [编程]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p56000.png)<br/>\n\n## 前言\n好久没有更新东西了，这里都快长草了，这次把最近学习ocr识别的学习记录写一下吧，方便以后查看。\n\n<!--more-->\n\n## OCR了解\n\n### OCR介绍\nOCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。\n\n### OCR软件对比\n各项对比值可见[维基百科较权威统计](https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software)\n\n### OCR开源引擎分类\n+ Tesseract-开源OCR引擎，也有命令行工具。HP开发Google接手。3.0之后支持训练支持中文。Golang绑定，最新的3.x版本是3.05.02，最新的4.0版本是基于LSTM的。源码见[Tesseract 的github地址](https://github.com/tesseract-ocr/tesseract)。  \n+ Cuneiform for Linux —— 本来是个Windows软件，这是Linux的移植，2011年4月已经停止维护。 \n+ GNU Ocrad —— 命令行工具。有JS移植，可用于前端。 \n+ GOCR —— 命令行工具。有JS移植，可用于前端。 \n+ OCRopy —— 基于训练的OCR引擎，训练后可以达到比Tesseract更高的准确度，项目比Tesseract更年轻。包含一个叫做OCRopus的布局分析器。in Python。 \n+ Microsoft OCR Library —— Windows8.1之后的版本内置OCR引擎，可用于桌面和WindowsPhone。 \n\n### OCR国内外收费/增量收费API\n\n+ 腾讯优图- [试用链接](https://open.youtu.qq.com/#/open/experience/general)。\n+ 百度OCR- [试用链接](http://ai.baidu.com/tech/ocr/general)。\n+ 有道云文字识别-[试用链接](http://aidemo.youdao.com/ocrdemo)。\n+ 阿里云图文识别-[试用链接](https://www.aliyun.com/product/cdi/)。\n+ 微软Azure图像识别-[试用链接](https://azure.microsoft.com/zh-cn/services/cognitive-services/computer-vision/)。\n+ Abbyy-收费软件，有SDK，有Cloud版本。\n\n## 入门Tesseract-OCR\n\n### 学习Tess4J\n  \n#### Tess4J简介\nTess4J是对Tesseract-OCR API的Java JNA封装,使java能够通过调用Tess4J的API来使用Tesseract-OCR,支持式:TIFF,JPEG,GIF,PNG,BMP,JPEG,PDF的格式，源码见[Tess4J的GitHub地址](https://github.com/nguyenq/tess4j)。\n>**值得一提的是，2018.10.29号Tess4J更新了4.3.0版本，支持Tesseract4.0.0（LSTM版），开发可参考[docs-tess4j4.3接口文档](http://tess4j.sourceforge.net/docs/)** 。\n\n#### Tess4J API 提供的功能\n+ 直接识别支持的文件\n+ 识别图片流\n+ 识别图片的某块区域\n+ 将识别结果保存为 TEXT/ HOCR/ PDF/ UNLV/ BOX\n+ 通过设置取词的等级，提取识别出来的文字\n+ 获得每一个识别区域的具体坐标范围\n+ 调整倾斜的图片\n+ 裁剪图片\n+ 调整图片分辨率\n+ 从粘贴板获得图像\n+ 克隆一个图像（目的：创建一份一模一样的图片，与原图在操作修改上，不相互影响）\n+ 图片转换为二进制、黑白图像、灰度图像\n+ 反转图片颜色\n\n#### Tess4J与Tesseract各版本对应关系\n+ 0.4 (Tesseract 2.04)\n+ 1.0 (Tesseract 3.02)\n+ 1.1 (Tesseract 3.02)\n+ 1.2 (Tesseract 3.02)\n+ 1.4 (Tesseract 3.02)\n+ 1.5 (Tesseract 3.02)\n+ 2.0 (Tesseract 3.03RC)\n+ 3.0 (Tesseract 3.04)\n+ 3.3 (Tesseract 3.05)\n+ 3.4 (Tesseract 3.05.01)\n+ 4.0 (Tesseract 4.0.0-beta.1)\n+ 4.1 (Tesseract 4.0.0-beta.3)\n+ 4.3 (Tesseract 4.0.0)\n\n### 训练Tesseract-OCR字库\n\n#### 说明\nTesseract官方提供了针对不同版本的[Tesseract字库](https://github.com/tesseract-ocr/tessdata)，我个人喜欢[wiki地址](https://github.com/tesseract-ocr/tesseract/wiki/Data-Files)里下载，因为分类更全更详细（注意选择对应的版本）。官方提供的字库能够解决一些清晰、常规的识别，然而，如果我们想要实现非常规、高精度的识别，就需要自己训练字库了。\n> 注意，库文件一定要选择对应的版本，否则后面无法识别  \n> 注意，Tesseract-OCR 4.0版后出现了LSTM方式的训练，但目前JTessBoxEditor还不支持，可以了解的是LSTM方式的训练有如下不同：\n+ box只在文本行这一级需要，因此当从已经存在的图片数据进行训练时，它更加容易\n+ .tr文件已经被.lstmf文件代替\n+  字体可以，也应该被自由地混合，而不需要分开\n+  原来的多步（mf训练，cn训练，形状簇），现在改成一个单一的lstm训练\n\n#### 训练工具\n\n+ Tesseract-OCR 3.02版\n+ JTessBoxEditor 2.2.0版（需要安装jre）\n\n#### 训练过程记录\n\n+ 1 .将需要训练的图片都转换成tiff格式\n\n+ 2 .JTessBoxEditor界面中选择tools->merge,合并的名称格式为：[自定义语言].[自定义字体].exp[编号].tif，例如xjy.font.exp0.tif\n\n+ 3 .命令行生成box文件\n``` shell\ntesseract xjy.font.exp0.tif xjy.font.exp0 -l chi_sim batch.nochop makebox\n```\n+ 4 .JTessBoxEditor界面中点击Box Editor->open，然后选上一步的tif文件，它会自动打开绑定的box文件，然后手动修正识别错误的文字或位置，然后保存\n\n+ 5 .新建字体特征文件font_properties\n``` text\nfont 0 0 0 0 0\n```\n\n+ 6 .用JTessBoxEditor处理之后就可以用如下脚本生成自己的字库文件了\n``` shell\n@echo off\ncd ./\necho. & echo.步骤1：生成.tr文件\necho ************************************************************\ntesseract.exe xjy.font.exp0.tif xjy.font.exp0 nobatch box.train\necho. & echo.步骤2：生成unicharset文件\necho ************************************************************\nunicharset_extractor.exe xjy.font.exp0.box \necho. & echo.步骤3：生成inttemp和pffmtable文件\necho ************************************************************\nmftraining -F font_properties -U unicharset -O xjy.unicharset xjy.font.exp0.tr \necho. & echo.步骤4：生成normproto文件\necho ************************************************************\ncntraining.exe xjy.font.exp0.tr\necho. & echo.步骤5：重命名相关文件\necho ************************************************************\nrename normproto xjy.normproto \nrename inttemp xjy.inttemp \nrename pffmtable xjy.pffmtable \nrename shapetable xjy.shapetable  \necho. & echo.步骤6：输出.traineddata结果文件\necho ************************************************************\ncombine_tessdata.exe xjy. \necho. & echo.训练完成！！！\necho. & pause\n```\n\n### 测试识别效果\n\n+ 原生Tesseract-OCR命令的效果\n``` shell  \n@echo off\necho %time% \ntesseract D:\\ocr\\33.jpg D:\\ocr\\1 -l eng\necho %time%\npause\n```\n\n+ Tess4J写DEMO的效果  \n``` java\npublic static void main(String[] args) {\n    \tITesseract instance =  new Tesseract();\n    \tlong start = System.currentTimeMillis();\n        File imageFile = new File(\"src/test/resources/test-data\", \"33.jpg\");\n        //设置图片源和语言\n        instance.setDatapath(\"src/test/resources/tessdata\");\n        instance.setLanguage(\"eng\");\n        String result=\"\";\n\t\ttry {\n\t\t\tresult = instance.doOCR(imageFile);\n\t\t} catch (TesseractException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n        System.out.println(\"输出结果如下：\");\n        System.out.println(result);\n        System.out.println(\"花费时间：\"+ (System.currentTimeMillis()-start) +\"毫秒\");\n\t}\n```\n\n### 主要参考链接\n+ [https://github.com/nguyenq/tess4j](https://github.com/nguyenq/tess4j)\n+ [https://github.com/tesseract-ocr/tesseract](https://github.com/tesseract-ocr/tesseract)\n+ [https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/](https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/)\n+ [https://blog.csdn.net/luojun2007/article/details/51614133](https://blog.csdn.net/luojun2007/article/details/51614133)\n+ [https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software](https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software)\n","slug":"p56","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jiz0030u8vea8ska3fe","content":"<p><img src=\"/img/xjy/p56000.png\" alt=\"img\"><br></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久没有更新东西了，这里都快长草了，这次把最近学习ocr识别的学习记录写一下吧，方便以后查看。</p>\n<a id=\"more\"></a>\n<h2 id=\"OCR了解\"><a href=\"#OCR了解\" class=\"headerlink\" title=\"OCR了解\"></a>OCR了解</h2><h3 id=\"OCR介绍\"><a href=\"#OCR介绍\" class=\"headerlink\" title=\"OCR介绍\"></a>OCR介绍</h3><p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。</p>\n<h3 id=\"OCR软件对比\"><a href=\"#OCR软件对比\" class=\"headerlink\" title=\"OCR软件对比\"></a>OCR软件对比</h3><p>各项对比值可见<a href=\"https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software\" target=\"_blank\" rel=\"noopener\">维基百科较权威统计</a></p>\n<h3 id=\"OCR开源引擎分类\"><a href=\"#OCR开源引擎分类\" class=\"headerlink\" title=\"OCR开源引擎分类\"></a>OCR开源引擎分类</h3><ul>\n<li>Tesseract-开源OCR引擎，也有命令行工具。HP开发Google接手。3.0之后支持训练支持中文。Golang绑定，最新的3.x版本是3.05.02，最新的4.0版本是基于LSTM的。源码见<a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">Tesseract 的github地址</a>。  </li>\n<li>Cuneiform for Linux —— 本来是个Windows软件，这是Linux的移植，2011年4月已经停止维护。 </li>\n<li>GNU Ocrad —— 命令行工具。有JS移植，可用于前端。 </li>\n<li>GOCR —— 命令行工具。有JS移植，可用于前端。 </li>\n<li>OCRopy —— 基于训练的OCR引擎，训练后可以达到比Tesseract更高的准确度，项目比Tesseract更年轻。包含一个叫做OCRopus的布局分析器。in Python。 </li>\n<li>Microsoft OCR Library —— Windows8.1之后的版本内置OCR引擎，可用于桌面和WindowsPhone。 </li>\n</ul>\n<h3 id=\"OCR国内外收费-增量收费API\"><a href=\"#OCR国内外收费-增量收费API\" class=\"headerlink\" title=\"OCR国内外收费/增量收费API\"></a>OCR国内外收费/增量收费API</h3><ul>\n<li>腾讯优图- <a href=\"https://open.youtu.qq.com/#/open/experience/general\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>百度OCR- <a href=\"http://ai.baidu.com/tech/ocr/general\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>有道云文字识别-<a href=\"http://aidemo.youdao.com/ocrdemo\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>阿里云图文识别-<a href=\"https://www.aliyun.com/product/cdi/\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>微软Azure图像识别-<a href=\"https://azure.microsoft.com/zh-cn/services/cognitive-services/computer-vision/\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>Abbyy-收费软件，有SDK，有Cloud版本。</li>\n</ul>\n<h2 id=\"入门Tesseract-OCR\"><a href=\"#入门Tesseract-OCR\" class=\"headerlink\" title=\"入门Tesseract-OCR\"></a>入门Tesseract-OCR</h2><h3 id=\"学习Tess4J\"><a href=\"#学习Tess4J\" class=\"headerlink\" title=\"学习Tess4J\"></a>学习Tess4J</h3><h4 id=\"Tess4J简介\"><a href=\"#Tess4J简介\" class=\"headerlink\" title=\"Tess4J简介\"></a>Tess4J简介</h4><p>Tess4J是对Tesseract-OCR API的Java JNA封装,使java能够通过调用Tess4J的API来使用Tesseract-OCR,支持式:TIFF,JPEG,GIF,PNG,BMP,JPEG,PDF的格式，源码见<a href=\"https://github.com/nguyenq/tess4j\" target=\"_blank\" rel=\"noopener\">Tess4J的GitHub地址</a>。</p>\n<blockquote>\n<p><strong>值得一提的是，2018.10.29号Tess4J更新了4.3.0版本，支持Tesseract4.0.0（LSTM版），开发可参考<a href=\"http://tess4j.sourceforge.net/docs/\" target=\"_blank\" rel=\"noopener\">docs-tess4j4.3接口文档</a></strong> 。</p>\n</blockquote>\n<h4 id=\"Tess4J-API-提供的功能\"><a href=\"#Tess4J-API-提供的功能\" class=\"headerlink\" title=\"Tess4J API 提供的功能\"></a>Tess4J API 提供的功能</h4><ul>\n<li>直接识别支持的文件</li>\n<li>识别图片流</li>\n<li>识别图片的某块区域</li>\n<li>将识别结果保存为 TEXT/ HOCR/ PDF/ UNLV/ BOX</li>\n<li>通过设置取词的等级，提取识别出来的文字</li>\n<li>获得每一个识别区域的具体坐标范围</li>\n<li>调整倾斜的图片</li>\n<li>裁剪图片</li>\n<li>调整图片分辨率</li>\n<li>从粘贴板获得图像</li>\n<li>克隆一个图像（目的：创建一份一模一样的图片，与原图在操作修改上，不相互影响）</li>\n<li>图片转换为二进制、黑白图像、灰度图像</li>\n<li>反转图片颜色</li>\n</ul>\n<h4 id=\"Tess4J与Tesseract各版本对应关系\"><a href=\"#Tess4J与Tesseract各版本对应关系\" class=\"headerlink\" title=\"Tess4J与Tesseract各版本对应关系\"></a>Tess4J与Tesseract各版本对应关系</h4><ul>\n<li>0.4 (Tesseract 2.04)</li>\n<li>1.0 (Tesseract 3.02)</li>\n<li>1.1 (Tesseract 3.02)</li>\n<li>1.2 (Tesseract 3.02)</li>\n<li>1.4 (Tesseract 3.02)</li>\n<li>1.5 (Tesseract 3.02)</li>\n<li>2.0 (Tesseract 3.03RC)</li>\n<li>3.0 (Tesseract 3.04)</li>\n<li>3.3 (Tesseract 3.05)</li>\n<li>3.4 (Tesseract 3.05.01)</li>\n<li>4.0 (Tesseract 4.0.0-beta.1)</li>\n<li>4.1 (Tesseract 4.0.0-beta.3)</li>\n<li>4.3 (Tesseract 4.0.0)</li>\n</ul>\n<h3 id=\"训练Tesseract-OCR字库\"><a href=\"#训练Tesseract-OCR字库\" class=\"headerlink\" title=\"训练Tesseract-OCR字库\"></a>训练Tesseract-OCR字库</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Tesseract官方提供了针对不同版本的<a href=\"https://github.com/tesseract-ocr/tessdata\" target=\"_blank\" rel=\"noopener\">Tesseract字库</a>，我个人喜欢<a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Data-Files\" target=\"_blank\" rel=\"noopener\">wiki地址</a>里下载，因为分类更全更详细（注意选择对应的版本）。官方提供的字库能够解决一些清晰、常规的识别，然而，如果我们想要实现非常规、高精度的识别，就需要自己训练字库了。</p>\n<blockquote>\n<p>注意，库文件一定要选择对应的版本，否则后面无法识别<br>注意，Tesseract-OCR 4.0版后出现了LSTM方式的训练，但目前JTessBoxEditor还不支持，可以了解的是LSTM方式的训练有如下不同：</p>\n<ul>\n<li>box只在文本行这一级需要，因此当从已经存在的图片数据进行训练时，它更加容易</li>\n<li>.tr文件已经被.lstmf文件代替</li>\n<li>字体可以，也应该被自由地混合，而不需要分开</li>\n<li>原来的多步（mf训练，cn训练，形状簇），现在改成一个单一的lstm训练</li>\n</ul>\n</blockquote>\n<h4 id=\"训练工具\"><a href=\"#训练工具\" class=\"headerlink\" title=\"训练工具\"></a>训练工具</h4><ul>\n<li>Tesseract-OCR 3.02版</li>\n<li>JTessBoxEditor 2.2.0版（需要安装jre）</li>\n</ul>\n<h4 id=\"训练过程记录\"><a href=\"#训练过程记录\" class=\"headerlink\" title=\"训练过程记录\"></a>训练过程记录</h4><ul>\n<li><p>1 .将需要训练的图片都转换成tiff格式</p>\n</li>\n<li><p>2 .JTessBoxEditor界面中选择tools-&gt;merge,合并的名称格式为：[自定义语言].[自定义字体].exp[编号].tif，例如xjy.font.exp0.tif</p>\n</li>\n<li><p>3 .命令行生成box文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract xjy.font.exp0.tif xjy.font.exp0 -l chi_sim batch.nochop makebox</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4 .JTessBoxEditor界面中点击Box Editor-&gt;open，然后选上一步的tif文件，它会自动打开绑定的box文件，然后手动修正识别错误的文字或位置，然后保存</p>\n</li>\n<li><p>5 .新建字体特征文件font_properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6 .用JTessBoxEditor处理之后就可以用如下脚本生成自己的字库文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">cd ./</span><br><span class=\"line\">echo. &amp; echo.步骤1：生成.tr文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">tesseract.exe xjy.font.exp0.tif xjy.font.exp0 nobatch box.train</span><br><span class=\"line\">echo. &amp; echo.步骤2：生成unicharset文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">unicharset_extractor.exe xjy.font.exp0.box </span><br><span class=\"line\">echo. &amp; echo.步骤3：生成inttemp和pffmtable文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">mftraining -F font_properties -U unicharset -O xjy.unicharset xjy.font.exp0.tr </span><br><span class=\"line\">echo. &amp; echo.步骤4：生成normproto文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">cntraining.exe xjy.font.exp0.tr</span><br><span class=\"line\">echo. &amp; echo.步骤5：重命名相关文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">rename normproto xjy.normproto </span><br><span class=\"line\">rename inttemp xjy.inttemp </span><br><span class=\"line\">rename pffmtable xjy.pffmtable </span><br><span class=\"line\">rename shapetable xjy.shapetable  </span><br><span class=\"line\">echo. &amp; echo.步骤6：输出.traineddata结果文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">combine_tessdata.exe xjy. </span><br><span class=\"line\">echo. &amp; echo.训练完成！！！</span><br><span class=\"line\">echo. &amp; pause</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"测试识别效果\"><a href=\"#测试识别效果\" class=\"headerlink\" title=\"测试识别效果\"></a>测试识别效果</h3><ul>\n<li><p>原生Tesseract-OCR命令的效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">echo %time% </span><br><span class=\"line\">tesseract D:\\ocr\\33.jpg D:\\ocr\\1 -l eng</span><br><span class=\"line\">echo %time%</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Tess4J写DEMO的效果  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tITesseract instance =  <span class=\"keyword\">new</span> Tesseract();</span><br><span class=\"line\">    \t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        File imageFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"src/test/resources/test-data\"</span>, <span class=\"string\">\"33.jpg\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置图片源和语言</span></span><br><span class=\"line\">        instance.setDatapath(<span class=\"string\">\"src/test/resources/tessdata\"</span>);</span><br><span class=\"line\">        instance.setLanguage(<span class=\"string\">\"eng\"</span>);</span><br><span class=\"line\">        String result=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tresult = instance.doOCR(imageFile);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (TesseractException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出结果如下：\"</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"花费时间：\"</span>+ (System.currentTimeMillis()-start) +<span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"主要参考链接\"><a href=\"#主要参考链接\" class=\"headerlink\" title=\"主要参考链接\"></a>主要参考链接</h3><ul>\n<li><a href=\"https://github.com/nguyenq/tess4j\" target=\"_blank\" rel=\"noopener\">https://github.com/nguyenq/tess4j</a></li>\n<li><a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr/tesseract</a></li>\n<li><a href=\"https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/</a></li>\n<li><a href=\"https://blog.csdn.net/luojun2007/article/details/51614133\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/luojun2007/article/details/51614133</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p56000.png\" alt=\"img\"><br></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久没有更新东西了，这里都快长草了，这次把最近学习ocr识别的学习记录写一下吧，方便以后查看。</p>","more":"<h2 id=\"OCR了解\"><a href=\"#OCR了解\" class=\"headerlink\" title=\"OCR了解\"></a>OCR了解</h2><h3 id=\"OCR介绍\"><a href=\"#OCR介绍\" class=\"headerlink\" title=\"OCR介绍\"></a>OCR介绍</h3><p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。</p>\n<h3 id=\"OCR软件对比\"><a href=\"#OCR软件对比\" class=\"headerlink\" title=\"OCR软件对比\"></a>OCR软件对比</h3><p>各项对比值可见<a href=\"https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software\" target=\"_blank\" rel=\"noopener\">维基百科较权威统计</a></p>\n<h3 id=\"OCR开源引擎分类\"><a href=\"#OCR开源引擎分类\" class=\"headerlink\" title=\"OCR开源引擎分类\"></a>OCR开源引擎分类</h3><ul>\n<li>Tesseract-开源OCR引擎，也有命令行工具。HP开发Google接手。3.0之后支持训练支持中文。Golang绑定，最新的3.x版本是3.05.02，最新的4.0版本是基于LSTM的。源码见<a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">Tesseract 的github地址</a>。  </li>\n<li>Cuneiform for Linux —— 本来是个Windows软件，这是Linux的移植，2011年4月已经停止维护。 </li>\n<li>GNU Ocrad —— 命令行工具。有JS移植，可用于前端。 </li>\n<li>GOCR —— 命令行工具。有JS移植，可用于前端。 </li>\n<li>OCRopy —— 基于训练的OCR引擎，训练后可以达到比Tesseract更高的准确度，项目比Tesseract更年轻。包含一个叫做OCRopus的布局分析器。in Python。 </li>\n<li>Microsoft OCR Library —— Windows8.1之后的版本内置OCR引擎，可用于桌面和WindowsPhone。 </li>\n</ul>\n<h3 id=\"OCR国内外收费-增量收费API\"><a href=\"#OCR国内外收费-增量收费API\" class=\"headerlink\" title=\"OCR国内外收费/增量收费API\"></a>OCR国内外收费/增量收费API</h3><ul>\n<li>腾讯优图- <a href=\"https://open.youtu.qq.com/#/open/experience/general\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>百度OCR- <a href=\"http://ai.baidu.com/tech/ocr/general\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>有道云文字识别-<a href=\"http://aidemo.youdao.com/ocrdemo\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>阿里云图文识别-<a href=\"https://www.aliyun.com/product/cdi/\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>微软Azure图像识别-<a href=\"https://azure.microsoft.com/zh-cn/services/cognitive-services/computer-vision/\" target=\"_blank\" rel=\"noopener\">试用链接</a>。</li>\n<li>Abbyy-收费软件，有SDK，有Cloud版本。</li>\n</ul>\n<h2 id=\"入门Tesseract-OCR\"><a href=\"#入门Tesseract-OCR\" class=\"headerlink\" title=\"入门Tesseract-OCR\"></a>入门Tesseract-OCR</h2><h3 id=\"学习Tess4J\"><a href=\"#学习Tess4J\" class=\"headerlink\" title=\"学习Tess4J\"></a>学习Tess4J</h3><h4 id=\"Tess4J简介\"><a href=\"#Tess4J简介\" class=\"headerlink\" title=\"Tess4J简介\"></a>Tess4J简介</h4><p>Tess4J是对Tesseract-OCR API的Java JNA封装,使java能够通过调用Tess4J的API来使用Tesseract-OCR,支持式:TIFF,JPEG,GIF,PNG,BMP,JPEG,PDF的格式，源码见<a href=\"https://github.com/nguyenq/tess4j\" target=\"_blank\" rel=\"noopener\">Tess4J的GitHub地址</a>。</p>\n<blockquote>\n<p><strong>值得一提的是，2018.10.29号Tess4J更新了4.3.0版本，支持Tesseract4.0.0（LSTM版），开发可参考<a href=\"http://tess4j.sourceforge.net/docs/\" target=\"_blank\" rel=\"noopener\">docs-tess4j4.3接口文档</a></strong> 。</p>\n</blockquote>\n<h4 id=\"Tess4J-API-提供的功能\"><a href=\"#Tess4J-API-提供的功能\" class=\"headerlink\" title=\"Tess4J API 提供的功能\"></a>Tess4J API 提供的功能</h4><ul>\n<li>直接识别支持的文件</li>\n<li>识别图片流</li>\n<li>识别图片的某块区域</li>\n<li>将识别结果保存为 TEXT/ HOCR/ PDF/ UNLV/ BOX</li>\n<li>通过设置取词的等级，提取识别出来的文字</li>\n<li>获得每一个识别区域的具体坐标范围</li>\n<li>调整倾斜的图片</li>\n<li>裁剪图片</li>\n<li>调整图片分辨率</li>\n<li>从粘贴板获得图像</li>\n<li>克隆一个图像（目的：创建一份一模一样的图片，与原图在操作修改上，不相互影响）</li>\n<li>图片转换为二进制、黑白图像、灰度图像</li>\n<li>反转图片颜色</li>\n</ul>\n<h4 id=\"Tess4J与Tesseract各版本对应关系\"><a href=\"#Tess4J与Tesseract各版本对应关系\" class=\"headerlink\" title=\"Tess4J与Tesseract各版本对应关系\"></a>Tess4J与Tesseract各版本对应关系</h4><ul>\n<li>0.4 (Tesseract 2.04)</li>\n<li>1.0 (Tesseract 3.02)</li>\n<li>1.1 (Tesseract 3.02)</li>\n<li>1.2 (Tesseract 3.02)</li>\n<li>1.4 (Tesseract 3.02)</li>\n<li>1.5 (Tesseract 3.02)</li>\n<li>2.0 (Tesseract 3.03RC)</li>\n<li>3.0 (Tesseract 3.04)</li>\n<li>3.3 (Tesseract 3.05)</li>\n<li>3.4 (Tesseract 3.05.01)</li>\n<li>4.0 (Tesseract 4.0.0-beta.1)</li>\n<li>4.1 (Tesseract 4.0.0-beta.3)</li>\n<li>4.3 (Tesseract 4.0.0)</li>\n</ul>\n<h3 id=\"训练Tesseract-OCR字库\"><a href=\"#训练Tesseract-OCR字库\" class=\"headerlink\" title=\"训练Tesseract-OCR字库\"></a>训练Tesseract-OCR字库</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><p>Tesseract官方提供了针对不同版本的<a href=\"https://github.com/tesseract-ocr/tessdata\" target=\"_blank\" rel=\"noopener\">Tesseract字库</a>，我个人喜欢<a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Data-Files\" target=\"_blank\" rel=\"noopener\">wiki地址</a>里下载，因为分类更全更详细（注意选择对应的版本）。官方提供的字库能够解决一些清晰、常规的识别，然而，如果我们想要实现非常规、高精度的识别，就需要自己训练字库了。</p>\n<blockquote>\n<p>注意，库文件一定要选择对应的版本，否则后面无法识别<br>注意，Tesseract-OCR 4.0版后出现了LSTM方式的训练，但目前JTessBoxEditor还不支持，可以了解的是LSTM方式的训练有如下不同：</p>\n<ul>\n<li>box只在文本行这一级需要，因此当从已经存在的图片数据进行训练时，它更加容易</li>\n<li>.tr文件已经被.lstmf文件代替</li>\n<li>字体可以，也应该被自由地混合，而不需要分开</li>\n<li>原来的多步（mf训练，cn训练，形状簇），现在改成一个单一的lstm训练</li>\n</ul>\n</blockquote>\n<h4 id=\"训练工具\"><a href=\"#训练工具\" class=\"headerlink\" title=\"训练工具\"></a>训练工具</h4><ul>\n<li>Tesseract-OCR 3.02版</li>\n<li>JTessBoxEditor 2.2.0版（需要安装jre）</li>\n</ul>\n<h4 id=\"训练过程记录\"><a href=\"#训练过程记录\" class=\"headerlink\" title=\"训练过程记录\"></a>训练过程记录</h4><ul>\n<li><p>1 .将需要训练的图片都转换成tiff格式</p>\n</li>\n<li><p>2 .JTessBoxEditor界面中选择tools-&gt;merge,合并的名称格式为：[自定义语言].[自定义字体].exp[编号].tif，例如xjy.font.exp0.tif</p>\n</li>\n<li><p>3 .命令行生成box文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tesseract xjy.font.exp0.tif xjy.font.exp0 -l chi_sim batch.nochop makebox</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4 .JTessBoxEditor界面中点击Box Editor-&gt;open，然后选上一步的tif文件，它会自动打开绑定的box文件，然后手动修正识别错误的文字或位置，然后保存</p>\n</li>\n<li><p>5 .新建字体特征文件font_properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6 .用JTessBoxEditor处理之后就可以用如下脚本生成自己的字库文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">cd ./</span><br><span class=\"line\">echo. &amp; echo.步骤1：生成.tr文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">tesseract.exe xjy.font.exp0.tif xjy.font.exp0 nobatch box.train</span><br><span class=\"line\">echo. &amp; echo.步骤2：生成unicharset文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">unicharset_extractor.exe xjy.font.exp0.box </span><br><span class=\"line\">echo. &amp; echo.步骤3：生成inttemp和pffmtable文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">mftraining -F font_properties -U unicharset -O xjy.unicharset xjy.font.exp0.tr </span><br><span class=\"line\">echo. &amp; echo.步骤4：生成normproto文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">cntraining.exe xjy.font.exp0.tr</span><br><span class=\"line\">echo. &amp; echo.步骤5：重命名相关文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">rename normproto xjy.normproto </span><br><span class=\"line\">rename inttemp xjy.inttemp </span><br><span class=\"line\">rename pffmtable xjy.pffmtable </span><br><span class=\"line\">rename shapetable xjy.shapetable  </span><br><span class=\"line\">echo. &amp; echo.步骤6：输出.traineddata结果文件</span><br><span class=\"line\">echo ************************************************************</span><br><span class=\"line\">combine_tessdata.exe xjy. </span><br><span class=\"line\">echo. &amp; echo.训练完成！！！</span><br><span class=\"line\">echo. &amp; pause</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"测试识别效果\"><a href=\"#测试识别效果\" class=\"headerlink\" title=\"测试识别效果\"></a>测试识别效果</h3><ul>\n<li><p>原生Tesseract-OCR命令的效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">echo %time% </span><br><span class=\"line\">tesseract D:\\ocr\\33.jpg D:\\ocr\\1 -l eng</span><br><span class=\"line\">echo %time%</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Tess4J写DEMO的效果  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tITesseract instance =  <span class=\"keyword\">new</span> Tesseract();</span><br><span class=\"line\">    \t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        File imageFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"src/test/resources/test-data\"</span>, <span class=\"string\">\"33.jpg\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置图片源和语言</span></span><br><span class=\"line\">        instance.setDatapath(<span class=\"string\">\"src/test/resources/tessdata\"</span>);</span><br><span class=\"line\">        instance.setLanguage(<span class=\"string\">\"eng\"</span>);</span><br><span class=\"line\">        String result=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tresult = instance.doOCR(imageFile);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (TesseractException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出结果如下：\"</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"花费时间：\"</span>+ (System.currentTimeMillis()-start) +<span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"主要参考链接\"><a href=\"#主要参考链接\" class=\"headerlink\" title=\"主要参考链接\"></a>主要参考链接</h3><ul>\n<li><a href=\"https://github.com/nguyenq/tess4j\" target=\"_blank\" rel=\"noopener\">https://github.com/nguyenq/tess4j</a></li>\n<li><a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr/tesseract</a></li>\n<li><a href=\"https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/</a></li>\n<li><a href=\"https://blog.csdn.net/luojun2007/article/details/51614133\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/luojun2007/article/details/51614133</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Comparison_of_optical_character_recognition_software</a></li>\n</ul>"},{"title":"ELK日志分析系统搭建-入门记录","id":"666","date":"2019-01-11T04:58:33.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p57000.jpg)<br/>\n\n## 简介\n\nELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana。它们之间互相配合使用，完美衔接，高效的满足了很多场合的应用，实现了一种目前主流的日志系统。ELK的工作原理和更多种结合框架方案可以参考[https://www.cnblogs.com/aresxin/p/8035137.html](https://www.cnblogs.com/aresxin/p/8035137.html)。本篇文章仅记录ELK三者的搭建记录。\n\n<!--more-->\n\n## 环境及软件\n\n+ Centos7 (操作系统)\n+ JDK-1.8.0 (JRE也可)\n+ LogStash-2.4.0 (用于日志收集)\n+ ElasticSearch-2.2.0 (用于存储数据和定义检索规则)\n+ Kibana-4.4.0 (用于界面展示)\n+ Redis-4.0.2（非必须，仅测了该种情况）\n\n## 安装及配置\n\n### Java\nElasticsearch需要用到java环境，所以先要安装jdk\n``` shell\n# 解压\ntar -zxvf jdk-8u144-linux-x64.tar.gz -C /home/app/Java\n\n# 编辑环境变量配置\nvi /etc/profile\n----------\n#如下内容是加入到文件末尾的Java environment\nexport JAVA_HOME=/home/app/java/jdk1.8.0_144\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$JAVA_HOME/bin\n----------\n\n# 使环境变量配置生效\nsource /etc/profile\n\n# 测试一下\njava -version\n```\n\n###  Logstash\nLogstash，用于日志收集，这里安装并测试了nginx日志到redis。\n``` shell\n# 下载压缩包\nwget https://download.elastic.co/logstash/logstash/logstash-2.4.0.tar.gz\n\n# 解压\ntar zxvf logstash-2.4.0.tar.gz -C /home/app/\n\n# 测试一下\n/home/app/logstash-2.4.0/bin/logstash -e 'input { stdin { } } output { stdout {} }'\n\n# 配置输出到redis\nview /home/app/logstash-2.4.0/bin/logstash_nginx.conf\n----------\ninput {\n    file {\n        path => [\"/var/log/nginx/access.log\"]\n        type => \"nginx_log\"\n    }\n}\noutput {\n    redis{\n        host => \"192.168.50.120\"\n        key => 'logstash-redis'\n        data_type => 'list'\n    }\n    stdout {\ncodec => rubydebug\n    }\n}\n----------\n\n# 启动\n/home/app/logstash-2.4.0/bin/logstash -f ./logstash_nginx.conf --configtest\n```\n\n### ElasticSearch\nElasticsearch,用于存储数据和定义检索规则。\n``` shell\n# 下载压缩包\nwget https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.2.0/elasticsearch-2.2.0.tar.gz\n\n# 解压\ntar -zxvf elasticsearch-2.2.0.tar.gz -C /home/app\n\n# 修改配置文件\nvim /home/app/elasticsearch-2.2.0/config/elasticsearch.yml\n----------\n  network.host: 127.0.0.1  \n  http.port: 9200\n----------\n\n# 创建专用用户\ngroupadd elk\nuseradd es -g elk\nchown -R es.elk /home/app/elasticsearch-2.2.0\nsu - es\n\n# 安装kopf和head插件\n/home/app/elasticsearch-2.2.0/bin/plugin install lmenezes/elasticsearch-kopf\n/home/app/elasticsearch-2.2.0/bin/plugin install mobz/elasticsearch-head\n\n# 启动\nnohup /home/app/elasticsearch-2.2.0/bin/elasticsearch > /home/app/elasticsearch-2.2.0/nohub &\n\n# 测试一下\ncurl http://127.0.0.1:9200\n\n# 查看集群(用浏览器访问)\nhttp://127.0.0.1/_plugin/head/\n\n# 删除索引\ncurl -XDELETE http://localhost:9200/shakespeare\n\n# 创建索引\ncurl -XPUT http://localhost:9200/shakespeare -d '  \n{  \n \"mappings\" : {  \n  \"_default_\" : {  \n   \"properties\" : {  \n    \"speaker\" : {\"type\": \"string\", \"index\" : \"not_analyzed\" },  \n    \"play_name\" : {\"type\": \"string\", \"index\" : \"not_analyzed\" },  \n    \"line_id\" : { \"type\" : \"integer\" },  \n    \"speech_number\" : { \"type\" : \"integer\" }  \n   }  \n  }  \n }  \n}  \n```\n\n### kibana\nKibana用于连接Elasticsearch，定义自己的图表输出样式和展示。\n``` shell\n# 下载压缩包\nwget https://download.elastic.co/kibana/kibana/kibana-4.4.0-linux-x64.tar.gz\n\n# 修改配置文件（对接elasticsearch）\nvim /home/app/kibana-4.4.0-linux-x64/config/kibana.yml\nelasticsearch.url: \"http://127.0.0.1:9200\"\nserver.port: 5601\nserver.host: \"0.0.0.0\"\n\n# 启动\nnohup /home/app/kibana-4.4.0-linux-x64/bin/kibana > /home/app/kibana-4.4.0-linux-x64/nohub.out &\n\n#测试一下\ncurl http://127.0.0.1:5601\n```\n\n### Redis（非必需，仅记录）\n这里仅用于配合LogStash测试。\n```shell\n# 安装相关编译工具\nyum install gcc tcl\n\n# 下载压缩包\nwget http://download.redis.io/releases/redis-4.0.2.tar.gz\n\n# 解压\ntar zxvf redis-4.0.2.tar.gz -C /home/app\n\n# 编译\ncd /home/app/redis-4.0.2/\nmake MALLOC=libc\nmake install\n\n# 测试一下\nmake test\n\n# src目录下执行\n./redis-server\n\n# 加入开机启动项\nvim /home/app/redis-4.0.2/redis.conf\n----------\nbind 127.0.0.1改为0.0.0.0\ndaemonize no改为yes\nrequirepass foobared改为自己的密码\n----------\n\n# 配置开机启动脚本\nvim /etc/init.d/redis\n----------\n#chkconfig: 2345 10 90\n# description: Start and Stop redis\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nREDISPORT=6379 #实际环境而定\nEXEC=/home/app/redis-4.0.2/src/redis-server #实际环境而定\nREDIS_CLI=/home/app/redis-4.0.2/src/redis-cli #实际环境而定\nPIDFILE=/var/run/redis.pid\nCONF=\"/home/app/redis-4.0.2/redis.conf\" #实际环境而定\ncase \"$1\" in\nstart)\nif [ -f $PIDFILE ]\nthen\necho \"$PIDFILE exists, process is already running or crashed.\"\nelse\necho \"Starting Redis server...\"\n$EXEC $CONF\nfi\nif [ \"$?\"=\"0\" ]\nthen\necho \"Redis is running...\"\nfi\n;;\nstop)\nif [ ! -f $PIDFILE ]\nthen\necho \"$PIDFILE exists, process is not running.\"\nelse\nPID=$(cat $PIDFILE)\necho \"Stopping...\"\n$REDIS_CLI -p $REDISPORT SHUTDOWN\nwhile [ -x $PIDFILE ]\ndo\necho \"Waiting for Redis to shutdown...\"\nsleep 1\ndone\necho \"Redis stopped\"\nfi\n;;\nrestart|force-reload)\n${0} stop\n${0} start\n;;\n*)\necho \"Usage: /etc/init.d/redis {start|stop|restart|force-reload}\" >&2\nexit 1\nesac\n----------\n\n# 赋执行权限\nchmod +x /etc/init.d/redis\n\n# 尝试启动\nservice redis start\n\n# 开启自启动\nchkconfig redis on\n```\n\n### 整个搭配配置及效果记录（待更新。。。）\n这段内容待更新。。。。。。先上两张Kibana的效果图吧：\n![img](/img/xjy/p57001.png)<br/>\n![img](/img/xjy/p57002.png)<br/>\n","source":"_posts/p57.md","raw":"---\ntitle: ELK日志分析系统搭建-入门记录\nid: 666\ncategories:\n  - 编程语言\ndate: 2019/01/11 12:58:33        \ntags: [编程, 运维]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p57000.jpg)<br/>\n\n## 简介\n\nELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana。它们之间互相配合使用，完美衔接，高效的满足了很多场合的应用，实现了一种目前主流的日志系统。ELK的工作原理和更多种结合框架方案可以参考[https://www.cnblogs.com/aresxin/p/8035137.html](https://www.cnblogs.com/aresxin/p/8035137.html)。本篇文章仅记录ELK三者的搭建记录。\n\n<!--more-->\n\n## 环境及软件\n\n+ Centos7 (操作系统)\n+ JDK-1.8.0 (JRE也可)\n+ LogStash-2.4.0 (用于日志收集)\n+ ElasticSearch-2.2.0 (用于存储数据和定义检索规则)\n+ Kibana-4.4.0 (用于界面展示)\n+ Redis-4.0.2（非必须，仅测了该种情况）\n\n## 安装及配置\n\n### Java\nElasticsearch需要用到java环境，所以先要安装jdk\n``` shell\n# 解压\ntar -zxvf jdk-8u144-linux-x64.tar.gz -C /home/app/Java\n\n# 编辑环境变量配置\nvi /etc/profile\n----------\n#如下内容是加入到文件末尾的Java environment\nexport JAVA_HOME=/home/app/java/jdk1.8.0_144\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$JAVA_HOME/bin\n----------\n\n# 使环境变量配置生效\nsource /etc/profile\n\n# 测试一下\njava -version\n```\n\n###  Logstash\nLogstash，用于日志收集，这里安装并测试了nginx日志到redis。\n``` shell\n# 下载压缩包\nwget https://download.elastic.co/logstash/logstash/logstash-2.4.0.tar.gz\n\n# 解压\ntar zxvf logstash-2.4.0.tar.gz -C /home/app/\n\n# 测试一下\n/home/app/logstash-2.4.0/bin/logstash -e 'input { stdin { } } output { stdout {} }'\n\n# 配置输出到redis\nview /home/app/logstash-2.4.0/bin/logstash_nginx.conf\n----------\ninput {\n    file {\n        path => [\"/var/log/nginx/access.log\"]\n        type => \"nginx_log\"\n    }\n}\noutput {\n    redis{\n        host => \"192.168.50.120\"\n        key => 'logstash-redis'\n        data_type => 'list'\n    }\n    stdout {\ncodec => rubydebug\n    }\n}\n----------\n\n# 启动\n/home/app/logstash-2.4.0/bin/logstash -f ./logstash_nginx.conf --configtest\n```\n\n### ElasticSearch\nElasticsearch,用于存储数据和定义检索规则。\n``` shell\n# 下载压缩包\nwget https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.2.0/elasticsearch-2.2.0.tar.gz\n\n# 解压\ntar -zxvf elasticsearch-2.2.0.tar.gz -C /home/app\n\n# 修改配置文件\nvim /home/app/elasticsearch-2.2.0/config/elasticsearch.yml\n----------\n  network.host: 127.0.0.1  \n  http.port: 9200\n----------\n\n# 创建专用用户\ngroupadd elk\nuseradd es -g elk\nchown -R es.elk /home/app/elasticsearch-2.2.0\nsu - es\n\n# 安装kopf和head插件\n/home/app/elasticsearch-2.2.0/bin/plugin install lmenezes/elasticsearch-kopf\n/home/app/elasticsearch-2.2.0/bin/plugin install mobz/elasticsearch-head\n\n# 启动\nnohup /home/app/elasticsearch-2.2.0/bin/elasticsearch > /home/app/elasticsearch-2.2.0/nohub &\n\n# 测试一下\ncurl http://127.0.0.1:9200\n\n# 查看集群(用浏览器访问)\nhttp://127.0.0.1/_plugin/head/\n\n# 删除索引\ncurl -XDELETE http://localhost:9200/shakespeare\n\n# 创建索引\ncurl -XPUT http://localhost:9200/shakespeare -d '  \n{  \n \"mappings\" : {  \n  \"_default_\" : {  \n   \"properties\" : {  \n    \"speaker\" : {\"type\": \"string\", \"index\" : \"not_analyzed\" },  \n    \"play_name\" : {\"type\": \"string\", \"index\" : \"not_analyzed\" },  \n    \"line_id\" : { \"type\" : \"integer\" },  \n    \"speech_number\" : { \"type\" : \"integer\" }  \n   }  \n  }  \n }  \n}  \n```\n\n### kibana\nKibana用于连接Elasticsearch，定义自己的图表输出样式和展示。\n``` shell\n# 下载压缩包\nwget https://download.elastic.co/kibana/kibana/kibana-4.4.0-linux-x64.tar.gz\n\n# 修改配置文件（对接elasticsearch）\nvim /home/app/kibana-4.4.0-linux-x64/config/kibana.yml\nelasticsearch.url: \"http://127.0.0.1:9200\"\nserver.port: 5601\nserver.host: \"0.0.0.0\"\n\n# 启动\nnohup /home/app/kibana-4.4.0-linux-x64/bin/kibana > /home/app/kibana-4.4.0-linux-x64/nohub.out &\n\n#测试一下\ncurl http://127.0.0.1:5601\n```\n\n### Redis（非必需，仅记录）\n这里仅用于配合LogStash测试。\n```shell\n# 安装相关编译工具\nyum install gcc tcl\n\n# 下载压缩包\nwget http://download.redis.io/releases/redis-4.0.2.tar.gz\n\n# 解压\ntar zxvf redis-4.0.2.tar.gz -C /home/app\n\n# 编译\ncd /home/app/redis-4.0.2/\nmake MALLOC=libc\nmake install\n\n# 测试一下\nmake test\n\n# src目录下执行\n./redis-server\n\n# 加入开机启动项\nvim /home/app/redis-4.0.2/redis.conf\n----------\nbind 127.0.0.1改为0.0.0.0\ndaemonize no改为yes\nrequirepass foobared改为自己的密码\n----------\n\n# 配置开机启动脚本\nvim /etc/init.d/redis\n----------\n#chkconfig: 2345 10 90\n# description: Start and Stop redis\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nREDISPORT=6379 #实际环境而定\nEXEC=/home/app/redis-4.0.2/src/redis-server #实际环境而定\nREDIS_CLI=/home/app/redis-4.0.2/src/redis-cli #实际环境而定\nPIDFILE=/var/run/redis.pid\nCONF=\"/home/app/redis-4.0.2/redis.conf\" #实际环境而定\ncase \"$1\" in\nstart)\nif [ -f $PIDFILE ]\nthen\necho \"$PIDFILE exists, process is already running or crashed.\"\nelse\necho \"Starting Redis server...\"\n$EXEC $CONF\nfi\nif [ \"$?\"=\"0\" ]\nthen\necho \"Redis is running...\"\nfi\n;;\nstop)\nif [ ! -f $PIDFILE ]\nthen\necho \"$PIDFILE exists, process is not running.\"\nelse\nPID=$(cat $PIDFILE)\necho \"Stopping...\"\n$REDIS_CLI -p $REDISPORT SHUTDOWN\nwhile [ -x $PIDFILE ]\ndo\necho \"Waiting for Redis to shutdown...\"\nsleep 1\ndone\necho \"Redis stopped\"\nfi\n;;\nrestart|force-reload)\n${0} stop\n${0} start\n;;\n*)\necho \"Usage: /etc/init.d/redis {start|stop|restart|force-reload}\" >&2\nexit 1\nesac\n----------\n\n# 赋执行权限\nchmod +x /etc/init.d/redis\n\n# 尝试启动\nservice redis start\n\n# 开启自启动\nchkconfig redis on\n```\n\n### 整个搭配配置及效果记录（待更新。。。）\n这段内容待更新。。。。。。先上两张Kibana的效果图吧：\n![img](/img/xjy/p57001.png)<br/>\n![img](/img/xjy/p57002.png)<br/>\n","slug":"p57","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jj20034u8vet5cnni5b","content":"<p><img src=\"/img/xjy/p57000.jpg\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana。它们之间互相配合使用，完美衔接，高效的满足了很多场合的应用，实现了一种目前主流的日志系统。ELK的工作原理和更多种结合框架方案可以参考<a href=\"https://www.cnblogs.com/aresxin/p/8035137.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aresxin/p/8035137.html</a>。本篇文章仅记录ELK三者的搭建记录。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境及软件\"><a href=\"#环境及软件\" class=\"headerlink\" title=\"环境及软件\"></a>环境及软件</h2><ul>\n<li>Centos7 (操作系统)</li>\n<li>JDK-1.8.0 (JRE也可)</li>\n<li>LogStash-2.4.0 (用于日志收集)</li>\n<li>ElasticSearch-2.2.0 (用于存储数据和定义检索规则)</li>\n<li>Kibana-4.4.0 (用于界面展示)</li>\n<li>Redis-4.0.2（非必须，仅测了该种情况）</li>\n</ul>\n<h2 id=\"安装及配置\"><a href=\"#安装及配置\" class=\"headerlink\" title=\"安装及配置\"></a>安装及配置</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>Elasticsearch需要用到java环境，所以先要安装jdk<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /home/app/Java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑环境变量配置</span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\">----------</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如下内容是加入到文件末尾的Java environment</span></span><br><span class=\"line\">export JAVA_HOME=/home/app/java/jdk1.8.0_144</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$JAVA_HOME/bin</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使环境变量配置生效</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h3><p>Logstash，用于日志收集，这里安装并测试了nginx日志到redis。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget https://download.elastic.co/logstash/logstash/logstash-2.4.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar zxvf logstash-2.4.0.tar.gz -C /home/app/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">/home/app/logstash-2.4.0/bin/logstash -e 'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置输出到redis</span></span><br><span class=\"line\">view /home/app/logstash-2.4.0/bin/logstash_nginx.conf</span><br><span class=\"line\">----------</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">    file &#123;</span><br><span class=\"line\">        path =&gt; [\"/var/log/nginx/access.log\"]</span><br><span class=\"line\">        type =&gt; \"nginx_log\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    redis&#123;</span><br><span class=\"line\">        host =&gt; \"192.168.50.120\"</span><br><span class=\"line\">        key =&gt; 'logstash-redis'</span><br><span class=\"line\">        data_type =&gt; 'list'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stdout &#123;</span><br><span class=\"line\">codec =&gt; rubydebug</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">/home/app/logstash-2.4.0/bin/logstash -f ./logstash_nginx.conf --configtest</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ElasticSearch\"><a href=\"#ElasticSearch\" class=\"headerlink\" title=\"ElasticSearch\"></a>ElasticSearch</h3><p>Elasticsearch,用于存储数据和定义检索规则。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.2.0/elasticsearch-2.2.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxvf elasticsearch-2.2.0.tar.gz -C /home/app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改配置文件</span></span><br><span class=\"line\">vim /home/app/elasticsearch-2.2.0/config/elasticsearch.yml</span><br><span class=\"line\">----------</span><br><span class=\"line\">  network.host: 127.0.0.1  </span><br><span class=\"line\">  http.port: 9200</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建专用用户</span></span><br><span class=\"line\">groupadd elk</span><br><span class=\"line\">useradd es -g elk</span><br><span class=\"line\">chown -R es.elk /home/app/elasticsearch-2.2.0</span><br><span class=\"line\">su - es</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装kopf和head插件</span></span><br><span class=\"line\">/home/app/elasticsearch-2.2.0/bin/plugin install lmenezes/elasticsearch-kopf</span><br><span class=\"line\">/home/app/elasticsearch-2.2.0/bin/plugin install mobz/elasticsearch-head</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">nohup /home/app/elasticsearch-2.2.0/bin/elasticsearch &gt; /home/app/elasticsearch-2.2.0/nohub &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">curl http://127.0.0.1:9200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看集群(用浏览器访问)</span></span><br><span class=\"line\">http://127.0.0.1/_plugin/head/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除索引</span></span><br><span class=\"line\">curl -XDELETE http://localhost:9200/shakespeare</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建索引</span></span><br><span class=\"line\">curl -XPUT http://localhost:9200/shakespeare -d '  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"> \"mappings\" : &#123;  </span><br><span class=\"line\">  \"_default_\" : &#123;  </span><br><span class=\"line\">   \"properties\" : &#123;  </span><br><span class=\"line\">    \"speaker\" : &#123;\"type\": \"string\", \"index\" : \"not_analyzed\" &#125;,  </span><br><span class=\"line\">    \"play_name\" : &#123;\"type\": \"string\", \"index\" : \"not_analyzed\" &#125;,  </span><br><span class=\"line\">    \"line_id\" : &#123; \"type\" : \"integer\" &#125;,  </span><br><span class=\"line\">    \"speech_number\" : &#123; \"type\" : \"integer\" &#125;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h3><p>Kibana用于连接Elasticsearch，定义自己的图表输出样式和展示。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget https://download.elastic.co/kibana/kibana/kibana-4.4.0-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改配置文件（对接elasticsearch）</span></span><br><span class=\"line\">vim /home/app/kibana-4.4.0-linux-x64/config/kibana.yml</span><br><span class=\"line\">elasticsearch.url: \"http://127.0.0.1:9200\"</span><br><span class=\"line\">server.port: 5601</span><br><span class=\"line\">server.host: \"0.0.0.0\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">nohup /home/app/kibana-4.4.0-linux-x64/bin/kibana &gt; /home/app/kibana-4.4.0-linux-x64/nohub.out &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试一下</span></span><br><span class=\"line\">curl http://127.0.0.1:5601</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Redis（非必需，仅记录）\"><a href=\"#Redis（非必需，仅记录）\" class=\"headerlink\" title=\"Redis（非必需，仅记录）\"></a>Redis（非必需，仅记录）</h3><p>这里仅用于配合LogStash测试。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装相关编译工具</span></span><br><span class=\"line\">yum install gcc tcl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar zxvf redis-4.0.2.tar.gz -C /home/app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译</span></span><br><span class=\"line\">cd /home/app/redis-4.0.2/</span><br><span class=\"line\">make MALLOC=libc</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">make test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> src目录下执行</span></span><br><span class=\"line\">./redis-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加入开机启动项</span></span><br><span class=\"line\">vim /home/app/redis-4.0.2/redis.conf</span><br><span class=\"line\">----------</span><br><span class=\"line\">bind 127.0.0.1改为0.0.0.0</span><br><span class=\"line\">daemonize no改为yes</span><br><span class=\"line\">requirepass foobared改为自己的密码</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置开机启动脚本</span></span><br><span class=\"line\">vim /etc/init.d/redis</span><br><span class=\"line\">----------</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">chkconfig: 2345 10 90</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> description: Start and Stop redis</span></span><br><span class=\"line\">PATH=/usr/local/bin:/sbin:/usr/bin:/bin</span><br><span class=\"line\">REDISPORT=6379 #实际环境而定</span><br><span class=\"line\">EXEC=/home/app/redis-4.0.2/src/redis-server #实际环境而定</span><br><span class=\"line\">REDIS_CLI=/home/app/redis-4.0.2/src/redis-cli #实际环境而定</span><br><span class=\"line\">PIDFILE=/var/run/redis.pid</span><br><span class=\"line\">CONF=\"/home/app/redis-4.0.2/redis.conf\" #实际环境而定</span><br><span class=\"line\">case \"$1\" in</span><br><span class=\"line\">start)</span><br><span class=\"line\">if [ -f $PIDFILE ]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo \"$PIDFILE exists, process is already running or crashed.\"</span><br><span class=\"line\">else</span><br><span class=\"line\">echo \"Starting Redis server...\"</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">EXEC <span class=\"variable\">$CONF</span></span></span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ \"$?\"=\"0\" ]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo \"Redis is running...\"</span><br><span class=\"line\">fi</span><br><span class=\"line\">;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">if [ ! -f $PIDFILE ]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo \"$PIDFILE exists, process is not running.\"</span><br><span class=\"line\">else</span><br><span class=\"line\">PID=$(cat $PIDFILE)</span><br><span class=\"line\">echo \"Stopping...\"</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">REDIS_CLI -p <span class=\"variable\">$REDISPORT</span> SHUTDOWN</span></span><br><span class=\"line\">while [ -x $PIDFILE ]</span><br><span class=\"line\">do</span><br><span class=\"line\">echo \"Waiting for Redis to shutdown...\"</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">done</span><br><span class=\"line\">echo \"Redis stopped\"</span><br><span class=\"line\">fi</span><br><span class=\"line\">;;</span><br><span class=\"line\">restart|force-reload)</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;0&#125; stop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;0&#125; start</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">echo \"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;\" &gt;&amp;2</span><br><span class=\"line\">exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 赋执行权限</span></span><br><span class=\"line\">chmod +x /etc/init.d/redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 尝试启动</span></span><br><span class=\"line\">service redis start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开启自启动</span></span><br><span class=\"line\">chkconfig redis on</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"整个搭配配置及效果记录（待更新。。。）\"><a href=\"#整个搭配配置及效果记录（待更新。。。）\" class=\"headerlink\" title=\"整个搭配配置及效果记录（待更新。。。）\"></a>整个搭配配置及效果记录（待更新。。。）</h3><p>这段内容待更新。。。。。。先上两张Kibana的效果图吧：<br><img src=\"/img/xjy/p57001.png\" alt=\"img\"><br><br><img src=\"/img/xjy/p57002.png\" alt=\"img\"><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p57000.jpg\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana。它们之间互相配合使用，完美衔接，高效的满足了很多场合的应用，实现了一种目前主流的日志系统。ELK的工作原理和更多种结合框架方案可以参考<a href=\"https://www.cnblogs.com/aresxin/p/8035137.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aresxin/p/8035137.html</a>。本篇文章仅记录ELK三者的搭建记录。</p>","more":"<h2 id=\"环境及软件\"><a href=\"#环境及软件\" class=\"headerlink\" title=\"环境及软件\"></a>环境及软件</h2><ul>\n<li>Centos7 (操作系统)</li>\n<li>JDK-1.8.0 (JRE也可)</li>\n<li>LogStash-2.4.0 (用于日志收集)</li>\n<li>ElasticSearch-2.2.0 (用于存储数据和定义检索规则)</li>\n<li>Kibana-4.4.0 (用于界面展示)</li>\n<li>Redis-4.0.2（非必须，仅测了该种情况）</li>\n</ul>\n<h2 id=\"安装及配置\"><a href=\"#安装及配置\" class=\"headerlink\" title=\"安装及配置\"></a>安装及配置</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>Elasticsearch需要用到java环境，所以先要安装jdk<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxvf jdk-8u144-linux-x64.tar.gz -C /home/app/Java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑环境变量配置</span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\">----------</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如下内容是加入到文件末尾的Java environment</span></span><br><span class=\"line\">export JAVA_HOME=/home/app/java/jdk1.8.0_144</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$JAVA_HOME/bin</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使环境变量配置生效</span></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h3><p>Logstash，用于日志收集，这里安装并测试了nginx日志到redis。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget https://download.elastic.co/logstash/logstash/logstash-2.4.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar zxvf logstash-2.4.0.tar.gz -C /home/app/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">/home/app/logstash-2.4.0/bin/logstash -e 'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置输出到redis</span></span><br><span class=\"line\">view /home/app/logstash-2.4.0/bin/logstash_nginx.conf</span><br><span class=\"line\">----------</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">    file &#123;</span><br><span class=\"line\">        path =&gt; [\"/var/log/nginx/access.log\"]</span><br><span class=\"line\">        type =&gt; \"nginx_log\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    redis&#123;</span><br><span class=\"line\">        host =&gt; \"192.168.50.120\"</span><br><span class=\"line\">        key =&gt; 'logstash-redis'</span><br><span class=\"line\">        data_type =&gt; 'list'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stdout &#123;</span><br><span class=\"line\">codec =&gt; rubydebug</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">/home/app/logstash-2.4.0/bin/logstash -f ./logstash_nginx.conf --configtest</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ElasticSearch\"><a href=\"#ElasticSearch\" class=\"headerlink\" title=\"ElasticSearch\"></a>ElasticSearch</h3><p>Elasticsearch,用于存储数据和定义检索规则。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.2.0/elasticsearch-2.2.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxvf elasticsearch-2.2.0.tar.gz -C /home/app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改配置文件</span></span><br><span class=\"line\">vim /home/app/elasticsearch-2.2.0/config/elasticsearch.yml</span><br><span class=\"line\">----------</span><br><span class=\"line\">  network.host: 127.0.0.1  </span><br><span class=\"line\">  http.port: 9200</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建专用用户</span></span><br><span class=\"line\">groupadd elk</span><br><span class=\"line\">useradd es -g elk</span><br><span class=\"line\">chown -R es.elk /home/app/elasticsearch-2.2.0</span><br><span class=\"line\">su - es</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装kopf和head插件</span></span><br><span class=\"line\">/home/app/elasticsearch-2.2.0/bin/plugin install lmenezes/elasticsearch-kopf</span><br><span class=\"line\">/home/app/elasticsearch-2.2.0/bin/plugin install mobz/elasticsearch-head</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">nohup /home/app/elasticsearch-2.2.0/bin/elasticsearch &gt; /home/app/elasticsearch-2.2.0/nohub &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">curl http://127.0.0.1:9200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看集群(用浏览器访问)</span></span><br><span class=\"line\">http://127.0.0.1/_plugin/head/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除索引</span></span><br><span class=\"line\">curl -XDELETE http://localhost:9200/shakespeare</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建索引</span></span><br><span class=\"line\">curl -XPUT http://localhost:9200/shakespeare -d '  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\"> \"mappings\" : &#123;  </span><br><span class=\"line\">  \"_default_\" : &#123;  </span><br><span class=\"line\">   \"properties\" : &#123;  </span><br><span class=\"line\">    \"speaker\" : &#123;\"type\": \"string\", \"index\" : \"not_analyzed\" &#125;,  </span><br><span class=\"line\">    \"play_name\" : &#123;\"type\": \"string\", \"index\" : \"not_analyzed\" &#125;,  </span><br><span class=\"line\">    \"line_id\" : &#123; \"type\" : \"integer\" &#125;,  </span><br><span class=\"line\">    \"speech_number\" : &#123; \"type\" : \"integer\" &#125;  </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana\"></a>kibana</h3><p>Kibana用于连接Elasticsearch，定义自己的图表输出样式和展示。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget https://download.elastic.co/kibana/kibana/kibana-4.4.0-linux-x64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改配置文件（对接elasticsearch）</span></span><br><span class=\"line\">vim /home/app/kibana-4.4.0-linux-x64/config/kibana.yml</span><br><span class=\"line\">elasticsearch.url: \"http://127.0.0.1:9200\"</span><br><span class=\"line\">server.port: 5601</span><br><span class=\"line\">server.host: \"0.0.0.0\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动</span></span><br><span class=\"line\">nohup /home/app/kibana-4.4.0-linux-x64/bin/kibana &gt; /home/app/kibana-4.4.0-linux-x64/nohub.out &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">测试一下</span></span><br><span class=\"line\">curl http://127.0.0.1:5601</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Redis（非必需，仅记录）\"><a href=\"#Redis（非必需，仅记录）\" class=\"headerlink\" title=\"Redis（非必需，仅记录）\"></a>Redis（非必需，仅记录）</h3><p>这里仅用于配合LogStash测试。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装相关编译工具</span></span><br><span class=\"line\">yum install gcc tcl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载压缩包</span></span><br><span class=\"line\">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar zxvf redis-4.0.2.tar.gz -C /home/app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译</span></span><br><span class=\"line\">cd /home/app/redis-4.0.2/</span><br><span class=\"line\">make MALLOC=libc</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试一下</span></span><br><span class=\"line\">make test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> src目录下执行</span></span><br><span class=\"line\">./redis-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 加入开机启动项</span></span><br><span class=\"line\">vim /home/app/redis-4.0.2/redis.conf</span><br><span class=\"line\">----------</span><br><span class=\"line\">bind 127.0.0.1改为0.0.0.0</span><br><span class=\"line\">daemonize no改为yes</span><br><span class=\"line\">requirepass foobared改为自己的密码</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置开机启动脚本</span></span><br><span class=\"line\">vim /etc/init.d/redis</span><br><span class=\"line\">----------</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">chkconfig: 2345 10 90</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> description: Start and Stop redis</span></span><br><span class=\"line\">PATH=/usr/local/bin:/sbin:/usr/bin:/bin</span><br><span class=\"line\">REDISPORT=6379 #实际环境而定</span><br><span class=\"line\">EXEC=/home/app/redis-4.0.2/src/redis-server #实际环境而定</span><br><span class=\"line\">REDIS_CLI=/home/app/redis-4.0.2/src/redis-cli #实际环境而定</span><br><span class=\"line\">PIDFILE=/var/run/redis.pid</span><br><span class=\"line\">CONF=\"/home/app/redis-4.0.2/redis.conf\" #实际环境而定</span><br><span class=\"line\">case \"$1\" in</span><br><span class=\"line\">start)</span><br><span class=\"line\">if [ -f $PIDFILE ]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo \"$PIDFILE exists, process is already running or crashed.\"</span><br><span class=\"line\">else</span><br><span class=\"line\">echo \"Starting Redis server...\"</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">EXEC <span class=\"variable\">$CONF</span></span></span><br><span class=\"line\">fi</span><br><span class=\"line\">if [ \"$?\"=\"0\" ]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo \"Redis is running...\"</span><br><span class=\"line\">fi</span><br><span class=\"line\">;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">if [ ! -f $PIDFILE ]</span><br><span class=\"line\">then</span><br><span class=\"line\">echo \"$PIDFILE exists, process is not running.\"</span><br><span class=\"line\">else</span><br><span class=\"line\">PID=$(cat $PIDFILE)</span><br><span class=\"line\">echo \"Stopping...\"</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">REDIS_CLI -p <span class=\"variable\">$REDISPORT</span> SHUTDOWN</span></span><br><span class=\"line\">while [ -x $PIDFILE ]</span><br><span class=\"line\">do</span><br><span class=\"line\">echo \"Waiting for Redis to shutdown...\"</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">done</span><br><span class=\"line\">echo \"Redis stopped\"</span><br><span class=\"line\">fi</span><br><span class=\"line\">;;</span><br><span class=\"line\">restart|force-reload)</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;0&#125; stop</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;0&#125; start</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">echo \"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;\" &gt;&amp;2</span><br><span class=\"line\">exit 1</span><br><span class=\"line\">esac</span><br><span class=\"line\">----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 赋执行权限</span></span><br><span class=\"line\">chmod +x /etc/init.d/redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 尝试启动</span></span><br><span class=\"line\">service redis start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 开启自启动</span></span><br><span class=\"line\">chkconfig redis on</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"整个搭配配置及效果记录（待更新。。。）\"><a href=\"#整个搭配配置及效果记录（待更新。。。）\" class=\"headerlink\" title=\"整个搭配配置及效果记录（待更新。。。）\"></a>整个搭配配置及效果记录（待更新。。。）</h3><p>这段内容待更新。。。。。。先上两张Kibana的效果图吧：<br><img src=\"/img/xjy/p57001.png\" alt=\"img\"><br><br><img src=\"/img/xjy/p57002.png\" alt=\"img\"><br></p>"},{"title":"Centos7搭建V2ray服务","id":"677","date":"2019-06-23T12:58:55.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p59000.png)<br/>\n\n## 简介\n\n最近有一个很不幸的消息，许多小伙伴在搬瓦工和virmach等多个VPS服务商的ip被国内封杀了，更换ip后也不能幸免，这些ip在国内ping都ping不通了，于是shadowsocket就失去了它的用途了。想查东西时不能看外面的世界查真的好难受啊。在网上找啊找，终于找到了突破的办法，这里记录一下步骤，以供小伙伴们参考。\n\n<!--more-->\n## 思路\n主要思路就是利用CloudFlare做代理中转+V2ray进行Websocket形式的代理（当然V2ray自己在通信时两端都进行了VMess协议的加密，以保证信息的安全）\n![img](/img/xjy/p59001.png)<br/>\n## 环境\n\n+ Centos7 64位 (操作系统)\n\n## 步骤\n### cloudflare代理配置\ncloudflare的配置可参考[网上的文章](https://blog.csdn.net/pengchengxue110/article/details/80276022)，这里描述一下步骤：\n+ 注册cloudflare账号，将自己的域名服务解析托管给cloudflare\n+ 定义自己二级域名解析记录，解析到vps的ip\n+ 待v2ray服务端配置好后，开启cloudflare的代理功能（只需将对应解析记录的小云彩图标点击一下，变成直通箭头即可）\n\n### v2ray服务端快速安装及配置\n由于v2ray配置项较多，相对我这种小白来说较为复杂，所以我采用了网上的快速脚本来配置（注意，目前该脚本对linux系统版本有要求,例如centos只支持7以上的版本）。\n+ 执行脚本\n``` shell\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n+ 选择选项3（Websocket）\n![img](/img/xjy/p59006.png)<br/>\n+ 端口选择 80\n\n+ 其余默认即可\n\n+ 验证\n输入v2ray status命令，如果状态是run就成功了。（做完后别忘了cloudflare配置中的最后一步）\n### v2ray客户端配置\n利用在服务端执行v2ray url生成的链接或者v2ray qr生成的二维码，可快速导入配置到客户端。\n![img](/img/xjy/p59002.png)<br/>\n别忘了重要的一步：因为ip被国内封掉了，所以一定需要将配置中的ip改为域名，这非常重要。\n![img](/img/xjy/p59003.png)<br/>\n\n## 结束语\n经过一番折腾，又可以翻墙了，这次经历让我不由得感觉这种封杀越来越严了，最后要提醒一下就是：因为ip被封了，那么ssh就无法在国内登录，这时候可以借用vps的web里的管理界面登录，或者是使用小伙伴的国外vps ssh到自己的vps上。当然，如果你不差钱的话，可以购买阿里、腾讯等运营商的香港VPS，貌似这次他们的ip没有被封，但以防万一还是多预留几种技术，以应对不时之需。\n\n","source":"_posts/p59.md","raw":"---\ntitle: Centos7搭建V2ray服务\nid: 677\ncategories:\n  - 编程语言\ndate: 2019/06/23 20:58:55        \ntags: [编程, 运维]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p59000.png)<br/>\n\n## 简介\n\n最近有一个很不幸的消息，许多小伙伴在搬瓦工和virmach等多个VPS服务商的ip被国内封杀了，更换ip后也不能幸免，这些ip在国内ping都ping不通了，于是shadowsocket就失去了它的用途了。想查东西时不能看外面的世界查真的好难受啊。在网上找啊找，终于找到了突破的办法，这里记录一下步骤，以供小伙伴们参考。\n\n<!--more-->\n## 思路\n主要思路就是利用CloudFlare做代理中转+V2ray进行Websocket形式的代理（当然V2ray自己在通信时两端都进行了VMess协议的加密，以保证信息的安全）\n![img](/img/xjy/p59001.png)<br/>\n## 环境\n\n+ Centos7 64位 (操作系统)\n\n## 步骤\n### cloudflare代理配置\ncloudflare的配置可参考[网上的文章](https://blog.csdn.net/pengchengxue110/article/details/80276022)，这里描述一下步骤：\n+ 注册cloudflare账号，将自己的域名服务解析托管给cloudflare\n+ 定义自己二级域名解析记录，解析到vps的ip\n+ 待v2ray服务端配置好后，开启cloudflare的代理功能（只需将对应解析记录的小云彩图标点击一下，变成直通箭头即可）\n\n### v2ray服务端快速安装及配置\n由于v2ray配置项较多，相对我这种小白来说较为复杂，所以我采用了网上的快速脚本来配置（注意，目前该脚本对linux系统版本有要求,例如centos只支持7以上的版本）。\n+ 执行脚本\n``` shell\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n+ 选择选项3（Websocket）\n![img](/img/xjy/p59006.png)<br/>\n+ 端口选择 80\n\n+ 其余默认即可\n\n+ 验证\n输入v2ray status命令，如果状态是run就成功了。（做完后别忘了cloudflare配置中的最后一步）\n### v2ray客户端配置\n利用在服务端执行v2ray url生成的链接或者v2ray qr生成的二维码，可快速导入配置到客户端。\n![img](/img/xjy/p59002.png)<br/>\n别忘了重要的一步：因为ip被国内封掉了，所以一定需要将配置中的ip改为域名，这非常重要。\n![img](/img/xjy/p59003.png)<br/>\n\n## 结束语\n经过一番折腾，又可以翻墙了，这次经历让我不由得感觉这种封杀越来越严了，最后要提醒一下就是：因为ip被封了，那么ssh就无法在国内登录，这时候可以借用vps的web里的管理界面登录，或者是使用小伙伴的国外vps ssh到自己的vps上。当然，如果你不差钱的话，可以购买阿里、腾讯等运营商的香港VPS，貌似这次他们的ip没有被封，但以防万一还是多预留几种技术，以应对不时之需。\n\n","slug":"p59","published":1,"updated":"2019-10-20T02:54:03.802Z","_id":"cjznq3jj40035u8ve0zxsiquy","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/xjy/p59000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>最近有一个很不幸的消息，许多小伙伴在搬瓦工和virmach等多个VPS服务商的ip被国内封杀了，更换ip后也不能幸免，这些ip在国内ping都ping不通了，于是shadowsocket就失去了它的用途了。想查东西时不能看外面的世界查真的好难受啊。在网上找啊找，终于找到了突破的办法，这里记录一下步骤，以供小伙伴们参考。</p>\n<a id=\"more\"></a>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>主要思路就是利用CloudFlare做代理中转+V2ray进行Websocket形式的代理（当然V2ray自己在通信时两端都进行了VMess协议的加密，以保证信息的安全）<br><img src=\"/img/xjy/p59001.png\" alt=\"img\"><br></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos7 64位 (操作系统)</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"cloudflare代理配置\"><a href=\"#cloudflare代理配置\" class=\"headerlink\" title=\"cloudflare代理配置\"></a>cloudflare代理配置</h3><p>cloudflare的配置可参考<a href=\"https://blog.csdn.net/pengchengxue110/article/details/80276022\" target=\"_blank\" rel=\"noopener\">网上的文章</a>，这里描述一下步骤：</p>\n<ul>\n<li>注册cloudflare账号，将自己的域名服务解析托管给cloudflare</li>\n<li>定义自己二级域名解析记录，解析到vps的ip</li>\n<li>待v2ray服务端配置好后，开启cloudflare的代理功能（只需将对应解析记录的小云彩图标点击一下，变成直通箭头即可）</li>\n</ul>\n<h3 id=\"v2ray服务端快速安装及配置\"><a href=\"#v2ray服务端快速安装及配置\" class=\"headerlink\" title=\"v2ray服务端快速安装及配置\"></a>v2ray服务端快速安装及配置</h3><p>由于v2ray配置项较多，相对我这种小白来说较为复杂，所以我采用了网上的快速脚本来配置（注意，目前该脚本对linux系统版本有要求,例如centos只支持7以上的版本）。</p>\n<ul>\n<li><p>执行脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择选项3（Websocket）<br><img src=\"/img/xjy/p59006.png\" alt=\"img\"><br></p>\n</li>\n<li><p>端口选择 80</p>\n</li>\n<li><p>其余默认即可</p>\n</li>\n<li><p>验证<br>输入v2ray status命令，如果状态是run就成功了。（做完后别忘了cloudflare配置中的最后一步）</p>\n<h3 id=\"v2ray客户端配置\"><a href=\"#v2ray客户端配置\" class=\"headerlink\" title=\"v2ray客户端配置\"></a>v2ray客户端配置</h3><p>利用在服务端执行v2ray url生成的链接或者v2ray qr生成的二维码，可快速导入配置到客户端。<br><img src=\"/img/xjy/p59002.png\" alt=\"img\"><br><br>别忘了重要的一步：因为ip被国内封掉了，所以一定需要将配置中的ip改为域名，这非常重要。<br><img src=\"/img/xjy/p59003.png\" alt=\"img\"><br></p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>经过一番折腾，又可以翻墙了，这次经历让我不由得感觉这种封杀越来越严了，最后要提醒一下就是：因为ip被封了，那么ssh就无法在国内登录，这时候可以借用vps的web里的管理界面登录，或者是使用小伙伴的国外vps ssh到自己的vps上。当然，如果你不差钱的话，可以购买阿里、腾讯等运营商的香港VPS，貌似这次他们的ip没有被封，但以防万一还是多预留几种技术，以应对不时之需。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p59000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>最近有一个很不幸的消息，许多小伙伴在搬瓦工和virmach等多个VPS服务商的ip被国内封杀了，更换ip后也不能幸免，这些ip在国内ping都ping不通了，于是shadowsocket就失去了它的用途了。想查东西时不能看外面的世界查真的好难受啊。在网上找啊找，终于找到了突破的办法，这里记录一下步骤，以供小伙伴们参考。</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>主要思路就是利用CloudFlare做代理中转+V2ray进行Websocket形式的代理（当然V2ray自己在通信时两端都进行了VMess协议的加密，以保证信息的安全）<br><img src=\"/img/xjy/p59001.png\" alt=\"img\"><br></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos7 64位 (操作系统)</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"cloudflare代理配置\"><a href=\"#cloudflare代理配置\" class=\"headerlink\" title=\"cloudflare代理配置\"></a>cloudflare代理配置</h3><p>cloudflare的配置可参考<a href=\"https://blog.csdn.net/pengchengxue110/article/details/80276022\" target=\"_blank\" rel=\"noopener\">网上的文章</a>，这里描述一下步骤：</p>\n<ul>\n<li>注册cloudflare账号，将自己的域名服务解析托管给cloudflare</li>\n<li>定义自己二级域名解析记录，解析到vps的ip</li>\n<li>待v2ray服务端配置好后，开启cloudflare的代理功能（只需将对应解析记录的小云彩图标点击一下，变成直通箭头即可）</li>\n</ul>\n<h3 id=\"v2ray服务端快速安装及配置\"><a href=\"#v2ray服务端快速安装及配置\" class=\"headerlink\" title=\"v2ray服务端快速安装及配置\"></a>v2ray服务端快速安装及配置</h3><p>由于v2ray配置项较多，相对我这种小白来说较为复杂，所以我采用了网上的快速脚本来配置（注意，目前该脚本对linux系统版本有要求,例如centos只支持7以上的版本）。</p>\n<ul>\n<li><p>执行脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择选项3（Websocket）<br><img src=\"/img/xjy/p59006.png\" alt=\"img\"><br></p>\n</li>\n<li><p>端口选择 80</p>\n</li>\n<li><p>其余默认即可</p>\n</li>\n<li><p>验证<br>输入v2ray status命令，如果状态是run就成功了。（做完后别忘了cloudflare配置中的最后一步）</p>\n<h3 id=\"v2ray客户端配置\"><a href=\"#v2ray客户端配置\" class=\"headerlink\" title=\"v2ray客户端配置\"></a>v2ray客户端配置</h3><p>利用在服务端执行v2ray url生成的链接或者v2ray qr生成的二维码，可快速导入配置到客户端。<br><img src=\"/img/xjy/p59002.png\" alt=\"img\"><br><br>别忘了重要的一步：因为ip被国内封掉了，所以一定需要将配置中的ip改为域名，这非常重要。<br><img src=\"/img/xjy/p59003.png\" alt=\"img\"><br></p>\n</li>\n</ul>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>经过一番折腾，又可以翻墙了，这次经历让我不由得感觉这种封杀越来越严了，最后要提醒一下就是：因为ip被封了，那么ssh就无法在国内登录，这时候可以借用vps的web里的管理界面登录，或者是使用小伙伴的国外vps ssh到自己的vps上。当然，如果你不差钱的话，可以购买阿里、腾讯等运营商的香港VPS，貌似这次他们的ip没有被封，但以防万一还是多预留几种技术，以应对不时之需。</p>"},{"title":"wordpress文章迁移到hexo next及主题美化","id":"474","date":"2018-03-18T09:10:01.000Z","declare":true,"toc":true,"_content":"在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：\n<!--more-->\n1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件\n<!--more-->\n2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ \n\n3.安装迁移插件\n```shell \n#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save\n```\n4.执行迁移\n``` shell \n#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名 \n```\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n6.好了，可以访问网站中文章的变化啦！\n\n![](/img/xjy/hexoSimple2.jpg)\n\n7.后续对主题的跟换和具体网站的美化，可参考[http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n\n8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n下面以改成yilia主题为例\n``` shell\n#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d\n```\n\n9.可以看下效果变化啦，欢迎访问[http://www.xiajunyi.com](http://www.xiajunyi.com)\n\n![](/img/xjy/hexoSimple3.jpg)","source":"_posts/p6.md","raw":"---\ntitle: wordpress文章迁移到hexo next及主题美化\nid: 474\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-03-18 17:10:01\ntags: [建站, wordpress, hexo, 文章迁移]\ndeclare: true\ntoc: true\n---\n在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：\n<!--more-->\n1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件\n<!--more-->\n2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ \n\n3.安装迁移插件\n```shell \n#前提是进入hexo网站的根目录\nnpm install hexo-migrator-wordpress --save\n```\n4.执行迁移\n``` shell \n#前提是进入hexo网站根目录\nhexo migrate wordpress xml文件名 \n```\n5.重新编译网站文件并上传github\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n6.好了，可以访问网站中文章的变化啦！\n\n![](/img/xjy/hexoSimple2.jpg)\n\n7.后续对主题的跟换和具体网站的美化，可参考[http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n\n8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些[https://www.zhihu.com/question/24422335](https://www.zhihu.com/question/24422335)\n\n下面以改成yilia主题为例\n``` shell\n#前提是进入网站的根目录\ngit clone https://github.com/litten/hexo-theme-yilia.git theme/yilia\n#修改根目录下的_config.yml，找到theme字段\ntheme: yilia\n#重新生成public目录里的资源文件\nhexo s\n#这时候可以通过本地的4000端口访问了\n#如果让通过域名访问的资源生效\nhexo g\n#上传到github\nhexo d\n```\n\n9.可以看下效果变化啦，欢迎访问[http://www.xiajunyi.com](http://www.xiajunyi.com)\n\n![](/img/xjy/hexoSimple3.jpg)","slug":"p6","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jj80039u8venb0tkqb3","content":"<p>在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：<br><a id=\"more\"></a><br>1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件<br><!--more--><br>2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ </p>\n<p>3.安装迁移插件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站的根目录</span></span><br><span class=\"line\">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure></p>\n<p>4.执行迁移<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站根目录</span></span><br><span class=\"line\">hexo migrate wordpress xml文件名</span><br></pre></td></tr></table></figure></p>\n<p>5.重新编译网站文件并上传github</p>\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n<p>6.好了，可以访问网站中文章的变化啦！</p>\n<p><img src=\"/img/xjy/hexoSimple2.jpg\" alt=\"\"></p>\n<p>7.后续对主题的跟换和具体网站的美化，可参考<a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"noopener\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p>\n<p>8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n<p>下面以改成yilia主题为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入网站的根目录</span></span><br><span class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改根目录下的_config.yml，找到theme字段</span></span><br><span class=\"line\">theme: yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新生成public目录里的资源文件</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这时候可以通过本地的4000端口访问了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果让通过域名访问的资源生效</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传到github</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>9.可以看下效果变化啦，欢迎访问<a href=\"http://www.xiajunyi.com\">http://www.xiajunyi.com</a></p>\n<p><img src=\"/img/xjy/hexoSimple3.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在安装完hexo以后，我想把wordpress上的文章都迁移过来，应该怎么做呢？还好有迁移插件，具体步骤如下：<br>","more":"<br>1.在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)，选择导出文章，下载生成的xml文件<br><!--more--><br>2.上传xml到hexo网站的根目录，比如我的/data/www/hexo/ </p>\n<p>3.安装迁移插件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站的根目录</span></span><br><span class=\"line\">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure></p>\n<p>4.执行迁移<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入hexo网站根目录</span></span><br><span class=\"line\">hexo migrate wordpress xml文件名</span><br></pre></td></tr></table></figure></p>\n<p>5.重新编译网站文件并上传github</p>\n<pre class=\"lang:sh decode:true \">hexo generate\nhexo d</pre>\n\n<p>6.好了，可以访问网站中文章的变化啦！</p>\n<p><img src=\"/img/xjy/hexoSimple2.jpg\" alt=\"\"></p>\n<p>7.后续对主题的跟换和具体网站的美化，可参考<a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"noopener\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p>\n<p>8.想要快速拥有好看的主题吗？最简单粗暴的方法就是找到好看的主题，然后用强大的git clone，比如这个里面的列出的一些<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/24422335</a></p>\n<p>下面以改成yilia主题为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">前提是进入网站的根目录</span></span><br><span class=\"line\">git clone https://github.com/litten/hexo-theme-yilia.git theme/yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改根目录下的_config.yml，找到theme字段</span></span><br><span class=\"line\">theme: yilia</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重新生成public目录里的资源文件</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这时候可以通过本地的4000端口访问了</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果让通过域名访问的资源生效</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传到github</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>9.可以看下效果变化啦，欢迎访问<a href=\"http://www.xiajunyi.com\">http://www.xiajunyi.com</a></p>\n<p><img src=\"/img/xjy/hexoSimple3.jpg\" alt=\"\"></p>"},{"title":"Centos搭建ShadowSocks服务端","id":"677","date":"2019-03-01T10:33:33.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p58000.png)<br/>\n\n## 简介\n\n最近搬瓦工发邮件通知说要开始结束OpenVZ机型的续费，转而推荐KVM机型了。也就是说我之前10几美元一年的套餐没法用了！目前，低价位的套餐也几个月一直处于断货转态，其余最便宜的也要50多美元一年，用不起了，只能选择virmach做备用准备(每月低至1、2美元)。为了绕过那道墙，我又要自己搭建ShadowSocks服务了，这里记录一下搭建过程，以供小伙伴们参考。\n\n<!--more-->\n\n## 环境\n\n+ Centos6.5 64位 (操作系统)\n\n## 服务端安装及配置\n\n### 更新yum源\n```\n# yum update\n```\n### 安装python和pip\n```\n# yum install python-setuptools && easy_install pip\n```\n### 安装shadowsocks\n```\n# pip install shadowsocks\n```\n> 可能遇到\"_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK} pip\"的问题，请参考这里：[https://blog.csdn.net/li740207611/article/details/86609917](https://blog.csdn.net/li740207611/article/details/86609917)\n\n### 新建并配置shadowsocks.json\n```\n# vim /etc/shadowsocks.json\n\n{\n\"server\":\"VPS的ip\",\n\"server_port\":4433,\n\"password\":\"定义的密码\",\n\"timeout\":300,\n\"method\":\"aes-256-cfb\",\n\"fast_open\":false,\n\"workers\": 1\n}\n```\n\n### 打开防火墙端口\n\n>如果防火墙中没有打开配置的端口，则客户端连不上，\n>可通过telnet VPS的ip和端口进行验证。\n\n```\n# iptables -I INPUT -p tcp --dport 4433 -j ACCEPT\n# /etc/init.d/iptables save\n```\n\n### 启动服务\n```\n# ssserver -c /etc/shadowsocks.json -d start\n```\n\n### 加入开机启动项\n```\n# echo \"ssserver -c /etc/shadowsocks.json -d start\" >> /etc/rc.d/rc.local\n```\n\n## 结束语\n最后，用ShadowSocks客户端连接上后就又可以玩耍了，切记多用于google学技术，不要在国外网站瞎评论。这里借改《流浪地球》里的一句话：**《道路千万条,安全第一条。翻墙不低调,亲人两行泪》**。\n","source":"_posts/p58.md","raw":"---\ntitle: Centos搭建ShadowSocks服务端\nid: 677\ncategories:\n  - 编程语言\ndate: 2019/03/01 18:33:33        \ntags: [编程, 运维]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p58000.png)<br/>\n\n## 简介\n\n最近搬瓦工发邮件通知说要开始结束OpenVZ机型的续费，转而推荐KVM机型了。也就是说我之前10几美元一年的套餐没法用了！目前，低价位的套餐也几个月一直处于断货转态，其余最便宜的也要50多美元一年，用不起了，只能选择virmach做备用准备(每月低至1、2美元)。为了绕过那道墙，我又要自己搭建ShadowSocks服务了，这里记录一下搭建过程，以供小伙伴们参考。\n\n<!--more-->\n\n## 环境\n\n+ Centos6.5 64位 (操作系统)\n\n## 服务端安装及配置\n\n### 更新yum源\n```\n# yum update\n```\n### 安装python和pip\n```\n# yum install python-setuptools && easy_install pip\n```\n### 安装shadowsocks\n```\n# pip install shadowsocks\n```\n> 可能遇到\"_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK} pip\"的问题，请参考这里：[https://blog.csdn.net/li740207611/article/details/86609917](https://blog.csdn.net/li740207611/article/details/86609917)\n\n### 新建并配置shadowsocks.json\n```\n# vim /etc/shadowsocks.json\n\n{\n\"server\":\"VPS的ip\",\n\"server_port\":4433,\n\"password\":\"定义的密码\",\n\"timeout\":300,\n\"method\":\"aes-256-cfb\",\n\"fast_open\":false,\n\"workers\": 1\n}\n```\n\n### 打开防火墙端口\n\n>如果防火墙中没有打开配置的端口，则客户端连不上，\n>可通过telnet VPS的ip和端口进行验证。\n\n```\n# iptables -I INPUT -p tcp --dport 4433 -j ACCEPT\n# /etc/init.d/iptables save\n```\n\n### 启动服务\n```\n# ssserver -c /etc/shadowsocks.json -d start\n```\n\n### 加入开机启动项\n```\n# echo \"ssserver -c /etc/shadowsocks.json -d start\" >> /etc/rc.d/rc.local\n```\n\n## 结束语\n最后，用ShadowSocks客户端连接上后就又可以玩耍了，切记多用于google学技术，不要在国外网站瞎评论。这里借改《流浪地球》里的一句话：**《道路千万条,安全第一条。翻墙不低调,亲人两行泪》**。\n","slug":"p58","published":1,"updated":"2019-10-20T02:54:03.800Z","_id":"cjznq3jjd003cu8veip0hi9ru","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/xjy/p58000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>最近搬瓦工发邮件通知说要开始结束OpenVZ机型的续费，转而推荐KVM机型了。也就是说我之前10几美元一年的套餐没法用了！目前，低价位的套餐也几个月一直处于断货转态，其余最便宜的也要50多美元一年，用不起了，只能选择virmach做备用准备(每月低至1、2美元)。为了绕过那道墙，我又要自己搭建ShadowSocks服务了，这里记录一下搭建过程，以供小伙伴们参考。</p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos6.5 64位 (操作系统)</li>\n</ul>\n<h2 id=\"服务端安装及配置\"><a href=\"#服务端安装及配置\" class=\"headerlink\" title=\"服务端安装及配置\"></a>服务端安装及配置</h2><h3 id=\"更新yum源\"><a href=\"#更新yum源\" class=\"headerlink\" title=\"更新yum源\"></a>更新yum源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum update</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装python和pip\"><a href=\"#安装python和pip\" class=\"headerlink\" title=\"安装python和pip\"></a>安装python和pip</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可能遇到”_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK} pip”的问题，请参考这里：<a href=\"https://blog.csdn.net/li740207611/article/details/86609917\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li740207611/article/details/86609917</a></p>\n</blockquote>\n<h3 id=\"新建并配置shadowsocks-json\"><a href=\"#新建并配置shadowsocks-json\" class=\"headerlink\" title=\"新建并配置shadowsocks.json\"></a>新建并配置shadowsocks.json</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;VPS的ip&quot;,</span><br><span class=\"line\">&quot;server_port&quot;:4433,</span><br><span class=\"line\">&quot;password&quot;:&quot;定义的密码&quot;,</span><br><span class=\"line\">&quot;timeout&quot;:300,</span><br><span class=\"line\">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">&quot;fast_open&quot;:false,</span><br><span class=\"line\">&quot;workers&quot;: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开防火墙端口\"><a href=\"#打开防火墙端口\" class=\"headerlink\" title=\"打开防火墙端口\"></a>打开防火墙端口</h3><blockquote>\n<p>如果防火墙中没有打开配置的端口，则客户端连不上，<br>可通过telnet VPS的ip和端口进行验证。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># iptables -I INPUT -p tcp --dport 4433 -j ACCEPT</span><br><span class=\"line\"># /etc/init.d/iptables save</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>\n<h3 id=\"加入开机启动项\"><a href=\"#加入开机启动项\" class=\"headerlink\" title=\"加入开机启动项\"></a>加入开机启动项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;ssserver -c /etc/shadowsocks.json -d start&quot; &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>最后，用ShadowSocks客户端连接上后就又可以玩耍了，切记多用于google学技术，不要在国外网站瞎评论。这里借改《流浪地球》里的一句话：<strong>《道路千万条,安全第一条。翻墙不低调,亲人两行泪》</strong>。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p58000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>最近搬瓦工发邮件通知说要开始结束OpenVZ机型的续费，转而推荐KVM机型了。也就是说我之前10几美元一年的套餐没法用了！目前，低价位的套餐也几个月一直处于断货转态，其余最便宜的也要50多美元一年，用不起了，只能选择virmach做备用准备(每月低至1、2美元)。为了绕过那道墙，我又要自己搭建ShadowSocks服务了，这里记录一下搭建过程，以供小伙伴们参考。</p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos6.5 64位 (操作系统)</li>\n</ul>\n<h2 id=\"服务端安装及配置\"><a href=\"#服务端安装及配置\" class=\"headerlink\" title=\"服务端安装及配置\"></a>服务端安装及配置</h2><h3 id=\"更新yum源\"><a href=\"#更新yum源\" class=\"headerlink\" title=\"更新yum源\"></a>更新yum源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum update</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装python和pip\"><a href=\"#安装python和pip\" class=\"headerlink\" title=\"安装python和pip\"></a>安装python和pip</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装shadowsocks\"><a href=\"#安装shadowsocks\" class=\"headerlink\" title=\"安装shadowsocks\"></a>安装shadowsocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可能遇到”_blocking_errnos = {errno.EAGAIN, errno.EWOULDBLOCK} pip”的问题，请参考这里：<a href=\"https://blog.csdn.net/li740207611/article/details/86609917\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li740207611/article/details/86609917</a></p>\n</blockquote>\n<h3 id=\"新建并配置shadowsocks-json\"><a href=\"#新建并配置shadowsocks-json\" class=\"headerlink\" title=\"新建并配置shadowsocks.json\"></a>新建并配置shadowsocks.json</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim /etc/shadowsocks.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;server&quot;:&quot;VPS的ip&quot;,</span><br><span class=\"line\">&quot;server_port&quot;:4433,</span><br><span class=\"line\">&quot;password&quot;:&quot;定义的密码&quot;,</span><br><span class=\"line\">&quot;timeout&quot;:300,</span><br><span class=\"line\">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">&quot;fast_open&quot;:false,</span><br><span class=\"line\">&quot;workers&quot;: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开防火墙端口\"><a href=\"#打开防火墙端口\" class=\"headerlink\" title=\"打开防火墙端口\"></a>打开防火墙端口</h3><blockquote>\n<p>如果防火墙中没有打开配置的端口，则客户端连不上，<br>可通过telnet VPS的ip和端口进行验证。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># iptables -I INPUT -p tcp --dport 4433 -j ACCEPT</span><br><span class=\"line\"># /etc/init.d/iptables save</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>\n<h3 id=\"加入开机启动项\"><a href=\"#加入开机启动项\" class=\"headerlink\" title=\"加入开机启动项\"></a>加入开机启动项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;ssserver -c /etc/shadowsocks.json -d start&quot; &gt;&gt; /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>最后，用ShadowSocks客户端连接上后就又可以玩耍了，切记多用于google学技术，不要在国外网站瞎评论。这里借改《流浪地球》里的一句话：<strong>《道路千万条,安全第一条。翻墙不低调,亲人两行泪》</strong>。</p>"},{"title":"wordpress网站迁移：更换域名、开启SSL支持（解决https无法访问wordpress后台的问题）","id":"363","date":"2018-02-03T11:26:55.000Z","declare":true,"toc":true,"_content":"\n今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！\n\n<!--more-->\n\n\n1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）\n\n推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。\n\n备份设置可以参考一下[这篇文章](https://www.sabia.cc/shi-yong-backwpup-backup.html)，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。\n\n2.百度BCH端解压及导入数据\n\n(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。\n\n(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。\n\n3.替换域名\n\n在上面的数据导入完成后，执行如下sql语句\n\n``` sql \nUPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。\n```\n\n4.申请SSL证书 \n\n如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以[参考链接](https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html),申请好后可将证书文件下载下来。\n\n5.百度BCH上导入证书，并开启 HTTPS\n\n证书导入可[参考链接](https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6),导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。\n\n![](/img/xjy/bch001.jpg) \n\n6.解决https无法访问wordpress后台的问题 \n\n解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样\"Really Simple SSL\"(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。\n\n插件具体设置可[参考链接](https://www.nixonli.com/wordpress/22541.html) ","source":"_posts/p8.md","raw":"---\ntitle: wordpress网站迁移：更换域名、开启SSL支持（解决https无法访问wordpress后台的问题）\nid: 363\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-02-03 19:26:55\ntags: [建站, wordpress, 域名, ssl, https]\ndeclare: true\ntoc: true\n---\n\n今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！\n\n<!--more-->\n\n\n1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）\n\n推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。\n\n备份设置可以参考一下[这篇文章](https://www.sabia.cc/shi-yong-backwpup-backup.html)，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。\n\n2.百度BCH端解压及导入数据\n\n(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。\n\n(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。\n\n3.替换域名\n\n在上面的数据导入完成后，执行如下sql语句\n\n``` sql \nUPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。\n\nUPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。\n```\n\n4.申请SSL证书 \n\n如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以[参考链接](https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html),申请好后可将证书文件下载下来。\n\n5.百度BCH上导入证书，并开启 HTTPS\n\n证书导入可[参考链接](https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6),导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。\n\n![](/img/xjy/bch001.jpg) \n\n6.解决https无法访问wordpress后台的问题 \n\n解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样\"Really Simple SSL\"(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。\n\n插件具体设置可[参考链接](https://www.nixonli.com/wordpress/22541.html) ","slug":"p8","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jjj003fu8veoz5ngagr","content":"<p>今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！</p>\n<a id=\"more\"></a>\n<p>1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）</p>\n<p>推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。</p>\n<p>备份设置可以参考一下<a href=\"https://www.sabia.cc/shi-yong-backwpup-backup.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。</p>\n<p>2.百度BCH端解压及导入数据</p>\n<p>(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。</p>\n<p>(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</p>\n<p>3.替换域名</p>\n<p>在上面的数据导入完成后，执行如下sql语句</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</span><br></pre></td></tr></table></figure>\n<p>4.申请SSL证书 </p>\n<p>如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以<a href=\"https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>,申请好后可将证书文件下载下来。</p>\n<p>5.百度BCH上导入证书，并开启 HTTPS</p>\n<p>证书导入可<a href=\"https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6\" target=\"_blank\" rel=\"noopener\">参考链接</a>,导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。</p>\n<p><img src=\"/img/xjy/bch001.jpg\" alt=\"\"> </p>\n<p>6.解决https无法访问wordpress后台的问题 </p>\n<p>解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样”Really Simple SSL”(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。</p>\n<p>插件具体设置可<a href=\"https://www.nixonli.com/wordpress/22541.html\" target=\"_blank\" rel=\"noopener\">参考链接</a> </p>\n","site":{"data":{}},"excerpt":"<p>今天是周末，闲着没事想着把我搬瓦工上的WordPress网站迁移到百度的BCH，顺便开启一下https。由于wordpree的特殊性，中途遇到了一系列问题，还好最后都一一解决了。在这里记录一下整个过程！</p>","more":"<p>1.搬瓦工VPS的wordpress网站文件备份（包含数据sql）</p>\n<p>推荐安装一款叫做BackWPup的插件，该插件可以配置定时或实时备份任务，而且可以指定备份到特定的FTP地址，还可以有选择性的配置需要备份的插件及数据库表等等。值得赞赏的是，该插件默认是不备份自己，这一点让我十分敬佩。</p>\n<p>备份设置可以参考一下<a href=\"https://www.sabia.cc/shi-yong-backwpup-backup.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，如果跟我一样想通过FTP直接备份到百度的BCH，建议选择生成Tar GZip格式的文件，这样传输速度快，而且BCH解压的时候也不会乱码。ps:之前我选择的是其他格式的文件，发现百度的BCH解压后中文名乱码很严重，导致网站图片显示全乱套，这里浪费了很长时间返工重设）。</p>\n<p>2.百度BCH端解压及导入数据</p>\n<p>(1).到导出的FTP路径下确认导出的备份文件已经存在，然后在BCH控制面板中点击在线解压，将内容解压到/webroot目录下。</p>\n<p>(2).登入BCH的数据库管理页面，执行sql，将上面解压出的sql文件完整执行。</p>\n<p>3.替换域名</p>\n<p>在上面的数据导入完成后，执行如下sql语句</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE wp_options SET option_value = replace( option_value, 'http://www.old.com', 'http://www.new.com' ) WHERE option_name = 'home' OR option_name = 'siteurl';# 注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET post_content = replace( post_content, 'http://www.old.com', 'http://www.new.com' ) ;#  注意替换成自己的新旧域名。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE wp_posts SET guid = replace( guid, 'http://www.old.com', 'http://www.new.com' ) ;# 注意替换成自己的新旧域名。</span><br></pre></td></tr></table></figure>\n<p>4.申请SSL证书 </p>\n<p>如果域名是在阿里云上注册的，推荐到阿里云上申请免费的SSL证书，（ps:百度BCH上也可以申请免费证书，但是订单下了半天一直不生效，也没有提示，搞得我一直以为自己网站的配置有问题，害我走了很长时间弯路）,申请阿里云的SSL免费证书，可以<a href=\"https://jingyan.baidu.com/article/a3aad71aeceea0b1fb00969c.html\" target=\"_blank\" rel=\"noopener\">参考链接</a>,申请好后可将证书文件下载下来。</p>\n<p>5.百度BCH上导入证书，并开启 HTTPS</p>\n<p>证书导入可<a href=\"https://cloud.baidu.com/doc/Reference/CertificationManagement.html#.E7.AE.A1.E7.90.86.E8.AF.81.E4.B9.A6\" target=\"_blank\" rel=\"noopener\">参考链接</a>,导入证书可以点击下图的“证书管理，根据提示将上面证书文件中的公私钥分别填入对应选框，完成后回到如下页面开启HTTPS服务，证书没有填写错误则状态会如图中圈出两部分的一致。</p>\n<p><img src=\"/img/xjy/bch001.jpg\" alt=\"\"> </p>\n<p>6.解决https无法访问wordpress后台的问题 </p>\n<p>解决方法很简单，安装插件即可，简单成什么样呢，就像插件的名字一样”Really Simple SSL”(ps:百度上很多网友提出的修改wp-conifg配置文件或数据库或主题文件或添加多处代码我都试过了，结果真的很不理想，不仅后台进不去而且排版都乱掉了，因为有人说用插件会很乱，所以我一直没有尝试插件，但没办法了呀，最后抱着尝试的态度搜插件，才发现该插件已经有几十万用户在使用了，我只能说给别人建议的时候首先自己要经过论证，否则真的可能把别人引向弯路。。。</p>\n<p>插件具体设置可<a href=\"https://www.nixonli.com/wordpress/22541.html\" target=\"_blank\" rel=\"noopener\">参考链接</a> </p>"},{"title":"wordpress网站由apache改为nginx发布","id":"345","date":"2018-01-27T12:17:40.000Z","declare":true,"toc":true,"_content":"\n我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：\n<!--more-->\n\n\n1.停掉httpd当前服务，禁用重启\n``` shell\n#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off\n```\n\n2.安装nginx,这里以centos系统为例\n``` shell \nyum -y install nginx\n```\n\n3.安装php-fpm\nPHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：\n``` shell \nyum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on\n```\n\n4.编辑nginx配置文件\n例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:\n``` text \n#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }\n```\n\n\n5.新建日志目录并赋权限\n``` shell \nmkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa\n```\n\n6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误\n``` text \nYour PHP installation appears to be missing the MySQL extension which is required by WordPress.\n```\n\n7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：\n``` shell \nyum update\nyum install php-mysql\n```\n\n8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！\n``` shell \nservice nginx start\n```\n\n9.具体能提升多少，就看后续的访问的效果了","source":"_posts/p7.md","raw":"---\ntitle: wordpress网站由apache改为nginx发布\nid: 345\ncategories:\n  - WORDPRESS\n  - 编程语言\ndate: 2018-01-27 20:17:40\ntags: [建站, wordpress, apache, nginx]\ndeclare: true\ntoc: true\n---\n\n我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：\n<!--more-->\n\n\n1.停掉httpd当前服务，禁用重启\n``` shell\n#停掉httpd\nservice httpd stop\n#开机重启后，apache服务不再启动p       \nchkconfig httpd off\n```\n\n2.安装nginx,这里以centos系统为例\n``` shell \nyum -y install nginx\n```\n\n3.安装php-fpm\nPHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：\n``` shell \nyum install php-fpm\n/etc/init.d/php-fpm start\nchkconfig php-fpm on\n```\n\n4.编辑nginx配置文件\n例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:\n``` text \n#转发给wordpress网站\nserver {\n    listen 80; \n    server_name www.xiajunyi.com;        \n    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info\n    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error \n\n    location / {\n             root /data/www/www.xiajunyi.com;\n             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些\n             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要\n    }\n\n    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)\n    location = /404.html {            #这是一个典型的location\n             root /data/www/www.xiajunyi.com;\n    }\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n             root /data/www/www.xiajunyi.com;\n    }\n\n    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)\n    location ~ [^/]\\.php(/|$) {\n             root /data/www/www.xiajunyi.com;\n             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n             if (!-f $document_root$fastcgi_script_name) {\n                     return 404;\n             }\n             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）\n             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n             fastcgi_pass 127.0.0.1:9000;\n             fastcgi_index index.php;\n             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n             include fastcgi_params;\n    }\n    location ~ /\\.ht {\n             deny all;\n    }\n }\n```\n\n\n5.新建日志目录并赋权限\n``` shell \nmkdir -p /var/log/nginx/aaa\nchown -R nginx:adm  /var/log/nginx/aaa\n```\n\n6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误\n``` text \nYour PHP installation appears to be missing the MySQL extension which is required by WordPress.\n```\n\n7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：\n``` shell \nyum update\nyum install php-mysql\n```\n\n8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！\n``` shell \nservice nginx start\n```\n\n9.具体能提升多少，就看后续的访问的效果了","slug":"p7","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jjn003iu8vefd5hx7po","content":"<p>我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：<br><a id=\"more\"></a></p>\n<p>1.停掉httpd当前服务，禁用重启<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停掉httpd</span></span><br><span class=\"line\">service httpd stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机重启后，apache服务不再启动p       </span></span><br><span class=\"line\">chkconfig httpd off</span><br></pre></td></tr></table></figure></p>\n<p>2.安装nginx,这里以centos系统为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure></p>\n<p>3.安装php-fpm<br>PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php-fpm</span><br><span class=\"line\">/etc/init.d/php-fpm start</span><br><span class=\"line\">chkconfig php-fpm on</span><br></pre></td></tr></table></figure></p>\n<p>4.编辑nginx配置文件<br>例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转发给wordpress网站</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; </span><br><span class=\"line\">    server_name www.xiajunyi.com;        </span><br><span class=\"line\">    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info</span><br><span class=\"line\">    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些</span><br><span class=\"line\">             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)</span><br><span class=\"line\">    location = /404.html &#123;            #这是一个典型的location</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)</span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;</span><br><span class=\"line\">             if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class=\"line\">                     return 404;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）</span><br><span class=\"line\">             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">             fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">             fastcgi_index index.php;</span><br><span class=\"line\">             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">             deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.新建日志目录并赋权限<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/log/nginx/aaa</span><br><span class=\"line\">chown -R nginx:adm  /var/log/nginx/aaa</span><br></pre></td></tr></table></figure></p>\n<p>6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</span><br></pre></td></tr></table></figure></p>\n<p>7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install php-mysql</span><br></pre></td></tr></table></figure></p>\n<p>8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>9.具体能提升多少，就看后续的访问的效果了</p>\n","site":{"data":{}},"excerpt":"<p>我的wordprss网站环境最开始是由LAMP集成软件生成的发布环境，由于apache作为web服务太占用内存，所以准备改为nginx。下面开始操作：<br>","more":"</p>\n<p>1.停掉httpd当前服务，禁用重启<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停掉httpd</span></span><br><span class=\"line\">service httpd stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机重启后，apache服务不再启动p       </span></span><br><span class=\"line\">chkconfig httpd off</span><br></pre></td></tr></table></figure></p>\n<p>2.安装nginx,这里以centos系统为例<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install nginx</span><br></pre></td></tr></table></figure></p>\n<p>3.安装php-fpm<br>PHP-FPM (PHP-FastCGI Process Manager) 是目前最常用的一个PHP FastCGI的实现。通俗的讲，这个模块在Nginx和PHP之间桥梁，使之可以互相通信和交换。安装及启动过程如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php-fpm</span><br><span class=\"line\">/etc/init.d/php-fpm start</span><br><span class=\"line\">chkconfig php-fpm on</span><br></pre></td></tr></table></figure></p>\n<p>4.编辑nginx配置文件<br>例如我的路径在：/etc/nginx/conf.d/virtual.conf，加入类似如下配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#转发给wordpress网站</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80; </span><br><span class=\"line\">    server_name www.xiajunyi.com;        </span><br><span class=\"line\">    access_log /var/log/nginx/aaa/access.log;   #access_log属于ngx_http_log_module的设置, 缺省level为info</span><br><span class=\"line\">    error_log /var/log/nginx/aaa/error.log;     #error_log属于core module, 缺省的level是error </span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             index index.php index.html index.htm;     #由于是PHP类型的动态页面为主，所以把index.php放在前面效率会更高些</span><br><span class=\"line\">             # try_files $uri $uri/ /index.php?$args;   #普通php网站因为没有rewrite的话，这个不需要</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 404 /404.html;         #error_page errcode uri (也就是说出现了404错误，会请求/404.html)</span><br><span class=\"line\">    location = /404.html &#123;            #这是一个典型的location</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这种写法可以防止把恶意程序伪装成.jpg之类的攻击，（其实有个更简单的方法，就是把php.ini中的cgi.fix_pathinfo=0，但有时候简单的修改cgi.fix_pathinfo会造成有的php脚本出错)</span><br><span class=\"line\">    location ~ [^/]\\.php(/|$) &#123;</span><br><span class=\"line\">             root /data/www/www.xiajunyi.com;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+?\\.php)(/.*)$;</span><br><span class=\"line\">             if (!-f $document_root$fastcgi_script_name) &#123;</span><br><span class=\"line\">                     return 404;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             #try_files $uri =404;         #这个try_files说明：对于.php文件，直接执行$uri, 如果找不到这个$uri,直接给出404错误，（和 location / 定义不同！），主要是为了防止 伪装成图片的攻击  (目前看，最安全的方式，是用上面那一句话，官方推荐的）</span><br><span class=\"line\">             # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">             fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">             fastcgi_index index.php;</span><br><span class=\"line\">             fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ /\\.ht &#123;</span><br><span class=\"line\">             deny all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.新建日志目录并赋权限<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/log/nginx/aaa</span><br><span class=\"line\">chown -R nginx:adm  /var/log/nginx/aaa</span><br></pre></td></tr></table></figure></p>\n<p>6.如果这时候直接启动nginx,然后访问站点，可能会报如下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your PHP installation appears to be missing the MySQL extension which is required by WordPress.</span><br></pre></td></tr></table></figure></p>\n<p>7.解决上面问题需要安装最新的php-mysql，我的是centOS，命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install php-mysql</span><br></pre></td></tr></table></figure></p>\n<p>8.启动nginx，ps:这时候如果访问没有生效，reboot一下就可以了！<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure></p>\n<p>9.具体能提升多少，就看后续的访问的效果了</p>"},{"title":"Git的诞生","id":"461","date":"2018-03-11T04:10:56.000Z","declare":true,"toc":true,"_content":"\n转载自：[廖雪峰老师的文章](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000)\n\n很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\n\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ \n<!--more-->\n\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\n\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\n\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\n\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n\n** 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。**","source":"_posts/p9.md","raw":"---\ntitle: Git的诞生\ntags:\n  - csv\n  - git\n  - 故事\n  - 闲谈\nid: 461\ncategories:\n  - 未分类\ndate: 2018-03-11 12:10:56\ndeclare: true\ntoc: true\n---\n\n转载自：[廖雪峰老师的文章](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000)\n\n很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\n\nLinus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ \n<!--more-->\n\n事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\n\n你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\n\n不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。\n\n安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。\n\nLinus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：\n\nLinus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。\n\nGit迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。\n\n** 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。**","slug":"p9","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jjp003ku8vedmuwjv32","content":"<p>转载自：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的文章</a></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？<br><a id=\"more\"></a></p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p><strong> 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</strong></p>\n","site":{"data":{}},"excerpt":"<p>转载自：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的文章</a></p>\n<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>\n<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？<br>","more":"</p>\n<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>\n<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>\n<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>\n<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>\n<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>\n<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>\n<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>\n<p><strong> 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</strong></p>"},{"title":"Docker-Compose配置（一）Mysql+PhpMyAdmin+Portainer","id":"678","date":"2019-08-23T12:58:55.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p60000.png)<br/>\n\n## 简介\n\n好久没有更新博客了，之前初学了解了docker-compose的使用，最近在接触docker-compose的配置，这里开始记录一下常用的一些配置，以便以后自己学习的时候快速开启相关服务。本期介绍的是Mysql+PhpMyAdmin+Portainer。\n<!--more-->\n\n## 环境\n\n+ Centos7 64位 (操作系统)\n\n## 本期容器介绍\n\n+ Mysql\nMysql不用多介绍了，用于存放我们程序的数据。\n\n+ PhpMyAdmin\nPhpMyAdmin用于在Web界面管理Mysql的连接和各种操作，可以对外网仅开放该应用的端口，在屏蔽外网直接连接Mysql的同时，为管理者提供外网管理Mysql的途径。\n\n+ Portainer\nPortainer用于界面化管理各docker容器的运行和操作，还可以方便的查看性能及日志，推荐使用。\n\n## docket-compose配置\n编辑docker-compose.yml文件如下：\n``` yml\nversion: '2'\n\nservices:\n\n  # mysql容器\n  xjy-mysql:\n    image: mysql:5.7.26\n    container_name: xjy-mysql\n    environment:\n      - MYSQL_USER=root\n      - MYSQL_ROOT_PASSWORD=root\n      - MYSQL_ALLOW_EMPTY_PASSWORD=no\n      - MYSQL_DATABASE=test\n    ports:\n      - 3306:3306\n    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8 --explicit_defaults_for_timestamp\n    networks:\n      - xjynet\n      \n  # phpmyadmin容器\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    container_name: phpmyadmin\n    ports:\n      - \"9090:80\"\n    environment:\n      - MYSQL_USER=root\n      - MYSQL_PASSWORD=root\n      - MYSQL_ROOT_PASSWORD=root\n      - PMA_HOST=xjy-mysql\n    networks:\n      - xjynet\n      \n  # portainer容器\n  portainer:\n    image: portainer/portainer:latest\n    container_name: xjy-portainer\n    restart: always\n    ports:\n      - 9095:9000\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      - xjynet\n\n# 创建网络\nnetworks:\n  xjynet:\n    driver: bridge\n```\n\n## 启动看效果\n\n### 启动并查看状态\n执行启动命令：\n``` shell\n# docker-compose up -d\n```\n\n执行查看命令：\n``` shell\n# docker ps\n```\n\n查看状态如下：\n``` text\nCONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                               NAMES\ne3ab101942d4        phpmyadmin/phpmyadmin:latest   \"/docker-entrypoin...\"   48 seconds ago      Up 46 seconds       0.0.0.0:9090->80/tcp                xjy-phpmyadmin\n9aa16917d835        portainer/portainer:latest     \"/portainer\"             2 minutes ago       Up 47 seconds       0.0.0.0:9095->9000/tcp              xjy-portainer\nd6a9b02fbbe7        mysql:5.7.26                   \"docker-entrypoint...\"   3 days ago          Up 46 seconds       0.0.0.0:3306->3306/tcp, 33060/tcp   xjy-mysql\n\n```\n\n### PhpMyAdmin连接Mysql界面\n![img](/img/xjy/p60002.png)<br/>\n\n\n### Portainer管理容器界面\n![img](/img/xjy/p60003.png)<br/>\n\n## 结束语\n好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。\n\n","source":"_posts/p60.md","raw":"---\ntitle: Docker-Compose配置（一）Mysql+PhpMyAdmin+Portainer\nid: 678\ncategories:\n  - DOCKER\ndate: 2019/08/23 20:58:55        \ntags: [docker]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p60000.png)<br/>\n\n## 简介\n\n好久没有更新博客了，之前初学了解了docker-compose的使用，最近在接触docker-compose的配置，这里开始记录一下常用的一些配置，以便以后自己学习的时候快速开启相关服务。本期介绍的是Mysql+PhpMyAdmin+Portainer。\n<!--more-->\n\n## 环境\n\n+ Centos7 64位 (操作系统)\n\n## 本期容器介绍\n\n+ Mysql\nMysql不用多介绍了，用于存放我们程序的数据。\n\n+ PhpMyAdmin\nPhpMyAdmin用于在Web界面管理Mysql的连接和各种操作，可以对外网仅开放该应用的端口，在屏蔽外网直接连接Mysql的同时，为管理者提供外网管理Mysql的途径。\n\n+ Portainer\nPortainer用于界面化管理各docker容器的运行和操作，还可以方便的查看性能及日志，推荐使用。\n\n## docket-compose配置\n编辑docker-compose.yml文件如下：\n``` yml\nversion: '2'\n\nservices:\n\n  # mysql容器\n  xjy-mysql:\n    image: mysql:5.7.26\n    container_name: xjy-mysql\n    environment:\n      - MYSQL_USER=root\n      - MYSQL_ROOT_PASSWORD=root\n      - MYSQL_ALLOW_EMPTY_PASSWORD=no\n      - MYSQL_DATABASE=test\n    ports:\n      - 3306:3306\n    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8 --explicit_defaults_for_timestamp\n    networks:\n      - xjynet\n      \n  # phpmyadmin容器\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    container_name: phpmyadmin\n    ports:\n      - \"9090:80\"\n    environment:\n      - MYSQL_USER=root\n      - MYSQL_PASSWORD=root\n      - MYSQL_ROOT_PASSWORD=root\n      - PMA_HOST=xjy-mysql\n    networks:\n      - xjynet\n      \n  # portainer容器\n  portainer:\n    image: portainer/portainer:latest\n    container_name: xjy-portainer\n    restart: always\n    ports:\n      - 9095:9000\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      - xjynet\n\n# 创建网络\nnetworks:\n  xjynet:\n    driver: bridge\n```\n\n## 启动看效果\n\n### 启动并查看状态\n执行启动命令：\n``` shell\n# docker-compose up -d\n```\n\n执行查看命令：\n``` shell\n# docker ps\n```\n\n查看状态如下：\n``` text\nCONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                               NAMES\ne3ab101942d4        phpmyadmin/phpmyadmin:latest   \"/docker-entrypoin...\"   48 seconds ago      Up 46 seconds       0.0.0.0:9090->80/tcp                xjy-phpmyadmin\n9aa16917d835        portainer/portainer:latest     \"/portainer\"             2 minutes ago       Up 47 seconds       0.0.0.0:9095->9000/tcp              xjy-portainer\nd6a9b02fbbe7        mysql:5.7.26                   \"docker-entrypoint...\"   3 days ago          Up 46 seconds       0.0.0.0:3306->3306/tcp, 33060/tcp   xjy-mysql\n\n```\n\n### PhpMyAdmin连接Mysql界面\n![img](/img/xjy/p60002.png)<br/>\n\n\n### Portainer管理容器界面\n![img](/img/xjy/p60003.png)<br/>\n\n## 结束语\n好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。\n\n","slug":"p60","published":1,"updated":"2019-08-23T06:25:27.208Z","_id":"cjznq3jjv003nu8ve99pw7fxd","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/xjy/p60000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>好久没有更新博客了，之前初学了解了docker-compose的使用，最近在接触docker-compose的配置，这里开始记录一下常用的一些配置，以便以后自己学习的时候快速开启相关服务。本期介绍的是Mysql+PhpMyAdmin+Portainer。<br><a id=\"more\"></a></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos7 64位 (操作系统)</li>\n</ul>\n<h2 id=\"本期容器介绍\"><a href=\"#本期容器介绍\" class=\"headerlink\" title=\"本期容器介绍\"></a>本期容器介绍</h2><ul>\n<li><p>Mysql<br>Mysql不用多介绍了，用于存放我们程序的数据。</p>\n</li>\n<li><p>PhpMyAdmin<br>PhpMyAdmin用于在Web界面管理Mysql的连接和各种操作，可以对外网仅开放该应用的端口，在屏蔽外网直接连接Mysql的同时，为管理者提供外网管理Mysql的途径。</p>\n</li>\n<li><p>Portainer<br>Portainer用于界面化管理各docker容器的运行和操作，还可以方便的查看性能及日志，推荐使用。</p>\n</li>\n</ul>\n<h2 id=\"docket-compose配置\"><a href=\"#docket-compose配置\" class=\"headerlink\" title=\"docket-compose配置\"></a>docket-compose配置</h2><p>编辑docker-compose.yml文件如下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># mysql容器</span></span><br><span class=\"line\"><span class=\"attr\">  xjy-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7.26</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-mysql</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_ALLOW_EMPTY_PASSWORD=no</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_DATABASE=test</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">mysqld</span> <span class=\"bullet\">--lower_case_table_names=1</span> <span class=\"bullet\">--skip-ssl</span> <span class=\"bullet\">--character_set_server=utf8</span> <span class=\"bullet\">--explicit_defaults_for_timestamp</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"comment\"># phpmyadmin容器</span></span><br><span class=\"line\"><span class=\"attr\">  phpmyadmin:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">phpmyadmin/phpmyadmin:latest</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">phpmyadmin</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9090:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_PASSWORD=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">PMA_HOST=xjy-mysql</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"comment\"># portainer容器</span></span><br><span class=\"line\"><span class=\"attr\">  portainer:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">portainer/portainer:latest</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-portainer</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">9095</span><span class=\"string\">:9000</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  xjynet:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动看效果\"><a href=\"#启动看效果\" class=\"headerlink\" title=\"启动看效果\"></a>启动看效果</h2><h3 id=\"启动并查看状态\"><a href=\"#启动并查看状态\" class=\"headerlink\" title=\"启动并查看状态\"></a>启动并查看状态</h3><p>执行启动命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>执行查看命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker ps</span><br></pre></td></tr></table></figure></p>\n<p>查看状态如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class=\"line\">e3ab101942d4        phpmyadmin/phpmyadmin:latest   &quot;/docker-entrypoin...&quot;   48 seconds ago      Up 46 seconds       0.0.0.0:9090-&gt;80/tcp                xjy-phpmyadmin</span><br><span class=\"line\">9aa16917d835        portainer/portainer:latest     &quot;/portainer&quot;             2 minutes ago       Up 47 seconds       0.0.0.0:9095-&gt;9000/tcp              xjy-portainer</span><br><span class=\"line\">d6a9b02fbbe7        mysql:5.7.26                   &quot;docker-entrypoint...&quot;   3 days ago          Up 46 seconds       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   xjy-mysql</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PhpMyAdmin连接Mysql界面\"><a href=\"#PhpMyAdmin连接Mysql界面\" class=\"headerlink\" title=\"PhpMyAdmin连接Mysql界面\"></a>PhpMyAdmin连接Mysql界面</h3><p><img src=\"/img/xjy/p60002.png\" alt=\"img\"><br></p>\n<h3 id=\"Portainer管理容器界面\"><a href=\"#Portainer管理容器界面\" class=\"headerlink\" title=\"Portainer管理容器界面\"></a>Portainer管理容器界面</h3><p><img src=\"/img/xjy/p60003.png\" alt=\"img\"><br></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p60000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>好久没有更新博客了，之前初学了解了docker-compose的使用，最近在接触docker-compose的配置，这里开始记录一下常用的一些配置，以便以后自己学习的时候快速开启相关服务。本期介绍的是Mysql+PhpMyAdmin+Portainer。<br>","more":"</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos7 64位 (操作系统)</li>\n</ul>\n<h2 id=\"本期容器介绍\"><a href=\"#本期容器介绍\" class=\"headerlink\" title=\"本期容器介绍\"></a>本期容器介绍</h2><ul>\n<li><p>Mysql<br>Mysql不用多介绍了，用于存放我们程序的数据。</p>\n</li>\n<li><p>PhpMyAdmin<br>PhpMyAdmin用于在Web界面管理Mysql的连接和各种操作，可以对外网仅开放该应用的端口，在屏蔽外网直接连接Mysql的同时，为管理者提供外网管理Mysql的途径。</p>\n</li>\n<li><p>Portainer<br>Portainer用于界面化管理各docker容器的运行和操作，还可以方便的查看性能及日志，推荐使用。</p>\n</li>\n</ul>\n<h2 id=\"docket-compose配置\"><a href=\"#docket-compose配置\" class=\"headerlink\" title=\"docket-compose配置\"></a>docket-compose配置</h2><p>编辑docker-compose.yml文件如下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># mysql容器</span></span><br><span class=\"line\"><span class=\"attr\">  xjy-mysql:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mysql:5.7.26</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-mysql</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_ALLOW_EMPTY_PASSWORD=no</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_DATABASE=test</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"string\">mysqld</span> <span class=\"bullet\">--lower_case_table_names=1</span> <span class=\"bullet\">--skip-ssl</span> <span class=\"bullet\">--character_set_server=utf8</span> <span class=\"bullet\">--explicit_defaults_for_timestamp</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"comment\"># phpmyadmin容器</span></span><br><span class=\"line\"><span class=\"attr\">  phpmyadmin:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">phpmyadmin/phpmyadmin:latest</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">phpmyadmin</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9090:80\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_USER=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_PASSWORD=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">PMA_HOST=xjy-mysql</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"comment\"># portainer容器</span></span><br><span class=\"line\"><span class=\"attr\">  portainer:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">portainer/portainer:latest</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-portainer</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">9095</span><span class=\"string\">:9000</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建网络</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  xjynet:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动看效果\"><a href=\"#启动看效果\" class=\"headerlink\" title=\"启动看效果\"></a>启动看效果</h2><h3 id=\"启动并查看状态\"><a href=\"#启动并查看状态\" class=\"headerlink\" title=\"启动并查看状态\"></a>启动并查看状态</h3><p>执行启动命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>执行查看命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker ps</span><br></pre></td></tr></table></figure></p>\n<p>查看状态如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class=\"line\">e3ab101942d4        phpmyadmin/phpmyadmin:latest   &quot;/docker-entrypoin...&quot;   48 seconds ago      Up 46 seconds       0.0.0.0:9090-&gt;80/tcp                xjy-phpmyadmin</span><br><span class=\"line\">9aa16917d835        portainer/portainer:latest     &quot;/portainer&quot;             2 minutes ago       Up 47 seconds       0.0.0.0:9095-&gt;9000/tcp              xjy-portainer</span><br><span class=\"line\">d6a9b02fbbe7        mysql:5.7.26                   &quot;docker-entrypoint...&quot;   3 days ago          Up 46 seconds       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   xjy-mysql</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PhpMyAdmin连接Mysql界面\"><a href=\"#PhpMyAdmin连接Mysql界面\" class=\"headerlink\" title=\"PhpMyAdmin连接Mysql界面\"></a>PhpMyAdmin连接Mysql界面</h3><p><img src=\"/img/xjy/p60002.png\" alt=\"img\"><br></p>\n<h3 id=\"Portainer管理容器界面\"><a href=\"#Portainer管理容器界面\" class=\"headerlink\" title=\"Portainer管理容器界面\"></a>Portainer管理容器界面</h3><p><img src=\"/img/xjy/p60003.png\" alt=\"img\"><br></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。</p>"},{"title":"1代树莓派改造","id":"379","date":"2018-02-04T17:29:56.000Z","declare":true,"toc":true,"_content":"\n把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！ \n<!--more-->\n\n1.安装usb无线网卡,\n\n+ 进入图形界面，用wifi config扫描到wifi信号，连接后保存配置\n\n+ 执行下面命令加入auto wlan0\n\n+ 重启即可开机自连上面的无线信号\n\n``` shell \nvi /etc/network/interface\n```\n\n2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除\n\n``` shell \nvi /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\n3.更新源\n``` shell \nsudo view /etc/apt/sources.list\nsudo apt-get update \n```\n\n4.安装远程桌面\n``` shell \nsudo apt-get install xrdp \n```\n\n5.开启摄像头、I2C支持\n``` shell \nsudo raspi-config \n```\n\n6.加入crontab任务\n``` shell \nsudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp; \n```\n\n7.报出“ImportError: No module named smbus”的错误,解决办法 \n``` shell \nsudo apt-get install python-smbus \n```\n\n8.报出“ImportError: No module named RPi.GPIO”的错误\n``` shell \nsudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO \n```\n\n9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip\n``` shell \n#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus \n```\n\n10.如果还不行，说明还要额外启用I2C一系列操作，可参考[扩展文章](http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html)\n ","source":"_posts/p31.md","raw":"---\ntitle: 1代树莓派改造\nid: 379\ncategories:\n  - 树莓派学习\ndate: 2018-02-05 01:29:56\ntags: [树莓派, python, wlan]\ndeclare: true\ntoc: true\n---\n\n把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！ \n<!--more-->\n\n1.安装usb无线网卡,\n\n+ 进入图形界面，用wifi config扫描到wifi信号，连接后保存配置\n\n+ 执行下面命令加入auto wlan0\n\n+ 重启即可开机自连上面的无线信号\n\n``` shell \nvi /etc/network/interface\n```\n\n2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除\n\n``` shell \nvi /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\n3.更新源\n``` shell \nsudo view /etc/apt/sources.list\nsudo apt-get update \n```\n\n4.安装远程桌面\n``` shell \nsudo apt-get install xrdp \n```\n\n5.开启摄像头、I2C支持\n``` shell \nsudo raspi-config \n```\n\n6.加入crontab任务\n``` shell \nsudo crontab -e \n#加入下面这一句\n#*/10 * * * * /usr/local/custshell/cust.sh 1&gt;&gt;/usr/local/custshell/log.txt &amp; \n```\n\n7.报出“ImportError: No module named smbus”的错误,解决办法 \n``` shell \nsudo apt-get install python-smbus \n```\n\n8.报出“ImportError: No module named RPi.GPIO”的错误\n``` shell \nsudo apt-get install python-setuptools python-pip python-dev\npip install RPi.GPIO \n```\n\n9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip\n``` shell \n#还可以通过pip3安装: \nsudo apt-get install python3-pip \nsudo sudo pip-3.2 install\n#python3-smbus\nsudo apt-get install python3-smbus \n```\n\n10.如果还不行，说明还要额外启用I2C一系列操作，可参考[扩展文章](http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html)\n ","slug":"p31","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jjz003qu8vec70ifhwh","content":"<p>把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！<br><a id=\"more\"></a></p>\n<p>1.安装usb无线网卡,</p>\n<ul>\n<li><p>进入图形界面，用wifi config扫描到wifi信号，连接后保存配置</p>\n</li>\n<li><p>执行下面命令加入auto wlan0</p>\n</li>\n<li><p>重启即可开机自连上面的无线信号</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/network/interface</span><br></pre></td></tr></table></figure>\n<p>2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure>\n<p>3.更新源<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo view /etc/apt/sources.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>4.安装远程桌面<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>5.开启摄像头、I2C支持<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>6.加入crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">加入下面这一句</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">*/10 * * * * /usr/<span class=\"built_in\">local</span>/custshell/cust.sh 1&amp;gt;&amp;gt;/usr/<span class=\"built_in\">local</span>/custshell/log.txt &amp;amp;</span></span><br></pre></td></tr></table></figure></p>\n<p>7.报出“ImportError: No module named smbus”的错误,解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-smbus</span><br></pre></td></tr></table></figure></p>\n<p>8.报出“ImportError: No module named RPi.GPIO”的错误<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-setuptools python-pip python-dev</span><br><span class=\"line\">pip install RPi.GPIO</span><br></pre></td></tr></table></figure></p>\n<p>9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">还可以通过pip3安装: </span></span><br><span class=\"line\">sudo apt-get install python3-pip </span><br><span class=\"line\">sudo sudo pip-3.2 install</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">python3-smbus</span></span><br><span class=\"line\">sudo apt-get install python3-smbus</span><br></pre></td></tr></table></figure></p>\n<p>10.如果还不行，说明还要额外启用I2C一系列操作，可参考<a href=\"http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html\" target=\"_blank\" rel=\"noopener\">扩展文章</a></p>\n","site":{"data":{}},"excerpt":"<p>把自己的python程序放到1代的树莓派上跑，需要无线连接外网，还需要I2C与摄像头功能，经过一顿倒腾，终于搞定。于是写个记录！<br>","more":"</p>\n<p>1.安装usb无线网卡,</p>\n<ul>\n<li><p>进入图形界面，用wifi config扫描到wifi信号，连接后保存配置</p>\n</li>\n<li><p>执行下面命令加入auto wlan0</p>\n</li>\n<li><p>重启即可开机自连上面的无线信号</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/network/interface</span><br></pre></td></tr></table></figure>\n<p>2.上面保存的已连接wifi信息会出现在下面的配置文件中，也可手动添加或删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure>\n<p>3.更新源<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo view /etc/apt/sources.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>4.安装远程桌面<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>5.开启摄像头、I2C支持<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br></pre></td></tr></table></figure></p>\n<p>6.加入crontab任务<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">加入下面这一句</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">*/10 * * * * /usr/<span class=\"built_in\">local</span>/custshell/cust.sh 1&amp;gt;&amp;gt;/usr/<span class=\"built_in\">local</span>/custshell/log.txt &amp;amp;</span></span><br></pre></td></tr></table></figure></p>\n<p>7.报出“ImportError: No module named smbus”的错误,解决办法<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-smbus</span><br></pre></td></tr></table></figure></p>\n<p>8.报出“ImportError: No module named RPi.GPIO”的错误<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-setuptools python-pip python-dev</span><br><span class=\"line\">pip install RPi.GPIO</span><br></pre></td></tr></table></figure></p>\n<p>9.如果装了多个版本的python，且是给python3用，则上面应该还是解决不了，那么需要安装python3-pip<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">还可以通过pip3安装: </span></span><br><span class=\"line\">sudo apt-get install python3-pip </span><br><span class=\"line\">sudo sudo pip-3.2 install</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">python3-smbus</span></span><br><span class=\"line\">sudo apt-get install python3-smbus</span><br></pre></td></tr></table></figure></p>\n<p>10.如果还不行，说明还要额外启用I2C一系列操作，可参考<a href=\"http://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html\" target=\"_blank\" rel=\"noopener\">扩展文章</a></p>"},{"title":"树莓派学习-先装好环境跑起来","id":"132","date":"2017-12-10T09:57:14.000Z","declare":true,"toc":true,"_content":"\n#### 安装系统\n用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可\n\n#### 连接SSH\n<!--more-->\n<新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。\n\n#### 安装 远程桌面访问\n``` shell \n$ sudo apt-get install xrdp \n```\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n\n#### 运行结果如图：\n\n![](/img/xjy/smp006.png)","source":"_posts/p21.md","raw":"---\ntitle: 树莓派学习-先装好环境跑起来\nid: 132\ncategories:\n  - 树莓派学习\ndate: 2017-12-10 17:57:14\ntags: [树莓派, Win32DiskImager, ssh]\ndeclare: true\ntoc: true\n---\n\n#### 安装系统\n用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可\n\n#### 连接SSH\n<!--more-->\n<新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。\n\n#### 安装 远程桌面访问\n``` shell \n$ sudo apt-get install xrdp \n```\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n\n#### 运行结果如图：\n\n![](/img/xjy/smp006.png)","slug":"p21","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jq300cqu8vewh8qxebn","content":"<h4 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h4><p>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</p>\n<h4 id=\"连接SSH\"><a href=\"#连接SSH\" class=\"headerlink\" title=\"连接SSH\"></a>连接SSH</h4><a id=\"more\"></a>\n<p>&lt;新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</p>\n<h4 id=\"安装-远程桌面访问\"><a href=\"#安装-远程桌面访问\" class=\"headerlink\" title=\"安装 远程桌面访问\"></a>安装 远程桌面访问</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install xrdp</span></span><br></pre></td></tr></table></figure>\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:W3siYmxvY2tUeXBlIjoicGFyYWdyYXBoIiwic3R5bGVzIjp7ImFsaWduIjoibGVmdCIsImluZGVudCI6MCwidGV4dC1pbmRlbnQiOjAsImxpbmUtaGVpZ2h0IjoxLjc1fSwiYmxvY2tJZCI6IjczMjEtMTUxMjIxNzY0MTgyNCIsInJpY2hUZXh0Ijp7ImlzUmljaFRleHQiOnRydWUsImtlZXBMaW5lQnJlYWsiOnRydWUsImRhdGEiOlt7ImNoYXIiOiIxIn0seyJjaGFyIjoiLiJ9LHsiY2hhciI6IuWuiSJ9LHsiY2hhciI6IuijhSJ9LHsiY2hhciI6IuezuyJ9LHsiY2hhciI6Iue7nyJ9XX19LHsiYmxvY2tUeXBlIjoicGFyYWdyYXBoIiwic3R5bGVzIjp7ImFsaWduIjoibGVmdCIsImluZGVudCI6MCwidGV4dC1pbmRlbnQiOjAsImxpbmUtaGVpZ2h0IjoxLjc1fSwiYmxvY2tJZCI6Ijg0MTAtMTUxMjIxNzY3MjMwOCIsInJpY2hUZXh0Ijp7ImlzUmljaFRleHQiOnRydWUsImtlZXBMaW5lQnJlYWsiOnRydWUsImRhdGEiOlt7ImNoYXIiOiLnlKgifSx7ImNoYXIiOiJXIn0seyJjaGFyIjoiaSJ9LHsiY2hhciI6Im4ifSx7ImNoYXIiOiIzIn0seyJjaGFyIjoiMiJ9LHsiY2hhciI6IkQifSx7ImNoYXIiOiJpIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6ImsifSx7ImNoYXIiOiJJIn0seyJjaGFyIjoibSJ9LHsiY2hhciI6ImEifSx7ImNoYXIiOiJnIn0seyJjaGFyIjoiZSJ9LHsiY2hhciI6InIifSx7ImNoYXIiOiLova8ifSx7ImNoYXIiOiLku7YifSx7ImNoYXIiOiLlhpkifSx7ImNoYXIiOiLlhaUifSx7ImNoYXIiOiLnvZEifSx7ImNoYXIiOiLkuIoifSx7ImNoYXIiOiLkuIsifSx7ImNoYXIiOiLovb0ifSx7ImNoYXIiOiLnmoQifSx7ImNoYXIiOiLplZwifSx7ImNoYXIiOiLlg48ifSx7ImNoYXIiOiLvvIgifSx7ImNoYXIiOiIyIn0seyJjaGFyIjoiMCJ9LHsiY2hhciI6IjEifSx7ImNoYXIiOiI3In0seyJjaGFyIjoiLSJ9LHsiY2hhciI6IjEifSx7ImNoYXIiOiIxIn0seyJjaGFyIjoiLSJ9LHsiY2hhciI6IjIifSx7ImNoYXIiOiI5In0seyJjaGFyIjoiLSJ9LHsiY2hhciI6InIifSx7ImNoYXIiOiJhIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6InAifSx7ImNoYXIiOiJiIn0seyJjaGFyIjoiaSJ9LHsiY2hhciI6ImEifSx7ImNoYXIiOiJuIn0seyJjaGFyIjoiLSJ9LHsiY2hhciI6InMifSx7ImNoYXIiOiJ0In0seyJjaGFyIjoiciJ9LHsiY2hhciI6ImUifSx7ImNoYXIiOiJ0In0seyJjaGFyIjoiYyJ9LHsiY2hhciI6ImgifSx7ImNoYXIiOiIuIn0seyJjaGFyIjoiaSJ9LHsiY2hhciI6Im0ifSx7ImNoYXIiOiJnIn0seyJjaGFyIjoi77yJIn0seyJjaGFyIjoi5Y2zIn0seyJjaGFyIjoi5Y+vIn1dfX0seyJibG9ja1R5cGUiOiJwYXJhZ3JhcGgiLCJzdHlsZXMiOnsiYWxpZ24iOiJsZWZ0IiwiaW5kZW50IjowLCJ0ZXh0LWluZGVudCI6MCwibGluZS1oZWlnaHQiOjEuNzV9LCJibG9ja0lkIjoiNTIyNy0xNTEyMjE3NzQ5NzU2IiwicmljaFRleHQiOnsiaXNSaWNoVGV4dCI6dHJ1ZSwia2VlcExpbmVCcmVhayI6dHJ1ZSwiZGF0YSI6W119fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI5MDYwLTE1MTIyMTc3NDk5MzYiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoiMiJ9LHsiY2hhciI6Ii4ifSx7ImNoYXIiOiLov54ifSx7ImNoYXIiOiLmjqUifSx7ImNoYXIiOiJTIn0seyJjaGFyIjoiUyJ9LHsiY2hhciI6IkgifV19fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI3NTk3LTE1MTIyMTc3NTc2MjgiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoi5pawIn0seyJjaGFyIjoi54mIIn0seyJjaGFyIjoi6ZWcIn0seyJjaGFyIjoi5YOPIn0seyJjaGFyIjoi6buYIn0seyJjaGFyIjoi6K6kIn0seyJjaGFyIjoi56aBIn0seyJjaGFyIjoi55SoIn0seyJjaGFyIjoiUyJ9LHsiY2hhciI6IlMifSx7ImNoYXIiOiJIIn0seyJjaGFyIjoi77yMIn0seyJjaGFyIjoi6ZyAIn0seyJjaGFyIjoi6KaBIn0seyJjaGFyIjoi5ZyoIn0seyJjaGFyIjoi5YaFIn0seyJjaGFyIjoi5a2YIn0seyJjaGFyIjoi5Y2hIn0seyJjaGFyIjoi54i2In0seyJjaGFyIjoi6LevIn0seyJjaGFyIjoi5b6EIn0seyJjaGFyIjoi5bu6In0seyJjaGFyIjoi56uLIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6InMifSx7ImNoYXIiOiJoIn0seyJjaGFyIjoi56m6In0seyJjaGFyIjoi5paHIn0seyJjaGFyIjoi5Lu2In0seyJjaGFyIjoi5aS5In0seyJjaGFyIjoi77yMIn0seyJjaGFyIjoi54S2In0seyJjaGFyIjoi5ZCOIn0seyJjaGFyIjoi6YCaIn0seyJjaGFyIjoi6L+HIn0seyJjaGFyIjoi6L+eIn0seyJjaGFyIjoi5o6lIn0seyJjaGFyIjoi55u4In0seyJjaGFyIjoi5ZCMIn0seyJjaGFyIjoi55qEIn0seyJjaGFyIjoi6LevIn0seyJjaGFyIjoi55SxIn0seyJjaGFyIjoi5ZmoIn0seyJjaGFyIjoi6L+bIn0seyJjaGFyIjoi6KGMIn0seyJjaGFyIjoicyJ9LHsiY2hhciI6InMifSx7ImNoYXIiOiJoIn0seyJjaGFyIjoi6K6/In0seyJjaGFyIjoi6ZeuIn0seyJjaGFyIjoi44CCIn0seyJjaGFyIjoi6buYIn0seyJjaGFyIjoi6K6kIn0seyJjaGFyIjoi55SoIn0seyJjaGFyIjoi5oi3In0seyJjaGFyIjoi5ZCNIn0seyJjaGFyIjoi77yaIn0seyJjaGFyIjoicCJ9LHsiY2hhciI6ImkifSx7ImNoYXIiOiLvvIwifSx7ImNoYXIiOiLlr4YifSx7ImNoYXIiOiLnoIEifSx7ImNoYXIiOiLvvJoifSx7ImNoYXIiOiJyIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6ImEiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoicyIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiJwIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6ImIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoiZSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiJyIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6InIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoieSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiIgIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IigiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi5LiNIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuS8miIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLmmL4iLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi56S6Iiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuWvhiIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLnoIEiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoiKSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLjgIIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX1dfX0seyJibG9ja1R5cGUiOiJwYXJhZ3JhcGgiLCJzdHlsZXMiOnsiYWxpZ24iOiJsZWZ0IiwiaW5kZW50IjowLCJ0ZXh0LWluZGVudCI6MCwibGluZS1oZWlnaHQiOjEuNzV9LCJibG9ja0lkIjoiMTM4MC0xNTEyMjE3OTM1NzA3IiwicmljaFRleHQiOnsiaXNSaWNoVGV4dCI6dHJ1ZSwia2VlcExpbmVCcmVhayI6dHJ1ZSwiZGF0YSI6W119fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI4NDE4LTE1MTIyMTc5MzU5NTgiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoiMyIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiIuIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuWuiSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLoo4UiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoiICIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLov5wiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi56iLIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IuahjCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fSx7ImNoYXIiOiLpnaIiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiNmN2Y3ZjcifX0seyJjaGFyIjoi6K6/Iiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjZjdmN2Y3In19LHsiY2hhciI6IumXriIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiI2Y3ZjdmNyJ9fV19fSx7ImJsb2NrVHlwZSI6InBhcmFncmFwaCIsInN0eWxlcyI6eyJhbGlnbiI6ImxlZnQiLCJpbmRlbnQiOjAsInRleHQtaW5kZW50IjowLCJsaW5lLWhlaWdodCI6MS43NX0sImJsb2NrSWQiOiI3Mjg5LTE1MTIyMTc5NDkwMTkiLCJyaWNoVGV4dCI6eyJpc1JpY2hUZXh0Ijp0cnVlLCJrZWVwTGluZUJyZWFrIjp0cnVlLCJkYXRhIjpbeyJjaGFyIjoiJCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiIgIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InMiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoidSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJkIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6Im8iLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiICIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJhIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InAiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoidCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiItIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6ImciLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiZSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJ0Iiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6IiAiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiaSIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJuIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InMiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoidCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJhIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6ImwiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoibCIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiIgIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6IngiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX0seyJjaGFyIjoiciIsInN0eWxlcyI6eyJmb250LXNpemUiOjE2LCJjb2xvciI6IiMyZjJmMmYiLCJiYWNrLWNvbG9yIjoiIzc3Yzk0YiJ9fSx7ImNoYXIiOiJkIiwic3R5bGVzIjp7ImZvbnQtc2l6ZSI6MTYsImNvbG9yIjoiIzJmMmYyZiIsImJhY2stY29sb3IiOiIjNzdjOTRiIn19LHsiY2hhciI6InAiLCJzdHlsZXMiOnsiZm9udC1zaXplIjoxNiwiY29sb3IiOiIjMmYyZjJmIiwiYmFjay1jb2xvciI6IiM3N2M5NGIifX1dfX1d-->\n<h4 id=\"运行结果如图：\"><a href=\"#运行结果如图：\" class=\"headerlink\" title=\"运行结果如图：\"></a>运行结果如图：</h4><p><img src=\"/img/xjy/smp006.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h4><p>用Win32DiskImager软件写入网上下载的镜像（2017-11-29-raspbian-stretch.img）即可</p>\n<h4 id=\"连接SSH\"><a href=\"#连接SSH\" class=\"headerlink\" title=\"连接SSH\"></a>连接SSH</h4>","more":"<p>&lt;新版镜像默认禁用SSH，需要在内存卡父路径建立ssh空文件夹，然后通过连接相同的路由器进行ssh访问。默认用户名：pi，密码：raspberry (不会显示密码)。</p>\n<h4 id=\"安装-远程桌面访问\"><a href=\"#安装-远程桌面访问\" class=\"headerlink\" title=\"安装 远程桌面访问\"></a>安装 远程桌面访问</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install xrdp</span></span><br></pre></td></tr></table></figure>\n<!--5f39ae17-8c62-4a45-bc43-b32064c9388a:>\n<h4 id=\"运行结果如图：\"><a href=\"#运行结果如图：\" class=\"headerlink\" title=\"运行结果如图：\"></a>运行结果如图：</h4><p><img src=\"/img/xjy/smp006.png\" alt=\"\"></p>"},{"title":"公交查询微信小程序的实现","id":"412","date":"2018-09-12T01:36:09.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p50000.png)<br/>\n\n# 前言\n本人初识微信小程序，是个实实在在的小白，经过简单的了解和参考github上的源码，最终将简单的公交查询小程序通过了腾讯的审核，成功上线。本文主要偏重于具体实现过程的介绍，自己写的部分代码并没有太多含金量，仅为给和我一样的小白们提供一个小程序开发到发布的参考。\n<!--more-->\n\n# 背景\n最开始想开发这个小程序的目的就是想方面自己每天走20分钟去坐公交时方便查询实时到站信息，虽然上海发布这类公共号已有相关功能，但是需要经过层层点击才能进入，我想做的是把我默认的线路放到首页直接展示。\n\n# 简介\n该程序和其他小程序一样，构成分为前端和后端两个部分，前端是在腾讯提供的微信小程序工具上开发完成，参考了github上的小程序源码[《RebeccaHanjw/weapp-wechat-zhihu》](https://github.com/RebeccaHanjw/weapp-wechat-zhihu)，后端是在github上找到的python源码[《ark930/shanghai-bus》](https://github.com/ark930/shanghai-bus)。\n\n# 开发\n## 开发环境及工具\n\n### 前端\n+ 操作系统：windows（我的笔记本电脑）\n+ 开发工具：微信web开发者工具\n+ 运行工具：微信小程序官方\n\n### 后端\n\n+ 操作系统：centos（我的远程vps）\n+ 开发工具：略（这里是用的别人的源码）\n+ 运行工具：python3+flask\n+ 其他工具：nginx（负责域名到本地ip后的解析）\n\n### 域名\n+ 域名商：阿里云\n+ 域名https代理：cloudflare\n\n## 后端相关\n> 现在后端服务被我组装成了docker镜像，如果省事也可以直接运行我发布的docker镜像[《xiajunyi/smallbus》](> 现在后端服务被我组装成了docker镜像，可以直接运行docker镜像)\n\n### 安装python3及flask\n> 这里的flask是为python提供的web框架\n\n+ 安装python3 \n``` shell\nyum install python3\n```\n\n+ 安装flask，由于python3默认安装没有flask库，需要利用pip3安装\n``` shell\npip3 install flask\n```\n\n### 配置及运行python源码\n+ 从[《ark930/shanghai-bus》](https://github.com/ark930/shanghai-bus)下载源码到vps的目录，如果安装过git,可以用如下命令\n``` shell\ngit clone https://github.com/ark930/shanghai-bus.git\n```\n\n+ 在源代码router.py文件中加入启动配置，如端口，是否开启调试等 \n``` python\nif __name__ == '__main__':\n    app.config['JSON_AS_ASCII'] = False\n    app.run(host='127.0.0.1', port=8080, debug=False)\n```\n\n+  运行\n``` shell\npython3 router.py\n```\n\n### 新增域名解析配置\n+ nginx配置中增加域名bus.xiajunyi.com的解析\n```xml\nserver {\n    listen       80;\n    server_name  bus.xiajunyi.com;\n    resolver 8.8.8.8;\n    location / {\n             proxy_pass  $scheme://127.0.0.1:8080;\n             proxy_redirect $scheme://127.0.0.1:8080 $scheme://$host:80;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n+  重启nginx生效 \n``` shell\nservice nginx restart\n```\n\n+ 登录cloudflare，增加bus.xiajunyi.com到VPS上ip的解析\n>在此之前需要登录购买域名的阿里云，将其中的域名解析DNS的地址改为cloudflare提供的两个DNS，这样就相当于cloudflare代理了我的域名解析,它会为我提供免费的ssl证书认证功能，然后将https请求转化为http请求到我的VPS上的ip地址。\n\n![img](/img/xjy/p50001.png)<br/>\n\n### 验证结果\n+ 这时候就可以用postman工具尝试调用，有返回结果就证明后端发布成功了\n![img](/img/xjy/p50002.png)<br/>\n\n## 前端相关\n\n### 注册小程序及安装开发工具\n>这里有个小技巧！因为腾讯规定一个邮箱只能注册一个小程序，如果想注册多个小程序，可以使用QQ邮箱里的“绑定域名邮箱”功能，可以自定义多达200个你自己域名下的邮箱映射至自己的QQ邮箱。这样注册的邮箱居然不会被腾讯识别成同一个，哈哈，是不是感觉很过瘾？\n\n具体注册过程和管理页面的配置，以及api文档，小程序官网介绍的已经很清楚，我就不详细介绍了，[点这里查看相关文档](https://developers.weixin.qq.com/miniprogram/dev/index.html)\n\n\n### 开发步骤\n+ 打开微信web开发者工具，在引导页面会让你导入下载的小程序源码，或者自己新建开发目录（如果是新建项目），然后输入项目的AppId(这个是在腾讯提供的小程序管理网页上获取的)即可进入，下面是进入后的开发界面\n![img](/img/xjy/p50003.png)<br/>\n\n+ 定义或修改index.wxml(类似于html) \n``` xml\n\t<!--index.wxml-->\n\t<scroll-view scroll-y=\"true\" class=\"container\" bindscrolltoupper=\"search_stop_e\" upper-threshold=\"10\" lower-threshold=\"5\" bindscrolltoupper=\"upper-back\" bindscrolltolower=\"lower\" scroll-into-view=\"{{toView}}\" scroll-top=\"{{scrollTop}}\">\n\t  <!--省略一部分太长的代码-->\n\t  <!--明细显示-->\n\t  <block wx:for=\"{{feed}}\" wx:for-index=\"idx\" wx:for-item=\"item\" data-idx=\"{{idx}}\">\n\t    <view class=\"feed-item\" data-detail_id=\"{{item.stop_id}}\" bindtap=\"actualSearchTap\">\n\t      <view class=\"feed-source\">\n\t        <a class=\"\">\n\t          <view class=\"avatar\">\n\t            <image src=\"{{item.feed_source_img}}\"></image>\n\t          </view>\n\t          <text>第{{item.stop_id}}站</text>\n\t        </a>\n\t        <image class=\"item-more\" mode=\"aspectFit\" src=\"../../images/more.png\"></image>\n\t      </view>\n\t      <view class=\"feed-content\">\n\t        <view class=\"question\">\n\t          <a class=\"question-link\">\n\t            <text class = \"stopname\" decode=\"{{true}}\">{{item.stop_name}}&nbsp; &nbsp; </text>\n\t          </a>\n\t          <!--实时信息，只有在点击的时候才会显示-->\n\t          <view class=\"stopDetail\">\n\t            <block wx:if=\"{{item.stop_id==search_stop_detail_touch+'.'}}\">\n\t              <text decode=\"{{true}}\">{{searchingInfo}}</text>\n\t            </block>\n\t            <block wx:if=\"{{item.stop_id==search_stop_detail+'.'}}\">\n\t              <block wx:if=\"{{feedDetail.stop_interval==''}}\">\n\t                <text decode=\"{{true}}\">\\n还没有发车</text>\n\t              </block>\n\t              <block wx:if=\"{{feedDetail.stop_interval!=''}}\">\n\t                <text decode=\"{{true}}\">\\n还有：{{feedDetail.stop_interval}} 站&nbsp; &nbsp; </text>\n\t                <text decode=\"{{true}}\">时间：{{feedDetail.time}} 分钟&nbsp; &nbsp; </text>\n\t                <text decode=\"{{true}}\">距离：{{feedDetail.distance}} 米&nbsp; &nbsp; </text>\n\t              </block>\n\t            </block>\n\t          </view>\n\t        </view>\n\t      </view>\n\t    </view>\n\t  </block>\n\t</scroll-view>\n```\n\n+ 定义或修改index.wxss(类似于css样式)，例如\n``` java\n\t/**index.wxss**/\n\t\n\t.container{\n\t  height: 1500rpx;\n\t}\n\t.container .stopname {\n\t  font-size: 35rpx;\n\t  \n\t}\n\t.container .search{\n\t  width: 735rpx;\n\t  height: 65rpx;\n\t  padding: 12.5rpx 0 12.5rpx 15rpx;\n\t  background: #2A8CE5;\n\t}\n\t.container .search-left{\n\t  flex: 8;\n\t  background: #4EA3E7;\n\t  text-align: left;\n\t}\n```\n\n+ 定义或修改index.js(类似于javascript),定义触发的事件函数，例如\n``` js\n\t//index.js\n\t\n\tvar util = require('../../utils/util.js')\n\tvar app = getApp()\n\tvar router_name\n\tPage({\n\t  data: {\n\t    feed: [1],\n\t    feedDetail: [1],\n\t    feed_length: 0,\n\t    router_name: 993,\n\t  },\n\t\n\t//省略掉部分代码。。。\n\t\n\t  //获取实时的到站信息\n\t  getActualData: function (actualStop) {\n\t    console.log(\"现在在执行index里的getData()方法1?\");\n\t    console.log(this.data.search_stop_detail);\n\t    console.log(this.data.feed);\n\t    console.log(\"正在载入实时信息\");\n\t    this.setData({\n\t      searchingInfo: '正在拼命加载实时信息  ~~~'\n\t    });\n\t    var that = this;\n\t    util.getActualData(this.data.router_name, actualStop, this.data.direction).then(function (res) {\n\t      //请求成功的操作\n\t      console.log(\"详细请求现在是同步返回的吗？\");\n\t      console.log(res.data);\n\t      console.log(\"详细现在请求的站点编号是\" + actualStop);\n\t      var parseData = res.data;\n\t      parseData.time = parseInt(parseData.time / 60);\n\t      that.setData({\n\t        search_stop_detail: actualStop,\n\t        feedDetail: parseData,\n\t        searchingInfo: ''\n\t      });\n\t      console.log(\"间隔为\");\n\t      console.log(that.data.feedDetail.stop_interval);\n\t    });\n\t  },\n\t})\n```\n\n+ 修改index.json,定义一些公共变量，例如\n``` json\n\t{\n\t  \"backgroundTextStyle\": \"dark\",\n\t  \"window\": {\n\t    \"enablePullDownRefresh\": true\n\t  }\n\t \n\t}\n```\n\n+ 修改utils.js定义查询公交路线和实时到站信息的函数\n``` js\n\t//省略掉部分代码。。。\n\t//获取实时到站信息\n\tfunction getActualData(router_name, stop_id, direction) {\n\t  console.log(\"开始执行utils中的getData(stop_id)\");\n\t  return new Promise(function (resolve, reject) {\n\t    wx.request({\n\t      url: 'https://bus.xiajunyi.com/bus/' + router_name + '路/stop/' + stop_id + '?direction=' + direction,\n\t      data: {},\n\t      header: {\n\t        'Content-Type': 'application/json'\n\t      },\n\t      success: function (res) {\n\t        console.log(\"success\");\n\t        console.log(\"我收到了返回的数据\");\n\t        console.log(res.data);\n\t        resolve(res);\n\t      },\n\t      fail: function (res) {\n\t        reject(res);\n\t        console.log(\"failed\");\n\t      }\n\t    })\n\t  })\n\t}\n\t\n\tmodule.exports.getData = getData;\n\tmodule.exports.getActualData = getActualData;\n```\n\n### 审核发布\n开发完成后，需要发布到腾讯的微信小程序系统中，并获得通过才能上线。\n整个发布过程分为:\n>开发提交（开发版）-->审核通过（审核版）-->提交上线（上线版）\n\n第一次审核通过可能需要几天时间，后面更新版本的审核基本上当天就能审核了，待上线发布后，大概10分钟左右就可以在微信app的小程序页面搜索到了。\n\n\n# 总结\n后端的发布，给我的感觉是restful型api的便捷性；前端微信小程序的开发，给我的印象是，如果api文档里了解到了整体架构，然后有相关的html、css、js基础，即可快速上手。虽然我的这个程序很low，但总归完整的完成了整个过程，这里暂时告一段落，后面有时间再深入研究微信小程序，准备加上定时提醒，通知到用户登等功能。\n\n最后放上小程序的二维码，可以扫一扫哦：\n![img](/img/xjy/p50004.png)<br/>\n","source":"_posts/p50.md","raw":"---\ntitle: 公交查询微信小程序的实现\nid: 412\ncategories:\n  - 编程语言\ndate: 2018/9/12 9:36:09     \ntags: [编程, 运维, 微信, 小程序]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p50000.png)<br/>\n\n# 前言\n本人初识微信小程序，是个实实在在的小白，经过简单的了解和参考github上的源码，最终将简单的公交查询小程序通过了腾讯的审核，成功上线。本文主要偏重于具体实现过程的介绍，自己写的部分代码并没有太多含金量，仅为给和我一样的小白们提供一个小程序开发到发布的参考。\n<!--more-->\n\n# 背景\n最开始想开发这个小程序的目的就是想方面自己每天走20分钟去坐公交时方便查询实时到站信息，虽然上海发布这类公共号已有相关功能，但是需要经过层层点击才能进入，我想做的是把我默认的线路放到首页直接展示。\n\n# 简介\n该程序和其他小程序一样，构成分为前端和后端两个部分，前端是在腾讯提供的微信小程序工具上开发完成，参考了github上的小程序源码[《RebeccaHanjw/weapp-wechat-zhihu》](https://github.com/RebeccaHanjw/weapp-wechat-zhihu)，后端是在github上找到的python源码[《ark930/shanghai-bus》](https://github.com/ark930/shanghai-bus)。\n\n# 开发\n## 开发环境及工具\n\n### 前端\n+ 操作系统：windows（我的笔记本电脑）\n+ 开发工具：微信web开发者工具\n+ 运行工具：微信小程序官方\n\n### 后端\n\n+ 操作系统：centos（我的远程vps）\n+ 开发工具：略（这里是用的别人的源码）\n+ 运行工具：python3+flask\n+ 其他工具：nginx（负责域名到本地ip后的解析）\n\n### 域名\n+ 域名商：阿里云\n+ 域名https代理：cloudflare\n\n## 后端相关\n> 现在后端服务被我组装成了docker镜像，如果省事也可以直接运行我发布的docker镜像[《xiajunyi/smallbus》](> 现在后端服务被我组装成了docker镜像，可以直接运行docker镜像)\n\n### 安装python3及flask\n> 这里的flask是为python提供的web框架\n\n+ 安装python3 \n``` shell\nyum install python3\n```\n\n+ 安装flask，由于python3默认安装没有flask库，需要利用pip3安装\n``` shell\npip3 install flask\n```\n\n### 配置及运行python源码\n+ 从[《ark930/shanghai-bus》](https://github.com/ark930/shanghai-bus)下载源码到vps的目录，如果安装过git,可以用如下命令\n``` shell\ngit clone https://github.com/ark930/shanghai-bus.git\n```\n\n+ 在源代码router.py文件中加入启动配置，如端口，是否开启调试等 \n``` python\nif __name__ == '__main__':\n    app.config['JSON_AS_ASCII'] = False\n    app.run(host='127.0.0.1', port=8080, debug=False)\n```\n\n+  运行\n``` shell\npython3 router.py\n```\n\n### 新增域名解析配置\n+ nginx配置中增加域名bus.xiajunyi.com的解析\n```xml\nserver {\n    listen       80;\n    server_name  bus.xiajunyi.com;\n    resolver 8.8.8.8;\n    location / {\n             proxy_pass  $scheme://127.0.0.1:8080;\n             proxy_redirect $scheme://127.0.0.1:8080 $scheme://$host:80;\n             client_max_body_size 10m;\n             client_body_buffer_size 128k;\n             proxy_connect_timeout 90;\n             proxy_read_timeout 90;\n             proxy_buffer_size 4k;\n             proxy_buffers 6 128k;\n             proxy_busy_buffers_size 256k;\n             proxy_temp_file_write_size 256k;\n        }\n}\n```\n\n+  重启nginx生效 \n``` shell\nservice nginx restart\n```\n\n+ 登录cloudflare，增加bus.xiajunyi.com到VPS上ip的解析\n>在此之前需要登录购买域名的阿里云，将其中的域名解析DNS的地址改为cloudflare提供的两个DNS，这样就相当于cloudflare代理了我的域名解析,它会为我提供免费的ssl证书认证功能，然后将https请求转化为http请求到我的VPS上的ip地址。\n\n![img](/img/xjy/p50001.png)<br/>\n\n### 验证结果\n+ 这时候就可以用postman工具尝试调用，有返回结果就证明后端发布成功了\n![img](/img/xjy/p50002.png)<br/>\n\n## 前端相关\n\n### 注册小程序及安装开发工具\n>这里有个小技巧！因为腾讯规定一个邮箱只能注册一个小程序，如果想注册多个小程序，可以使用QQ邮箱里的“绑定域名邮箱”功能，可以自定义多达200个你自己域名下的邮箱映射至自己的QQ邮箱。这样注册的邮箱居然不会被腾讯识别成同一个，哈哈，是不是感觉很过瘾？\n\n具体注册过程和管理页面的配置，以及api文档，小程序官网介绍的已经很清楚，我就不详细介绍了，[点这里查看相关文档](https://developers.weixin.qq.com/miniprogram/dev/index.html)\n\n\n### 开发步骤\n+ 打开微信web开发者工具，在引导页面会让你导入下载的小程序源码，或者自己新建开发目录（如果是新建项目），然后输入项目的AppId(这个是在腾讯提供的小程序管理网页上获取的)即可进入，下面是进入后的开发界面\n![img](/img/xjy/p50003.png)<br/>\n\n+ 定义或修改index.wxml(类似于html) \n``` xml\n\t<!--index.wxml-->\n\t<scroll-view scroll-y=\"true\" class=\"container\" bindscrolltoupper=\"search_stop_e\" upper-threshold=\"10\" lower-threshold=\"5\" bindscrolltoupper=\"upper-back\" bindscrolltolower=\"lower\" scroll-into-view=\"{{toView}}\" scroll-top=\"{{scrollTop}}\">\n\t  <!--省略一部分太长的代码-->\n\t  <!--明细显示-->\n\t  <block wx:for=\"{{feed}}\" wx:for-index=\"idx\" wx:for-item=\"item\" data-idx=\"{{idx}}\">\n\t    <view class=\"feed-item\" data-detail_id=\"{{item.stop_id}}\" bindtap=\"actualSearchTap\">\n\t      <view class=\"feed-source\">\n\t        <a class=\"\">\n\t          <view class=\"avatar\">\n\t            <image src=\"{{item.feed_source_img}}\"></image>\n\t          </view>\n\t          <text>第{{item.stop_id}}站</text>\n\t        </a>\n\t        <image class=\"item-more\" mode=\"aspectFit\" src=\"../../images/more.png\"></image>\n\t      </view>\n\t      <view class=\"feed-content\">\n\t        <view class=\"question\">\n\t          <a class=\"question-link\">\n\t            <text class = \"stopname\" decode=\"{{true}}\">{{item.stop_name}}&nbsp; &nbsp; </text>\n\t          </a>\n\t          <!--实时信息，只有在点击的时候才会显示-->\n\t          <view class=\"stopDetail\">\n\t            <block wx:if=\"{{item.stop_id==search_stop_detail_touch+'.'}}\">\n\t              <text decode=\"{{true}}\">{{searchingInfo}}</text>\n\t            </block>\n\t            <block wx:if=\"{{item.stop_id==search_stop_detail+'.'}}\">\n\t              <block wx:if=\"{{feedDetail.stop_interval==''}}\">\n\t                <text decode=\"{{true}}\">\\n还没有发车</text>\n\t              </block>\n\t              <block wx:if=\"{{feedDetail.stop_interval!=''}}\">\n\t                <text decode=\"{{true}}\">\\n还有：{{feedDetail.stop_interval}} 站&nbsp; &nbsp; </text>\n\t                <text decode=\"{{true}}\">时间：{{feedDetail.time}} 分钟&nbsp; &nbsp; </text>\n\t                <text decode=\"{{true}}\">距离：{{feedDetail.distance}} 米&nbsp; &nbsp; </text>\n\t              </block>\n\t            </block>\n\t          </view>\n\t        </view>\n\t      </view>\n\t    </view>\n\t  </block>\n\t</scroll-view>\n```\n\n+ 定义或修改index.wxss(类似于css样式)，例如\n``` java\n\t/**index.wxss**/\n\t\n\t.container{\n\t  height: 1500rpx;\n\t}\n\t.container .stopname {\n\t  font-size: 35rpx;\n\t  \n\t}\n\t.container .search{\n\t  width: 735rpx;\n\t  height: 65rpx;\n\t  padding: 12.5rpx 0 12.5rpx 15rpx;\n\t  background: #2A8CE5;\n\t}\n\t.container .search-left{\n\t  flex: 8;\n\t  background: #4EA3E7;\n\t  text-align: left;\n\t}\n```\n\n+ 定义或修改index.js(类似于javascript),定义触发的事件函数，例如\n``` js\n\t//index.js\n\t\n\tvar util = require('../../utils/util.js')\n\tvar app = getApp()\n\tvar router_name\n\tPage({\n\t  data: {\n\t    feed: [1],\n\t    feedDetail: [1],\n\t    feed_length: 0,\n\t    router_name: 993,\n\t  },\n\t\n\t//省略掉部分代码。。。\n\t\n\t  //获取实时的到站信息\n\t  getActualData: function (actualStop) {\n\t    console.log(\"现在在执行index里的getData()方法1?\");\n\t    console.log(this.data.search_stop_detail);\n\t    console.log(this.data.feed);\n\t    console.log(\"正在载入实时信息\");\n\t    this.setData({\n\t      searchingInfo: '正在拼命加载实时信息  ~~~'\n\t    });\n\t    var that = this;\n\t    util.getActualData(this.data.router_name, actualStop, this.data.direction).then(function (res) {\n\t      //请求成功的操作\n\t      console.log(\"详细请求现在是同步返回的吗？\");\n\t      console.log(res.data);\n\t      console.log(\"详细现在请求的站点编号是\" + actualStop);\n\t      var parseData = res.data;\n\t      parseData.time = parseInt(parseData.time / 60);\n\t      that.setData({\n\t        search_stop_detail: actualStop,\n\t        feedDetail: parseData,\n\t        searchingInfo: ''\n\t      });\n\t      console.log(\"间隔为\");\n\t      console.log(that.data.feedDetail.stop_interval);\n\t    });\n\t  },\n\t})\n```\n\n+ 修改index.json,定义一些公共变量，例如\n``` json\n\t{\n\t  \"backgroundTextStyle\": \"dark\",\n\t  \"window\": {\n\t    \"enablePullDownRefresh\": true\n\t  }\n\t \n\t}\n```\n\n+ 修改utils.js定义查询公交路线和实时到站信息的函数\n``` js\n\t//省略掉部分代码。。。\n\t//获取实时到站信息\n\tfunction getActualData(router_name, stop_id, direction) {\n\t  console.log(\"开始执行utils中的getData(stop_id)\");\n\t  return new Promise(function (resolve, reject) {\n\t    wx.request({\n\t      url: 'https://bus.xiajunyi.com/bus/' + router_name + '路/stop/' + stop_id + '?direction=' + direction,\n\t      data: {},\n\t      header: {\n\t        'Content-Type': 'application/json'\n\t      },\n\t      success: function (res) {\n\t        console.log(\"success\");\n\t        console.log(\"我收到了返回的数据\");\n\t        console.log(res.data);\n\t        resolve(res);\n\t      },\n\t      fail: function (res) {\n\t        reject(res);\n\t        console.log(\"failed\");\n\t      }\n\t    })\n\t  })\n\t}\n\t\n\tmodule.exports.getData = getData;\n\tmodule.exports.getActualData = getActualData;\n```\n\n### 审核发布\n开发完成后，需要发布到腾讯的微信小程序系统中，并获得通过才能上线。\n整个发布过程分为:\n>开发提交（开发版）-->审核通过（审核版）-->提交上线（上线版）\n\n第一次审核通过可能需要几天时间，后面更新版本的审核基本上当天就能审核了，待上线发布后，大概10分钟左右就可以在微信app的小程序页面搜索到了。\n\n\n# 总结\n后端的发布，给我的感觉是restful型api的便捷性；前端微信小程序的开发，给我的印象是，如果api文档里了解到了整体架构，然后有相关的html、css、js基础，即可快速上手。虽然我的这个程序很low，但总归完整的完成了整个过程，这里暂时告一段落，后面有时间再深入研究微信小程序，准备加上定时提醒，通知到用户登等功能。\n\n最后放上小程序的二维码，可以扫一扫哦：\n![img](/img/xjy/p50004.png)<br/>\n","slug":"p50","published":1,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jq500cru8ve4evj03ss","content":"<p><img src=\"/img/xjy/p50000.png\" alt=\"img\"><br></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本人初识微信小程序，是个实实在在的小白，经过简单的了解和参考github上的源码，最终将简单的公交查询小程序通过了腾讯的审核，成功上线。本文主要偏重于具体实现过程的介绍，自己写的部分代码并没有太多含金量，仅为给和我一样的小白们提供一个小程序开发到发布的参考。<br><a id=\"more\"></a></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最开始想开发这个小程序的目的就是想方面自己每天走20分钟去坐公交时方便查询实时到站信息，虽然上海发布这类公共号已有相关功能，但是需要经过层层点击才能进入，我想做的是把我默认的线路放到首页直接展示。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>该程序和其他小程序一样，构成分为前端和后端两个部分，前端是在腾讯提供的微信小程序工具上开发完成，参考了github上的小程序源码<a href=\"https://github.com/RebeccaHanjw/weapp-wechat-zhihu\" target=\"_blank\" rel=\"noopener\">《RebeccaHanjw/weapp-wechat-zhihu》</a>，后端是在github上找到的python源码<a href=\"https://github.com/ark930/shanghai-bus\" target=\"_blank\" rel=\"noopener\">《ark930/shanghai-bus》</a>。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"开发环境及工具\"><a href=\"#开发环境及工具\" class=\"headerlink\" title=\"开发环境及工具\"></a>开发环境及工具</h2><h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>操作系统：windows（我的笔记本电脑）</li>\n<li>开发工具：微信web开发者工具</li>\n<li>运行工具：微信小程序官方</li>\n</ul>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><ul>\n<li>操作系统：centos（我的远程vps）</li>\n<li>开发工具：略（这里是用的别人的源码）</li>\n<li>运行工具：python3+flask</li>\n<li>其他工具：nginx（负责域名到本地ip后的解析）</li>\n</ul>\n<h3 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h3><ul>\n<li>域名商：阿里云</li>\n<li>域名https代理：cloudflare</li>\n</ul>\n<h2 id=\"后端相关\"><a href=\"#后端相关\" class=\"headerlink\" title=\"后端相关\"></a>后端相关</h2><blockquote>\n<p>现在后端服务被我组装成了docker镜像，如果省事也可以直接运行我发布的docker镜像<a href=\"&gt; 现在后端服务被我组装成了docker镜像，可以直接运行docker镜像\">《xiajunyi/smallbus》</a></p>\n</blockquote>\n<h3 id=\"安装python3及flask\"><a href=\"#安装python3及flask\" class=\"headerlink\" title=\"安装python3及flask\"></a>安装python3及flask</h3><blockquote>\n<p>这里的flask是为python提供的web框架</p>\n</blockquote>\n<ul>\n<li><p>安装python3 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装flask，由于python3默认安装没有flask库，需要利用pip3安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install flask</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"配置及运行python源码\"><a href=\"#配置及运行python源码\" class=\"headerlink\" title=\"配置及运行python源码\"></a>配置及运行python源码</h3><ul>\n<li><p>从<a href=\"https://github.com/ark930/shanghai-bus\" target=\"_blank\" rel=\"noopener\">《ark930/shanghai-bus》</a>下载源码到vps的目录，如果安装过git,可以用如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ark930/shanghai-bus.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在源代码router.py文件中加入启动配置，如端口，是否开启调试等 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.config[<span class=\"string\">'JSON_AS_ASCII'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">8080</span>, debug=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 router.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"新增域名解析配置\"><a href=\"#新增域名解析配置\" class=\"headerlink\" title=\"新增域名解析配置\"></a>新增域名解析配置</h3><ul>\n<li><p>nginx配置中增加域名bus.xiajunyi.com的解析</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  bus.xiajunyi.com;</span><br><span class=\"line\">    resolver 8.8.8.8;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://127.0.0.1:8080;</span><br><span class=\"line\">             proxy_redirect $scheme://127.0.0.1:8080 $scheme://$host:80;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启nginx生效 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录cloudflare，增加bus.xiajunyi.com到VPS上ip的解析</p>\n<blockquote>\n<p>在此之前需要登录购买域名的阿里云，将其中的域名解析DNS的地址改为cloudflare提供的两个DNS，这样就相当于cloudflare代理了我的域名解析,它会为我提供免费的ssl证书认证功能，然后将https请求转化为http请求到我的VPS上的ip地址。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/img/xjy/p50001.png\" alt=\"img\"><br></p>\n<h3 id=\"验证结果\"><a href=\"#验证结果\" class=\"headerlink\" title=\"验证结果\"></a>验证结果</h3><ul>\n<li>这时候就可以用postman工具尝试调用，有返回结果就证明后端发布成功了<br><img src=\"/img/xjy/p50002.png\" alt=\"img\"><br></li>\n</ul>\n<h2 id=\"前端相关\"><a href=\"#前端相关\" class=\"headerlink\" title=\"前端相关\"></a>前端相关</h2><h3 id=\"注册小程序及安装开发工具\"><a href=\"#注册小程序及安装开发工具\" class=\"headerlink\" title=\"注册小程序及安装开发工具\"></a>注册小程序及安装开发工具</h3><blockquote>\n<p>这里有个小技巧！因为腾讯规定一个邮箱只能注册一个小程序，如果想注册多个小程序，可以使用QQ邮箱里的“绑定域名邮箱”功能，可以自定义多达200个你自己域名下的邮箱映射至自己的QQ邮箱。这样注册的邮箱居然不会被腾讯识别成同一个，哈哈，是不是感觉很过瘾？</p>\n</blockquote>\n<p>具体注册过程和管理页面的配置，以及api文档，小程序官网介绍的已经很清楚，我就不详细介绍了，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/index.html\" target=\"_blank\" rel=\"noopener\">点这里查看相关文档</a></p>\n<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><ul>\n<li><p>打开微信web开发者工具，在引导页面会让你导入下载的小程序源码，或者自己新建开发目录（如果是新建项目），然后输入项目的AppId(这个是在腾讯提供的小程序管理网页上获取的)即可进入，下面是进入后的开发界面<br><img src=\"/img/xjy/p50003.png\" alt=\"img\"><br></p>\n</li>\n<li><p>定义或修改index.wxml(类似于html) </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">scroll-y</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">bindscrolltoupper</span>=<span class=\"string\">\"search_stop_e\"</span> <span class=\"attr\">upper-threshold</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">lower-threshold</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">bindscrolltoupper</span>=<span class=\"string\">\"upper-back\"</span> <span class=\"attr\">bindscrolltolower</span>=<span class=\"string\">\"lower\"</span> <span class=\"attr\">scroll-into-view</span>=<span class=\"string\">\"&#123;&#123;toView&#125;&#125;\"</span> <span class=\"attr\">scroll-top</span>=<span class=\"string\">\"&#123;&#123;scrollTop&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--省略一部分太长的代码--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--明细显示--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;feed&#125;&#125;\"</span> <span class=\"attr\">wx:for-index</span>=<span class=\"string\">\"idx\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;idx&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feed-item\"</span> <span class=\"attr\">data-detail_id</span>=<span class=\"string\">\"&#123;&#123;item.stop_id&#125;&#125;\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"actualSearchTap\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feed-source\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"avatar\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.feed_source_img&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span>第&#123;&#123;item.stop_id&#125;&#125;站<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-more\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"aspectFit\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../images/more.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feed-content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"question\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"question-link\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span> = <span class=\"string\">\"stopname\"</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>&#123;&#123;item.stop_name&#125;&#125;&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--实时信息，只有在点击的时候才会显示--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"stopDetail\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;item.stop_id==search_stop_detail_touch+'.'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>&#123;&#123;searchingInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;item.stop_id==search_stop_detail+'.'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;feedDetail.stop_interval==''&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>\\n还没有发车<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;feedDetail.stop_interval!=''&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>\\n还有：&#123;&#123;feedDetail.stop_interval&#125;&#125; 站&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>时间：&#123;&#123;feedDetail.time&#125;&#125; 分钟&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>距离：&#123;&#123;feedDetail.distance&#125;&#125; 米&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义或修改index.wxss(类似于css样式)，例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"></span><br><span class=\"line\">.container&#123;</span><br><span class=\"line\">  height: <span class=\"number\">1500</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .stopname &#123;</span><br><span class=\"line\">  font-size: <span class=\"number\">35</span>rpx;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .search&#123;</span><br><span class=\"line\">  width: <span class=\"number\">735</span>rpx;</span><br><span class=\"line\">  height: <span class=\"number\">65</span>rpx;</span><br><span class=\"line\">  padding: <span class=\"number\">12.5</span>rpx <span class=\"number\">0</span> <span class=\"number\">12.5</span>rpx <span class=\"number\">15</span>rpx;</span><br><span class=\"line\">  background: #2A8CE5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .search-left&#123;</span><br><span class=\"line\">  flex: <span class=\"number\">8</span>;</span><br><span class=\"line\">  background: #4EA3E7;</span><br><span class=\"line\">  text-align: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义或修改index.js(类似于javascript),定义触发的事件函数，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'../../utils/util.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = getApp()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router_name</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    feed: [<span class=\"number\">1</span>],</span><br><span class=\"line\">    feedDetail: [<span class=\"number\">1</span>],</span><br><span class=\"line\">    feed_length: <span class=\"number\">0</span>,</span><br><span class=\"line\">    router_name: <span class=\"number\">993</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//省略掉部分代码。。。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取实时的到站信息</span></span><br><span class=\"line\">  getActualData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">actualStop</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"现在在执行index里的getData()方法1?\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.data.search_stop_detail);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.data.feed);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"正在载入实时信息\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">      searchingInfo: <span class=\"string\">'正在拼命加载实时信息  ~~~'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    util.getActualData(<span class=\"keyword\">this</span>.data.router_name, actualStop, <span class=\"keyword\">this</span>.data.direction).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//请求成功的操作</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"详细请求现在是同步返回的吗？\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"详细现在请求的站点编号是\"</span> + actualStop);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> parseData = res.data;</span><br><span class=\"line\">      parseData.time = <span class=\"built_in\">parseInt</span>(parseData.time / <span class=\"number\">60</span>);</span><br><span class=\"line\">      that.setData(&#123;</span><br><span class=\"line\">        search_stop_detail: actualStop,</span><br><span class=\"line\">        feedDetail: parseData,</span><br><span class=\"line\">        searchingInfo: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"间隔为\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(that.data.feedDetail.stop_interval);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改index.json,定义一些公共变量，例如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"backgroundTextStyle\"</span>: <span class=\"string\">\"dark\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"window\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"enablePullDownRefresh\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改utils.js定义查询公交路线和实时到站信息的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略掉部分代码。。。</span></span><br><span class=\"line\"><span class=\"comment\">//获取实时到站信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getActualData</span>(<span class=\"params\">router_name, stop_id, direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始执行utils中的getData(stop_id)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    wx.request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'https://bus.xiajunyi.com/bus/'</span> + router_name + <span class=\"string\">'路/stop/'</span> + stop_id + <span class=\"string\">'?direction='</span> + direction,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      header: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我收到了返回的数据\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        reject(res);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"failed\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.getData = getData;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.getActualData = getActualData;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"审核发布\"><a href=\"#审核发布\" class=\"headerlink\" title=\"审核发布\"></a>审核发布</h3><p>开发完成后，需要发布到腾讯的微信小程序系统中，并获得通过才能上线。<br>整个发布过程分为:</p>\n<blockquote>\n<p>开发提交（开发版）–&gt;审核通过（审核版）–&gt;提交上线（上线版）</p>\n</blockquote>\n<p>第一次审核通过可能需要几天时间，后面更新版本的审核基本上当天就能审核了，待上线发布后，大概10分钟左右就可以在微信app的小程序页面搜索到了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>后端的发布，给我的感觉是restful型api的便捷性；前端微信小程序的开发，给我的印象是，如果api文档里了解到了整体架构，然后有相关的html、css、js基础，即可快速上手。虽然我的这个程序很low，但总归完整的完成了整个过程，这里暂时告一段落，后面有时间再深入研究微信小程序，准备加上定时提醒，通知到用户登等功能。</p>\n<p>最后放上小程序的二维码，可以扫一扫哦：<br><img src=\"/img/xjy/p50004.png\" alt=\"img\"><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p50000.png\" alt=\"img\"><br></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本人初识微信小程序，是个实实在在的小白，经过简单的了解和参考github上的源码，最终将简单的公交查询小程序通过了腾讯的审核，成功上线。本文主要偏重于具体实现过程的介绍，自己写的部分代码并没有太多含金量，仅为给和我一样的小白们提供一个小程序开发到发布的参考。<br>","more":"</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最开始想开发这个小程序的目的就是想方面自己每天走20分钟去坐公交时方便查询实时到站信息，虽然上海发布这类公共号已有相关功能，但是需要经过层层点击才能进入，我想做的是把我默认的线路放到首页直接展示。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>该程序和其他小程序一样，构成分为前端和后端两个部分，前端是在腾讯提供的微信小程序工具上开发完成，参考了github上的小程序源码<a href=\"https://github.com/RebeccaHanjw/weapp-wechat-zhihu\" target=\"_blank\" rel=\"noopener\">《RebeccaHanjw/weapp-wechat-zhihu》</a>，后端是在github上找到的python源码<a href=\"https://github.com/ark930/shanghai-bus\" target=\"_blank\" rel=\"noopener\">《ark930/shanghai-bus》</a>。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"开发环境及工具\"><a href=\"#开发环境及工具\" class=\"headerlink\" title=\"开发环境及工具\"></a>开发环境及工具</h2><h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><ul>\n<li>操作系统：windows（我的笔记本电脑）</li>\n<li>开发工具：微信web开发者工具</li>\n<li>运行工具：微信小程序官方</li>\n</ul>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><ul>\n<li>操作系统：centos（我的远程vps）</li>\n<li>开发工具：略（这里是用的别人的源码）</li>\n<li>运行工具：python3+flask</li>\n<li>其他工具：nginx（负责域名到本地ip后的解析）</li>\n</ul>\n<h3 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h3><ul>\n<li>域名商：阿里云</li>\n<li>域名https代理：cloudflare</li>\n</ul>\n<h2 id=\"后端相关\"><a href=\"#后端相关\" class=\"headerlink\" title=\"后端相关\"></a>后端相关</h2><blockquote>\n<p>现在后端服务被我组装成了docker镜像，如果省事也可以直接运行我发布的docker镜像<a href=\"&gt; 现在后端服务被我组装成了docker镜像，可以直接运行docker镜像\">《xiajunyi/smallbus》</a></p>\n</blockquote>\n<h3 id=\"安装python3及flask\"><a href=\"#安装python3及flask\" class=\"headerlink\" title=\"安装python3及flask\"></a>安装python3及flask</h3><blockquote>\n<p>这里的flask是为python提供的web框架</p>\n</blockquote>\n<ul>\n<li><p>安装python3 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python3</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装flask，由于python3默认安装没有flask库，需要利用pip3安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install flask</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"配置及运行python源码\"><a href=\"#配置及运行python源码\" class=\"headerlink\" title=\"配置及运行python源码\"></a>配置及运行python源码</h3><ul>\n<li><p>从<a href=\"https://github.com/ark930/shanghai-bus\" target=\"_blank\" rel=\"noopener\">《ark930/shanghai-bus》</a>下载源码到vps的目录，如果安装过git,可以用如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ark930/shanghai-bus.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在源代码router.py文件中加入启动配置，如端口，是否开启调试等 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.config[<span class=\"string\">'JSON_AS_ASCII'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">'127.0.0.1'</span>, port=<span class=\"number\">8080</span>, debug=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 router.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"新增域名解析配置\"><a href=\"#新增域名解析配置\" class=\"headerlink\" title=\"新增域名解析配置\"></a>新增域名解析配置</h3><ul>\n<li><p>nginx配置中增加域名bus.xiajunyi.com的解析</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  bus.xiajunyi.com;</span><br><span class=\"line\">    resolver 8.8.8.8;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">             proxy_pass  $scheme://127.0.0.1:8080;</span><br><span class=\"line\">             proxy_redirect $scheme://127.0.0.1:8080 $scheme://$host:80;</span><br><span class=\"line\">             client_max_body_size 10m;</span><br><span class=\"line\">             client_body_buffer_size 128k;</span><br><span class=\"line\">             proxy_connect_timeout 90;</span><br><span class=\"line\">             proxy_read_timeout 90;</span><br><span class=\"line\">             proxy_buffer_size 4k;</span><br><span class=\"line\">             proxy_buffers 6 128k;</span><br><span class=\"line\">             proxy_busy_buffers_size 256k;</span><br><span class=\"line\">             proxy_temp_file_write_size 256k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启nginx生效 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录cloudflare，增加bus.xiajunyi.com到VPS上ip的解析</p>\n<blockquote>\n<p>在此之前需要登录购买域名的阿里云，将其中的域名解析DNS的地址改为cloudflare提供的两个DNS，这样就相当于cloudflare代理了我的域名解析,它会为我提供免费的ssl证书认证功能，然后将https请求转化为http请求到我的VPS上的ip地址。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/img/xjy/p50001.png\" alt=\"img\"><br></p>\n<h3 id=\"验证结果\"><a href=\"#验证结果\" class=\"headerlink\" title=\"验证结果\"></a>验证结果</h3><ul>\n<li>这时候就可以用postman工具尝试调用，有返回结果就证明后端发布成功了<br><img src=\"/img/xjy/p50002.png\" alt=\"img\"><br></li>\n</ul>\n<h2 id=\"前端相关\"><a href=\"#前端相关\" class=\"headerlink\" title=\"前端相关\"></a>前端相关</h2><h3 id=\"注册小程序及安装开发工具\"><a href=\"#注册小程序及安装开发工具\" class=\"headerlink\" title=\"注册小程序及安装开发工具\"></a>注册小程序及安装开发工具</h3><blockquote>\n<p>这里有个小技巧！因为腾讯规定一个邮箱只能注册一个小程序，如果想注册多个小程序，可以使用QQ邮箱里的“绑定域名邮箱”功能，可以自定义多达200个你自己域名下的邮箱映射至自己的QQ邮箱。这样注册的邮箱居然不会被腾讯识别成同一个，哈哈，是不是感觉很过瘾？</p>\n</blockquote>\n<p>具体注册过程和管理页面的配置，以及api文档，小程序官网介绍的已经很清楚，我就不详细介绍了，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/index.html\" target=\"_blank\" rel=\"noopener\">点这里查看相关文档</a></p>\n<h3 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h3><ul>\n<li><p>打开微信web开发者工具，在引导页面会让你导入下载的小程序源码，或者自己新建开发目录（如果是新建项目），然后输入项目的AppId(这个是在腾讯提供的小程序管理网页上获取的)即可进入，下面是进入后的开发界面<br><img src=\"/img/xjy/p50003.png\" alt=\"img\"><br></p>\n</li>\n<li><p>定义或修改index.wxml(类似于html) </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.wxml--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">scroll-y</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span> <span class=\"attr\">bindscrolltoupper</span>=<span class=\"string\">\"search_stop_e\"</span> <span class=\"attr\">upper-threshold</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">lower-threshold</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">bindscrolltoupper</span>=<span class=\"string\">\"upper-back\"</span> <span class=\"attr\">bindscrolltolower</span>=<span class=\"string\">\"lower\"</span> <span class=\"attr\">scroll-into-view</span>=<span class=\"string\">\"&#123;&#123;toView&#125;&#125;\"</span> <span class=\"attr\">scroll-top</span>=<span class=\"string\">\"&#123;&#123;scrollTop&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--省略一部分太长的代码--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--明细显示--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;feed&#125;&#125;\"</span> <span class=\"attr\">wx:for-index</span>=<span class=\"string\">\"idx\"</span> <span class=\"attr\">wx:for-item</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;idx&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feed-item\"</span> <span class=\"attr\">data-detail_id</span>=<span class=\"string\">\"&#123;&#123;item.stop_id&#125;&#125;\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"actualSearchTap\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feed-source\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"avatar\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.feed_source_img&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">text</span>&gt;</span>第&#123;&#123;item.stop_id&#125;&#125;站<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item-more\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"aspectFit\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../images/more.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"feed-content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"question\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"question-link\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span> = <span class=\"string\">\"stopname\"</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>&#123;&#123;item.stop_name&#125;&#125;&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--实时信息，只有在点击的时候才会显示--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"stopDetail\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;item.stop_id==search_stop_detail_touch+'.'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>&#123;&#123;searchingInfo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;item.stop_id==search_stop_detail+'.'&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;feedDetail.stop_interval==''&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>\\n还没有发车<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;feedDetail.stop_interval!=''&#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>\\n还有：&#123;&#123;feedDetail.stop_interval&#125;&#125; 站&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>时间：&#123;&#123;feedDetail.time&#125;&#125; 分钟&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">decode</span>=<span class=\"string\">\"&#123;&#123;true&#125;&#125;\"</span>&gt;</span>距离：&#123;&#123;feedDetail.distance&#125;&#125; 米&amp;nbsp; &amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义或修改index.wxss(类似于css样式)，例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**index.wxss**/</span></span><br><span class=\"line\"></span><br><span class=\"line\">.container&#123;</span><br><span class=\"line\">  height: <span class=\"number\">1500</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .stopname &#123;</span><br><span class=\"line\">  font-size: <span class=\"number\">35</span>rpx;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .search&#123;</span><br><span class=\"line\">  width: <span class=\"number\">735</span>rpx;</span><br><span class=\"line\">  height: <span class=\"number\">65</span>rpx;</span><br><span class=\"line\">  padding: <span class=\"number\">12.5</span>rpx <span class=\"number\">0</span> <span class=\"number\">12.5</span>rpx <span class=\"number\">15</span>rpx;</span><br><span class=\"line\">  background: #2A8CE5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .search-left&#123;</span><br><span class=\"line\">  flex: <span class=\"number\">8</span>;</span><br><span class=\"line\">  background: #4EA3E7;</span><br><span class=\"line\">  text-align: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义或修改index.js(类似于javascript),定义触发的事件函数，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'../../utils/util.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = getApp()</span><br><span class=\"line\"><span class=\"keyword\">var</span> router_name</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    feed: [<span class=\"number\">1</span>],</span><br><span class=\"line\">    feedDetail: [<span class=\"number\">1</span>],</span><br><span class=\"line\">    feed_length: <span class=\"number\">0</span>,</span><br><span class=\"line\">    router_name: <span class=\"number\">993</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//省略掉部分代码。。。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取实时的到站信息</span></span><br><span class=\"line\">  getActualData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">actualStop</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"现在在执行index里的getData()方法1?\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.data.search_stop_detail);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.data.feed);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"正在载入实时信息\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">      searchingInfo: <span class=\"string\">'正在拼命加载实时信息  ~~~'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    util.getActualData(<span class=\"keyword\">this</span>.data.router_name, actualStop, <span class=\"keyword\">this</span>.data.direction).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//请求成功的操作</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"详细请求现在是同步返回的吗？\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"详细现在请求的站点编号是\"</span> + actualStop);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> parseData = res.data;</span><br><span class=\"line\">      parseData.time = <span class=\"built_in\">parseInt</span>(parseData.time / <span class=\"number\">60</span>);</span><br><span class=\"line\">      that.setData(&#123;</span><br><span class=\"line\">        search_stop_detail: actualStop,</span><br><span class=\"line\">        feedDetail: parseData,</span><br><span class=\"line\">        searchingInfo: <span class=\"string\">''</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"间隔为\"</span>);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(that.data.feedDetail.stop_interval);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改index.json,定义一些公共变量，例如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"backgroundTextStyle\"</span>: <span class=\"string\">\"dark\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"window\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"enablePullDownRefresh\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改utils.js定义查询公交路线和实时到站信息的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略掉部分代码。。。</span></span><br><span class=\"line\"><span class=\"comment\">//获取实时到站信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getActualData</span>(<span class=\"params\">router_name, stop_id, direction</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始执行utils中的getData(stop_id)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    wx.request(&#123;</span><br><span class=\"line\">      url: <span class=\"string\">'https://bus.xiajunyi.com/bus/'</span> + router_name + <span class=\"string\">'路/stop/'</span> + stop_id + <span class=\"string\">'?direction='</span> + direction,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      header: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我收到了返回的数据\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(res.data);</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        reject(res);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"failed\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.getData = getData;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.getActualData = getActualData;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"审核发布\"><a href=\"#审核发布\" class=\"headerlink\" title=\"审核发布\"></a>审核发布</h3><p>开发完成后，需要发布到腾讯的微信小程序系统中，并获得通过才能上线。<br>整个发布过程分为:</p>\n<blockquote>\n<p>开发提交（开发版）–&gt;审核通过（审核版）–&gt;提交上线（上线版）</p>\n</blockquote>\n<p>第一次审核通过可能需要几天时间，后面更新版本的审核基本上当天就能审核了，待上线发布后，大概10分钟左右就可以在微信app的小程序页面搜索到了。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>后端的发布，给我的感觉是restful型api的便捷性；前端微信小程序的开发，给我的印象是，如果api文档里了解到了整体架构，然后有相关的html、css、js基础，即可快速上手。虽然我的这个程序很low，但总归完整的完成了整个过程，这里暂时告一段落，后面有时间再深入研究微信小程序，准备加上定时提醒，通知到用户登等功能。</p>\n<p>最后放上小程序的二维码，可以扫一扫哦：<br><img src=\"/img/xjy/p50004.png\" alt=\"img\"><br></p>"},{"title":"标签","date":"2018-03-18T12:00:14.000Z","type":"tags","_content":"","source":"_drafts/tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-18 20:00:14\ntype: \"tags\"\n---\n","slug":"tags/index","published":0,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jr700d4u8vegpflzrfb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2018-03-18T11:57:37.000Z","type":"categories","_content":"","source":"_drafts/categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-03-18 19:57:37\ntype: \"categories\"\n---\n","slug":"categories/index","published":0,"updated":"2019-08-21T11:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjznq3jr900d5u8veii1ramuq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"ArcMap使用记录-批量导入经纬度及绘制坐标点导出","id":"679","date":"2019-10-20T12:58:55.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p61000.png)<br/>\n\n## 简介\n\n在工作中遇到了将实际采集的GPS经纬度数据批量导入界面中，然后根据参考界面手动绘制多边形区域，再将多边形区域端点经纬度数据导出的需求。在网上找了到了ArcMap的方法，虽然步骤稍微复杂了一些，总规是可以实现功能，在这里记录一下。\n<!--more-->\n\n## 环境\n\n+ Windows操作系统\n+ ArcMap软件\n\n## AcrMap简介\nArcMap主要用于绘制自定义地图，功能很强大，当然也是收费的。网上有破解版的下载和安装教程，可自行百度。我这里用的是ArcGis Desktop10.5版本。更多功能教程可参考：[Learn ArcGIS 课程库](https://learn.arcgis.com/zh-cn/projects/get-started-with-arcmap/lessons/explore-the-study-area.htm)。\n\n## 使用记录\n\n### step1\n新建空白地图\n![img](/img/xjy/p61001.png)<br/>\n### step2\n选择添加数据\n![img](/img/xjy/p61002.png)<br/>\n### step3\n选择excel文件并选择哪一个sheet添加\n![img](/img/xjy/p61003.png)<br/>\n### step4\n选择显示XY坐标\n![img](/img/xjy/p61004.png)<br/>\n### step5\n选择经纬度对应的excel中的列,然后点编辑按钮。\n![img](/img/xjy/p61005.png)<br/>\n### step6\n选择坐标系\n![img](/img/xjy/p61006.png)<br/>\n### step7\n一路确认后展示如下：\n![img](/img/xjy/p61007.png)<br/>\n### step8\n打开目录中连接到自己新建的一个文件夹，然后按如下步骤新建一个shapefile文件\n![img](/img/xjy/p61008.png)<br/>\n### step9\n新建“面”类型的shapeFile,一定记得设置坐标系\n![img](/img/xjy/p61009.png)<br/>\n### step10\n右键新生成的面编辑要素选择开始编辑\n![img](/img/xjy/p61010.png)<br/>\n### step11\n选择要素，开始编辑多边形\n![img](/img/xjy/p61011.png)<br/>\n### step12\n编辑好后双击生成多边形\n![img](/img/xjy/p61012.png)<br/>\n### step13\n利用ArcToolBox，依次展开选择“数据管理工具”->\"要素\"->\"要素折点转点\"\n![img](/img/xjy/p61013.png)<br/>\n### step14\n选择输入要素为我们画的那个图层\n![img](/img/xjy/p61014.png)<br/>\n### step15\n对新生成的折点转点的图层右键选择打开属性表\n![img](/img/xjy/p61015.png)<br/>\n### step16\n选择添加字段\n![img](/img/xjy/p61016.png)<br/>\n### step17\n添加x,y两个属性\n![img](/img/xjy/p61017.png)<br/>\n### step18\n分别选择x,y的列，右键选择几何计算计算x,y列的值\n![img](/img/xjy/p61018.png)<br/>\n### step19\n记得选择列对应的坐标属性\n![img](/img/xjy/p61019.png)<br/>\n### step20\n生成结果后，点导出，生成dbf后缀的文件\n![img](/img/xjy/p61020.png)<br/>\n### step21\n用excel打开dbf文件即可获取到多边形的顶点经纬度。\n\n## 结束语\n没什么好说的，就仅仅记录一下，以便后续会用到，方便查找。\n","source":"_posts/p61.md","raw":"---\ntitle: ArcMap使用记录-批量导入经纬度及绘制坐标点导出\nid: 679\ncategories:\n  - 运维技术\ndate: 2019/10/20 20:58:55        \ntags: [ArcMap]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p61000.png)<br/>\n\n## 简介\n\n在工作中遇到了将实际采集的GPS经纬度数据批量导入界面中，然后根据参考界面手动绘制多边形区域，再将多边形区域端点经纬度数据导出的需求。在网上找了到了ArcMap的方法，虽然步骤稍微复杂了一些，总规是可以实现功能，在这里记录一下。\n<!--more-->\n\n## 环境\n\n+ Windows操作系统\n+ ArcMap软件\n\n## AcrMap简介\nArcMap主要用于绘制自定义地图，功能很强大，当然也是收费的。网上有破解版的下载和安装教程，可自行百度。我这里用的是ArcGis Desktop10.5版本。更多功能教程可参考：[Learn ArcGIS 课程库](https://learn.arcgis.com/zh-cn/projects/get-started-with-arcmap/lessons/explore-the-study-area.htm)。\n\n## 使用记录\n\n### step1\n新建空白地图\n![img](/img/xjy/p61001.png)<br/>\n### step2\n选择添加数据\n![img](/img/xjy/p61002.png)<br/>\n### step3\n选择excel文件并选择哪一个sheet添加\n![img](/img/xjy/p61003.png)<br/>\n### step4\n选择显示XY坐标\n![img](/img/xjy/p61004.png)<br/>\n### step5\n选择经纬度对应的excel中的列,然后点编辑按钮。\n![img](/img/xjy/p61005.png)<br/>\n### step6\n选择坐标系\n![img](/img/xjy/p61006.png)<br/>\n### step7\n一路确认后展示如下：\n![img](/img/xjy/p61007.png)<br/>\n### step8\n打开目录中连接到自己新建的一个文件夹，然后按如下步骤新建一个shapefile文件\n![img](/img/xjy/p61008.png)<br/>\n### step9\n新建“面”类型的shapeFile,一定记得设置坐标系\n![img](/img/xjy/p61009.png)<br/>\n### step10\n右键新生成的面编辑要素选择开始编辑\n![img](/img/xjy/p61010.png)<br/>\n### step11\n选择要素，开始编辑多边形\n![img](/img/xjy/p61011.png)<br/>\n### step12\n编辑好后双击生成多边形\n![img](/img/xjy/p61012.png)<br/>\n### step13\n利用ArcToolBox，依次展开选择“数据管理工具”->\"要素\"->\"要素折点转点\"\n![img](/img/xjy/p61013.png)<br/>\n### step14\n选择输入要素为我们画的那个图层\n![img](/img/xjy/p61014.png)<br/>\n### step15\n对新生成的折点转点的图层右键选择打开属性表\n![img](/img/xjy/p61015.png)<br/>\n### step16\n选择添加字段\n![img](/img/xjy/p61016.png)<br/>\n### step17\n添加x,y两个属性\n![img](/img/xjy/p61017.png)<br/>\n### step18\n分别选择x,y的列，右键选择几何计算计算x,y列的值\n![img](/img/xjy/p61018.png)<br/>\n### step19\n记得选择列对应的坐标属性\n![img](/img/xjy/p61019.png)<br/>\n### step20\n生成结果后，点导出，生成dbf后缀的文件\n![img](/img/xjy/p61020.png)<br/>\n### step21\n用excel打开dbf文件即可获取到多边形的顶点经纬度。\n\n## 结束语\n没什么好说的，就仅仅记录一下，以便后续会用到，方便查找。\n","slug":"p61","published":1,"updated":"2019-10-20T03:36:07.700Z","_id":"ck1yfrblt0000h0vebqkzc4rf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/img/xjy/p61000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在工作中遇到了将实际采集的GPS经纬度数据批量导入界面中，然后根据参考界面手动绘制多边形区域，再将多边形区域端点经纬度数据导出的需求。在网上找了到了ArcMap的方法，虽然步骤稍微复杂了一些，总规是可以实现功能，在这里记录一下。<br><a id=\"more\"></a></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Windows操作系统</li>\n<li>ArcMap软件</li>\n</ul>\n<h2 id=\"AcrMap简介\"><a href=\"#AcrMap简介\" class=\"headerlink\" title=\"AcrMap简介\"></a>AcrMap简介</h2><p>ArcMap主要用于绘制自定义地图，功能很强大，当然也是收费的。网上有破解版的下载和安装教程，可自行百度。我这里用的是ArcGis Desktop10.5版本。更多功能教程可参考：<a href=\"https://learn.arcgis.com/zh-cn/projects/get-started-with-arcmap/lessons/explore-the-study-area.htm\" target=\"_blank\" rel=\"noopener\">Learn ArcGIS 课程库</a>。</p>\n<h2 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h2><h3 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h3><p>新建空白地图<br><img src=\"/img/xjy/p61001.png\" alt=\"img\"><br></p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h3><p>选择添加数据<br><img src=\"/img/xjy/p61002.png\" alt=\"img\"><br></p>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h3><p>选择excel文件并选择哪一个sheet添加<br><img src=\"/img/xjy/p61003.png\" alt=\"img\"><br></p>\n<h3 id=\"step4\"><a href=\"#step4\" class=\"headerlink\" title=\"step4\"></a>step4</h3><p>选择显示XY坐标<br><img src=\"/img/xjy/p61004.png\" alt=\"img\"><br></p>\n<h3 id=\"step5\"><a href=\"#step5\" class=\"headerlink\" title=\"step5\"></a>step5</h3><p>选择经纬度对应的excel中的列,然后点编辑按钮。<br><img src=\"/img/xjy/p61005.png\" alt=\"img\"><br></p>\n<h3 id=\"step6\"><a href=\"#step6\" class=\"headerlink\" title=\"step6\"></a>step6</h3><p>选择坐标系<br><img src=\"/img/xjy/p61006.png\" alt=\"img\"><br></p>\n<h3 id=\"step7\"><a href=\"#step7\" class=\"headerlink\" title=\"step7\"></a>step7</h3><p>一路确认后展示如下：<br><img src=\"/img/xjy/p61007.png\" alt=\"img\"><br></p>\n<h3 id=\"step8\"><a href=\"#step8\" class=\"headerlink\" title=\"step8\"></a>step8</h3><p>打开目录中连接到自己新建的一个文件夹，然后按如下步骤新建一个shapefile文件<br><img src=\"/img/xjy/p61008.png\" alt=\"img\"><br></p>\n<h3 id=\"step9\"><a href=\"#step9\" class=\"headerlink\" title=\"step9\"></a>step9</h3><p>新建“面”类型的shapeFile,一定记得设置坐标系<br><img src=\"/img/xjy/p61009.png\" alt=\"img\"><br></p>\n<h3 id=\"step10\"><a href=\"#step10\" class=\"headerlink\" title=\"step10\"></a>step10</h3><p>右键新生成的面编辑要素选择开始编辑<br><img src=\"/img/xjy/p61010.png\" alt=\"img\"><br></p>\n<h3 id=\"step11\"><a href=\"#step11\" class=\"headerlink\" title=\"step11\"></a>step11</h3><p>选择要素，开始编辑多边形<br><img src=\"/img/xjy/p61011.png\" alt=\"img\"><br></p>\n<h3 id=\"step12\"><a href=\"#step12\" class=\"headerlink\" title=\"step12\"></a>step12</h3><p>编辑好后双击生成多边形<br><img src=\"/img/xjy/p61012.png\" alt=\"img\"><br></p>\n<h3 id=\"step13\"><a href=\"#step13\" class=\"headerlink\" title=\"step13\"></a>step13</h3><p>利用ArcToolBox，依次展开选择“数据管理工具”-&gt;”要素”-&gt;”要素折点转点”<br><img src=\"/img/xjy/p61013.png\" alt=\"img\"><br></p>\n<h3 id=\"step14\"><a href=\"#step14\" class=\"headerlink\" title=\"step14\"></a>step14</h3><p>选择输入要素为我们画的那个图层<br><img src=\"/img/xjy/p61014.png\" alt=\"img\"><br></p>\n<h3 id=\"step15\"><a href=\"#step15\" class=\"headerlink\" title=\"step15\"></a>step15</h3><p>对新生成的折点转点的图层右键选择打开属性表<br><img src=\"/img/xjy/p61015.png\" alt=\"img\"><br></p>\n<h3 id=\"step16\"><a href=\"#step16\" class=\"headerlink\" title=\"step16\"></a>step16</h3><p>选择添加字段<br><img src=\"/img/xjy/p61016.png\" alt=\"img\"><br></p>\n<h3 id=\"step17\"><a href=\"#step17\" class=\"headerlink\" title=\"step17\"></a>step17</h3><p>添加x,y两个属性<br><img src=\"/img/xjy/p61017.png\" alt=\"img\"><br></p>\n<h3 id=\"step18\"><a href=\"#step18\" class=\"headerlink\" title=\"step18\"></a>step18</h3><p>分别选择x,y的列，右键选择几何计算计算x,y列的值<br><img src=\"/img/xjy/p61018.png\" alt=\"img\"><br></p>\n<h3 id=\"step19\"><a href=\"#step19\" class=\"headerlink\" title=\"step19\"></a>step19</h3><p>记得选择列对应的坐标属性<br><img src=\"/img/xjy/p61019.png\" alt=\"img\"><br></p>\n<h3 id=\"step20\"><a href=\"#step20\" class=\"headerlink\" title=\"step20\"></a>step20</h3><p>生成结果后，点导出，生成dbf后缀的文件<br><img src=\"/img/xjy/p61020.png\" alt=\"img\"><br></p>\n<h3 id=\"step21\"><a href=\"#step21\" class=\"headerlink\" title=\"step21\"></a>step21</h3><p>用excel打开dbf文件即可获取到多边形的顶点经纬度。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>没什么好说的，就仅仅记录一下，以便后续会用到，方便查找。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p61000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在工作中遇到了将实际采集的GPS经纬度数据批量导入界面中，然后根据参考界面手动绘制多边形区域，再将多边形区域端点经纬度数据导出的需求。在网上找了到了ArcMap的方法，虽然步骤稍微复杂了一些，总规是可以实现功能，在这里记录一下。<br>","more":"</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Windows操作系统</li>\n<li>ArcMap软件</li>\n</ul>\n<h2 id=\"AcrMap简介\"><a href=\"#AcrMap简介\" class=\"headerlink\" title=\"AcrMap简介\"></a>AcrMap简介</h2><p>ArcMap主要用于绘制自定义地图，功能很强大，当然也是收费的。网上有破解版的下载和安装教程，可自行百度。我这里用的是ArcGis Desktop10.5版本。更多功能教程可参考：<a href=\"https://learn.arcgis.com/zh-cn/projects/get-started-with-arcmap/lessons/explore-the-study-area.htm\" target=\"_blank\" rel=\"noopener\">Learn ArcGIS 课程库</a>。</p>\n<h2 id=\"使用记录\"><a href=\"#使用记录\" class=\"headerlink\" title=\"使用记录\"></a>使用记录</h2><h3 id=\"step1\"><a href=\"#step1\" class=\"headerlink\" title=\"step1\"></a>step1</h3><p>新建空白地图<br><img src=\"/img/xjy/p61001.png\" alt=\"img\"><br></p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2\"></a>step2</h3><p>选择添加数据<br><img src=\"/img/xjy/p61002.png\" alt=\"img\"><br></p>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3\"></a>step3</h3><p>选择excel文件并选择哪一个sheet添加<br><img src=\"/img/xjy/p61003.png\" alt=\"img\"><br></p>\n<h3 id=\"step4\"><a href=\"#step4\" class=\"headerlink\" title=\"step4\"></a>step4</h3><p>选择显示XY坐标<br><img src=\"/img/xjy/p61004.png\" alt=\"img\"><br></p>\n<h3 id=\"step5\"><a href=\"#step5\" class=\"headerlink\" title=\"step5\"></a>step5</h3><p>选择经纬度对应的excel中的列,然后点编辑按钮。<br><img src=\"/img/xjy/p61005.png\" alt=\"img\"><br></p>\n<h3 id=\"step6\"><a href=\"#step6\" class=\"headerlink\" title=\"step6\"></a>step6</h3><p>选择坐标系<br><img src=\"/img/xjy/p61006.png\" alt=\"img\"><br></p>\n<h3 id=\"step7\"><a href=\"#step7\" class=\"headerlink\" title=\"step7\"></a>step7</h3><p>一路确认后展示如下：<br><img src=\"/img/xjy/p61007.png\" alt=\"img\"><br></p>\n<h3 id=\"step8\"><a href=\"#step8\" class=\"headerlink\" title=\"step8\"></a>step8</h3><p>打开目录中连接到自己新建的一个文件夹，然后按如下步骤新建一个shapefile文件<br><img src=\"/img/xjy/p61008.png\" alt=\"img\"><br></p>\n<h3 id=\"step9\"><a href=\"#step9\" class=\"headerlink\" title=\"step9\"></a>step9</h3><p>新建“面”类型的shapeFile,一定记得设置坐标系<br><img src=\"/img/xjy/p61009.png\" alt=\"img\"><br></p>\n<h3 id=\"step10\"><a href=\"#step10\" class=\"headerlink\" title=\"step10\"></a>step10</h3><p>右键新生成的面编辑要素选择开始编辑<br><img src=\"/img/xjy/p61010.png\" alt=\"img\"><br></p>\n<h3 id=\"step11\"><a href=\"#step11\" class=\"headerlink\" title=\"step11\"></a>step11</h3><p>选择要素，开始编辑多边形<br><img src=\"/img/xjy/p61011.png\" alt=\"img\"><br></p>\n<h3 id=\"step12\"><a href=\"#step12\" class=\"headerlink\" title=\"step12\"></a>step12</h3><p>编辑好后双击生成多边形<br><img src=\"/img/xjy/p61012.png\" alt=\"img\"><br></p>\n<h3 id=\"step13\"><a href=\"#step13\" class=\"headerlink\" title=\"step13\"></a>step13</h3><p>利用ArcToolBox，依次展开选择“数据管理工具”-&gt;”要素”-&gt;”要素折点转点”<br><img src=\"/img/xjy/p61013.png\" alt=\"img\"><br></p>\n<h3 id=\"step14\"><a href=\"#step14\" class=\"headerlink\" title=\"step14\"></a>step14</h3><p>选择输入要素为我们画的那个图层<br><img src=\"/img/xjy/p61014.png\" alt=\"img\"><br></p>\n<h3 id=\"step15\"><a href=\"#step15\" class=\"headerlink\" title=\"step15\"></a>step15</h3><p>对新生成的折点转点的图层右键选择打开属性表<br><img src=\"/img/xjy/p61015.png\" alt=\"img\"><br></p>\n<h3 id=\"step16\"><a href=\"#step16\" class=\"headerlink\" title=\"step16\"></a>step16</h3><p>选择添加字段<br><img src=\"/img/xjy/p61016.png\" alt=\"img\"><br></p>\n<h3 id=\"step17\"><a href=\"#step17\" class=\"headerlink\" title=\"step17\"></a>step17</h3><p>添加x,y两个属性<br><img src=\"/img/xjy/p61017.png\" alt=\"img\"><br></p>\n<h3 id=\"step18\"><a href=\"#step18\" class=\"headerlink\" title=\"step18\"></a>step18</h3><p>分别选择x,y的列，右键选择几何计算计算x,y列的值<br><img src=\"/img/xjy/p61018.png\" alt=\"img\"><br></p>\n<h3 id=\"step19\"><a href=\"#step19\" class=\"headerlink\" title=\"step19\"></a>step19</h3><p>记得选择列对应的坐标属性<br><img src=\"/img/xjy/p61019.png\" alt=\"img\"><br></p>\n<h3 id=\"step20\"><a href=\"#step20\" class=\"headerlink\" title=\"step20\"></a>step20</h3><p>生成结果后，点导出，生成dbf后缀的文件<br><img src=\"/img/xjy/p61020.png\" alt=\"img\"><br></p>\n<h3 id=\"step21\"><a href=\"#step21\" class=\"headerlink\" title=\"step21\"></a>step21</h3><p>用excel打开dbf文件即可获取到多边形的顶点经纬度。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>没什么好说的，就仅仅记录一下，以便后续会用到，方便查找。</p>"},{"title":"Docker-Compose配置（二）Zookeeper+Kafka+KafkaManager","id":"680","date":"2019-11-05T12:58:55.000Z","toc":true,"declare":true,"_content":"\n![img](/img/xjy/p62000.png)<br/>\n\n## 简介\n\n本期介绍简单的Kafka及管理端KafkaManager的DockerCompose配置，方面自己测试和查看Kafka消息。\n<!--more-->\n\n## 环境\n\n+ Centos7 64位 (操作系统)\n\n\n## docket-compose配置\n废话不多说，直接贴配置。\n编辑docker-compose.yml文件如下：\n``` yml\nversion: '2'\nservices:\n  zookeeper:\n    container_name: xjy-zookeeper\n    image: wurstmeister/zookeeper   ## 镜像\n    ports:\n      - \"2181:2181\"                 ## 对外暴露的端口号\n    networks:\n      - xjynet\n      \n  kafka:\n    container_name: xjy-kafka\n    image: wurstmeister/kafka       ## 镜像\n    volumes: \n        - /etc/localtime:/etc/localtime ## 挂载位置（kafka镜像和宿主机器之间时间保持一直）\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_ADVERTISED_HOST_NAME: xjy-zookeeper   ## 修改:宿主机IP\n      KAFKA_ZOOKEEPER_CONNECT: xjy-zookeeper:2181       ## 卡夫卡运行是基于zookeeper的\n    networks:\n      - xjynet\n      \n  kafka-manager:  \n    container_name: xjy-kafka-manager\n    image: sheepkiller/kafka-manager                ## 镜像：开源的web管理kafka集群的界面\n    environment:\n        ZK_HOSTS: xjy-zookeeper                   ## 修改:宿主机IP\n    ports:  \n      - \"9000:9000\"                                 ## 暴露端口\n    networks:\n      - xjynet\n      \n      \nnetworks:\n  xjynet:\n    external: true\n```\n\n## 启动看效果\n\n### 启动并查看状态\n执行启动命令：\n``` shell\n# docker-compose up -d\n```\n\n执行查看命令：\n``` shell\n# docker ps\n```\n\n## 结束语\n好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。\n\n","source":"_posts/p62.md","raw":"---\ntitle: Docker-Compose配置（二）Zookeeper+Kafka+KafkaManager\nid: 680\ncategories:\n  - DOCKER\ndate: 2019/11/05 20:58:55        \ntags: [docker]\ntoc: true\ndeclare: true\n---\n\n![img](/img/xjy/p62000.png)<br/>\n\n## 简介\n\n本期介绍简单的Kafka及管理端KafkaManager的DockerCompose配置，方面自己测试和查看Kafka消息。\n<!--more-->\n\n## 环境\n\n+ Centos7 64位 (操作系统)\n\n\n## docket-compose配置\n废话不多说，直接贴配置。\n编辑docker-compose.yml文件如下：\n``` yml\nversion: '2'\nservices:\n  zookeeper:\n    container_name: xjy-zookeeper\n    image: wurstmeister/zookeeper   ## 镜像\n    ports:\n      - \"2181:2181\"                 ## 对外暴露的端口号\n    networks:\n      - xjynet\n      \n  kafka:\n    container_name: xjy-kafka\n    image: wurstmeister/kafka       ## 镜像\n    volumes: \n        - /etc/localtime:/etc/localtime ## 挂载位置（kafka镜像和宿主机器之间时间保持一直）\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_ADVERTISED_HOST_NAME: xjy-zookeeper   ## 修改:宿主机IP\n      KAFKA_ZOOKEEPER_CONNECT: xjy-zookeeper:2181       ## 卡夫卡运行是基于zookeeper的\n    networks:\n      - xjynet\n      \n  kafka-manager:  \n    container_name: xjy-kafka-manager\n    image: sheepkiller/kafka-manager                ## 镜像：开源的web管理kafka集群的界面\n    environment:\n        ZK_HOSTS: xjy-zookeeper                   ## 修改:宿主机IP\n    ports:  \n      - \"9000:9000\"                                 ## 暴露端口\n    networks:\n      - xjynet\n      \n      \nnetworks:\n  xjynet:\n    external: true\n```\n\n## 启动看效果\n\n### 启动并查看状态\n执行启动命令：\n``` shell\n# docker-compose up -d\n```\n\n执行查看命令：\n``` shell\n# docker ps\n```\n\n## 结束语\n好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。\n\n","slug":"p62","published":1,"updated":"2019-11-05T09:05:58.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lmsh7p00007svea32tlm94","content":"<p><img src=\"/img/xjy/p62000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本期介绍简单的Kafka及管理端KafkaManager的DockerCompose配置，方面自己测试和查看Kafka消息。<br><a id=\"more\"></a></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos7 64位 (操作系统)</li>\n</ul>\n<h2 id=\"docket-compose配置\"><a href=\"#docket-compose配置\" class=\"headerlink\" title=\"docket-compose配置\"></a>docket-compose配置</h2><p>废话不多说，直接贴配置。<br>编辑docker-compose.yml文件如下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  zookeeper:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-zookeeper</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/zookeeper</span>   <span class=\"comment\">## 镜像</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"2181:2181\"</span>                 <span class=\"comment\">## 对外暴露的端口号</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  kafka:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-kafka</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/kafka</span>       <span class=\"comment\">## 镜像</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span> </span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">/etc/localtime:/etc/localtime</span> <span class=\"comment\">## 挂载位置（kafka镜像和宿主机器之间时间保持一直）</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9092:9092\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ADVERTISED_HOST_NAME:</span> <span class=\"string\">xjy-zookeeper</span>   <span class=\"comment\">## 修改:宿主机IP</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"attr\">xjy-zookeeper:2181</span>       <span class=\"comment\">## 卡夫卡运行是基于zookeeper的</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  kafka-manager:</span>  </span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-kafka-manager</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">sheepkiller/kafka-manager</span>                <span class=\"comment\">## 镜像：开源的web管理kafka集群的界面</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">        ZK_HOSTS:</span> <span class=\"string\">xjy-zookeeper</span>                   <span class=\"comment\">## 修改:宿主机IP</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span>  </span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9000:9000\"</span>                                 <span class=\"comment\">## 暴露端口</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  xjynet:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动看效果\"><a href=\"#启动看效果\" class=\"headerlink\" title=\"启动看效果\"></a>启动看效果</h2><h3 id=\"启动并查看状态\"><a href=\"#启动并查看状态\" class=\"headerlink\" title=\"启动并查看状态\"></a>启动并查看状态</h3><p>执行启动命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>执行查看命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker ps</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/img/xjy/p62000.png\" alt=\"img\"><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本期介绍简单的Kafka及管理端KafkaManager的DockerCompose配置，方面自己测试和查看Kafka消息。<br>","more":"</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>Centos7 64位 (操作系统)</li>\n</ul>\n<h2 id=\"docket-compose配置\"><a href=\"#docket-compose配置\" class=\"headerlink\" title=\"docket-compose配置\"></a>docket-compose配置</h2><p>废话不多说，直接贴配置。<br>编辑docker-compose.yml文件如下：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  zookeeper:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-zookeeper</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/zookeeper</span>   <span class=\"comment\">## 镜像</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"2181:2181\"</span>                 <span class=\"comment\">## 对外暴露的端口号</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  kafka:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-kafka</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/kafka</span>       <span class=\"comment\">## 镜像</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span> </span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">/etc/localtime:/etc/localtime</span> <span class=\"comment\">## 挂载位置（kafka镜像和宿主机器之间时间保持一直）</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9092:9092\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ADVERTISED_HOST_NAME:</span> <span class=\"string\">xjy-zookeeper</span>   <span class=\"comment\">## 修改:宿主机IP</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"attr\">xjy-zookeeper:2181</span>       <span class=\"comment\">## 卡夫卡运行是基于zookeeper的</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">  kafka-manager:</span>  </span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">xjy-kafka-manager</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">sheepkiller/kafka-manager</span>                <span class=\"comment\">## 镜像：开源的web管理kafka集群的界面</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">        ZK_HOSTS:</span> <span class=\"string\">xjy-zookeeper</span>                   <span class=\"comment\">## 修改:宿主机IP</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span>  </span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9000:9000\"</span>                                 <span class=\"comment\">## 暴露端口</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">xjynet</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  xjynet:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动看效果\"><a href=\"#启动看效果\" class=\"headerlink\" title=\"启动看效果\"></a>启动看效果</h2><h3 id=\"启动并查看状态\"><a href=\"#启动并查看状态\" class=\"headerlink\" title=\"启动并查看状态\"></a>启动并查看状态</h3><p>执行启动命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>执行查看命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> docker ps</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>好了，利用docker-compose启动应用就是这么方便，这一期就到这里，以后会再分享其他配置的。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjznq3jfb0000u8ve5xtxlr1f","category_id":"cjznq3jfl0002u8veua9kt5ya","_id":"cjznq3jfy000cu8veva7wno71"},{"post_id":"cjznq3jfr0006u8vedjjcxvkq","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jgr000xu8veud9em0o8"},{"post_id":"cjznq3jfu000au8veczae9q8t","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jgw0013u8ve1uwf2e8v"},{"post_id":"cjznq3jfj0001u8vepm69entf","category_id":"cjznq3jfs0007u8vesosy4o6y","_id":"cjznq3jh5001au8ve0xxeb1e7"},{"post_id":"cjznq3jfj0001u8vepm69entf","category_id":"cjznq3jgq000wu8ve6tycku1k","_id":"cjznq3jh8001eu8vezwxekqhh"},{"post_id":"cjznq3jgz0016u8vef81r9uh0","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jhb001hu8vebfgbstx5"},{"post_id":"cjznq3jfw000bu8vesnfgdd6e","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jhe001ku8vezu8co4sa"},{"post_id":"cjznq3jg1000fu8vekjs4nxh8","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jhg001mu8ve5nju2upr"},{"post_id":"cjznq3jfo0004u8vekuwtixxs","category_id":"cjznq3jfz000du8vei50hrcpn","_id":"cjznq3jhp001su8vemtiq6dx0"},{"post_id":"cjznq3jfo0004u8vekuwtixxs","category_id":"cjznq3jha001gu8ve44i40j0x","_id":"cjznq3jhr001uu8vegpt1ziyk"},{"post_id":"cjznq3jg4000gu8veklneqa7f","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jhv001zu8veih9jin4t"},{"post_id":"cjznq3jg7000ju8veqrhqxgfk","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3ji10025u8veylc0vz05"},{"post_id":"cjznq3jfp0005u8veoepovrzc","category_id":"cjznq3jg6000hu8vepvginh6y","_id":"cjznq3jih002hu8ve0nnjm33f"},{"post_id":"cjznq3jfp0005u8veoepovrzc","category_id":"cjznq3ji10026u8vevvgafcn0","_id":"cjznq3jij002ku8vefqnzdz56"},{"post_id":"cjznq3jgd000nu8vezw2nqalh","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jim002ou8ve17xqkojs"},{"post_id":"cjznq3jge000ou8vebpbndbpx","category_id":"cjznq3jig002gu8velpzf1ssl","_id":"cjznq3jis002vu8vetyf1s4xw"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","category_id":"cjznq3jg6000hu8vepvginh6y","_id":"cjznq3jj60037u8vex0e7omgs"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","category_id":"cjznq3ji10026u8vevvgafcn0","_id":"cjznq3jjd003bu8ven6sr3hop"},{"post_id":"cjznq3jgv0012u8vet5f8elyt","category_id":"cjznq3jjl003gu8vewrn44mh4","_id":"cjznq3jk1003su8vek34dvx5w"},{"post_id":"cjznq3jjp003ku8vedmuwjv32","category_id":"cjznq3jfl0002u8veua9kt5ya","_id":"cjznq3jk2003uu8ve2c194hm9"},{"post_id":"cjznq3jh10018u8ve3win9tgc","category_id":"cjznq3jg6000hu8vepvginh6y","_id":"cjznq3jk4003xu8ve69v2y5na"},{"post_id":"cjznq3jh10018u8ve3win9tgc","category_id":"cjznq3ji10026u8vevvgafcn0","_id":"cjznq3jk80040u8ve0ji5lyj5"},{"post_id":"cjznq3jjz003qu8vec70ifhwh","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jk90043u8velcndymbw"},{"post_id":"cjznq3jhi001ou8veupceyakl","category_id":"cjznq3jkc0047u8ve32iodwjg","_id":"cjznq3jkg004cu8vexxpxg63v"},{"post_id":"cjznq3jhn001qu8veuqumv76n","category_id":"cjznq3jkc0047u8ve32iodwjg","_id":"cjznq3jkh004eu8ve81mmw4e2"},{"post_id":"cjznq3jhp001tu8vec1sv8mpd","category_id":"cjznq3jjl003gu8vewrn44mh4","_id":"cjznq3jkj004iu8ve0b1gt2dh"},{"post_id":"cjznq3jhs001wu8ve5i6qld1r","category_id":"cjznq3jkh004du8vewbuwcuf5","_id":"cjznq3jko004ou8velcu3ii5r"},{"post_id":"cjznq3jhw0020u8ve98s039pk","category_id":"cjznq3jkh004du8vewbuwcuf5","_id":"cjznq3jkr004su8ve9bo6xx87"},{"post_id":"cjznq3jga000ku8vezxjti7ul","category_id":"cjznq3jhv001yu8veosr5fp2k","_id":"cjznq3jkt004xu8vez4gwkrd6"},{"post_id":"cjznq3jga000ku8vezxjti7ul","category_id":"cjznq3jkq004ru8vesfs5y0qy","_id":"cjznq3jkv0051u8ve2jndwu76"},{"post_id":"cjznq3ji60029u8vel60xlb3z","category_id":"cjznq3jkh004du8vewbuwcuf5","_id":"cjznq3jky0058u8ve8r23gabo"},{"post_id":"cjznq3jib002du8veeu6vawm4","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jl4005du8vevvhijsbl"},{"post_id":"cjznq3jif002fu8vengbbiz6m","category_id":"cjznq3jhv001yu8veosr5fp2k","_id":"cjznq3jl9005hu8vem7s805ss"},{"post_id":"cjznq3jif002fu8vengbbiz6m","category_id":"cjznq3jkq004ru8vesfs5y0qy","_id":"cjznq3jla005ku8veakcyiog6"},{"post_id":"cjznq3jii002ju8ve4uekzmgq","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jlc005nu8vez93nb149"},{"post_id":"cjznq3jil002nu8vefawbde2k","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jle005su8ve874qf7kn"},{"post_id":"cjznq3jin002ru8veq2rj92zd","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jlg005vu8vehu3cs69l"},{"post_id":"cjznq3jgg000pu8ver07ybier","category_id":"cjznq3jin002qu8vepx206j1m","_id":"cjznq3jln005zu8vek0nh19ij"},{"post_id":"cjznq3jgg000pu8ver07ybier","category_id":"cjznq3jle005ru8ve7p0fb9fy","_id":"cjznq3jlo0061u8veteonxe29"},{"post_id":"cjznq3jiq002uu8veem2tl89x","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jlq0065u8ve29kx5oh1"},{"post_id":"cjznq3jiv002yu8ve8p5xoywj","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jlt006au8vedf4r0uz5"},{"post_id":"cjznq3jiz0030u8vea8ska3fe","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jm0006eu8ve53o0ffvi"},{"post_id":"cjznq3jj20034u8vet5cnni5b","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jm1006gu8vebpr4falr"},{"post_id":"cjznq3jj40035u8ve0zxsiquy","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jm2006iu8velcmjhig8"},{"post_id":"cjznq3jgn000vu8ves96g3j0z","category_id":"cjznq3jj10032u8ve9htm74p3","_id":"cjznq3jm5006mu8vevo2cg6td"},{"post_id":"cjznq3jgn000vu8ves96g3j0z","category_id":"cjznq3jm1006fu8vecxv79fv2","_id":"cjznq3jm6006ou8vewcfd2uhh"},{"post_id":"cjznq3jj80039u8venb0tkqb3","category_id":"cjznq3jhv001yu8veosr5fp2k","_id":"cjznq3jm8006qu8ve39yao3gu"},{"post_id":"cjznq3jj80039u8venb0tkqb3","category_id":"cjznq3jkq004ru8vesfs5y0qy","_id":"cjznq3jma006su8veaiduqa5g"},{"post_id":"cjznq3jjd003cu8veip0hi9ru","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jmb006uu8vefe18xw7f"},{"post_id":"cjznq3jgt0010u8ve9srwoy37","category_id":"cjznq3jj70038u8vef6b24rg1","_id":"cjznq3jmf0070u8veo7fj999t"},{"post_id":"cjznq3jgt0010u8ve9srwoy37","category_id":"cjznq3jm6006pu8vesukbv196","_id":"cjznq3jmh0073u8veeeqetju6"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","category_id":"cjznq3jhv001yu8veosr5fp2k","_id":"cjznq3jmj0076u8vebmhqrgjd"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","category_id":"cjznq3jkq004ru8vesfs5y0qy","_id":"cjznq3jmk0079u8ve52irvpyo"},{"post_id":"cjznq3jjn003iu8vefd5hx7po","category_id":"cjznq3jhv001yu8veosr5fp2k","_id":"cjznq3jml007bu8veo8clrkr0"},{"post_id":"cjznq3jjn003iu8vefd5hx7po","category_id":"cjznq3jkq004ru8vesfs5y0qy","_id":"cjznq3jmm007eu8vem7o639v4"},{"post_id":"cjznq3jjv003nu8ve99pw7fxd","category_id":"cjznq3jmi0075u8veoq2z5qrf","_id":"cjznq3jmo007iu8vef8e1ynx6"},{"post_id":"cjznq3jh9001fu8ve1t7tg04x","category_id":"cjznq3jk0003ru8ve07uamkk5","_id":"cjznq3jmq007mu8veysdp7fvy"},{"post_id":"cjznq3jh9001fu8ve1t7tg04x","category_id":"cjznq3jml007du8vefuisvn2k","_id":"cjznq3jms007pu8ve53v38ujd"},{"post_id":"cjznq3jhb001iu8ve0tudba49","category_id":"cjznq3jk7003zu8veopj4h6nr","_id":"cjznq3jmu007su8verw8tblww"},{"post_id":"cjznq3jhb001iu8ve0tudba49","category_id":"cjznq3jmo007ju8vef3sg4edi","_id":"cjznq3jmv007vu8ve9hmr3dk9"},{"post_id":"cjznq3jhe001lu8verc0ua9dy","category_id":"cjznq3jk0003ru8ve07uamkk5","_id":"cjznq3jmw007yu8ve01iks1sd"},{"post_id":"cjznq3jhe001lu8verc0ua9dy","category_id":"cjznq3jml007du8vefuisvn2k","_id":"cjznq3jmy0081u8vetyvxnk7d"},{"post_id":"cjznq3jhz0023u8ve0o5ufpj9","category_id":"cjznq3jk0003ru8ve07uamkk5","_id":"cjznq3jmy0083u8veajzm41in"},{"post_id":"cjznq3jhz0023u8ve0o5ufpj9","category_id":"cjznq3jml007du8vefuisvn2k","_id":"cjznq3jn00087u8ve0vdnqtuc"},{"post_id":"cjznq3ji20027u8veax62sinc","category_id":"cjznq3jks004uu8ve6og62wct","_id":"cjznq3jn10089u8vertwqe4ib"},{"post_id":"cjznq3ji20027u8veax62sinc","category_id":"cjznq3jmw007xu8veeigx6hlj","_id":"cjznq3jn2008bu8ve6lhrxaoc"},{"post_id":"cjznq3ji8002bu8ve79vnqkoi","category_id":"cjznq3jks004uu8ve6og62wct","_id":"cjznq3jn3008cu8ve0d2xegfr"},{"post_id":"cjznq3ji8002bu8ve79vnqkoi","category_id":"cjznq3jmw007xu8veeigx6hlj","_id":"cjznq3jn4008eu8vewq7uq2t3"},{"post_id":"cjznq3jq300cqu8vewh8qxebn","category_id":"cjznq3jgc000lu8ve9d1wec49","_id":"cjznq3jqc00ctu8vev67q8dwl"},{"post_id":"cjznq3jq500cru8ve4evj03ss","category_id":"cjznq3jky0057u8vewhfdvbit","_id":"cjznq3jqd00cuu8veegb8xez3"},{"post_id":"ck1yfrblt0000h0vebqkzc4rf","category_id":"ck1yfrbm10001h0vex3e5f3ey","_id":"ck1yfrbme0004h0veaxqifjhc"},{"post_id":"ck2lmsh7p00007svea32tlm94","category_id":"cjznq3jmi0075u8veoq2z5qrf","_id":"ck2lmsh7x00027sveintmk1uf"}],"PostTag":[{"post_id":"cjznq3jfb0000u8ve5xtxlr1f","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jft0009u8vergqlk4nq"},{"post_id":"cjznq3jfj0001u8vepm69entf","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jgk000su8vevqb4ocv4"},{"post_id":"cjznq3jfj0001u8vepm69entf","tag_id":"cjznq3jg0000eu8vehkzrv8sv","_id":"cjznq3jgn000uu8veh56nhov4"},{"post_id":"cjznq3jfj0001u8vepm69entf","tag_id":"cjznq3jg6000iu8ve4p39jdu5","_id":"cjznq3jgs000zu8ve84emw12p"},{"post_id":"cjznq3jfj0001u8vepm69entf","tag_id":"cjznq3jgc000mu8vegp7xhcqt","_id":"cjznq3jgu0011u8ve2otz367z"},{"post_id":"cjznq3jfo0004u8vekuwtixxs","tag_id":"cjznq3jgi000ru8vepnaoo5u4","_id":"cjznq3jh00017u8vegssfk7m7"},{"post_id":"cjznq3jfo0004u8vekuwtixxs","tag_id":"cjznq3jgs000yu8ve968iyj2e","_id":"cjznq3jh5001bu8ve4o9jfg3u"},{"post_id":"cjznq3jfp0005u8veoepovrzc","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jhu001xu8vem8dgiv7q"},{"post_id":"cjznq3jfp0005u8veoepovrzc","tag_id":"cjznq3jh6001cu8veznpay2gn","_id":"cjznq3jhy0021u8vejl31s7uq"},{"post_id":"cjznq3jfp0005u8veoepovrzc","tag_id":"cjznq3jhd001ju8veubo44ozq","_id":"cjznq3ji00024u8vez13w0n0s"},{"post_id":"cjznq3jfp0005u8veoepovrzc","tag_id":"cjznq3jhm001pu8ve1ovpob8y","_id":"cjznq3ji50028u8veof3oydhg"},{"post_id":"cjznq3jfr0006u8vedjjcxvkq","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jih002iu8veyacdf65r"},{"post_id":"cjznq3jfr0006u8vedjjcxvkq","tag_id":"cjznq3jhr001vu8veqz1tzr3u","_id":"cjznq3jij002lu8vemxpdbgbf"},{"post_id":"cjznq3jfr0006u8vedjjcxvkq","tag_id":"cjznq3jhy0022u8ve0s2osl55","_id":"cjznq3jim002pu8veu92m37re"},{"post_id":"cjznq3jfr0006u8vedjjcxvkq","tag_id":"cjznq3ji7002au8veu5zwwlm7","_id":"cjznq3jio002su8ve02496p5t"},{"post_id":"cjznq3jfu000au8veczae9q8t","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jit002xu8ve5a6ddi9r"},{"post_id":"cjznq3jfu000au8veczae9q8t","tag_id":"cjznq3jic002eu8vepzlzqlu5","_id":"cjznq3jiy002zu8vemh5fty8u"},{"post_id":"cjznq3jfu000au8veczae9q8t","tag_id":"cjznq3jik002mu8vedaq9t7nz","_id":"cjznq3jj20033u8ven0wgyyj4"},{"post_id":"cjznq3jfw000bu8vesnfgdd6e","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jjc003au8vewpicwaoq"},{"post_id":"cjznq3jfw000bu8vesnfgdd6e","tag_id":"cjznq3jiq002tu8ve9db0g0i6","_id":"cjznq3jjf003du8veqsr2rxzb"},{"post_id":"cjznq3jfw000bu8vesnfgdd6e","tag_id":"cjznq3jj00031u8vesznvn5wr","_id":"cjznq3jjm003hu8veqh5ca2t7"},{"post_id":"cjznq3jg1000fu8vekjs4nxh8","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jju003mu8veg9nd330j"},{"post_id":"cjznq3jg1000fu8vekjs4nxh8","tag_id":"cjznq3jic002eu8vepzlzqlu5","_id":"cjznq3jjy003ou8veni0oadgn"},{"post_id":"cjznq3jg1000fu8vekjs4nxh8","tag_id":"cjznq3jjf003eu8velw6rhkpz","_id":"cjznq3jk1003tu8ve7sei3zf0"},{"post_id":"cjznq3jg4000gu8veklneqa7f","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jk3003vu8veep7z525p"},{"post_id":"cjznq3jg4000gu8veklneqa7f","tag_id":"cjznq3jjo003ju8vexquheu7k","_id":"cjznq3jk5003yu8vetqdzvvam"},{"post_id":"cjznq3jg7000ju8veqrhqxgfk","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jk80041u8vey93xkm8o"},{"post_id":"cjznq3jg7000ju8veqrhqxgfk","tag_id":"cjznq3jjy003pu8vex01bikgr","_id":"cjznq3jka0044u8vek3cz5b4l"},{"post_id":"cjznq3jga000ku8vezxjti7ul","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jki004gu8vedsl2towu"},{"post_id":"cjznq3jga000ku8vezxjti7ul","tag_id":"cjznq3jk90042u8veqgqic4fn","_id":"cjznq3jkj004hu8veaopaig6q"},{"post_id":"cjznq3jga000ku8vezxjti7ul","tag_id":"cjznq3jkc0046u8ve430rbzhd","_id":"cjznq3jkn004lu8veb6ita8gz"},{"post_id":"cjznq3jga000ku8vezxjti7ul","tag_id":"cjznq3jkd0048u8veoc3otwlw","_id":"cjznq3jkn004mu8veo2fvkxeo"},{"post_id":"cjznq3jga000ku8vezxjti7ul","tag_id":"cjznq3jkf004au8ve15csuiub","_id":"cjznq3jkq004qu8ve3e5lfj91"},{"post_id":"cjznq3jgd000nu8vezw2nqalh","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jkt004wu8veo593hiuw"},{"post_id":"cjznq3jgd000nu8vezw2nqalh","tag_id":"cjznq3jkh004fu8vejv4fky67","_id":"cjznq3jku004yu8vex35ria3z"},{"post_id":"cjznq3jgd000nu8vezw2nqalh","tag_id":"cjznq3jkm004ku8veh0e1qavh","_id":"cjznq3jkw0052u8vejlcaoqew"},{"post_id":"cjznq3jgd000nu8vezw2nqalh","tag_id":"cjznq3jhr001vu8veqz1tzr3u","_id":"cjznq3jkw0053u8ve0f7inqoe"},{"post_id":"cjznq3jgd000nu8vezw2nqalh","tag_id":"cjznq3jkr004tu8vedlh1tynd","_id":"cjznq3jkx0056u8ve7ce4iuey"},{"post_id":"cjznq3jge000ou8vebpbndbpx","tag_id":"cjznq3jks004vu8ve6sf4gi8d","_id":"cjznq3jl8005fu8ved4hcueem"},{"post_id":"cjznq3jge000ou8vebpbndbpx","tag_id":"cjznq3jkv0050u8ve5tz6yy7j","_id":"cjznq3jl9005iu8vetddd5c1t"},{"post_id":"cjznq3jge000ou8vebpbndbpx","tag_id":"cjznq3jkx0055u8vexdfqws0m","_id":"cjznq3jlb005lu8vehs79qtq9"},{"post_id":"cjznq3jge000ou8vebpbndbpx","tag_id":"cjznq3jkz0059u8ves0qbgq4o","_id":"cjznq3jlc005ou8ve1kldlbdr"},{"post_id":"cjznq3jge000ou8vebpbndbpx","tag_id":"cjznq3jkc0046u8ve430rbzhd","_id":"cjznq3jld005qu8venec9o05q"},{"post_id":"cjznq3jge000ou8vebpbndbpx","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jlf005tu8veclwiligr"},{"post_id":"cjznq3jgg000pu8ver07ybier","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jlo0060u8veryjxzw8y"},{"post_id":"cjznq3jgg000pu8ver07ybier","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jlp0062u8vexvcr4696"},{"post_id":"cjznq3jgg000pu8ver07ybier","tag_id":"cjznq3jla005ju8ve7wwf47sj","_id":"cjznq3jlq0066u8veq66m7xwr"},{"post_id":"cjznq3jgg000pu8ver07ybier","tag_id":"cjznq3jld005pu8ve15wwmqc3","_id":"cjznq3jlr0067u8ve4sx4plw3"},{"post_id":"cjznq3jgg000pu8ver07ybier","tag_id":"cjznq3jlf005uu8vegy8sdcu2","_id":"cjznq3jlt006bu8veq50iqrtr"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jma006tu8veptzabwx7"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jlp0063u8vee5i5qtmf","_id":"cjznq3jmc006wu8veq39g99wg"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jls0068u8veoodu83cx","_id":"cjznq3jme006yu8vexsgdjyt8"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jly006cu8vepya8xqf9","_id":"cjznq3jmf0071u8verd2l0n3k"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jm2006hu8vevl0hctfk","_id":"cjznq3jmi0074u8vek3sdxs1d"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jm3006ku8ve8m4dzbcm","_id":"cjznq3jmj0077u8vehap1p8oq"},{"post_id":"cjznq3jgl000tu8vep8fnm3m1","tag_id":"cjznq3jm6006nu8vezllt6sa9","_id":"cjznq3jmk007au8velk86z4z2"},{"post_id":"cjznq3jgn000vu8ves96g3j0z","tag_id":"cjznq3jly006cu8vepya8xqf9","_id":"cjznq3jml007cu8veytbkzxnx"},{"post_id":"cjznq3jgn000vu8ves96g3j0z","tag_id":"cjznq3jmd006xu8vecpy55dju","_id":"cjznq3jmn007gu8veg96xlj7x"},{"post_id":"cjznq3jgn000vu8ves96g3j0z","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jmn007hu8verjgzx73t"},{"post_id":"cjznq3jgn000vu8ves96g3j0z","tag_id":"cjznq3jmg0072u8vet98ke2au","_id":"cjznq3jmp007lu8ve2ur7znwo"},{"post_id":"cjznq3jgt0010u8ve9srwoy37","tag_id":"cjznq3jmj0078u8venrnilabw","_id":"cjznq3jmt007qu8vef5wflkbt"},{"post_id":"cjznq3jgt0010u8ve9srwoy37","tag_id":"cjznq3jkx0055u8vexdfqws0m","_id":"cjznq3jmu007tu8veizi6bl3o"},{"post_id":"cjznq3jgt0010u8ve9srwoy37","tag_id":"cjznq3jks004vu8ve6sf4gi8d","_id":"cjznq3jmv007wu8veontifvcd"},{"post_id":"cjznq3jgv0012u8vet5f8elyt","tag_id":"cjznq3jgi000ru8vepnaoo5u4","_id":"cjznq3jmx007zu8veelvi562l"},{"post_id":"cjznq3jgv0012u8vet5f8elyt","tag_id":"cjznq3jhr001vu8veqz1tzr3u","_id":"cjznq3jmy0082u8vehboezojb"},{"post_id":"cjznq3jgz0016u8vef81r9uh0","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jmz0084u8veb1f2faty"},{"post_id":"cjznq3jgz0016u8vef81r9uh0","tag_id":"cjznq3jmu007uu8vepvi5mofb","_id":"cjznq3jn10088u8ve86wurksv"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jn6008ju8ve3frvwge9"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jlp0063u8vee5i5qtmf","_id":"cjznq3jn7008ku8vek4orgu4b"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jhr001vu8veqz1tzr3u","_id":"cjznq3jn7008mu8ve4jl9al6l"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jn3008du8vevf18qcp1","_id":"cjznq3jn8008nu8vevhgxtyyt"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jn4008fu8ver7wtydhq","_id":"cjznq3jna008pu8vejlpptumz"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jn5008gu8ve725zpkj2","_id":"cjznq3jnb008qu8vewnunhiz1"},{"post_id":"cjznq3jh10018u8ve3win9tgc","tag_id":"cjznq3jn5008hu8veiaxfxqz2","_id":"cjznq3jnc008su8vecwa6yjsn"},{"post_id":"cjznq3jh7001du8vemmwxjplu","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnd008tu8velzqwnecj"},{"post_id":"cjznq3jh7001du8vemmwxjplu","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jne008vu8venxgvllzw"},{"post_id":"cjznq3jh7001du8vemmwxjplu","tag_id":"cjznq3jjo003ju8vexquheu7k","_id":"cjznq3jne008wu8ve03t82fvm"},{"post_id":"cjznq3jh7001du8vemmwxjplu","tag_id":"cjznq3jn7008lu8ve4y10mu0p","_id":"cjznq3jnf008yu8ve25sasjlx"},{"post_id":"cjznq3jh9001fu8ve1t7tg04x","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jng008zu8verarnu1ev"},{"post_id":"cjznq3jh9001fu8ve1t7tg04x","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jnh0091u8ve1dg77bs0"},{"post_id":"cjznq3jh9001fu8ve1t7tg04x","tag_id":"cjznq3jnb008ru8vel07gq2wj","_id":"cjznq3jnh0092u8vepw34o9st"},{"post_id":"cjznq3jh9001fu8ve1t7tg04x","tag_id":"cjznq3jlf005uu8vegy8sdcu2","_id":"cjznq3jni0094u8veu40e70ce"},{"post_id":"cjznq3jhb001iu8ve0tudba49","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnj0095u8veyncw6g1y"},{"post_id":"cjznq3jhb001iu8ve0tudba49","tag_id":"cjznq3jnf008xu8ve906dfm52","_id":"cjznq3jnk0097u8vebutawh7a"},{"post_id":"cjznq3jhb001iu8ve0tudba49","tag_id":"cjznq3jlf005uu8vegy8sdcu2","_id":"cjznq3jnk0098u8veotargkz5"},{"post_id":"cjznq3jhe001lu8verc0ua9dy","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnm009bu8veddmnzzt8"},{"post_id":"cjznq3jhe001lu8verc0ua9dy","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jnm009cu8vez7xrrhag"},{"post_id":"cjznq3jhe001lu8verc0ua9dy","tag_id":"cjznq3jnb008ru8vel07gq2wj","_id":"cjznq3jnn009eu8ve3ep456qa"},{"post_id":"cjznq3jhe001lu8verc0ua9dy","tag_id":"cjznq3jlf005uu8vegy8sdcu2","_id":"cjznq3jnn009fu8vexg5amf6d"},{"post_id":"cjznq3jhi001ou8veupceyakl","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnp009hu8veyfk2l1o8"},{"post_id":"cjznq3jhi001ou8veupceyakl","tag_id":"cjznq3jnl009au8ve15llnyxq","_id":"cjznq3jnq009iu8ven3z4r9vu"},{"post_id":"cjznq3jhi001ou8veupceyakl","tag_id":"cjznq3jnn009du8vee9aaw6kd","_id":"cjznq3jnr009ku8vecfrs1a6h"},{"post_id":"cjznq3jhn001qu8veuqumv76n","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnr009lu8vejenxan2b"},{"post_id":"cjznq3jhn001qu8veuqumv76n","tag_id":"cjznq3jnl009au8ve15llnyxq","_id":"cjznq3jns009nu8ve359f0m3z"},{"post_id":"cjznq3jhp001tu8vec1sv8mpd","tag_id":"cjznq3jgi000ru8vepnaoo5u4","_id":"cjznq3jns009ou8veehgy0qxp"},{"post_id":"cjznq3jhp001tu8vec1sv8mpd","tag_id":"cjznq3jnq009ju8ve31d6fztl","_id":"cjznq3jnt009qu8vexutsh7gh"},{"post_id":"cjznq3jhs001wu8ve5i6qld1r","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnv009su8vegyxc15yn"},{"post_id":"cjznq3jhs001wu8ve5i6qld1r","tag_id":"cjznq3jns009mu8veqvmbcjtb","_id":"cjznq3jnv009tu8ve81vljeic"},{"post_id":"cjznq3jhs001wu8ve5i6qld1r","tag_id":"cjznq3jnt009pu8veowiayd1g","_id":"cjznq3jnw009vu8veqx9gyesj"},{"post_id":"cjznq3jhw0020u8ve98s039pk","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jnx009wu8vel73lbuo9"},{"post_id":"cjznq3jhw0020u8ve98s039pk","tag_id":"cjznq3jmd006xu8vecpy55dju","_id":"cjznq3jny009yu8vey0j2susi"},{"post_id":"cjznq3jhz0023u8ve0o5ufpj9","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jo000a1u8veidmiesoh"},{"post_id":"cjznq3jhz0023u8ve0o5ufpj9","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jo000a2u8vevlwhvqcu"},{"post_id":"cjznq3jhz0023u8ve0o5ufpj9","tag_id":"cjznq3jnb008ru8vel07gq2wj","_id":"cjznq3jo200a4u8vewarx5uv0"},{"post_id":"cjznq3jhz0023u8ve0o5ufpj9","tag_id":"cjznq3jlf005uu8vegy8sdcu2","_id":"cjznq3jo200a5u8ve9rr8gbhk"},{"post_id":"cjznq3ji20027u8veax62sinc","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jo300a7u8vejf92ounw"},{"post_id":"cjznq3ji20027u8veax62sinc","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jo400a8u8ve5su6eo59"},{"post_id":"cjznq3ji60029u8vel60xlb3z","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jo500aau8veir4w4na1"},{"post_id":"cjznq3ji60029u8vel60xlb3z","tag_id":"cjznq3jmd006xu8vecpy55dju","_id":"cjznq3jo500abu8veo2397ac6"},{"post_id":"cjznq3ji60029u8vel60xlb3z","tag_id":"cjznq3jlf005uu8vegy8sdcu2","_id":"cjznq3jo600adu8vegqgiq29h"},{"post_id":"cjznq3ji8002bu8ve79vnqkoi","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jo700aeu8vek7dnw1sh"},{"post_id":"cjznq3ji8002bu8ve79vnqkoi","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jo700agu8vecl1s056x"},{"post_id":"cjznq3jib002du8veeu6vawm4","tag_id":"cjznq3jo600acu8veh63lyjs0","_id":"cjznq3jo800ahu8venj4kyhnl"},{"post_id":"cjznq3jif002fu8vengbbiz6m","tag_id":"cjznq3jo700afu8verujl716l","_id":"cjznq3job00amu8vepmgw2kgy"},{"post_id":"cjznq3jif002fu8vengbbiz6m","tag_id":"cjznq3jo800aiu8vee0o36p0t","_id":"cjznq3joc00anu8ven7xt8k4p"},{"post_id":"cjznq3jif002fu8vengbbiz6m","tag_id":"cjznq3jns009mu8veqvmbcjtb","_id":"cjznq3joc00apu8vef66h67dt"},{"post_id":"cjznq3jif002fu8vengbbiz6m","tag_id":"cjznq3jkf004au8ve15csuiub","_id":"cjznq3jod00aqu8vegzmbj1fi"},{"post_id":"cjznq3jii002ju8ve4uekzmgq","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jof00asu8vexertdgkj"},{"post_id":"cjznq3jii002ju8ve4uekzmgq","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jof00atu8vej57yltxf"},{"post_id":"cjznq3jii002ju8ve4uekzmgq","tag_id":"cjznq3joc00aou8vec62h0c2e","_id":"cjznq3joj00avu8ve6zn5o3er"},{"post_id":"cjznq3jil002nu8vefawbde2k","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jok00axu8ve0b18i1wj"},{"post_id":"cjznq3jil002nu8vefawbde2k","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jok00ayu8ve87xjnkip"},{"post_id":"cjznq3jil002nu8vefawbde2k","tag_id":"cjznq3joc00aou8vec62h0c2e","_id":"cjznq3jol00b0u8ve9fff7pxr"},{"post_id":"cjznq3jin002ru8veq2rj92zd","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jom00b2u8ve16idp53k"},{"post_id":"cjznq3jin002ru8veq2rj92zd","tag_id":"cjznq3jol00azu8veop1lvwpa","_id":"cjznq3jon00b3u8veylh9crvh"},{"post_id":"cjznq3jiq002uu8veem2tl89x","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jop00b6u8ved5xc1r1d"},{"post_id":"cjznq3jiq002uu8veem2tl89x","tag_id":"cjznq3jol00azu8veop1lvwpa","_id":"cjznq3jop00b7u8vecygw61ta"},{"post_id":"cjznq3jiv002yu8ve8p5xoywj","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jor00bau8vex5pmd2jh"},{"post_id":"cjznq3jiv002yu8ve8p5xoywj","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jor00bbu8veb4kgn02g"},{"post_id":"cjznq3jiv002yu8ve8p5xoywj","tag_id":"cjznq3jkx0055u8vexdfqws0m","_id":"cjznq3jow00bdu8veadyjqnip"},{"post_id":"cjznq3jiz0030u8vea8ska3fe","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jow00beu8ve1x7wgq4k"},{"post_id":"cjznq3jj20034u8vet5cnni5b","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3joy00bgu8veszpljgve"},{"post_id":"cjznq3jj20034u8vet5cnni5b","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3joy00bhu8veqh09tgiu"},{"post_id":"cjznq3jj40035u8ve0zxsiquy","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3joz00bju8ve0wmihbz6"},{"post_id":"cjznq3jj40035u8ve0zxsiquy","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jp000bku8veeadrishx"},{"post_id":"cjznq3jj80039u8venb0tkqb3","tag_id":"cjznq3jo700afu8verujl716l","_id":"cjznq3jp300bpu8ve5ya98rjx"},{"post_id":"cjznq3jj80039u8venb0tkqb3","tag_id":"cjznq3jkc0046u8ve430rbzhd","_id":"cjznq3jp400bqu8ve6cctt4bn"},{"post_id":"cjznq3jj80039u8venb0tkqb3","tag_id":"cjznq3jo800aiu8vee0o36p0t","_id":"cjznq3jp500bsu8ve9wmuy50m"},{"post_id":"cjznq3jj80039u8venb0tkqb3","tag_id":"cjznq3jp100bnu8ve5gszcjq8","_id":"cjznq3jp500btu8ve9uohd8gc"},{"post_id":"cjznq3jjd003cu8veip0hi9ru","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jp600bvu8vexax3ktyj"},{"post_id":"cjznq3jjd003cu8veip0hi9ru","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jp700bwu8ver7dqy0ob"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","tag_id":"cjznq3jo700afu8verujl716l","_id":"cjznq3jpa00c1u8ve1co60ynw"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","tag_id":"cjznq3jkc0046u8ve430rbzhd","_id":"cjznq3jpa00c2u8vemnwg8c3d"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","tag_id":"cjznq3jp700bxu8vebw6fpta7","_id":"cjznq3jpc00c4u8veyjgvdtjj"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","tag_id":"cjznq3jp800byu8ve1k394kj7","_id":"cjznq3jpe00c5u8vef4142193"},{"post_id":"cjznq3jjj003fu8veoz5ngagr","tag_id":"cjznq3jp800bzu8veddb6qyle","_id":"cjznq3jpf00c7u8ve4inn4igf"},{"post_id":"cjznq3jjn003iu8vefd5hx7po","tag_id":"cjznq3jo700afu8verujl716l","_id":"cjznq3jpj00cau8vei7212c1d"},{"post_id":"cjznq3jjn003iu8vefd5hx7po","tag_id":"cjznq3jkc0046u8ve430rbzhd","_id":"cjznq3jpj00cbu8vef9eycf2h"},{"post_id":"cjznq3jjn003iu8vefd5hx7po","tag_id":"cjznq3jpf00c6u8veo0l18hz9","_id":"cjznq3jpk00cdu8vegfr6fqfs"},{"post_id":"cjznq3jjn003iu8vefd5hx7po","tag_id":"cjznq3jnl009au8ve15llnyxq","_id":"cjznq3jpk00ceu8ve8fw6zd98"},{"post_id":"cjznq3jjp003ku8vedmuwjv32","tag_id":"cjznq3jpg00c9u8vetdtl07rw","_id":"cjznq3jpm00chu8veuqn5ssdz"},{"post_id":"cjznq3jjp003ku8vedmuwjv32","tag_id":"cjznq3joc00aou8vec62h0c2e","_id":"cjznq3jpn00ciu8veccy8r6ma"},{"post_id":"cjznq3jjp003ku8vedmuwjv32","tag_id":"cjznq3jpl00cfu8vex7ds9yht","_id":"cjznq3jpo00cku8vev1d6x1se"},{"post_id":"cjznq3jjp003ku8vedmuwjv32","tag_id":"cjznq3jft0008u8ve5ckdoyfx","_id":"cjznq3jpo00clu8veax554l0f"},{"post_id":"cjznq3jjv003nu8ve99pw7fxd","tag_id":"cjznq3jnb008ru8vel07gq2wj","_id":"cjznq3jpp00cmu8ve9s34sr9r"},{"post_id":"cjznq3jjz003qu8vec70ifhwh","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jpq00cnu8veca6lhrnu"},{"post_id":"cjznq3jjz003qu8vec70ifhwh","tag_id":"cjznq3jhr001vu8veqz1tzr3u","_id":"cjznq3jpq00cou8veo82apry5"},{"post_id":"cjznq3jjz003qu8vec70ifhwh","tag_id":"cjznq3jpn00cju8vesf5sdrer","_id":"cjznq3jpq00cpu8veq5qprjv0"},{"post_id":"cjznq3jq300cqu8vewh8qxebn","tag_id":"cjznq3jfn0003u8vegnc4p79h","_id":"cjznq3jqf00cwu8ve36fygt5p"},{"post_id":"cjznq3jq300cqu8vewh8qxebn","tag_id":"cjznq3jqb00csu8veobw1pxk4","_id":"cjznq3jqf00cxu8veb2zmv02k"},{"post_id":"cjznq3jq300cqu8vewh8qxebn","tag_id":"cjznq3jik002mu8vedaq9t7nz","_id":"cjznq3jqg00czu8vehtz5t8jq"},{"post_id":"cjznq3jq500cru8ve4evj03ss","tag_id":"cjznq3jmx0080u8vecuyokcr7","_id":"cjznq3jqh00d0u8ven096om1g"},{"post_id":"cjznq3jq500cru8ve4evj03ss","tag_id":"cjznq3jgy0015u8vefikeds8p","_id":"cjznq3jqi00d1u8vevkqgm0s5"},{"post_id":"cjznq3jq500cru8ve4evj03ss","tag_id":"cjznq3jqe00cvu8ve79c6b6z5","_id":"cjznq3jqi00d2u8vefzcxwn69"},{"post_id":"cjznq3jq500cru8ve4evj03ss","tag_id":"cjznq3jqg00cyu8vet8811x2r","_id":"cjznq3jqj00d3u8ve2ttqkwqx"},{"post_id":"ck1yfrblt0000h0vebqkzc4rf","tag_id":"ck1yfrbma0002h0vevepycfj2","_id":"ck1yfrbmc0003h0verni0v887"},{"post_id":"ck2lmsh7p00007svea32tlm94","tag_id":"cjznq3jnb008ru8vel07gq2wj","_id":"ck2lmsh7v00017sveza17c75q"}],"Tag":[{"name":"树莓派","_id":"cjznq3jfn0003u8vegnc4p79h"},{"name":"闲谈","_id":"cjznq3jft0008u8ve5ckdoyfx"},{"name":"音乐","_id":"cjznq3jg0000eu8vehkzrv8sv"},{"name":"乐器","_id":"cjznq3jg6000iu8ve4p39jdu5"},{"name":"笛子","_id":"cjznq3jgc000mu8vegp7xhcqt"},{"name":"rabbitmq","_id":"cjznq3jgi000ru8vepnaoo5u4"},{"name":"mqtt","_id":"cjznq3jgs000yu8ve968iyj2e"},{"name":"运维","_id":"cjznq3jgy0015u8vefikeds8p"},{"name":"StatSVN","_id":"cjznq3jh6001cu8veznpay2gn"},{"name":"SVN","_id":"cjznq3jhd001ju8veubo44ozq"},{"name":"技术","_id":"cjznq3jhm001pu8ve1ovpob8y"},{"name":"python","_id":"cjznq3jhr001vu8veqz1tzr3u"},{"name":"socket","_id":"cjznq3jhy0022u8ve0s2osl55"},{"name":"json","_id":"cjznq3ji7002au8veu5zwwlm7"},{"name":"ngrok","_id":"cjznq3jic002eu8vepzlzqlu5"},{"name":"ssh","_id":"cjznq3jik002mu8vedaq9t7nz"},{"name":"sht31","_id":"cjznq3jiq002tu8ve9db0g0i6"},{"name":"i2c","_id":"cjznq3jj00031u8vesznvn5wr"},{"name":"内网穿透","_id":"cjznq3jjf003eu8velw6rhkpz"},{"name":"摄像头","_id":"cjznq3jjo003ju8vexquheu7k"},{"name":"crontab","_id":"cjznq3jjy003pu8vex01bikgr"},{"name":"php","_id":"cjznq3jk90042u8veqgqic4fn"},{"name":"wordpress","_id":"cjznq3jkc0046u8ve430rbzhd"},{"name":"php-fpm","_id":"cjznq3jkd0048u8veoc3otwlw"},{"name":"博客","_id":"cjznq3jkf004au8ve15csuiub"},{"name":"dht11","_id":"cjznq3jkh004fu8vejv4fky67"},{"name":"gpio","_id":"cjznq3jkm004ku8veh0e1qavh"},{"name":"传感器","_id":"cjznq3jkr004tu8vedlh1tynd"},{"name":"sql","_id":"cjznq3jks004vu8ve6sf4gi8d"},{"name":"数据","_id":"cjznq3jkv0050u8ve5tz6yy7j"},{"name":"数据库","_id":"cjznq3jkx0055u8vexdfqws0m"},{"name":"备份","_id":"cjznq3jkz0059u8ves0qbgq4o"},{"name":"apt","_id":"cjznq3jla005ju8ve7wwf47sj"},{"name":"apt-get","_id":"cjznq3jld005pu8ve15wwmqc3"},{"name":"linux","_id":"cjznq3jlf005uu8vegy8sdcu2"},{"name":"java","_id":"cjznq3jlp0063u8vee5i5qtmf"},{"name":"maven","_id":"cjznq3jls0068u8veoodu83cx"},{"name":"svn","_id":"cjznq3jly006cu8vepya8xqf9"},{"name":"jenkins","_id":"cjznq3jm2006hu8vevl0hctfk"},{"name":"nexus","_id":"cjznq3jm3006ku8ve8m4dzbcm"},{"name":"redhat","_id":"cjznq3jm6006nu8vezllt6sa9"},{"name":"gitlab","_id":"cjznq3jmd006xu8vecpy55dju"},{"name":"感悟","_id":"cjznq3jmg0072u8vet98ke2au"},{"name":"db2","_id":"cjznq3jmj0078u8venrnilabw"},{"name":"忘记密码","_id":"cjznq3jmu007uu8vepvi5mofb"},{"name":"编程","_id":"cjznq3jmx0080u8vecuyokcr7"},{"name":"base64","_id":"cjznq3jn3008du8vevf18qcp1"},{"name":"图片处理","_id":"cjznq3jn4008fu8ver7wtydhq"},{"name":"加密","_id":"cjznq3jn5008gu8ve725zpkj2"},{"name":"解密","_id":"cjznq3jn5008hu8veiaxfxqz2"},{"name":"破解","_id":"cjznq3jn7008lu8ve4y10mu0p"},{"name":"docker","_id":"cjznq3jnb008ru8vel07gq2wj"},{"name":"shadowsocks","_id":"cjznq3jnf008xu8ve906dfm52"},{"name":"nginx","_id":"cjznq3jnl009au8ve15llnyxq"},{"name":"错误","_id":"cjznq3jnn009du8vee9aaw6kd"},{"name":"错误解决","_id":"cjznq3jnq009ju8ve31d6fztl"},{"name":"github","_id":"cjznq3jns009mu8veqvmbcjtb"},{"name":"webhook","_id":"cjznq3jnt009pu8veowiayd1g"},{"name":"编程，Linux","_id":"cjznq3jo600acu8veh63lyjs0"},{"name":"建站","_id":"cjznq3jo700afu8verujl716l"},{"name":"hexo","_id":"cjznq3jo800aiu8vee0o36p0t"},{"name":"git","_id":"cjznq3joc00aou8vec62h0c2e"},{"name":"大数据","_id":"cjznq3jol00azu8veop1lvwpa"},{"name":"文章迁移","_id":"cjznq3jp100bnu8ve5gszcjq8"},{"name":"域名","_id":"cjznq3jp700bxu8vebw6fpta7"},{"name":"ssl","_id":"cjznq3jp800byu8ve1k394kj7"},{"name":"https","_id":"cjznq3jp800bzu8veddb6qyle"},{"name":"apache","_id":"cjznq3jpf00c6u8veo0l18hz9"},{"name":"csv","_id":"cjznq3jpg00c9u8vetdtl07rw"},{"name":"故事","_id":"cjznq3jpl00cfu8vex7ds9yht"},{"name":"wlan","_id":"cjznq3jpn00cju8vesf5sdrer"},{"name":"Win32DiskImager","_id":"cjznq3jqb00csu8veobw1pxk4"},{"name":"微信","_id":"cjznq3jqe00cvu8ve79c6b6z5"},{"name":"小程序","_id":"cjznq3jqg00cyu8vet8811x2r"},{"name":"ArcMap","_id":"ck1yfrbma0002h0vevepycfj2"}]}}